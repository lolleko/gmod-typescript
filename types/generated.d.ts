/// <reference types="typescript-to-lua/language-extensions" />

/// <reference path="./extras.d.ts" />

/** @noSelfInFile **/

/**
 * List of all possible functions to manipulate angles.
 * 
 * Created by [Global.Angle](https://wiki.facepunch.com/gmod/Global.Angle).
 * 
 * | Type                | Name                                 | Description                      |
 * | ------------------- | ------------------------------------ | -------------------------------- |
 * | [number](https://wiki.facepunch.com/gmod/number) | `p` or `pitch` or `x` or `1` | The pitch component of the angle. |
 * | [number](https://wiki.facepunch.com/gmod/number) | `y` or `yaw` or `y` or `2` | The yaw component of the angle. |
 * | [number](https://wiki.facepunch.com/gmod/number) | `r` or `roll`  or `z` or `3` | The roll  component of the angle. |
 * 
 * Metamethod | Second Operand | Description
 * ---------- | -------------- | -----------
 * `__add` | [Angle](https://wiki.facepunch.com/gmod/Angle) | Returns new [Angle](https://wiki.facepunch.com/gmod/Angle) with the result of addition.
 * `__div` | [number](https://wiki.facepunch.com/gmod/number) | Returns new [Angle](https://wiki.facepunch.com/gmod/Angle) with the result of division.
 * `__eq` | [any](https://wiki.facepunch.com/gmod/any) | Compares 2 operands, if they both are [Angle](https://wiki.facepunch.com/gmod/Angle), compares each individual component. <br/>Doesn't normalize the angles (360 is not equal to 0).
 * `__index` | [number](https://wiki.facepunch.com/gmod/number) or [string](https://wiki.facepunch.com/gmod/string) | Gets the component of the [Angle](https://wiki.facepunch.com/gmod/Angle). Returns a [number](https://wiki.facepunch.com/gmod/number).
 * `__mul` | [number](https://wiki.facepunch.com/gmod/number) | Returns new [Angle](https://wiki.facepunch.com/gmod/Angle) with the result of multiplication.
 * `__newindex` | [number](https://wiki.facepunch.com/gmod/number) or [string](https://wiki.facepunch.com/gmod/string) | Sets the component of the [Angle](https://wiki.facepunch.com/gmod/Angle). Accepts [number](https://wiki.facepunch.com/gmod/number) and [string](https://wiki.facepunch.com/gmod/string).
 * `__sub` | [Angle](https://wiki.facepunch.com/gmod/Angle) | Returns new [Angle](https://wiki.facepunch.com/gmod/Angle) with the result of subtraction.
 * `__tostring` | | Returns `p y r`.
 * `__unm` | | Returns new [Angle](https://wiki.facepunch.com/gmod/Angle) with the result of negation.
 */
interface Angle {
    /**
     * The pitch component of the angle.
     */
    p: number,
    
    /**
     * The yaw component of the angle.
     */
    y: number,
    
    /**
     * The roll component of the angle.
     */
    r: number,
    
    /**
     * The pitch component of the angle.
     */
    pitch: number,
    
    /**
     * The yaw component of the angle.
     */
    yaw: number,
    
    /**
     * The roll component of the angle.
     */
    roll: number,
    
    /**
     * The pitch component of the angle.
     */
    x: number,
    
    /**
     * The yaw component of the angle.
     */
    y: number,
    
    /**
     * The roll component of the angle.
     */
    z: number,
    
    /**
     * The pitch component of the angle.
     */
    1: number,
    
    /**
     * The yaw component of the angle.
     */
    2: number,
    
    /**
     * The roll component of the angle.
     */
    3: number,
    
    /**
     * Returns new Angle with the result of addition.
     */
    addOp: LuaAdditionMethod<Angle, Angle>,
    
    /**
     * Returns new Angle with the result of subtraction.
     */
    subOp: LuaSubtractionMethod<Angle, Angle>,
    
    /**
     * Returns new Angle with the result of multiplication.
     */
    mulOp: LuaMultiplicationMethod<number, Angle>,
    
    /**
     * Returns new Angle with the result of division.
     */
    divOp: LuaDivisionMethod<number, Angle>,
    
    /**
     * Returns new Angle with the result of negation.
     */
    unmOp: LuaNegationMethod<Angle>,

    /**
     * [Shared and Menu]
     * 
     * Adds the values of the argument angle to the orignal angle. 
     * 
     * This functions the same as angle1 + angle2 without creating a new angle object, skipping object construction and garbage collection.
     * @param angle - The angle to add.
     */
    Add(angle: Angle): void;
    
    /**
     * [Shared and Menu]
     * 
     * Divides all values of the original angle by a scalar. This functions the same as angle1 / num without creating a new angle object, skipping object construction and garbage collection.
     * @param scalar - The number to divide by.
     */
    Div(scalar: number): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a normal vector facing in the direction that the angle points.
     * 
     */
    Forward(): Vector;
    
    /**
     * [Shared and Menu]
     * 
     * Returns if the angle is equal to another angle with the given tolerance.
     * @param compare - The angle to compare to.
     * @param tolerance - The tolerance range.
     */
    IsEqualTol(compare: Angle, tolerance: number): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Returns whether the pitch, yaw and roll are 0 or not.
     * 
     */
    IsZero(): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Multiplies a scalar to all the values of the orignal angle. This functions the same as num * angle without creating a new angle object, skipping object construction and garbage collection.
     * @param scalar - The number to multiply.
     */
    Mul(scalar: number): void;
    
    /**
     * [Shared and Menu]
     * 
     * Normalizes the angles by applying a module with 360 to pitch, yaw and roll.
     * 
     */
    Normalize(): void;
    
    /**
     * [Shared and Menu]
     * 
     * Randomizes each element of this Angle object.
     * @param [min = -360] - The minimum value for each component.
     * @param [max = 360] - The maximum value for each component.
     */
    Random(min = -360, max = 360): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a normal vector facing in the direction that points right relative to the angle's direction.
     * 
     */
    Right(): Vector;
    
    /**
     * [Shared and Menu]
     * 
     * Rotates the angle around the specified axis by the specified degrees.
     * @param axis - The axis to rotate around as a normalized unit vector. When argument is not a unit vector, you will experience numerical offset errors in the rotated angle.
     * @param rotation - The degrees to rotate around the specified axis.
     */
    RotateAroundAxis(axis: Vector, rotation: number): void;
    
    /**
     * [Shared and Menu]
     * 
     * Copies pitch, yaw and roll from the second angle to the first.
     * @param originalAngle - The angle to copy the values from.
     */
    Set(originalAngle: Angle): void;
    
    /**
     * [Shared and Menu]
     * 
     * Sets the p, y, and r of the angle.
     * @param p - The pitch component of the Angle
     * @param y - The yaw component of the Angle
     * @param r - The roll component of the Angle
     */
    SetUnpacked(p: number, y: number, r: number): void;
    
    /**
     * [Shared]
     * 
     * Snaps the angle to nearest interval of degrees.
     * 
     * **Note:**
     * >This will modify the original angle too!
     * 
     * @param axis - The component/axis to snap. Can be either `p`/`pitch`, `y`/`yaw` or `r`/`roll`.
     * @param target - The target angle snap interval
     */
    SnapTo(axis: string, target: number): Angle;
    
    /**
     * [Shared and Menu]
     * 
     * Subtracts the values of the argument angle to the orignal angle. This functions the same as angle1 - angle2 without creating a new angle object, skipping object construction and garbage collection.
     * @param angle - The angle to subtract.
     */
    Sub(angle: Angle): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the angle as a table with three elements.
     * 
     */
    ToTable(): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the pitch, yaw, and roll components of the angle.
     * 
     */
    Unpack(): LuaMultiReturn<[number, number, number]>;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a normal vector facing in the direction that points up relative to the angle's direction.
     * 
     */
    Up(): Vector;
    
    /**
     * [Shared and Menu]
     * 
     * Sets pitch, yaw and roll to 0.
     * This function is faster than doing it manually.
     * 
     */
    Zero(): void;

}

/**
 * This is the object passed to [usermessage.Hook](https://wiki.facepunch.com/gmod/usermessage.Hook) when a message is received. It contains each value stored in the message in sequential order. You should read values from it in the order you wrote them.
 * 
 * @deprecated You should be using [net](https://wiki.facepunch.com/gmod/net) instead
 * 
 */
interface bf_read {
    

    /**
     * [Client]
     * 
     * Reads an returns an angle object from the bitstream.
     * 
     */
    ReadAngle(): Angle;
    
    /**
     * [Client]
     * 
     * Reads 1 bit an returns a bool representing the bit.
     * 
     */
    ReadBool(): boolean;
    
    /**
     * [Client]
     * 
     * Reads a signed char and returns a number from -127 to 127 representing the ascii value of that char.
     * 
     */
    ReadChar(): number;
    
    /**
     * [Client]
     * 
     * Reads a short representing an entity index and returns the matching entity handle.
     * 
     */
    ReadEntity(): Entity;
    
    /**
     * [Client]
     * 
     * Reads a 4 byte float from the bitstream and returns it.
     * 
     */
    ReadFloat(): number;
    
    /**
     * [Client]
     * 
     * Reads a 4 byte long from the bitstream and returns it.
     * 
     */
    ReadLong(): number;
    
    /**
     * [Client]
     * 
     * Reads a 2 byte short from the bitstream and returns it.
     * 
     */
    ReadShort(): number;
    
    /**
     * [Client]
     * 
     * Reads a null terminated string from the bitstream.
     * 
     */
    ReadString(): string;
    
    /**
     * [Client]
     * 
     * Reads a special encoded vector from the bitstream and returns it, this function is not suitable to send normals.
     * 
     */
    ReadVector(): Vector;
    
    /**
     * [Client]
     * 
     * Reads a special encoded vector normal from the bitstream and returns it, this function is not suitable to send vectors that represent a position.
     * 
     */
    ReadVectorNormal(): Vector;
    
    /**
     * [Client]
     * 
     * Rewinds the bitstream so it can be read again.
     * 
     */
    Reset(): void;

}

/**
 * List of all possible functions available for effect data. This is the object returned by the <page text="EffectData">Global.EffectData</page> function and is required for [util.Effect](https://wiki.facepunch.com/gmod/util.Effect) function.
 */
interface CEffectData {
    

    /**
     * [Shared]
     * 
     * Returns the angles of the effect.
     * 
     */
    GetAngles(): Angle;
    
    /**
     * [Shared]
     * 
     * Returns the attachment ID for the effect.
     * 
     */
    GetAttachment(): number;
    
    /**
     * [Shared]
     * 
     * Returns byte which represents the color of the effect.
     * 
     */
    GetColor(): number;
    
    /**
     * [Shared]
     * 
     * Returns the damage type of the effect
     * 
     */
    GetDamageType(): DMG;
    
    /**
     * [Server]
     * 
     * Returns the entity index of the entity set for the effect.
     * 
     */
    GetEntIndex(): number;
    
    /**
     * [Shared]
     * 
     * Returns the entity assigned to the effect.
     * 
     */
    GetEntity(): Entity;
    
    /**
     * [Shared]
     * 
     * Returns the flags of the effect.
     * 
     */
    GetFlags(): number;
    
    /**
     * [Shared]
     * 
     * Returns the hit box ID of the effect.
     * 
     */
    GetHitBox(): number;
    
    /**
     * [Shared]
     * 
     * Returns the magnitude of the effect.
     * 
     */
    GetMagnitude(): number;
    
    /**
     * [Shared]
     * 
     * Returns the material ID of the effect.
     * 
     */
    GetMaterialIndex(): number;
    
    /**
     * [Shared]
     * 
     * Returns the normalized direction vector of the effect.
     * 
     */
    GetNormal(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the origin position of the effect.
     * 
     */
    GetOrigin(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the radius of the effect.
     * 
     */
    GetRadius(): number;
    
    /**
     * [Shared]
     * 
     * Returns the scale of the effect.
     * 
     */
    GetScale(): number;
    
    /**
     * [Shared]
     * 
     * Returns the start position of the effect.
     * 
     */
    GetStart(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the surface property index of the effect.
     * 
     */
    GetSurfaceProp(): number;
    
    /**
     * [Shared]
     * 
     * Sets the angles of the effect.
     * @param ang - The new angles to be set.
     */
    SetAngles(ang: Angle): void;
    
    /**
     * [Shared]
     * 
     * Sets the attachment id of the effect to be created with this effect data.
     * 
     * **Note:**
     * >This is internally stored as an integer, but only the first 5 bits will be networked, effectively limiting this function to 0-31 range.
     * 
     * @param attachment - New attachment ID of the effect.
     */
    SetAttachment(attachment: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the "color" of the effect.
     * 
     * All this does is provide an addition 8 bits of data for the effect to use. What this will actually do will vary from effect to effect, depending on how a specific effect uses this given data, if at all.
     * 
     * **Note:**
     * >Internally stored as an integer, but only first 8 bits are networked, effectively limiting this function to 0-255 range.
     * 
     * @param color - Color represented by a byte.
     */
    SetColor(color: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the damage type of the effect to be created with this effect data.
     * @param damageType - Damage type, see [Enums/DMG](https://wiki.facepunch.com/gmod/Enums/DMG).
     */
    SetDamageType(damageType: DMG): void;
    
    /**
     * [Server]
     * 
     * Sets the entity of the effect via its index.
     * @param entIndex - The entity index to be set.
     */
    SetEntIndex(entIndex: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the entity of the effect to be created with this effect data.
     * @param entity - Entity of the effect, mostly used for parenting.
     */
    SetEntity(entity: Entity): void;
    
    /**
     * [Shared]
     * 
     * Sets the flags of the effect. Can be used to change the appearance of a MuzzleFlash effect.
     * 
     * ## Example values for MuzzleFlash effect
     * Flags |  Description |
     * ------|--------------|
     * 1 | Regular muzzleflash|
     * 5 | Combine muzzleflash|
     * 7 | Regular muzzle but bigger|
     * 
     * **Note:**
     * >Internally stored as an integer, but only first 8 bits are networked, effectively limiting this function to `0-255` range.
     * 
     * @param flags - The flags of the effect. Each effect has their own flags.
     */
    SetFlags(flags: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the hit box index of the effect.
     * 
     * **Note:**
     * >Internally stored as an integer, but only first 11 bits are networked, effectively limiting this function to 0-2047 range.
     * 
     * @param hitBoxIndex - The hit box index of the effect.
     */
    SetHitBox(hitBoxIndex: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the magnitude of the effect.
     * 
     * **Note:**
     * >Internally stored as a float with 12 bit precision for networking purposes, limited to range of 0-1023.
     * 
     * @param magnitude - The magnitude of the effect.
     */
    SetMagnitude(magnitude: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the material index of the effect.
     * 
     * **Note:**
     * >Internally stored as an integer, but only first 12 bits are networked, effectively limiting this function to 0-4095 range.
     * 
     * @param materialIndex - The material index of the effect.
     */
    SetMaterialIndex(materialIndex: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the normalized (length=1) direction vector of the effect to be created with this effect data. This **must** be a normalized vector for networking purposes.
     * @param normal - The normalized direction vector of the effect.
     */
    SetNormal(normal: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the origin of the effect to be created with this effect data.
     * 
     * **Note:**
     * >Limited to world bounds (+-16386 on every axis) and has horrible networking precision. (17 bit float per component)
     * 
     * @param origin - Origin of the effect.
     */
    SetOrigin(origin: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the radius of the effect to be created with this effect data.
     * 
     * **Note:**
     * >Internally stored as a float, but networked as a 10bit float, and is clamped to 0-1023 range.
     * 
     * @param radius - Radius of the effect.
     */
    SetRadius(radius: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the scale of the effect to be created with this effect data.
     * @param scale - Scale of the effect.
     */
    SetScale(scale: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the start of the effect to be created with this effect data.
     * 
     * **Note:**
     * >Limited to world bounds (+-16386 on every axis) and has horrible networking precision. (17 bit float per component)
     * 
     * @param start - Start of the effect.
     */
    SetStart(start: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the surface property index of the effect.
     * 
     * **Note:**
     * >Internally stored as an integer, but only first 8 bits are networked, effectively limiting this function to `-1`-`254` range.(yes, that's not a mistake)
     * 
     * @param surfaceProperties - The surface property index of the effect.
     */
    SetSurfaceProp(surfaceProperties: number): void;

}

/**
 * List of all possible functions available for LuaEmitters. This is the object returned by the [Global.ParticleEmitter](https://wiki.facepunch.com/gmod/Global.ParticleEmitter) function.
 */
interface CLuaEmitter {
    

    /**
     * [Client]
     * 
     * Creates a new [CLuaParticle](https://wiki.facepunch.com/gmod/CLuaParticle) with the given material and position.
     * @param material - The particles material. Can also be an [IMaterial](https://wiki.facepunch.com/gmod/IMaterial).
     * @param position - The position to spawn the particle on.
     */
    Add(material: string, position: Vector): CLuaParticle;
    
    /**
     * [Client]
     * 
     * Manually renders all particles the emitter has created.
     * 
     */
    Draw(): void;
    
    /**
     * [Client]
     * 
     * Removes the emitter, making it no longer usable from Lua. If particles remain, the emitter will be removed when all particles die.
     * 
     */
    Finish(): void;
    
    /**
     * [Client]
     * 
     * Returns the amount of active particles of this emitter.
     * 
     */
    GetNumActiveParticles(): number;
    
    /**
     * [Client]
     * 
     * Returns the position of this emitter. This is set when creating the emitter with [Global.ParticleEmitter](https://wiki.facepunch.com/gmod/Global.ParticleEmitter).
     * 
     */
    GetPos(): Vector;
    
    /**
     * [Client]
     * 
     * Returns whether this emitter is 3D or not. This is set when creating the emitter with [Global.ParticleEmitter](https://wiki.facepunch.com/gmod/Global.ParticleEmitter).
     * 
     */
    Is3D(): boolean;
    
    /**
     * [Client]
     * 
     * Returns whether this [CLuaEmitter](https://wiki.facepunch.com/gmod/CLuaEmitter) is valid or not.
     * 
     */
    IsValid(): boolean;
    
    /**
     * [Client]
     * 
     * Sets the bounding box for this emitter.
     * 
     * Usually the bounding box is automatically determined by the particles, but this function overrides it.
     * @param mins - The minimum position of the box
     * @param maxs - The maximum position of the box
     */
    SetBBox(mins: Vector, maxs: Vector): void;
    
    /**
     * [Client]
     * 
     * This function sets the the distance between the render camera and the emitter at which the particles should start fading and at which distance fade ends ( alpha becomes 0 ).
     * @param distanceMin - Min distance where the alpha becomes 0.
     * @param distanceMax - Max distance where the alpha starts fading.
     */
    SetNearClip(distanceMin: number, distanceMax: number): void;
    
    /**
     * [Client]
     * 
     * Prevents all particles of the emitter from automatically drawing.
     * @param noDraw - Whether we should draw the particles ( false ) or not ( true )
     */
    SetNoDraw(noDraw: boolean): void;
    
    /**
     * [Client]
     * 
     * The function name has not much in common with its actual function, it applies a radius to every particles that affects the building of the bounding box, as it, usually is constructed by the particle that has the lowest x, y and z and the highest x, y and z, this function just adds/subtracts the radius and inflates the bounding box.
     * @param radius - Particle radius.
     */
    SetParticleCullRadius(radius: number): void;
    
    /**
     * [Client]
     * 
     * Sets the position of the particle emitter.
     * @param position - New position.
     */
    SetPos(position: Vector): void;

}

/**
 * This class is essentially what controls a [NextBot](https://wiki.facepunch.com/gmod/NextBot) NPC. You can access it in a [NextBot](https://wiki.facepunch.com/gmod/NextBot) NPC by using **self.loco** variable.
 */
interface CLuaLocomotion {
    

    /**
     * [Server]
     * 
     * Sets the location we want to get to.
     * 
     * Each call of <page text="Approach">CLuaLocomotion:Approach</page> moves the <page text="NextBot">NextBot</page> 1 unit towards the specified goal. The size of this unit is determined by <page text="SetDesiredSpeed">CLuaLocomotion:SetDesiredSpeed</page>; the default is `0` (each call of <page text="Approach">CLuaLocomotion:Approach</page> moves the <page text="NextBot">NextBot</page> 0).
     * 
     * To achieve smooth movement with <page text="Approach">CLuaLocomotion:Approach</page>, it should be called in a hook like <page text="Think">ENTITY:Think</page>, as shown in the example.
     * @param goal - The vector we want to get to.
     * @param goalweight - If unsure then set this to `1`.
     */
    Approach(goal: Vector, goalweight: number): void;
    
    /**
     * [Server]
     * 
     * Removes the stuck status from the bot
     * 
     */
    ClearStuck(): void;
    
    /**
     * [Server]
     * 
     * Sets the direction we want to face
     * @param goal - The vector we want to face
     */
    FaceTowards(goal: Vector): void;
    
    /**
     * [Server]
     * 
     * Returns the acceleration speed
     * 
     */
    GetAcceleration(): number;
    
    /**
     * [Server]
     * 
     * Returns whether the Nextbot is allowed to avoid obstacles or not.
     * 
     */
    GetAvoidAllowed(): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether the Nextbot is allowed to climb or not.
     * 
     */
    GetClimbAllowed(): boolean;
    
    /**
     * [Server]
     * 
     * Returns the current acceleration as a vector
     * 
     */
    GetCurrentAcceleration(): Vector;
    
    /**
     * [Server]
     * 
     * Gets the height the bot is scared to fall from
     * 
     */
    GetDeathDropHeight(): number;
    
    /**
     * [Server]
     * 
     * Gets the deceleration speed
     * 
     */
    GetDeceleration(): number;
    
    /**
     * [Server]
     * 
     * Returns the desired movement speed set by [CLuaLocomotion:SetDesiredSpeed](https://wiki.facepunch.com/gmod/CLuaLocomotion:SetDesiredSpeed)
     * 
     */
    GetDesiredSpeed(): number;
    
    /**
     * [Server]
     * 
     * Returns the locomotion's gravity.
     * 
     */
    GetGravity(): number;
    
    /**
     * [Server]
     * 
     * Return unit vector in XY plane describing our direction of motion - even if we are currently not moving
     * 
     */
    GetGroundMotionVector(): Vector;
    
    /**
     * [Server]
     * 
     * Returns the current ground normal.
     * 
     */
    GetGroundNormal(): Vector;
    
    /**
     * [Server]
     * 
     * Returns whether the Nextbot is allowed to jump gaps or not.
     * 
     */
    GetJumpGapsAllowed(): boolean;
    
    /**
     * [Server]
     * 
     * Gets the height of the bot's jump
     * 
     */
    GetJumpHeight(): number;
    
    /**
     * [Server]
     * 
     * Returns maximum jump height of this [CLuaLocomotion](https://wiki.facepunch.com/gmod/CLuaLocomotion).
     * 
     */
    GetMaxJumpHeight(): number;
    
    /**
     * [Server]
     * 
     * Returns the max rate at which the NextBot can visually rotate.
     * 
     */
    GetMaxYawRate(): number;
    
    /**
     * [Server]
     * 
     * Returns the [NextBot](https://wiki.facepunch.com/gmod/NextBot) this locomotion is associated with.
     * 
     */
    GetNextBot(): NextBot;
    
    /**
     * [Server]
     * 
     * Gets the max height the bot can step up
     * 
     */
    GetStepHeight(): number;
    
    /**
     * [Server]
     * 
     * Returns the current movement velocity as a vector
     * 
     */
    GetVelocity(): Vector;
    
    /**
     * [Server]
     * 
     * Returns whether this [CLuaLocomotion](https://wiki.facepunch.com/gmod/CLuaLocomotion) can reach and/or traverse/move in given [CNavArea](https://wiki.facepunch.com/gmod/CNavArea).
     * @param area - The area to test
     */
    IsAreaTraversable(area: CNavArea): boolean;
    
    /**
     * [Server]
     * 
     * Returns true if we're trying to move.
     * 
     */
    IsAttemptingToMove(): boolean;
    
    /**
     * [Server]
     * 
     * Returns true of the locomotion engine is jumping or climbing
     * 
     */
    IsClimbingOrJumping(): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether the nextbot this locomotion is attached to is on ground or not.
     * 
     */
    IsOnGround(): boolean;
    
    /**
     * [Server]
     * 
     * Returns true if we're stuck
     * 
     */
    IsStuck(): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether or not the target in question is on a ladder or not.
     * 
     */
    IsUsingLadder(): boolean;
    
    /**
     * [Server]
     * 
     * Makes the bot jump. It must be on ground ([Entity:IsOnGround](https://wiki.facepunch.com/gmod/Entity:IsOnGround)) and its model must have `ACT_JUMP` activity.
     * @param [act = ACT_JUMP] - The activity to use as the jumping animation.
     */
    Jump(act?: number): void;
    
    /**
     * [Server]
     * 
     * Makes the bot jump across a gap. The bot must be on ground ([Entity:IsOnGround](https://wiki.facepunch.com/gmod/Entity:IsOnGround)) and its model must have `ACT_JUMP` activity.
     * @param landingGoal - 
     * @param landingForward - 
     */
    JumpAcrossGap(landingGoal: Vector, landingForward: Vector): void;
    
    /**
     * [Server]
     * 
     * Sets the acceleration speed
     * @param speed - Speed acceleration (default is 400)
     */
    SetAcceleration(speed: number): void;
    
    /**
     * [Server]
     * 
     * Sets whether the Nextbot is allowed try to to avoid obstacles or not. This is used during path generation. Works similarly to `nb_allow_avoiding` convar. By default bots are allowed to try to avoid obstacles.
     * @param allowed - Whether this bot should be allowed to try to avoid obstacles.
     */
    SetAvoidAllowed(allowed: boolean): void;
    
    /**
     * [Server]
     * 
     * Sets whether the Nextbot is allowed to climb or not. This is used during path generation. Works similarly to `nb_allow_climbing` convar. By default bots are allowed to climb.
     * @param allowed - Whether this bot should be allowed to climb.
     */
    SetClimbAllowed(allowed: boolean): void;
    
    /**
     * [Server]
     * 
     * Sets the height the bot is scared to fall from.
     * @param height - Height (default is 200)
     */
    SetDeathDropHeight(height: number): void;
    
    /**
     * [Server]
     * 
     * Sets the deceleration speed.
     * @param deceleration - New deceleration speed (default is 400)
     */
    SetDeceleration(deceleration: number): void;
    
    /**
     * [Server]
     * 
     * Sets movement speed.
     * @param speed - The new desired speed
     */
    SetDesiredSpeed(speed: number): void;
    
    /**
     * [Server]
     * 
     * Sets the locomotion's gravity.
     * 
     * **Note:**
     * >With values 0 or below, or even lower positive values, the nextbot will start to drift sideways, use [CLuaLocomotion:SetVelocity](https://wiki.facepunch.com/gmod/CLuaLocomotion:SetVelocity) to counteract this.
     * 
     * @param gravity - New gravity to set. Default is 1000.
     */
    SetGravity(gravity: number): void;
    
    /**
     * [Server]
     * 
     * Sets whether the Nextbot is allowed to jump gaps or not. This is used during path generation. Works similarly to `nb_allow_gap_jumping` convar. By default bots are allowed to jump gaps.
     * @param allowed - Whether this bot should be allowed to jump gaps.
     */
    SetJumpGapsAllowed(allowed: boolean): void;
    
    /**
     * [Server]
     * 
     * Sets the height of the bot's jump
     * @param height - Height (default is 58)
     */
    SetJumpHeight(height: number): void;
    
    /**
     * [Server]
     * 
     * Sets the max rate at which the NextBot can visually rotate. This will not affect moving or pathing.
     * @param yawRate - Desired new maximum yaw rate
     */
    SetMaxYawRate(yawRate: number): void;
    
    /**
     * [Server]
     * 
     * Sets the max height the bot can step up
     * @param height - Height (default is 18)
     */
    SetStepHeight(height: number): void;
    
    /**
     * [Server]
     * 
     * Sets the current movement velocity
     * @param velocity - 
     */
    SetVelocity(velocity: Vector): void;

}

/**
 * List of all possible functions available for Lua particles. This is the object returned by the [CLuaEmitter:Add](https://wiki.facepunch.com/gmod/CLuaEmitter:Add) function.
 */
interface CLuaParticle {
    

    /**
     * [Client]
     * 
     * Returns the air resistance of the particle.
     * 
     */
    GetAirResistance(): number;
    
    /**
     * [Client]
     * 
     * Returns the current orientation of the particle.
     * 
     */
    GetAngles(): Angle;
    
    /**
     * [Client]
     * 
     * Returns the angular velocity of the particle
     * 
     */
    GetAngleVelocity(): Angle;
    
    /**
     * [Client]
     * 
     * Returns the 'bounciness' of the particle.
     * 
     */
    GetBounce(): number;
    
    /**
     * [Client]
     * 
     * Returns the color of the particle.
     * 
     */
    GetColor(): LuaMultiReturn<[number, number, number]>;
    
    /**
     * [Client]
     * 
     * Returns the amount of time in seconds after which the particle will be destroyed.
     * 
     */
    GetDieTime(): number;
    
    /**
     * [Client]
     * 
     * Returns the alpha value that the particle will reach on its death.
     * 
     */
    GetEndAlpha(): number;
    
    /**
     * [Client]
     * 
     * Returns the length that the particle will reach on its death.
     * 
     */
    GetEndLength(): number;
    
    /**
     * [Client]
     * 
     * Returns the size that the particle will reach on its death.
     * 
     */
    GetEndSize(): number;
    
    /**
     * [Client]
     * 
     * Returns the gravity of the particle.
     * 
     */
    GetGravity(): Vector;
    
    /**
     * [Client]
     * 
     * Returns the 'life time' of the particle, how long the particle existed since its creation.
     * 
     * This value will always be between 0 and [CLuaParticle:GetDieTime](https://wiki.facepunch.com/gmod/CLuaParticle:GetDieTime).
     * 
     * It changes automatically as time goes.
     * 
     * It can be manipulated using [CLuaParticle:SetLifeTime](https://wiki.facepunch.com/gmod/CLuaParticle:SetLifeTime).
     * 
     * If the life time of the particle will be more than [CLuaParticle:GetDieTime](https://wiki.facepunch.com/gmod/CLuaParticle:GetDieTime), it will be removed.
     * 
     */
    GetLifeTime(): number;
    
    /**
     * [Client]
     * 
     * Returns the current material of the particle.
     * 
     */
    GetMaterial(): IMaterial;
    
    /**
     * [Client]
     * 
     * Returns the absolute position of the particle.
     * 
     */
    GetPos(): Vector;
    
    /**
     * [Client]
     * 
     * Returns the current rotation of the particle in radians, this should only be used for 2D particles.
     * 
     */
    GetRoll(): number;
    
    /**
     * [Client]
     * 
     * Returns the current rotation speed of the particle in radians, this should only be used for 2D particles.
     * 
     */
    GetRollDelta(): number;
    
    /**
     * [Client]
     * 
     * Returns the alpha value which the particle has when it's created.
     * 
     */
    GetStartAlpha(): number;
    
    /**
     * [Client]
     * 
     * Returns the length which the particle has when it's created.
     * 
     */
    GetStartLength(): number;
    
    /**
     * [Client]
     * 
     * Returns the size which the particle has when it's created.
     * 
     */
    GetStartSize(): number;
    
    /**
     * [Client]
     * 
     * Returns the current velocity of the particle.
     * 
     */
    GetVelocity(): Vector;
    
    /**
     * [Client]
     * 
     * Sets the air resistance of the the particle.
     * @param airResistance - New air resistance.
     */
    SetAirResistance(airResistance: number): void;
    
    /**
     * [Client]
     * 
     * Sets the angles of the particle.
     * @param ang - New angle.
     */
    SetAngles(ang: Angle): void;
    
    /**
     * [Client]
     * 
     * Sets the angular velocity of the the particle.
     * @param angVel - New angular velocity.
     */
    SetAngleVelocity(angVel: Angle): void;
    
    /**
     * [Client]
     * 
     * Sets the 'bounciness' of the the particle.
     * @param bounce - New 'bounciness' of the particle
     * 2 means it will gain 100% of its previous velocity,
     * 1 means it will not lose velocity,
     * 0.5 means it will lose half of its velocity with each bounce.
     */
    SetBounce(bounce: number): void;
    
    /**
     * [Client]
     * 
     * Sets the whether the particle should collide with the world or not.
     * @param shouldCollide - Whether the particle should collide with the world or not
     */
    SetCollide(shouldCollide: boolean): void;
    
    /**
     * [Client]
     * 
     * Sets the function that gets called whenever the particle collides with the world.
     * @param collideFunc - Collide callback, the arguments are:
     * [CLuaParticle](https://wiki.facepunch.com/gmod/CLuaParticle) particle - The particle itself
     * [Vector](https://wiki.facepunch.com/gmod/Vector) hitPos - Position of the collision
     * [Vector](https://wiki.facepunch.com/gmod/Vector) hitNormal - Direction of the collision, perpendicular to the hit surface
     */
    SetCollideCallback(collideFunc: Function): void;
    
    /**
     * [Client]
     * 
     * Sets the color of the particle.
     * @param r - The red component.
     * @param g - The green component.
     * @param b - The blue component.
     */
    SetColor(r: number, g: number, b: number): void;
    
    /**
     * [Client]
     * 
     * Sets the time where the particle will be removed.
     * @param dieTime - The new die time.
     */
    SetDieTime(dieTime: number): void;
    
    /**
     * [Client]
     * 
     * Sets the alpha value of the particle that it will reach when it dies.
     * @param endAlpha - The new alpha value of the particle that it will reach when it dies.
     */
    SetEndAlpha(endAlpha: number): void;
    
    /**
     * [Client]
     * 
     * Sets the length of the particle that it will reach when it dies.
     * @param endLength - The new length of the particle that it will reach when it dies.
     */
    SetEndLength(endLength: number): void;
    
    /**
     * [Client]
     * 
     * Sets the size of the particle that it will reach when it dies.
     * @param endSize - The new size of the particle that it will reach when it dies.
     */
    SetEndSize(endSize: number): void;
    
    /**
     * [Client]
     * 
     * Sets the directional gravity aka. acceleration of the particle.
     * @param gravity - The directional gravity.
     */
    SetGravity(gravity: Vector): void;
    
    /**
     * [Client]
     * 
     * Sets the 'life time' of the particle, how long the particle existed since its creation.
     * 
     * This value should always be between 0 and [CLuaParticle:GetDieTime](https://wiki.facepunch.com/gmod/CLuaParticle:GetDieTime).
     * 
     * It changes automatically as time goes.
     * 
     * If the life time of the particle will be more than [CLuaParticle:GetDieTime](https://wiki.facepunch.com/gmod/CLuaParticle:GetDieTime), it will be removed.
     * @param lifeTime - The new life time of the particle.
     */
    SetLifeTime(lifeTime: number): void;
    
    /**
     * [Client]
     * 
     * Sets whether the particle should be affected by lighting.
     * @param useLighting - Whether the particle should be affected by lighting.
     */
    SetLighting(useLighting: boolean): void;
    
    /**
     * [Client]
     * 
     * Sets the material of the particle.
     * @param mat - The new material to set. Can also be a string.
     */
    SetMaterial(mat: IMaterial): void;
    
    /**
     * [Client]
     * 
     * Sets when the particles think function should be called next, this uses the synchronized server time returned by [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime).
     * @param nextThink - Next think time.
     */
    SetNextThink(nextThink: number): void;
    
    /**
     * [Client]
     * 
     * Sets the absolute position of the particle.
     * @param pos - The new particle position.
     */
    SetPos(pos: Vector): void;
    
    /**
     * [Client]
     * 
     * Sets the roll of the particle in radians. This should only be used for 2D particles.
     * @param roll - The new rotation of the particle in radians.
     */
    SetRoll(roll: number): void;
    
    /**
     * [Client]
     * 
     * Sets the rotation speed of the particle in radians. This should only be used for 2D particles.
     * @param rollDelta - The new rotation speed of the particle in radians.
     */
    SetRollDelta(rollDelta: number): void;
    
    /**
     * [Client]
     * 
     * Sets the initial alpha value of the particle.
     * @param startAlpha - Initial alpha.
     */
    SetStartAlpha(startAlpha: number): void;
    
    /**
     * [Client]
     * 
     * Sets the initial length value of the particle.
     * @param startLength - Initial length.
     */
    SetStartLength(startLength: number): void;
    
    /**
     * [Client]
     * 
     * Sets the initial size value of the particle.
     * @param startSize - Initial size.
     */
    SetStartSize(startSize: number): void;
    
    /**
     * [Client]
     * 
     * Sets the think function of the particle.
     * @param thinkFunc - Think function. It has only one argument:
     * [CLuaParticle](https://wiki.facepunch.com/gmod/CLuaParticle) particle - The particle the think hook is set on
     */
    SetThinkFunction(thinkFunc: Function): void;
    
    /**
     * [Client]
     * 
     * Sets the velocity of the particle.
     * @param vel - The new velocity of the particle.
     */
    SetVelocity(vel: Vector): void;
    
    /**
     * [Client]
     * 
     * Scales the velocity based on the particle speed.
     * @param [doScale = false] - Use velocity scaling.
     */
    SetVelocityScale(doScale = false): void;

}

/**
 * A class used to store the inputs from [CUserCmd](https://wiki.facepunch.com/gmod/CUserCmd) and other information related to the current movement simulation, such as velocity, position and so on.
 * 
 * This can only be accessed during [GM:SetupMove](https://wiki.facepunch.com/gmod/GM:SetupMove) , [GM:Move](https://wiki.facepunch.com/gmod/GM:Move) , [GM:PlayerTick](https://wiki.facepunch.com/gmod/GM:PlayerTick) and [GM:FinishMove](https://wiki.facepunch.com/gmod/GM:FinishMove).
 */
interface CMoveData {
    

    /**
     * [Shared]
     * 
     * Adds keys to the move data, as if player pressed them.
     * @param keys - Keys to add, see [Enums/IN](https://wiki.facepunch.com/gmod/Enums/IN)
     */
    AddKey(keys: IN): void;
    
    /**
     * [Shared]
     * 
     * Gets the aim angle. Seems to be same as [CMoveData:GetAngles](https://wiki.facepunch.com/gmod/CMoveData:GetAngles).
     * 
     */
    GetAbsMoveAngles(): Angle;
    
    /**
     * [Shared]
     * 
     * Gets the aim angle. On client is the same as [Entity:GetAngles](https://wiki.facepunch.com/gmod/Entity:GetAngles).
     * 
     */
    GetAngles(): Angle;
    
    /**
     * [Shared]
     * 
     * Gets which buttons are down
     * 
     */
    GetButtons(): IN;
    
    /**
     * [Shared]
     * 
     * Returns the center of the player movement constraint. See [CMoveData:SetConstraintCenter](https://wiki.facepunch.com/gmod/CMoveData:SetConstraintCenter).
     * 
     */
    GetConstraintCenter(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the radius that constrains the players movement. See [CMoveData:SetConstraintRadius](https://wiki.facepunch.com/gmod/CMoveData:SetConstraintRadius).
     * 
     */
    GetConstraintRadius(): number;
    
    /**
     * [Shared]
     * 
     * Returns the player movement constraint speed scale. See [CMoveData:SetConstraintSpeedScale](https://wiki.facepunch.com/gmod/CMoveData:SetConstraintSpeedScale).
     * 
     */
    GetConstraintSpeedScale(): number;
    
    /**
     * [Shared]
     * 
     * Returns the width (distance from the edge of the radius, inward) where the actual movement constraint functions.
     * 
     */
    GetConstraintWidth(): number;
    
    /**
     * [Shared]
     * 
     * Returns an internal player movement variable `m_outWishVel`.
     * 
     */
    GetFinalIdealVelocity(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns an internal player movement variable `m_outJumpVel`.
     * 
     */
    GetFinalJumpVelocity(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns an internal player movement variable `m_outStepHeight`.
     * 
     */
    GetFinalStepHeight(): number;
    
    /**
     * [Shared]
     * 
     * Returns the players forward speed.
     * 
     */
    GetForwardSpeed(): number;
    
    /**
     * [Shared]
     * 
     * Gets the number passed to "impulse" console command
     * 
     */
    GetImpulseCommand(): number;
    
    /**
     * [Shared]
     * 
     * Returns the maximum client speed of the player
     * 
     */
    GetMaxClientSpeed(): number;
    
    /**
     * [Shared]
     * 
     * Returns the maximum speed of the player.
     * 
     */
    GetMaxSpeed(): number;
    
    /**
     * [Shared]
     * 
     * Returns the angle the player is moving at. For more info, see [CMoveData:SetMoveAngles](https://wiki.facepunch.com/gmod/CMoveData:SetMoveAngles).
     * 
     */
    GetMoveAngles(): Angle;
    
    /**
     * [Shared]
     * 
     * Gets the aim angle. Only works clientside, server returns same as [CMoveData:GetAngles](https://wiki.facepunch.com/gmod/CMoveData:GetAngles).
     * 
     */
    GetOldAngles(): Angle;
    
    /**
     * [Shared]
     * 
     * Get which buttons were down last frame
     * 
     */
    GetOldButtons(): IN;
    
    /**
     * [Shared]
     * 
     * Gets the player's position.
     * 
     */
    GetOrigin(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the strafe speed of the player.
     * 
     */
    GetSideSpeed(): number;
    
    /**
     * [Shared]
     * 
     * Returns the vertical speed of the player. ( Z axis of [CMoveData:GetVelocity](https://wiki.facepunch.com/gmod/CMoveData:GetVelocity) )
     * 
     */
    GetUpSpeed(): number;
    
    /**
     * [Shared]
     * 
     * Gets the players velocity.
     * 
     * **Bug [#3413](https://github.com/Facepunch/garrysmod-issues/issues/3413):**
     * >This will return Vector(0,0,0) sometimes when walking on props.
     * 
     * 
     */
    GetVelocity(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns whether the key is down or not
     * @param key - The key to test, see [Enums/IN](https://wiki.facepunch.com/gmod/Enums/IN)
     */
    KeyDown(key: IN): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether the key was pressed. If you want to check if the key is held down, try [CMoveData:KeyDown](https://wiki.facepunch.com/gmod/CMoveData:KeyDown)
     * @param key - The key to test, see [Enums/IN](https://wiki.facepunch.com/gmod/Enums/IN)
     */
    KeyPressed(key: IN): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether the key was released
     * @param key - A key to test, see [Enums/IN](https://wiki.facepunch.com/gmod/Enums/IN)
     */
    KeyReleased(key: IN): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether the key was down or not.
     * 
     * Unlike [CMoveData:KeyDown](https://wiki.facepunch.com/gmod/CMoveData:KeyDown), it will return false if [CMoveData:KeyPressed](https://wiki.facepunch.com/gmod/CMoveData:KeyPressed) is true and it will return true if [CMoveData:KeyReleased](https://wiki.facepunch.com/gmod/CMoveData:KeyReleased) is true.
     * @param key - The key to test, see [Enums/IN](https://wiki.facepunch.com/gmod/Enums/IN)
     */
    KeyWasDown(key: IN): boolean;
    
    /**
     * [Shared]
     * 
     * Sets absolute move angles.( ? ) Doesn't seem to do anything.
     * @param ang - New absolute move angles
     */
    SetAbsMoveAngles(ang: Angle): void;
    
    /**
     * [Shared]
     * 
     * Sets angles.
     * 
     * **Bug [#2382](https://github.com/Facepunch/garrysmod-issues/issues/2382):**
     * >This function does nothing.
     * 
     * @param ang - The angles.
     */
    SetAngles(ang: Angle): void;
    
    /**
     * [Shared]
     * 
     * Sets the pressed buttons on the move data
     * @param buttons - A number representing which buttons are down, see [Enums/IN](https://wiki.facepunch.com/gmod/Enums/IN)
     */
    SetButtons(buttons: IN): void;
    
    /**
     * [Shared]
     * 
     * Sets the center of the player movement constraint. See [CMoveData:SetConstraintRadius](https://wiki.facepunch.com/gmod/CMoveData:SetConstraintRadius).
     * @param pos - The constraint origin.
     */
    SetConstraintCenter(pos: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the radius that constrains the players movement.
     * 
     * Works with conjunction of:
     * * [CMoveData:SetConstraintWidth](https://wiki.facepunch.com/gmod/CMoveData:SetConstraintWidth)
     * * [CMoveData:SetConstraintSpeedScale](https://wiki.facepunch.com/gmod/CMoveData:SetConstraintSpeedScale)
     * * [CMoveData:SetConstraintCenter](https://wiki.facepunch.com/gmod/CMoveData:SetConstraintCenter)
     * @param radius - The new constraint radius
     */
    SetConstraintRadius(radius: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the player movement constraint speed scale. This will be applied to the player within the <page text="constraint radius">CMoveData:SetConstraintRadius</page> when approaching its edge.
     * @param __unnamedArg - The constraint speed scale
     */
    SetConstraintSpeedScale(__unnamedArg: number): void;
    
    /**
     * [Shared]
     * 
     * Sets  the width (distance from the edge of the <page text="radius">CMoveData:SetConstraintRadius</page>, inward) where the actual movement constraint functions.
     * @param __unnamedArg - The constraint width
     */
    SetConstraintWidth(__unnamedArg: number): void;
    
    /**
     * [Shared]
     * 
     * Sets an internal player movement variable `m_outWishVel`.
     * @param idealVel - 
     */
    SetFinalIdealVelocity(idealVel: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets an internal player movement variable `m_outJumpVel`.
     * @param jumpVel - 
     */
    SetFinalJumpVelocity(jumpVel: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets an internal player movement variable `m_outStepHeight`.
     * @param stepHeight - 
     */
    SetFinalStepHeight(stepHeight: number): void;
    
    /**
     * [Shared]
     * 
     * Sets players forward speed.
     * @param speed - New forward speed
     */
    SetForwardSpeed(speed: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the impulse command. This isn't actually utilised in the engine anywhere.
     * @param impulse - The impulse to set
     */
    SetImpulseCommand(impulse: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the maximum player speed. Player won't be able to run or sprint faster then this value.
     * 
     * This also automatically sets [CMoveData:SetMaxSpeed](https://wiki.facepunch.com/gmod/CMoveData:SetMaxSpeed) when used in the [GM:SetupMove](https://wiki.facepunch.com/gmod/GM:SetupMove) hook. You must set it manually in the [GM:Move](https://wiki.facepunch.com/gmod/GM:Move) hook.
     * 
     * This must be called on both client and server to avoid prediction errors.
     * 
     * This will **not** reduce speed in air.
     * 
     * **Note:**
     * >Setting this to 0 will not make the player stationary. It won't do anything.
     * 
     * @param maxSpeed - The new maximum speed
     */
    SetMaxClientSpeed(maxSpeed: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the maximum speed of the player. This must match with [CMoveData:SetMaxClientSpeed](https://wiki.facepunch.com/gmod/CMoveData:SetMaxClientSpeed) both, on server and client.
     * 
     * Doesn't seem to be doing anything on it's own, use [CMoveData:SetMaxClientSpeed](https://wiki.facepunch.com/gmod/CMoveData:SetMaxClientSpeed) instead.
     * @param maxSpeed - The new maximum speed
     */
    SetMaxSpeed(maxSpeed: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the serverside move angles, making the movement keys act as if player was facing that direction.
     * 
     * **Bug [#1181](https://github.com/Facepunch/garrysmod-issues/issues/1181):**
     * >This does nothing clientside.
     * 
     * @param dir - The aim direction.
     */
    SetMoveAngles(dir: Angle): void;
    
    /**
     * [Shared]
     * 
     * Sets old aim angles. ( ? ) Doesn't seem to be doing anything.
     * @param aimAng - The old angles
     */
    SetOldAngles(aimAng: Angle): void;
    
    /**
     * [Shared]
     * 
     * Sets the 'old' pressed buttons on the move data. These buttons are used to work out which buttons have been released, which have just been pressed and which are being held down.
     * @param buttons - A number representing which buttons were down, see [Enums/IN](https://wiki.facepunch.com/gmod/Enums/IN)
     */
    SetOldButtons(buttons: IN): void;
    
    /**
     * [Shared]
     * 
     * Sets the players position.
     * @param pos - The position
     */
    SetOrigin(pos: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets players strafe speed.
     * @param speed - Strafe speed
     */
    SetSideSpeed(speed: number): void;
    
    /**
     * [Shared]
     * 
     * Sets vertical speed of the player. ( Z axis of [CMoveData:SetVelocity](https://wiki.facepunch.com/gmod/CMoveData:SetVelocity) )
     * @param speed - Vertical speed to set
     */
    SetUpSpeed(speed: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the player's velocity
     * @param velocity - The velocity to set
     */
    SetVelocity(velocity: Vector): void;

}

/**
 * An object returned by [navmesh](https://wiki.facepunch.com/gmod/navmesh) functions.
 */
interface CNavArea {
    

    /**
     * [Server]
     * 
     * Adds given attributes to given [CNavArea](https://wiki.facepunch.com/gmod/CNavArea). See [CNavArea:HasAttributes](https://wiki.facepunch.com/gmod/CNavArea:HasAttributes) and [CNavArea:SetAttributes](https://wiki.facepunch.com/gmod/CNavArea:SetAttributes).
     * @param attribs - The attributes to add, as a bitflag. See [Enums/NAV_MESH](https://wiki.facepunch.com/gmod/Enums/NAV_MESH).
     */
    AddAttributes(attribs: NAV_MESH): void;
    
    /**
     * [Server]
     * 
     * Adds a hiding spot onto this nav area.
     * 
     * There's a limit of 255 hiding spots per area.
     * @param pos - The position on the nav area
     * @param [flags = 7] - Flags describing what kind of hiding spot this is.
     * * 0 = None (Not recommended)
     * * 1 = In Cover/basically a hiding spot, in a corner with good hard cover nearby
     * * 2 = good sniper spot, had at least one decent sniping corridor
     * * 4 = perfect sniper spot, can see either very far, or a large area, or both
     * * 8 = exposed, spot in the open, usually on a ledge or cliff
     * Values over 255 will be clamped.
     */
    AddHidingSpot(pos: Vector, flags = 7): void;
    
    /**
     * [Server]
     * 
     * Adds this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) to the closed list, a list of areas that have been checked by A* pathfinding algorithm.
     * 
     * Used in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).
     * 
     * More information can be found on the [Simple Pathfinding](https://wiki.facepunch.com/gmod/Simple_Pathfinding) page.
     * 
     */
    AddToClosedList(): void;
    
    /**
     * [Server]
     * 
     * Adds this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) to the Open List.
     * 
     * Used in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).
     * 
     * More information can be found on the [Simple Pathfinding](https://wiki.facepunch.com/gmod/Simple_Pathfinding) page.
     * 
     */
    AddToOpenList(): void;
    
    /**
     * [Server]
     * 
     * Clears the open and closed lists for a new search.
     * 
     * Used in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).
     * 
     * More information can be found on the [Simple Pathfinding](https://wiki.facepunch.com/gmod/Simple_Pathfinding) page.
     * 
     */
    ClearSearchLists(): void;
    
    /**
     * [Server]
     * 
     * Returns the height difference between the edges of two connected navareas.
     * @param navarea - 
     */
    ComputeAdjacentConnectionHeightChange(navarea: CNavArea): number;
    
    /**
     * [Server]
     * 
     * Returns the [Enums/NavDir](https://wiki.facepunch.com/gmod/Enums/NavDir) direction that the given vector faces on this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea).
     * @param pos - The position to compute direction towards.
     */
    ComputeDirection(pos: Vector): number;
    
    /**
     * [Server]
     * 
     * Returns the height difference on the Z axis of the two [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)s. This is calculated from the center most point on both [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)s.
     * @param navArea - The nav area to test against.
     */
    ComputeGroundHeightChange(navArea: CNavArea): number;
    
    /**
     * [Server]
     * 
     * Connects this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) to another [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) or [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder) with a one way connection. ( From this area to the target )
     * 
     * See [CNavLadder:ConnectTo](https://wiki.facepunch.com/gmod/CNavLadder:ConnectTo) for making the connection from ladder to area.
     * @param area - The [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) or [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder) this area leads to.
     */
    ConnectTo(area: CNavArea): void;
    
    /**
     * [Server]
     * 
     * Returns true if this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) contains the given vector.
     * @param pos - The position to test.
     */
    Contains(pos: Vector): boolean;
    
    /**
     * [Server]
     * 
     * Disconnects this nav area from given area or ladder. (Only disconnects one way)
     * @param area - The [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) or [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder) this to disconnect from.
     */
    Disconnect(area: CNavArea): void;
    
    /**
     * [Server]
     * 
     * Draws this navarea on debug overlay.
     * 
     */
    Draw(): void;
    
    /**
     * [Server]
     * 
     * Draws the hiding spots on debug overlay. This includes sniper/exposed spots too!
     * 
     */
    DrawSpots(): void;
    
    /**
     * [Server]
     * 
     * Returns a list of all the [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)s that have a one-way connection **to** this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) and their pre-computed distances.
     * 
     * If an area has a one-way incoming connection to this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea), then it will **not** be returned from this function, use [CNavArea:GetIncomingConnectionDistances](https://wiki.facepunch.com/gmod/CNavArea:GetIncomingConnectionDistances) to get all one-way incoming connections.
     * @param [dir = nil] - If set, will only return areas in the specified direction. See [Enums/NAVDIR](https://wiki.facepunch.com/gmod/Enums/NAVDIR).
     */
    GetAdjacentAreaDistances(dir?: NAVDIR): any;
    
    /**
     * [Server]
     * 
     * Returns a list of all the [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)s that have a  (one and two way) connection **from** this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea).
     * 
     * If an area has a one-way incoming connection to this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea), then it will **not** be returned from this function, use [CNavArea:GetIncomingConnections](https://wiki.facepunch.com/gmod/CNavArea:GetIncomingConnections) to get all one-way incoming connections.
     * 
     * See [CNavArea:GetAdjacentAreasAtSide](https://wiki.facepunch.com/gmod/CNavArea:GetAdjacentAreasAtSide) for a function that only returns areas from one side/direction.
     * 
     */
    GetAdjacentAreas(): any;
    
    /**
     * [Server]
     * 
     * Returns a table of all the [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)s that have a ( one and two way ) connection **from** this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) in given direction.
     * 
     * If an area has a one-way incoming connection to this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea), then it will **not** be returned from this function, use [CNavArea:GetIncomingConnections](https://wiki.facepunch.com/gmod/CNavArea:GetIncomingConnections) to get all incoming connections.
     * 
     * See [CNavArea:GetAdjacentAreas](https://wiki.facepunch.com/gmod/CNavArea:GetAdjacentAreas) for a function that returns all areas from all sides/directions.
     * @param navDir - The direction, in which to look for [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)s, see [Enums/NavDir](https://wiki.facepunch.com/gmod/Enums/NavDir).
     */
    GetAdjacentAreasAtSide(navDir: number): any;
    
    /**
     * [Server]
     * 
     * Returns the amount of [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)s that have a connection ( one and two way ) **from** this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea).
     * 
     * See [CNavArea:GetAdjacentCountAtSide](https://wiki.facepunch.com/gmod/CNavArea:GetAdjacentCountAtSide) for a function that only returns area count from one side/direction.
     * 
     */
    GetAdjacentCount(): number;
    
    /**
     * [Server]
     * 
     * Returns the amount of [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)s that have a connection ( one or two way ) **from** this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) in given direction.
     * 
     * See [CNavArea:GetAdjacentCount](https://wiki.facepunch.com/gmod/CNavArea:GetAdjacentCount) for a function that returns [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) count from/in all sides/directions.
     * @param navDir - The direction, in which to look for [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)s, see [Enums/NavDir](https://wiki.facepunch.com/gmod/Enums/NavDir).
     */
    GetAdjacentCountAtSide(navDir: number): number;
    
    /**
     * [Server]
     * 
     * Returns the attribute mask for the given [CNavArea](https://wiki.facepunch.com/gmod/CNavArea).
     * 
     */
    GetAttributes(): number;
    
    /**
     * [Server]
     * 
     * Returns the center most vector point for the given [CNavArea](https://wiki.facepunch.com/gmod/CNavArea).
     * 
     */
    GetCenter(): Vector;
    
    /**
     * [Server]
     * 
     * Returns the closest point of this Nav Area from the given position.
     * @param pos - The given position, can be outside of the Nav Area bounds.
     */
    GetClosestPointOnArea(pos: Vector): Vector;
    
    /**
     * [Server]
     * 
     * Returns the vector position of the corner for the given [CNavArea](https://wiki.facepunch.com/gmod/CNavArea).
     * @param cornerid - The target corner to get the position of, takes [Enums/NavCorner](https://wiki.facepunch.com/gmod/Enums/NavCorner).
     */
    GetCorner(cornerid: NavCorner): Vector;
    
    /**
     * [Server]
     * 
     * Returns the cost from starting area this area when pathfinding. Set by [CNavArea:SetCostSoFar](https://wiki.facepunch.com/gmod/CNavArea:SetCostSoFar).
     * 
     * Used in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).
     * 
     * More information can be found on the [Simple Pathfinding](https://wiki.facepunch.com/gmod/Simple_Pathfinding) page.
     * 
     */
    GetCostSoFar(): number;
    
    /**
     * [Server]
     * 
     * Returns a table of very bad hiding spots in this area.
     * 
     * See also [CNavArea:GetHidingSpots](https://wiki.facepunch.com/gmod/CNavArea:GetHidingSpots).
     * 
     */
    GetExposedSpots(): any;
    
    /**
     * [Server]
     * 
     * Returns size info about the nav area.
     * 
     */
    GetExtentInfo(): any;
    
    /**
     * [Server]
     * 
     * Returns a table of good hiding spots in this area.
     * 
     * See also [CNavArea:GetExposedSpots](https://wiki.facepunch.com/gmod/CNavArea:GetExposedSpots).
     * @param [type = 1] - The type of spots to include.
     * * 0 = None (Not recommended)
     * * 1 = In Cover/basically a hiding spot, in a corner with good hard cover nearby
     * * 2 = good sniper spot, had at least one decent sniping corridor
     * * 4 = perfect sniper spot, can see either very far, or a large area, or both
     * * 8 = exposed, spot in the open, usually on a ledge or cliff, same as GetExposedSpots
     * * Values over 255 and below 0 will be clamped.
     */
    GetHidingSpots(type = 1): any;
    
    /**
     * [Server]
     * 
     * Returns this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)s unique ID.
     * 
     */
    GetID(): number;
    
    /**
     * [Server]
     * 
     * Returns a table of all the [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)s that have a one-way connection **to** this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) and their pre-computed distances.
     * 
     * If a [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) has a two-way connection **to or from** this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) then it will not be returned from this function, use [CNavArea:GetAdjacentAreaDistances](https://wiki.facepunch.com/gmod/CNavArea:GetAdjacentAreaDistances) to get outgoing (one and two way) connections.
     * @param [dir = nil] - If set, will only return areas in the specified direction. See [Enums/NAVDIR](https://wiki.facepunch.com/gmod/Enums/NAVDIR).
     */
    GetIncomingConnectionDistances(dir?: NAVDIR): any;
    
    /**
     * [Server]
     * 
     * Returns a table of all the [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)s that have a one-way connection **to** this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea).
     * 
     * If a [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) has a two-way connection **to or from** this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) then it will not be returned from this function, use [CNavArea:GetAdjacentAreas](https://wiki.facepunch.com/gmod/CNavArea:GetAdjacentAreas) to get outgoing ( one and two way ) connections.
     * 
     * See [CNavArea:GetIncomingConnectionsAtSide](https://wiki.facepunch.com/gmod/CNavArea:GetIncomingConnectionsAtSide) for a function that returns one-way incoming connections from  only one side/direction.
     * 
     */
    GetIncomingConnections(): any;
    
    /**
     * [Server]
     * 
     * Returns a table of all the [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)s that have a one-way connection **to** this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) from given direction.
     * 
     * If a [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) has a two-way connection **to or from** this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) then it will not be returned from this function, use [CNavArea:GetAdjacentAreas](https://wiki.facepunch.com/gmod/CNavArea:GetAdjacentAreas) to get outgoing ( one and two way ) connections.
     * 
     * See [CNavArea:GetIncomingConnections](https://wiki.facepunch.com/gmod/CNavArea:GetIncomingConnections) for a function that returns one-way incoming connections from  all sides/directions.
     * @param navDir - The direction, from which to look for [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)s, see [Enums/NavDir](https://wiki.facepunch.com/gmod/Enums/NavDir).
     */
    GetIncomingConnectionsAtSide(navDir: number): any;
    
    /**
     * [Server]
     * 
     * Returns all [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder)s that have a ( one or two way ) connection **from** this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea).
     * 
     * See [CNavArea:GetLaddersAtSide](https://wiki.facepunch.com/gmod/CNavArea:GetLaddersAtSide) for a function that only returns [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder)s in given direction.
     * 
     */
    GetLadders(): any;
    
    /**
     * [Server]
     * 
     * Returns all [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder)s that have a ( one or two way ) connection **from** ( one and two way ) this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) in given direction.
     * 
     * See [CNavArea:GetLadders](https://wiki.facepunch.com/gmod/CNavArea:GetLadders) for a function that returns [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder) from/in all sides/directions.
     * @param navDir - The direction, in which to look for [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder)s.
     * 0 = Up ( LadderDirectionType::LADDER_UP )
     * 1 = Down ( LadderDirectionType::LADDER_DOWN )
     */
    GetLaddersAtSide(navDir: number): any;
    
    /**
     * [Server]
     * 
     * Returns the parent [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)
     * 
     */
    GetParent(): CNavArea;
    
    /**
     * [Server]
     * 
     * Returns how this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) is connected to its parent.
     * 
     */
    GetParentHow(): NavTraverseType;
    
    /**
     * [Server]
     * 
     * Returns the Place of the nav area.
     * 
     */
    GetPlace(): string;
    
    /**
     * [Server]
     * 
     * Returns a random [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) that has an outgoing ( one or two way ) connection **from** this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) in given direction.
     * @param navDir - The direction, in which to look for [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)s, see [Enums/NavDir](https://wiki.facepunch.com/gmod/Enums/NavDir).
     */
    GetRandomAdjacentAreaAtSide(navDir: number): CNavArea;
    
    /**
     * [Server]
     * 
     * Returns a random point on the nav area.
     * 
     */
    GetRandomPoint(): Vector;
    
    /**
     * [Server]
     * 
     * Returns the width this Nav Area.
     * 
     */
    GetSizeX(): number;
    
    /**
     * [Server]
     * 
     * Returns the height of this Nav Area.
     * 
     */
    GetSizeY(): number;
    
    /**
     * [Server]
     * 
     * Returns all possible path segments through a [CNavArea](https://wiki.facepunch.com/gmod/CNavArea), and the dangerous spots to look at as we traverse that path segment.
     * 
     */
    GetSpotEncounters(): any;
    
    /**
     * [Server]
     * 
     * Returns the total cost when passing from starting area to the goal area through this node. Set by [CNavArea:SetTotalCost](https://wiki.facepunch.com/gmod/CNavArea:SetTotalCost).
     * 
     * Used in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).
     * 
     * More information can be found on the [Simple Pathfinding](https://wiki.facepunch.com/gmod/Simple_Pathfinding) page.
     * 
     */
    GetTotalCost(): number;
    
    /**
     * [Server]
     * 
     * Returns all [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)s that are visible from this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea).
     * 
     */
    GetVisibleAreas(): any;
    
    /**
     * [Server]
     * 
     * Returns the elevation of this Nav Area at the given position.
     * @param pos - The position to get the elevation from, the z value from this position is ignored and only the X and Y values are used to this task.
     */
    GetZ(pos: Vector): number;
    
    /**
     * [Server]
     * 
     * Returns true if the given [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) has this attribute flag set.
     * @param attribs - Attribute mask to check for, see [Enums/NAV_MESH](https://wiki.facepunch.com/gmod/Enums/NAV_MESH)
     */
    HasAttributes(attribs: NAV_MESH): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether the nav area is blocked or not, i.e. whether it can be walked through or not.
     * @param [teamID = -2] - The team ID to test, -2 = any team.
     * Only 2 actual teams are available, 0 and 1.
     * @param [ignoreNavBlockers = false] - Whether to ignore [func_nav_blocker](https://developer.valvesoftware.com/wiki/Func_nav_blocker) entities.
     */
    IsBlocked(teamID = -2, ignoreNavBlockers = false): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether this node is in the Closed List.
     * 
     * Used in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).
     * 
     * More information can be found on the [Simple Pathfinding](https://wiki.facepunch.com/gmod/Simple_Pathfinding) page.
     * 
     */
    IsClosed(): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) can completely (i.e. all corners of this area can see all corners of the given area) see the given [CNavArea](https://wiki.facepunch.com/gmod/CNavArea).
     * @param area - The [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) to test.
     */
    IsCompletelyVisible(area: CNavArea): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) has an outgoing ( one or two way ) connection **to** given [CNavArea](https://wiki.facepunch.com/gmod/CNavArea).
     * 
     * See [CNavArea:IsConnectedAtSide](https://wiki.facepunch.com/gmod/CNavArea:IsConnectedAtSide) for a function that only checks for outgoing connections in one direction.
     * @param navArea - The [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) to test against.
     */
    IsConnected(navArea: CNavArea): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) has an outgoing ( one or two way ) connection **to** given [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) in given direction.
     * 
     * See [CNavArea:IsConnected](https://wiki.facepunch.com/gmod/CNavArea:IsConnected) for a function that checks all sides.
     * @param navArea - The [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) to test against.
     * @param navDirType - The direction, in which to look for the connection. See [Enums/NavDir](https://wiki.facepunch.com/gmod/Enums/NavDir)
     */
    IsConnectedAtSide(navArea: CNavArea, navDirType: NavDir): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether this Nav Area is in the same plane as the given one.
     * @param navArea - The Nav Area to test.
     */
    IsCoplanar(navArea: CNavArea): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether the [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) would damage if traversed, as set by [CNavArea:MarkAsDamaging](https://wiki.facepunch.com/gmod/CNavArea:MarkAsDamaging).
     * 
     */
    IsDamaging(): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether this Nav Area is flat within the tolerance of the **nav_coplanar_slope_limit_displacement** and **nav_coplanar_slope_limit** convars.
     * 
     */
    IsFlat(): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether this area is in the Open List.
     * 
     * Used in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).
     * 
     * More information can be found on the [Simple Pathfinding](https://wiki.facepunch.com/gmod/Simple_Pathfinding) page.
     * 
     */
    IsOpen(): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether the Open List is empty or not.
     * 
     * Used in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).
     * 
     * More information can be found on the [Simple Pathfinding](https://wiki.facepunch.com/gmod/Simple_Pathfinding) page.
     * 
     */
    IsOpenListEmpty(): boolean;
    
    /**
     * [Server]
     * 
     * Returns if this position overlaps the Nav Area within the given tolerance.
     * @param pos - The overlapping position to test.
     * @param [tolerance = 0] - The tolerance of the overlapping, set to 0 for no tolerance.
     */
    IsOverlapping(pos: Vector, tolerance = 0): boolean;
    
    /**
     * [Server]
     * 
     * Returns true if this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) is overlapping the given [CNavArea](https://wiki.facepunch.com/gmod/CNavArea).
     * @param navArea - The [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) to test against.
     */
    IsOverlappingArea(navArea: CNavArea): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) can see given position.
     * @param pos - The position to test.
     * @param [ignoreEnt = NULL] - If set, the given entity will be ignored when doing LOS tests
     */
    IsPartiallyVisible(pos: Vector, ignoreEnt?: Entity): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) can potentially see the given [CNavArea](https://wiki.facepunch.com/gmod/CNavArea).
     * @param area - The [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) to test.
     */
    IsPotentiallyVisible(area: CNavArea): boolean;
    
    /**
     * [Server]
     * 
     * Returns if we're shaped like a square.
     * 
     */
    IsRoughlySquare(): boolean;
    
    /**
     * [Server]
     * 
     * Whether this Nav Area is placed underwater.
     * 
     */
    IsUnderwater(): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) is valid or not.
     * 
     */
    IsValid(): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether we can be seen from the given position.
     * @param pos - The position to check.
     */
    IsVisible(pos: Vector): LuaMultiReturn<[boolean, Vector]>;
    
    /**
     * [Server]
     * 
     * Marks the area as blocked and unable to be traversed. See [CNavArea:IsBlocked](https://wiki.facepunch.com/gmod/CNavArea:IsBlocked) and [CNavArea:MarkAsUnblocked](https://wiki.facepunch.com/gmod/CNavArea:MarkAsUnblocked).
     * @param [teamID = -2] - TeamID to mark the area as blocked for. `-2` means all teams. Only 2 valid teamIDs are supported: `0` and `1`.
     */
    MarkAsBlocked(teamID = -2): void;
    
    /**
     * [Server]
     * 
     * Marks the area as damaging if traversed, for example when, for example having poisonous or no atmosphere, or a temporary fire present. See [CNavArea:IsDamaging](https://wiki.facepunch.com/gmod/CNavArea:IsDamaging).
     * @param duration - For how long the area should stay marked as damaging. Multiple calls will overwrite the previous value.
     */
    MarkAsDamaging(duration: number): void;
    
    /**
     * [Server]
     * 
     * Unblocked this area if it was previously blocked by [CNavArea:MarkAsBlocked](https://wiki.facepunch.com/gmod/CNavArea:MarkAsBlocked).
     * @param [teamID = -2] - TeamID to unblock the area for. `-2` means all teams. Only 2 valid teamIDs are supported: `0` and `1`.
     */
    MarkAsUnblocked(teamID = -2): void;
    
    /**
     * [Server]
     * 
     * Drops a corner or all corners of a [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) to the ground below it.
     * @param corner - The corner(s) to drop, uses [Enums/NavCorner](https://wiki.facepunch.com/gmod/Enums/NavCorner)
     */
    PlaceOnGround(corner: NavCorner): void;
    
    /**
     * [Server]
     * 
     * Removes a CNavArea from the Open List with the lowest cost to traverse to from the starting node, and returns it.
     * 
     * Used in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).
     * 
     * More information can be found on the [Simple Pathfinding](https://wiki.facepunch.com/gmod/Simple_Pathfinding) page.
     * 
     */
    PopOpenList(): CNavArea;
    
    /**
     * [Server]
     * 
     * Removes the given nav area.
     * 
     */
    Remove(): void;
    
    /**
     * [Server]
     * 
     * Removes given attributes from given [CNavArea](https://wiki.facepunch.com/gmod/CNavArea). See also [CNavArea:SetAttributes](https://wiki.facepunch.com/gmod/CNavArea:SetAttributes).
     * @param attribs - The attributes to remove, as a bitflag. See [Enums/NAV_MESH](https://wiki.facepunch.com/gmod/Enums/NAV_MESH).
     */
    RemoveAttributes(attribs: NAV_MESH): void;
    
    /**
     * [Server]
     * 
     * Removes this node from the Closed List.
     * 
     * Used in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).
     * 
     * More information can be found on the [Simple Pathfinding](https://wiki.facepunch.com/gmod/Simple_Pathfinding) page.
     * 
     */
    RemoveFromClosedList(): void;
    
    /**
     * [Server]
     * 
     * Sets the attributes for given [CNavArea](https://wiki.facepunch.com/gmod/CNavArea). See [CNavArea:HasAttributes](https://wiki.facepunch.com/gmod/CNavArea:HasAttributes).
     * @param attribs - The attributes to set, as a bitflag. See [Enums/NAV_MESH](https://wiki.facepunch.com/gmod/Enums/NAV_MESH).
     */
    SetAttributes(attribs: NAV_MESH): void;
    
    /**
     * [Server]
     * 
     * Sets the position of a corner of a nav area.
     * @param corner - The corner to set, uses [Enums/NavCorner](https://wiki.facepunch.com/gmod/Enums/NavCorner)
     * @param position - The new position to set.
     */
    SetCorner(corner: NavCorner, position: Vector): void;
    
    /**
     * [Server]
     * 
     * Sets the cost from starting area this area when pathfinding.
     * 
     * Used in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).
     * 
     * More information can be found on the [Simple Pathfinding](https://wiki.facepunch.com/gmod/Simple_Pathfinding) page.
     * @param cost - The cost so far
     */
    SetCostSoFar(cost: number): void;
    
    /**
     * [Server]
     * 
     * Sets the new parent of this [CNavArea](https://wiki.facepunch.com/gmod/CNavArea).
     * @param parent - The new parent to set
     * @param how - How we get from parent to us using [Enums/NavTraverseType](https://wiki.facepunch.com/gmod/Enums/NavTraverseType)
     */
    SetParent(parent: CNavArea, how: NavTraverseType): void;
    
    /**
     * [Server]
     * 
     * Sets the Place of the nav area.
     * 
     * There is a limit of 256 unique places per `.nav` file.
     * @param place - Set to `""` to remove place from the nav area. There's a limit of 255 characters.
     */
    SetPlace(place: string): boolean;
    
    /**
     * [Server]
     * 
     * Sets the total cost when passing from starting area to the goal area through this node.
     * 
     * Used in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).
     * 
     * More information can be found on the [Simple Pathfinding](https://wiki.facepunch.com/gmod/Simple_Pathfinding) page.
     * @param cost - The total cost of the path to set.
     * Must be above or equal 0.
     */
    SetTotalCost(cost: number): void;
    
    /**
     * [Server]
     * 
     * Moves this open list to appropriate position based on its [CNavArea:GetTotalCost](https://wiki.facepunch.com/gmod/CNavArea:GetTotalCost) compared to the total cost of other areas in the open list.
     * 
     * Used in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).
     * 
     * More information can be found on the [Simple Pathfinding](https://wiki.facepunch.com/gmod/Simple_Pathfinding) page.
     * 
     */
    UpdateOnOpenList(): void;

}

/**
 * An object that represents a ladder for Nextbots.
 */
interface CNavLadder {
    

    /**
     * [Server]
     * 
     * Connects this ladder to a [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) with a one way connection. ( From this ladder to the target area ).
     * 
     * See [CNavArea:ConnectTo](https://wiki.facepunch.com/gmod/CNavArea:ConnectTo) for making the connection from area to ladder.
     * @param area - The area this ladder leads to.
     */
    ConnectTo(area: CNavArea): void;
    
    /**
     * [Server]
     * 
     * Disconnects this ladder from given area in a single direction.
     * @param area - The [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) this to disconnect from.
     */
    Disconnect(area: CNavArea): void;
    
    /**
     * [Server]
     * 
     * Returns the bottom most position of the ladder.
     * 
     */
    GetBottom(): Vector;
    
    /**
     * [Server]
     * 
     * Returns the bottom area of the [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder).
     * 
     */
    GetBottomArea(): CNavArea;
    
    /**
     * [Server]
     * 
     * Returns this [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder)s unique ID.
     * 
     */
    GetID(): number;
    
    /**
     * [Server]
     * 
     * Returns the length of the ladder.
     * 
     */
    GetLength(): number;
    
    /**
     * [Server]
     * 
     * Returns the direction of this [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder). ( The direction in which players back will be facing if they are looking directly at the ladder )
     * 
     */
    GetNormal(): Vector;
    
    /**
     * [Server]
     * 
     * Returns the world position based on given height relative to the ladder.
     * @param height - The Z position in world space coordinates.
     */
    GetPosAtHeight(height: number): Vector;
    
    /**
     * [Server]
     * 
     * Returns the topmost position of the ladder.
     * 
     */
    GetTop(): Vector;
    
    /**
     * [Server]
     * 
     * Returns the top behind [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) of the [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder).
     * 
     */
    GetTopBehindArea(): CNavArea;
    
    /**
     * [Server]
     * 
     * Returns the top forward [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) of the [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder).
     * 
     */
    GetTopForwardArea(): CNavArea;
    
    /**
     * [Server]
     * 
     * Returns the top left [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) of the [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder).
     * 
     */
    GetTopLeftArea(): CNavArea;
    
    /**
     * [Server]
     * 
     * Returns the top right [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) of the [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder).
     * 
     */
    GetTopRightArea(): CNavArea;
    
    /**
     * [Server]
     * 
     * Returns the width of the ladder in Hammer Units.
     * 
     */
    GetWidth(): number;
    
    /**
     * [Server]
     * 
     * Returns whether this [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder) has an outgoing ( one or two way ) connection **to** given [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) in given direction.
     * @param navArea - The [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) to test against.
     * @param navDirType - The direction, in which to look for the connection. See [Enums/NavDir](https://wiki.facepunch.com/gmod/Enums/NavDir)
     */
    IsConnectedAtSide(navArea: CNavArea, navDirType: NavDir): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether this [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder) is valid or not.
     * 
     */
    IsValid(): boolean;
    
    /**
     * [Server]
     * 
     * Removes the given nav ladder.
     * 
     */
    Remove(): void;
    
    /**
     * [Server]
     * 
     * Sets the bottom area of the [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder).
     * @param area - 
     */
    SetBottomArea(area: CNavArea): void;
    
    /**
     * [Server]
     * 
     * Sets the top behind area of the [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder).
     * @param area - 
     */
    SetTopBehindArea(area: CNavArea): void;
    
    /**
     * [Server]
     * 
     * Sets the top forward area of the [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder).
     * @param area - 
     */
    SetTopForwardArea(area: CNavArea): void;
    
    /**
     * [Server]
     * 
     * Sets the top left area of the [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder).
     * @param area - 
     */
    SetTopLeftArea(area: CNavArea): void;
    
    /**
     * [Server]
     * 
     * Sets the top right area of the [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder).
     * @param area - 
     */
    SetTopRightArea(area: CNavArea): void;

}

/**
 * This object represents a .pcf ( Orange Box ) particle system. Created by [Entity:CreateParticleEffect](https://wiki.facepunch.com/gmod/Entity:CreateParticleEffect) and [Global.CreateParticleSystem](https://wiki.facepunch.com/gmod/Global.CreateParticleSystem).
 */
interface CNewParticleEffect {
    

    /**
     * [Client]
     * 
     * Adds a control point to the particle system.
     * 
     * **Note:**
     * >This function will not work if the [CNewParticleEffect:GetOwner](https://wiki.facepunch.com/gmod/CNewParticleEffect:GetOwner) entity is not valid
     * 
     * @param cpID - The control point ID, 0 to 63.
     * @param ent - The entity to attach the control point to.
     * @param partAttachment - See [Enums/PATTACH](https://wiki.facepunch.com/gmod/Enums/PATTACH).
     * @param [entAttachment = 0] - The attachment ID on the entity to attach the particle system to
     * @param [offset = Vector( 0, 0, 0 )] - The offset from the [Entity:GetPos](https://wiki.facepunch.com/gmod/Entity:GetPos) of the entity we are attaching this CP to.
     */
    AddControlPoint(cpID: number, ent: Entity, partAttachment: PATTACH, entAttachment = 0, offset?: Vector): void;
    
    /**
     * [Client]
     * 
     * 
     */
    GetAutoUpdateBBox(): boolean;
    
    /**
     * [Client]
     * 
     * Returns the name of the particle effect this system is set to emit.
     * 
     */
    GetEffectName(): string;
    
    /**
     * [Client]
     * 
     * Returns the highest control point number for given particle system.
     * 
     */
    GetHighestControlPoint(): boolean;
    
    /**
     * [Client]
     * 
     * Returns the owner of the particle system, the entity the particle system is attached to.
     * 
     */
    GetOwner(): Entity;
    
    /**
     * [Client]
     * 
     * Returns whether the particle system has finished emitting particles or not.
     * 
     */
    IsFinished(): boolean;
    
    /**
     * [Client]
     * 
     * Returns whether the particle system is valid or not.
     * 
     */
    IsValid(): boolean;
    
    /**
     * [Client]
     * 
     * Returns whether the particle system is intended to be used on a view model?
     * 
     */
    IsViewModelEffect(): boolean;
    
    /**
     * [Client]
     * 
     * Forces the particle system to render using current rendering context.
     * 
     * Can be used to render the particle system in vgui panels, etc.
     * 
     * Used in conjunction with [CNewParticleEffect:SetShouldDraw](https://wiki.facepunch.com/gmod/CNewParticleEffect:SetShouldDraw).
     * 
     */
    Render(): void;
    
    /**
     * [Client]
     * 
     * Forces the particle system to restart emitting particles.
     * 
     */
    Restart(): void;
    
    /**
     * [Client]
     * 
     * Sets a value for given control point.
     * @param cpID - The control point ID, 0 to 63.
     * @param value - The value to set for given control point.
     */
    SetControlPoint(cpID: number, value: Vector): void;
    
    /**
     * [Client]
     * 
     * Sets an entity to given control point for particle to use.
     * @param child - The child control point ID, 0 to 63.
     * @param parent - The entity to set.
     */
    SetControlPointEntity(child: number, parent: Entity): void;
    
    /**
     * [Client]
     * 
     * Sets the forward direction for given control point.
     * @param cpID - The control point ID, 0 to 63.
     * @param forward - The forward direction for given control point
     */
    SetControlPointForwardVector(cpID: number, forward: Vector): void;
    
    /**
     * [Client]
     * 
     * Sets the orientation for given control point.
     * @param cpID - The control point ID, 0 to 63.
     * @param forward - The forward direction for given control point.
     * This can also be an [Angle](https://wiki.facepunch.com/gmod/Angle), in which case the other 2 arguments are not used.
     * @param right - The right direction for given control point
     * @param up - The up direction for given control point
     */
    SetControlPointOrientation(cpID: number, forward: Vector, right: Vector, up: Vector): void;
    
    /**
     * [Client]
     * 
     * Essentially makes child control point follow the parent control point.
     * @param child - The child control point ID, 0 to 63.
     * @param parent - The parent control point ID, 0 to 63.
     */
    SetControlPointParent(child: number, parent: number): void;
    
    /**
     * [Client]
     * 
     * Sets the right direction for given control point.
     * @param cpID - The control point ID, 0 to 63.
     * @param right - The right direction for given control point.
     */
    SetControlPointRightVector(cpID: number, right: Vector): void;
    
    /**
     * [Client]
     * 
     * Sets the upward direction for given control point.
     * @param cpID - The control point ID, 0 to 63.
     * @param upward - The upward direction for given control point
     */
    SetControlPointUpVector(cpID: number, upward: Vector): void;
    
    /**
     * [Client]
     * 
     * Set whether this particle effect is a view model effect or not. This will have an effect on attachment positioning and other things.
     * @param isViewModel - Whether this particle effect is a view model effect or not.
     */
    SetIsViewModelEffect(isViewModel: boolean): void;
    
    /**
     * [Client]
     * 
     * Forces the particle system to stop automatically rendering.
     * 
     * Used in conjunction with [CNewParticleEffect:Render](https://wiki.facepunch.com/gmod/CNewParticleEffect:Render).
     * @param should - Whether to automatically draw the particle effect or not.
     */
    SetShouldDraw(should: boolean): void;
    
    /**
     * [Client]
     * 
     * Sets the sort origin for given particle system. This is used as a helper to determine which particles are in front of which.
     * @param origin - The new sort origin.
     */
    SetSortOrigin(origin: Vector): void;
    
    /**
     * [Client]
     * 
     * Starts the particle emission.
     * @param [infiniteOnly = false] - 
     */
    StartEmission(infiniteOnly = false): void;
    
    /**
     * [Client]
     * 
     * Stops the particle emission.
     * @param [infiniteOnly = false] - 
     * @param [removeAllParticles = false] - 
     * @param [wakeOnStop = false] - 
     */
    StopEmission(infiniteOnly = false, removeAllParticles = false, wakeOnStop = false): void;
    
    /**
     * [Client]
     * 
     * Stops particle emission and destroys all particles instantly. Also detaches the particle effect from the entity it was attached to.
     * 
     * Consider using [CNewParticleEffect:StopEmission](https://wiki.facepunch.com/gmod/CNewParticleEffect:StopEmission)( false, true ) instead, which has same effect, but doesn't require owner entity, and does't detach the particle system from its entity.
     * 
     * **Note:**
     * >This function will work identically to [CNewParticleEffect:StopEmission](https://wiki.facepunch.com/gmod/CNewParticleEffect:StopEmission)( false, true ) if  [CNewParticleEffect:GetOwner](https://wiki.facepunch.com/gmod/CNewParticleEffect:GetOwner) entity is not valid.
     * 
     * 
     */
    StopEmissionAndDestroyImmediately(): void;

}

/**
 * List of all possible functions to manipulate colors.
 * 
 * Colors are implemented in Lua thus [Global.type](https://wiki.facepunch.com/gmod/Global.type)(color) == "table" and [Global.TypeID](https://wiki.facepunch.com/gmod/Global.TypeID)(color) == <page text="TYPE_TABLE">Enums/TYPE#table</page>.
 * 
 * For type checking use [Global.IsColor](https://wiki.facepunch.com/gmod/Global.IsColor).
 * 
 * Created by [Global.Color](https://wiki.facepunch.com/gmod/Global.Color), [Global.HSVToColor](https://wiki.facepunch.com/gmod/Global.HSVToColor), and [Global.HSLToColor](https://wiki.facepunch.com/gmod/Global.HSLToColor).
 * 
 * | Type                | Name  | Description                       |
 * | ------------------- | ----- | --------------------------------- |
 * | [number](https://wiki.facepunch.com/gmod/number) | **r** | The red component of the color.   |
 * | [number](https://wiki.facepunch.com/gmod/number) | **g** | The green component of the color. |
 * | [number](https://wiki.facepunch.com/gmod/number) | **b** | The blue component of the color.  |
 * | [number](https://wiki.facepunch.com/gmod/number) | **a** | The alpha component of the color. |
 */
interface Color {
    

    /**
     * [Shared]
     * 
     * Sets the red, green, blue, and alpha of the color.
     * @param r - The red component
     * @param g - The green component
     * @param b - The blue component
     * @param a - The alpha component
     */
    SetUnpacked(r: number, g: number, b: number, a: number): void;
    
    /**
     * [Shared and Menu]
     * 
     * Converts a [Color](https://wiki.facepunch.com/gmod/Color) into HSL color space. This calls [Global.ColorToHSL](https://wiki.facepunch.com/gmod/Global.ColorToHSL) internally.
     * 
     */
    ToHSL(): LuaMultiReturn<[number, number, number]>;
    
    /**
     * [Shared and Menu]
     * 
     * Converts a [Color](https://wiki.facepunch.com/gmod/Color) into HSV color space. This calls [Global.ColorToHSV](https://wiki.facepunch.com/gmod/Global.ColorToHSV) internally.
     * 
     */
    ToHSV(): LuaMultiReturn<[number, number, number]>;
    
    /**
     * [Shared]
     * 
     * Returns the color as a table with four elements.
     * 
     */
    ToTable(): any;
    
    /**
     * [Shared]
     * 
     * Translates the [Color](https://wiki.facepunch.com/gmod/Color) into a [Vector](https://wiki.facepunch.com/gmod/Vector), losing the alpha channel.
     * This will also range the values from 0 - 255 to 0 - 1
     * 
     * r / 255 -> x<br/>
     * g / 255 -> y<br/>
     * b / 255 -> z
     * 
     * This is the opposite of [Vector:ToColor](https://wiki.facepunch.com/gmod/Vector:ToColor)
     * 
     */
    ToVector(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the red, green, blue, and alpha of the color.
     * 
     */
    Unpack(): LuaMultiReturn<[number, number, number, number]>;

}

/**
 * An object returned by [Global.CreateConVar](https://wiki.facepunch.com/gmod/Global.CreateConVar), [Global.CreateClientConVar](https://wiki.facepunch.com/gmod/Global.CreateClientConVar) (which uses [Global.CreateConVar](https://wiki.facepunch.com/gmod/Global.CreateConVar) internally), and [Global.GetConVar](https://wiki.facepunch.com/gmod/Global.GetConVar).
 * 
 * It represents a console variable. See <page text="this">ConVars</page> page for more information.
 */
interface ConVar {
    

    /**
     * [Shared and Menu]
     * 
     * Tries to convert the current string value of a [ConVar](https://wiki.facepunch.com/gmod/ConVar) to a boolean.
     * 
     */
    GetBool(): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the default value of the [ConVar](https://wiki.facepunch.com/gmod/ConVar)
     * 
     */
    GetDefault(): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the [Enums/FCVAR](https://wiki.facepunch.com/gmod/Enums/FCVAR) flags of the ConVar
     * 
     */
    GetFlags(): FCVAR;
    
    /**
     * [Shared and Menu]
     * 
     * Attempts to convert the [ConVar](https://wiki.facepunch.com/gmod/ConVar) value to a float
     * 
     */
    GetFloat(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the help text assigned to that convar.
     * 
     */
    GetHelpText(): string;
    
    /**
     * [Shared and Menu]
     * 
     * Attempts to convert the [ConVar](https://wiki.facepunch.com/gmod/ConVar) value to a integer.
     * 
     */
    GetInt(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the maximum value of the [ConVar](https://wiki.facepunch.com/gmod/ConVar)
     * 
     */
    GetMax(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the minimum value of the [ConVar](https://wiki.facepunch.com/gmod/ConVar)
     * 
     */
    GetMin(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the name of the [ConVar](https://wiki.facepunch.com/gmod/ConVar).
     * 
     */
    GetName(): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the current [ConVar](https://wiki.facepunch.com/gmod/ConVar) value as a string.
     * 
     */
    GetString(): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns whether the specified flag is set on the [ConVar](https://wiki.facepunch.com/gmod/ConVar)
     * @param flag - The [Enums/FCVAR](https://wiki.facepunch.com/gmod/Enums/FCVAR) flag to test
     */
    IsFlagSet(flag: FCVAR): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Reverts [ConVar](https://wiki.facepunch.com/gmod/ConVar) to its default value
     * 
     * **Note:**
     * >This can only be ran on ConVars created from within Lua.
     * 
     * 
     */
    Revert(): void;
    
    /**
     * [Shared and Menu]
     * 
     * Sets a ConVar's value to 1 or 0 based on the input boolean. This can only be ran on ConVars created from within Lua.
     * @param value - Value to set the ConVar to.
     */
    SetBool(value: boolean): void;
    
    /**
     * [Shared and Menu]
     * 
     * Sets a ConVar's value to the input number.
     * 
     * **Note:**
     * >This can only be ran on ConVars created from within Lua.
     * 
     * @param value - Value to set the ConVar to.
     */
    SetFloat(value: number): void;
    
    /**
     * [Shared and Menu]
     * 
     * Sets a ConVar's value to the input number after converting it to an integer.
     * 
     * **Note:**
     * >This can only be ran on ConVars created from within Lua.
     * 
     * @param value - Value to set the ConVar to.
     */
    SetInt(value: number): void;
    
    /**
     * [Shared and Menu]
     * 
     * Sets a ConVar's value to the input string. This can only be ran on ConVars created from within Lua.
     * @param value - Value to set the ConVar to.
     */
    SetString(value: string): void;

}

/**
 * List of all possible functions to manipulate Recipient Filters. Can be created with [Global.RecipientFilter](https://wiki.facepunch.com/gmod/Global.RecipientFilter).
 */
interface CRecipientFilter {
    

    /**
     * [Server]
     * 
     * Adds all players to the recipient filter.
     * 
     */
    AddAllPlayers(): void;
    
    /**
     * [Server]
     * 
     * Adds all players that are in the same [PAS (Potentially Audible Set)](https://developer.valvesoftware.com/wiki/PAS "PAS - Valve Developer Community") as this position.
     * @param pos - A position that players may be able to hear, usually the position of an entity the sound is playing played from.
     */
    AddPAS(pos: Vector): void;
    
    /**
     * [Server]
     * 
     * Adds a player to the recipient filter
     * @param Player - Player to add to the recipient filter.
     */
    AddPlayer(Player: Player): void;
    
    /**
     * [Server]
     * 
     * Adds players to the recipient filter from a given table or another recipient filter.
     * @param input - The filter to add players from. This can also be a sequential table of players. Non player entities or duplicate players will be ignored.
     */
    AddPlayers(input: CRecipientFilter): void;
    
    /**
     * [Server]
     * 
     * Adds all players that are in the same [PVS (Potential Visibility Set)](https://developer.valvesoftware.com/wiki/PVS "PVS - Valve Developer Community") as this position.
     * @param Position - PVS position that players may be able to see.
     */
    AddPVS(Position: Vector): void;
    
    /**
     * [Server]
     * 
     * Adds all players that are on the given team to the filter.
     * @param teamid - Team index to add players from.
     */
    AddRecipientsByTeam(teamid: number): void;
    
    /**
     * [Server]
     * 
     * Returns the number of valid players in the recipient filter.
     * 
     */
    GetCount(): number;
    
    /**
     * [Server]
     * 
     * Returns a table of all valid players currently in the recipient filter.
     * 
     */
    GetPlayers(): any;
    
    /**
     * [Server]
     * 
     * Removes all players from the recipient filter.
     * 
     */
    RemoveAllPlayers(): void;
    
    /**
     * [Server]
     * 
     * Remove players from this recipient filter that are **NOT** present in a given table or recipient filter.
     * @param input - The filter that contains a list of players to test against. Players **NOT** in the given filter will be removed from this filter.
     * This can also be a sequential table of players. Non player entities will be ignored.
     */
    RemoveMismatchedPlayers(input: CRecipientFilter): void;
    
    /**
     * [Server]
     * 
     * Removes all players from the filter that are in [PAS (Potentially Audible Set)](https://developer.valvesoftware.com/wiki/PAS "PAS - Valve Developer Community") for given position.
     * @param position - The position to test
     */
    RemovePAS(position: Vector): void;
    
    /**
     * [Server]
     * 
     * Removes the player from the recipient filter.
     * @param Player - The player that should be in the recipient filter if you call this function.
     */
    RemovePlayer(Player: Player): void;
    
    /**
     * [Server]
     * 
     * Remove players from this recipient filter that are present in a given table or recipient filter.
     * @param input - The filter that contains a list of players to remove. This can also be a sequential table of players. Non player entities will be ignored. If a player in the given table/filter is not present in this filter, it is ignored.
     */
    RemovePlayers(input: CRecipientFilter): void;
    
    /**
     * [Server]
     * 
     * Removes all players that can see this [PVS (Potential Visibility Set)](https://developer.valvesoftware.com/wiki/PVS "PVS - Valve Developer Community") from the recipient filter.
     * @param pos - Position that players may be able to see.
     */
    RemovePVS(pos: Vector): void;
    
    /**
     * [Server]
     * 
     * Removes all players that are on the given team from the filter.
     * @param teamid - Team index to remove players from.
     */
    RemoveRecipientsByTeam(teamid: number): void;
    
    /**
     * [Server]
     * 
     * Removes all players that are not on the given team from the filter.
     * @param teamid - Team index.
     */
    RemoveRecipientsNotOnTeam(teamid: number): void;

}

/**
 * CSEnt is a client-side only entity which can be created with [Global.ClientsideModel](https://wiki.facepunch.com/gmod/Global.ClientsideModel), [Global.ClientsideRagdoll](https://wiki.facepunch.com/gmod/Global.ClientsideRagdoll) and [Global.ClientsideScene](https://wiki.facepunch.com/gmod/Global.ClientsideScene).
 * 
 * Its base class is [Entity](https://wiki.facepunch.com/gmod/Entity) so it inherits all of the client and shared functions used by [Entity](https://wiki.facepunch.com/gmod/Entity).
 */
interface CSEnt extends Entity {
    

    /**
     * [Client]
     * 
     * Removes the clientside entity
     * 
     */
    Remove(): void;

}

/**
 * CSoundPatch class.
 * 
 * Created with [Global.CreateSound](https://wiki.facepunch.com/gmod/Global.CreateSound)
 */
interface CSoundPatch {
    

    /**
     * [Shared]
     * 
     * Adjust the pitch, alias the speed at which the sound is being played.
     * 
     * This invokes the [GM:EntityEmitSound](https://wiki.facepunch.com/gmod/GM:EntityEmitSound).
     * @param pitch - The pitch can range from 0-255. Where 100 is the original pitch.
     * @param [deltaTime = 0] - The time to fade from previous to the new pitch.
     */
    ChangePitch(pitch: number, deltaTime = 0): void;
    
    /**
     * [Shared]
     * 
     * Adjusts the volume of the sound played.<br/>
     * Appears to only work while the sound is being played.
     * @param volume - The volume ranges from 0 to 1.
     * @param [deltaTime = 0] - Time to fade the volume from previous to new value from.
     */
    ChangeVolume(volume: number, deltaTime = 0): void;
    
    /**
     * [Shared]
     * 
     * Fades out the volume of the sound from the current volume to 0 in the given amount of seconds.
     * @param seconds - Fade time.
     */
    FadeOut(seconds: number): void;
    
    /**
     * [Shared]
     * 
     * Returns the DSP ( Digital Signal Processor ) effect for the sound.
     * 
     */
    GetDSP(): number;
    
    /**
     * [Shared]
     * 
     * Returns the current pitch.
     * 
     */
    GetPitch(): number;
    
    /**
     * [Shared]
     * 
     * Returns the current sound level.
     * 
     */
    GetSoundLevel(): SNDLVL;
    
    /**
     * [Shared]
     * 
     * Returns the current volume.
     * 
     */
    GetVolume(): number;
    
    /**
     * [Shared]
     * 
     * Returns whenever the sound is being played.
     * 
     */
    IsPlaying(): boolean;
    
    /**
     * [Shared]
     * 
     * Starts to play the sound. This will reset the sound's volume and pitch to their default values. See [CSoundPatch:PlayEx](https://wiki.facepunch.com/gmod/CSoundPatch:PlayEx)
     * 
     */
    Play(): void;
    
    /**
     * [Shared]
     * 
     * Same as [CSoundPatch:Play](https://wiki.facepunch.com/gmod/CSoundPatch:Play) but with 2 extra arguments allowing to set volume and pitch directly.
     * @param volume - The volume ranges from 0 to 1.
     * @param pitch - The pitch can range from 0-255.
     */
    PlayEx(volume: number, pitch: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the DSP (Digital Signal Processor) effect for the sound. Similar to [Player:SetDSP](https://wiki.facepunch.com/gmod/Player:SetDSP) but for individual sounds.
     * @param dsp - The DSP effect to set.
     * Pick from the [list of DSP's](https://developer.valvesoftware.com/wiki/Dsp_presets)
     */
    SetDSP(dsp: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the sound level in decibel.
     * @param level - The sound level in decibel. See [Enums/SNDLVL](https://wiki.facepunch.com/gmod/Enums/SNDLVL)
     */
    SetSoundLevel(level: SNDLVL): void;
    
    /**
     * [Shared]
     * 
     * Stops the sound from being played.
     * 
     * **Bug [#3260](https://github.com/Facepunch/garrysmod-issues/issues/3260):**
     * >This will not work if the entity attached to this sound patch (specified by [Global.CreateSound](https://wiki.facepunch.com/gmod/Global.CreateSound)) is invalid.
     * 
     * 
     */
    Stop(): void;

}

/**
 * A class used to store and modify all the data concerning a damage event.
 * An empty CTakeDamageInfo object can be created with [Global.DamageInfo](https://wiki.facepunch.com/gmod/Global.DamageInfo)
 * 
 * List of hooks that this object is passed to:
 * * [ENTITY:OnTakeDamage](https://wiki.facepunch.com/gmod/ENTITY:OnTakeDamage)
 * * [GM:DoPlayerDeath](https://wiki.facepunch.com/gmod/GM:DoPlayerDeath)
 * * [GM:EntityTakeDamage](https://wiki.facepunch.com/gmod/GM:EntityTakeDamage)
 * * [GM:PostEntityTakeDamage](https://wiki.facepunch.com/gmod/GM:PostEntityTakeDamage)
 * * [GM:OnDamagedByExplosion](https://wiki.facepunch.com/gmod/GM:OnDamagedByExplosion)
 * * [GM:ScaleNPCDamage](https://wiki.facepunch.com/gmod/GM:ScaleNPCDamage)
 * * [GM:ScalePlayerDamage](https://wiki.facepunch.com/gmod/GM:ScalePlayerDamage)
 * * [NEXTBOT:OnInjured](https://wiki.facepunch.com/gmod/NEXTBOT:OnInjured)
 * * [NEXTBOT:OnKilled](https://wiki.facepunch.com/gmod/NEXTBOT:OnKilled)
 * * [NEXTBOT:OnOtherKilled](https://wiki.facepunch.com/gmod/NEXTBOT:OnOtherKilled)
 * 
 * List of functions that use this object:
 * * [util.BlastDamageInfo](https://wiki.facepunch.com/gmod/util.BlastDamageInfo)
 * * [Entity:TakeDamageInfo](https://wiki.facepunch.com/gmod/Entity:TakeDamageInfo)
 * * [Entity:TakePhysicsDamage](https://wiki.facepunch.com/gmod/Entity:TakePhysicsDamage)
 * * [Entity:DispatchTraceAttack](https://wiki.facepunch.com/gmod/Entity:DispatchTraceAttack)
 */
interface CTakeDamageInfo {
    

    /**
     * [Shared]
     * 
     * Increases the damage by damageIncrease.
     * @param damageIncrease - The damage to add.
     */
    AddDamage(damageIncrease: number): void;
    
    /**
     * [Shared]
     * 
     * Returns the ammo type used by the weapon that inflicted the damage.
     * 
     */
    GetAmmoType(): number;
    
    /**
     * [Shared]
     * 
     * Returns the attacker ( character who originated the attack ), for example a player or an NPC that shot the weapon.
     * 
     */
    GetAttacker(): Entity;
    
    /**
     * [Shared]
     * 
     * Returns the initial unmodified by skill level ( [game.GetSkillLevel](https://wiki.facepunch.com/gmod/game.GetSkillLevel) ) damage.
     * 
     */
    GetBaseDamage(): number;
    
    /**
     * [Shared]
     * 
     * Returns the total damage.
     * 
     */
    GetDamage(): number;
    
    /**
     * [Shared]
     * 
     * Gets the current bonus damage.
     * 
     */
    GetDamageBonus(): number;
    
    /**
     * [Shared]
     * 
     * Gets the custom damage type. This is used by Day of Defeat: Source and Team Fortress 2 for extended damage info, but isn't used in Garry's Mod by default.
     * 
     */
    GetDamageCustom(): number;
    
    /**
     * [Shared]
     * 
     * Returns a vector representing the damage force.
     * 
     * Can be set with [CTakeDamageInfo:SetDamageForce](https://wiki.facepunch.com/gmod/CTakeDamageInfo:SetDamageForce).
     * 
     */
    GetDamageForce(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the position where the damage was or is going to be applied to.
     * 
     * Can be set using [CTakeDamageInfo:SetDamagePosition](https://wiki.facepunch.com/gmod/CTakeDamageInfo:SetDamagePosition).
     * 
     */
    GetDamagePosition(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns a bitflag which indicates the damage type(s) of the damage.
     * 
     * Consider using [CTakeDamageInfo:IsDamageType](https://wiki.facepunch.com/gmod/CTakeDamageInfo:IsDamageType) instead. Value returned by this function can contain multiple damage types.
     * 
     */
    GetDamageType(): DMG;
    
    /**
     * [Shared]
     * 
     * Returns the inflictor of the damage. This is not necessarily a weapon.
     * 
     * For hitscan weapons this is the weapon.
     * 
     * For projectile weapons this is the projectile.
     * 
     * For a more reliable method of getting the weapon that damaged an entity, use <page text="GetAttacker">CTakeDamageInfo:GetAttacker</page> with <page text="GetActiveWeapon">Player:GetActiveWeapon</page>.
     * 
     */
    GetInflictor(): Entity;
    
    /**
     * [Shared]
     * 
     * Returns the maximum damage. See [CTakeDamageInfo:SetMaxDamage](https://wiki.facepunch.com/gmod/CTakeDamageInfo:SetMaxDamage)
     * 
     */
    GetMaxDamage(): number;
    
    /**
     * [Shared]
     * 
     * Returns the initial, unmodified position where the damage occured.
     * 
     */
    GetReportedPosition(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns true if the damage was caused by a bullet.
     * 
     */
    IsBulletDamage(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whenever the damageinfo contains the damage type specified.
     * @param dmgType - Damage type to test. See [Enums/DMG](https://wiki.facepunch.com/gmod/Enums/DMG).
     */
    IsDamageType(dmgType: DMG): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whenever the damageinfo contains explosion damage.
     * 
     */
    IsExplosionDamage(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whenever the damageinfo contains fall damage.
     * 
     */
    IsFallDamage(): boolean;
    
    /**
     * [Shared]
     * 
     * Scales the damage by the given value.
     * @param scale - Value to scale the damage with.
     */
    ScaleDamage(scale: number): void;
    
    /**
     * [Shared]
     * 
     * Changes the ammo type used by the weapon that inflicted the damage.
     * @param ammoType - Ammo type ID
     */
    SetAmmoType(ammoType: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the attacker ( character who originated the attack ) of the damage, for example a player or an NPC.
     * @param ent - The entity to be set as the attacker.
     */
    SetAttacker(ent: Entity): void;
    
    /**
     * [Shared]
     * 
     * Sets the initial unmodified by skill level ( [game.GetSkillLevel](https://wiki.facepunch.com/gmod/game.GetSkillLevel) ) damage. This function will not update or touch [CTakeDamageInfo:GetDamage](https://wiki.facepunch.com/gmod/CTakeDamageInfo:GetDamage).
     * @param __unnamedArg - baseDamage
     */
    SetBaseDamage(__unnamedArg: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the amount of damage.
     * @param damage - The value to set the absolute damage to.
     */
    SetDamage(damage: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the bonus damage. Bonus damage isn't automatically applied, so this will have no outer effect by default.
     * @param damage - The extra damage to be added.
     */
    SetDamageBonus(damage: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the custom damage type. This is used by Day of Defeat: Source and Team Fortress 2 for extended damage info, but isn't used in Garry's Mod by default.
     * @param DamageType - Any integer - can be based on your own custom enums.
     */
    SetDamageCustom(DamageType: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the directional force of the damage.
     * 
     * **Note:**
     * >This function seems to have no effect on player knockback. To disable knockback entirely, see [EFL_NO_DAMAGE_FORCES](https://wiki.facepunch.com/gmod/Enums/EFL#EFL_NO_DAMAGE_FORCES) or use workaround example below.
     * 
     * @param force - The vector to set the force to.
     */
    SetDamageForce(force: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the position of where the damage gets applied to.
     * @param pos - The position where the damage will be applied.
     */
    SetDamagePosition(pos: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the damage type.
     * @param type - The damage type, see [Enums/DMG](https://wiki.facepunch.com/gmod/Enums/DMG).
     */
    SetDamageType(type: DMG): void;
    
    /**
     * [Shared]
     * 
     * Sets the inflictor of the damage for example a weapon.
     * 
     * For hitscan/bullet weapons this should the weapon.
     * 
     * For projectile ( rockets, etc ) weapons this should be the projectile.
     * @param inflictor - The new inflictor.
     */
    SetInflictor(inflictor: Entity): void;
    
    /**
     * [Shared]
     * 
     * Sets the maximum damage this damage event can cause.
     * @param maxDamage - Maximum damage value.
     */
    SetMaxDamage(maxDamage: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the origin of the damage.
     * @param pos - The location of where the damage is originating
     */
    SetReportedPosition(pos: Vector): void;
    
    /**
     * [Shared]
     * 
     * Subtracts the specified amount from the damage.
     * @param damage - Value to subtract.
     */
    SubtractDamage(damage: number): void;

}

/**
 * A class used to store the player inputs, such as mouse movement, view angles, [Enums/IN](https://wiki.facepunch.com/gmod/Enums/IN) buttons pressed and analog movement, the data from this class is then transfered to a [CMoveData](https://wiki.facepunch.com/gmod/CMoveData) during actual movement simulation.
 * 
 * Can be modified during [GM:CreateMove](https://wiki.facepunch.com/gmod/GM:CreateMove), [GM:StartCommand](https://wiki.facepunch.com/gmod/GM:StartCommand) and used in read only with [GM:SetupMove](https://wiki.facepunch.com/gmod/GM:SetupMove) and [Player:GetCurrentCommand](https://wiki.facepunch.com/gmod/Player:GetCurrentCommand).
 */
interface CUserCmd {
    

    /**
     * [Shared]
     * 
     * Adds a single key to the active buttons bitflag. See also [CUserCmd:SetButtons](https://wiki.facepunch.com/gmod/CUserCmd:SetButtons).
     * @param key - Key to add, see [Enums/IN](https://wiki.facepunch.com/gmod/Enums/IN).
     */
    AddKey(key: IN): void;
    
    /**
     * [Shared]
     * 
     * Removes all keys from the command.
     * 
     * **Note:**
     * >If you are looking to affect player movement, you may need to use [CUserCmd:ClearMovement](https://wiki.facepunch.com/gmod/CUserCmd:ClearMovement) instead of clearing the buttons.
     * 
     * 
     */
    ClearButtons(): void;
    
    /**
     * [Shared]
     * 
     * Clears the movement from the command.
     * 
     * See also [CUserCmd:SetForwardMove](https://wiki.facepunch.com/gmod/CUserCmd:SetForwardMove), [CUserCmd:SetSideMove](https://wiki.facepunch.com/gmod/CUserCmd:SetSideMove) and  [CUserCmd:SetUpMove](https://wiki.facepunch.com/gmod/CUserCmd:SetUpMove).
     * 
     */
    ClearMovement(): void;
    
    /**
     * [Shared]
     * 
     * Returns an increasing number representing the index of the user cmd.
     * 
     * **Warning:**
     * >The value returned is occasionally 0 inside [GM:CreateMove](https://wiki.facepunch.com/gmod/GM:CreateMove) and [GM:StartCommand](https://wiki.facepunch.com/gmod/GM:StartCommand). It is advised to check for a non-zero value if you wish to get the correct number.
     * 
     * 
     */
    CommandNumber(): number;
    
    /**
     * [Shared]
     * 
     * Returns a bitflag indicating which buttons are pressed.
     * 
     */
    GetButtons(): IN;
    
    /**
     * [Shared]
     * 
     * The speed the client wishes to move forward with, negative if the clients wants to move backwards.
     * 
     */
    GetForwardMove(): number;
    
    /**
     * [Shared]
     * 
     * Gets the current impulse from the client, usually 0. [See impulses list](https://developer.valvesoftware.com/wiki/Impulse) and some <page text="GMod specific impulses">CUserCmd:SetImpulse</page>.
     * 
     */
    GetImpulse(): number;
    
    /**
     * [Shared]
     * 
     * Returns the scroll delta as whole number.
     * 
     */
    GetMouseWheel(): number;
    
    /**
     * [Shared]
     * 
     * Returns the delta of the angular horizontal mouse movement of the player.
     * 
     */
    GetMouseX(): number;
    
    /**
     * [Shared]
     * 
     * Returns the delta of the angular vertical mouse movement of the player.
     * 
     */
    GetMouseY(): number;
    
    /**
     * [Shared]
     * 
     * The speed the client wishes to move sideways with, positive if it wants to move right, negative if it wants to move left.
     * 
     */
    GetSideMove(): number;
    
    /**
     * [Shared]
     * 
     * The speed the client wishes to move up with, negative if the clients wants to move down.
     * 
     */
    GetUpMove(): number;
    
    /**
     * [Shared]
     * 
     * Gets the direction the player is looking in.
     * 
     */
    GetViewAngles(): Angle;
    
    /**
     * [Shared]
     * 
     * When players are not sending usercommands to the server (often due to lag), their last usercommand will be executed multiple times as a backup. This function returns true if that is happening.
     * 
     * This will never return true clientside.
     * 
     */
    IsForced(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns true if the specified button(s) is pressed.
     * @param key - Bitflag representing which button to check, see [Enums/IN](https://wiki.facepunch.com/gmod/Enums/IN).
     */
    KeyDown(key: IN): boolean;
    
    /**
     * [Shared]
     * 
     * Removes a key bit from the current key bitflag.
     * 
     * For movement you will want to use [CUserCmd:SetForwardMove](https://wiki.facepunch.com/gmod/CUserCmd:SetForwardMove), [CUserCmd:SetUpMove](https://wiki.facepunch.com/gmod/CUserCmd:SetUpMove) and [CUserCmd:SetSideMove](https://wiki.facepunch.com/gmod/CUserCmd:SetSideMove).
     * @param button - Bitflag to be removed from the key bitflag, see [Enums/IN](https://wiki.facepunch.com/gmod/Enums/IN).
     */
    RemoveKey(button: IN): void;
    
    /**
     * [Shared]
     * 
     * Forces the associated player to select a weapon. This is used internally in the default HL2 weapon selection HUD.
     * 
     * This may not work immediately if the current command is in prediction. Use [input.SelectWeapon](https://wiki.facepunch.com/gmod/input.SelectWeapon) to switch the weapon from the client when the next available command can do so.
     * 
     * **Note:**
     * >This is the ideal function to use to create a custom weapon selection HUD, as it allows prediction to run properly for [WEAPON:Deploy](https://wiki.facepunch.com/gmod/WEAPON:Deploy) and [GM:PlayerSwitchWeapon](https://wiki.facepunch.com/gmod/GM:PlayerSwitchWeapon)
     * 
     * @param weapon - The weapon entity to select.
     */
    SelectWeapon(weapon: Weapon): void;
    
    /**
     * [Shared]
     * 
     * Sets the buttons as a bitflag. See also [CUserCmd:GetButtons](https://wiki.facepunch.com/gmod/CUserCmd:GetButtons).
     * 
     * **Note:**
     * >If you are looking to affect player movement, you may need to use [CUserCmd:SetForwardMove](https://wiki.facepunch.com/gmod/CUserCmd:SetForwardMove) instead of setting the keys.
     * 
     * @param buttons - Bitflag representing which buttons are "down", see [Enums/IN](https://wiki.facepunch.com/gmod/Enums/IN).
     */
    SetButtons(buttons: IN): void;
    
    /**
     * [Shared]
     * 
     * Sets speed the client wishes to move forward with, negative if the clients wants to move backwards.
     * 
     * See also [CUserCmd:ClearMovement](https://wiki.facepunch.com/gmod/CUserCmd:ClearMovement), [CUserCmd:SetSideMove](https://wiki.facepunch.com/gmod/CUserCmd:SetSideMove) and [CUserCmd:SetUpMove](https://wiki.facepunch.com/gmod/CUserCmd:SetUpMove).
     * @param speed - The new speed to request. The client will not be able to move faster than their set walk/sprint speed.
     */
    SetForwardMove(speed: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the impulse command to be sent to the server.
     * 
     * Here are a few examples of impulse numbers:
     * - `100` toggles their flashlight
     * - `101` gives the player all Half-Life 2 weapons with `sv_cheats` set to `1`
     * - `200` toggles holstering / restoring the current weapon  
     *   When holstered, the `EF_NODRAW` flag is set on the active weapon.
     * - `154` toggles noclip
     * 
     * [See full list](https://developer.valvesoftware.com/wiki/Impulse)
     * @param impulse - The impulse to send.
     */
    SetImpulse(impulse: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the scroll delta.
     * @param speed - The scroll delta.
     */
    SetMouseWheel(speed: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the delta of the angular horizontal mouse movement of the player.
     * 
     * See also [CUserCmd:SetMouseY](https://wiki.facepunch.com/gmod/CUserCmd:SetMouseY).
     * @param speed - Angular horizontal move delta.
     */
    SetMouseX(speed: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the delta of the angular vertical mouse movement of the player.
     * 
     * See also [CUserCmd:SetMouseX](https://wiki.facepunch.com/gmod/CUserCmd:SetMouseX).
     * @param speed - Angular vertical move delta.
     */
    SetMouseY(speed: number): void;
    
    /**
     * [Shared]
     * 
     * Sets speed the client wishes to move sidewards with, positive to move right, negative to move left.
     * 
     * See also [CUserCmd:SetForwardMove](https://wiki.facepunch.com/gmod/CUserCmd:SetForwardMove) and  [CUserCmd:SetUpMove](https://wiki.facepunch.com/gmod/CUserCmd:SetUpMove).
     * @param speed - The new speed to request.
     */
    SetSideMove(speed: number): void;
    
    /**
     * [Shared]
     * 
     * Sets speed the client wishes to move upwards with, negative to move down.
     * 
     * See also [CUserCmd:SetSideMove](https://wiki.facepunch.com/gmod/CUserCmd:SetSideMove) and  [CUserCmd:SetForwardMove](https://wiki.facepunch.com/gmod/CUserCmd:SetForwardMove).
     * 
     * **Note:**
     * >This function does **not** move the client up/down ladders. To force ladder movement, consider [CUserCMD:SetButtons](https://wiki.facepunch.com/gmod/CUserCMD:SetButtons) and use IN_FORWARD from [Enums/IN](https://wiki.facepunch.com/gmod/Enums/IN).
     * 
     * @param speed - The new speed to request.
     */
    SetUpMove(speed: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the direction the client wants to move in.
     * 
     * **Note:**
     * >For human players, the pitch (vertical) angle should be clamped to +/- 89&amp;deg; to prevent the player's view from glitching.
     * 
     * **Note:**
     * >For fake clients (those created with [player.CreateNextBot](https://wiki.facepunch.com/gmod/player.CreateNextBot)), this functionally dictates the 'move angles' of the bot. This typically functions separately from the colloquial view angles. This can be utilized by [CUserCmd:SetForwardMove](https://wiki.facepunch.com/gmod/CUserCmd:SetForwardMove) and its related functions.
     * 
     * @param viewAngle - New view angles.
     */
    SetViewAngles(viewAngle: Angle): void;
    
    /**
     * [Shared]
     * 
     * Returns tick count since joining the server.
     * 
     * **Note:**
     * >This will always return 0 for bots.
     * 
     * **Note:**
     * >Returns 0 clientside during prediction calls. If you are trying to use CUserCmd:Set*() on the client in a movement or command hook, keep doing so till TickCount returns a non-zero number to maintain prediction.
     * 
     * 
     */
    TickCount(): number;

}

/**
 * This is a list of all available methods for all entities, which includes <page text="Players">Player</page>, <page text="Weapons">Weapon</page>, <page text="NPCs">NPC</page> and <page text="Vehicles">Vehicle</page>.
 * 
 * For a list of possible members of [Scripted Entities](https://wiki.facepunch.com/gmod/Scripted_Entities) see <page text="ENT Structure">Structures/ENT</page>
 */
interface Entity {
    

    /**
     * [Shared]
     * 
     * Activates the entity. This needs to be used on some entities (like constraints) after being spawned.
     * 
     * **Bug [#3372](https://github.com/Facepunch/garrysmod-issues/issues/3372):**
     * >This crashes the game with scaled vehicles.
     * 
     * **Note:**
     * >For some entity types when this function is used after [Entity:SetModelScale](https://wiki.facepunch.com/gmod/Entity:SetModelScale), the physics object will be recreated with the new scale. [Source-sdk-2013](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/baseanimating.cpp#L321-L327).
     * 
     * Calling this method after [Entity:SetModelScale](https://wiki.facepunch.com/gmod/Entity:SetModelScale) will recreate a new scaled `SOLID_VPHYSICS` [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) on scripted entities. This can be a problem if you made a properly scaled [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) of another kind (using [Entity:PhysicsInitSphere](https://wiki.facepunch.com/gmod/Entity:PhysicsInitSphere) for instance) or if you edited the [PhysObj](https://wiki.facepunch.com/gmod/PhysObj)'s properties. This is especially the behavior of the Sandbox spawn menu.
     * 
     * 
     */
    Activate(): void;
    
    /**
     * [Shared]
     * 
     * Add a callback function to a specific event. This is used instead of hooks to avoid calling empty functions unnecessarily.
     * 
     * This also allows you to use certain hooks in engine entities (non-scripted entities).
     * 
     * **Warning:**
     * >This method does not check if the function has already been added to this object before, so if you add the same callback twice, it will be run twice! Make sure to add your callback only once.
     * 
     * @param hook - The hook name to hook onto. See [Entity Callbacks](https://wiki.facepunch.com/gmod/Entity_Callbacks)
     * @param func - The function to call
     */
    AddCallback(hook: string, func: Function): number;
    
    /**
     * [Shared]
     * 
     * Applies an engine effect to an entity.
     * 
     * See also [Entity:IsEffectActive](https://wiki.facepunch.com/gmod/Entity:IsEffectActive) and  [Entity:RemoveEffects](https://wiki.facepunch.com/gmod/Entity:RemoveEffects).
     * @param effect - The effect to apply, see [Enums/EF](https://wiki.facepunch.com/gmod/Enums/EF).
     */
    AddEffects(effect: EF): void;
    
    /**
     * [Shared]
     * 
     * Adds engine flags.
     * @param flag - Engine flag to add, see [Enums/EFL](https://wiki.facepunch.com/gmod/Enums/EFL)
     */
    AddEFlags(flag: EFL): void;
    
    /**
     * [Shared]
     * 
     * Adds flags to the entity.
     * @param flag - Flag to add, see [Enums/FL](https://wiki.facepunch.com/gmod/Enums/FL)
     */
    AddFlags(flag: FL): void;
    
    /**
     * [Server]
     * 
     * Adds a gesture animation to the entity and plays it.
     * 
     * See [Entity:AddGestureSequence](https://wiki.facepunch.com/gmod/Entity:AddGestureSequence) and [Entity:AddLayeredSequence](https://wiki.facepunch.com/gmod/Entity:AddLayeredSequence) for functions that takes sequences instead of [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT).
     * 
     * **Note:**
     * >This function only works on [BaseAnimatingOverlay](https://wiki.facepunch.com/gmod/BaseAnimatingOverlay) entites!
     * 
     * @param activity - The activity to play as the gesture. See [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT).
     * @param [autokill = true] - 
     */
    AddGesture(activity: ACT, autokill = true): number;
    
    /**
     * [Server]
     * 
     * Adds a gesture animation to the entity and plays it.
     * 
     * See [Entity:AddGesture](https://wiki.facepunch.com/gmod/Entity:AddGesture) for a function that takes [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT).
     * 
     * See also [Entity:AddLayeredSequence](https://wiki.facepunch.com/gmod/Entity:AddLayeredSequence).
     * 
     * **Note:**
     * >This function only works on [BaseAnimatingOverlay](https://wiki.facepunch.com/gmod/BaseAnimatingOverlay) entites!
     * 
     * @param sequence - The sequence ID to play as the gesture. See [Entity:LookupSequence](https://wiki.facepunch.com/gmod/Entity:LookupSequence).
     * @param [autokill = true] - 
     */
    AddGestureSequence(sequence: number, autokill = true): number;
    
    /**
     * [Server]
     * 
     * Adds a gesture animation to the entity and plays it.
     * 
     * See [Entity:AddGestureSequence](https://wiki.facepunch.com/gmod/Entity:AddGestureSequence) for a function that doesn't take priority.
     * 
     * See [Entity:AddGesture](https://wiki.facepunch.com/gmod/Entity:AddGesture) for a function that takes [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT).
     * 
     * **Note:**
     * >This function only works on [BaseAnimatingOverlay](https://wiki.facepunch.com/gmod/BaseAnimatingOverlay) entites!
     * 
     * @param sequence - The sequence ID to play as the gesture. See [Entity:LookupSequence](https://wiki.facepunch.com/gmod/Entity:LookupSequence).
     * @param priority - 
     */
    AddLayeredSequence(sequence: number, priority: number): number;
    
    /**
     * [Shared]
     * 
     * Adds solid flag(s) to the entity.
     * @param flags - The flag(s) to apply, see [Enums/FSOLID](https://wiki.facepunch.com/gmod/Enums/FSOLID).
     */
    AddSolidFlags(flags: FSOLID): void;
    
    /**
     * [Shared]
     * 
     * Adds a [PhysObj](https://wiki.facepunch.com/gmod/PhysObj)ect to the entity's motion controller so that [ENTITY:PhysicsSimulate](https://wiki.facepunch.com/gmod/ENTITY:PhysicsSimulate) will be called for given [PhysObj](https://wiki.facepunch.com/gmod/PhysObj)ect as well.
     * 
     * You must first create a motion controller with [Entity:StartMotionController](https://wiki.facepunch.com/gmod/Entity:StartMotionController).
     * 
     * You can remove added [PhysObj](https://wiki.facepunch.com/gmod/PhysObj)ects by using [Entity:RemoveFromMotionController](https://wiki.facepunch.com/gmod/Entity:RemoveFromMotionController).
     * 
     * **Note:**
     * >Only works on a scripted [Entity](https://wiki.facepunch.com/gmod/Entity) of anim type
     * 
     * @param physObj - The [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) to add to the motion controller.
     */
    AddToMotionController(physObj: PhysObj): void;
    
    /**
     * [Shared]
     * 
     * Returns an angle based on the ones inputted that you can use to align an object.
     * 
     * **Note:**
     * >This function doesn't change the angle of the entity on its own (see example).
     * 
     * @param from - The angle you want to align from
     * @param to - The angle you want to align to
     */
    AlignAngles(from: Angle, to: Angle): Angle;
    
    /**
     * [Client]
     * 
     * Spawns a clientside ragdoll for the entity, positioning it in place of the original entity, and makes the entity invisible. It doesn't preserve flex values (face posing) as CSRagdolls don't support flex.
     * 
     * It does not work on players. Use [Player:CreateRagdoll](https://wiki.facepunch.com/gmod/Player:CreateRagdoll) instead.
     * 
     * The original entity is not removed, and neither are any ragdolls previously generated with this function.
     * 
     * To make the entity re-appear, run [Entity:SetNoDraw](https://wiki.facepunch.com/gmod/Entity:SetNoDraw)( false )
     * 
     */
    BecomeRagdollOnClient(): Entity;
    
    /**
     * [Client]
     * 
     * Returns true if the entity is being looked at by the local player and is within 256 units of distance.
     * 
     * **Note:**
     * >This function is only available in entities that are based off of sandbox's base_gmodentity.
     * 
     * 
     */
    BeingLookedAtByLocalPlayer(): boolean;
    
    /**
     * [Server]
     * 
     * Dispatches blocked events to this entity's blocked handler. This function is only useful when interacting with entities like func_movelinear.
     * @param entity - The entity that is blocking us
     */
    Blocked(entity: Entity): void;
    
    /**
     * [Server]
     * 
     * Returns a centered vector of this entity, NPCs use this internally to aim at their targets.
     * 
     * **Note:**
     * >This only works on players and NPCs.
     * 
     * @param origin - The vector of where the the attack comes from.
     * @param [noisy = false] - Decides if it should return the centered vector with a random offset to it.
     */
    BodyTarget(origin: Vector, noisy = false): Vector;
    
    /**
     * [Shared]
     * 
     * Returns whether the entity's bone has the flag or not.
     * @param boneID - Bone ID to test flag of.
     * @param flag - The flag to test, see [Enums/BONE](https://wiki.facepunch.com/gmod/Enums/BONE)
     */
    BoneHasFlag(boneID: number, flag: BONE): boolean;
    
    /**
     * [Shared]
     * 
     * Returns the length between given bone's position and the position of given bone's parent.
     * @param boneID - The ID of the bone you want the length of. You may want to get the length of the next bone ( boneID + 1 ) for decent results
     */
    BoneLength(boneID: number): number;
    
    /**
     * [Shared]
     * 
     * Returns the distance between the center of the bounding box and the furthest bounding box corner.
     * 
     */
    BoundingRadius(): number;
    
    /**
     * [Shared]
     * 
     * Calls all [Entity:NetworkVarNotify](https://wiki.facepunch.com/gmod/Entity:NetworkVarNotify) functions with the given new value, but doesn't change the real value.
     * @param Type - The NetworkVar Type.
     * * `String`
     * * `Bool`
     * * `Float`
     * * `Int` (32-bit signed integer)
     * * `Vector`
     * * `Angle`
     * * `Entity`
     * @param index - The NetworkVar index.
     * @param new_value - The new value.
     */
    CallDTVarProxies(Type: string, index: number, new_value: any): void;
    
    /**
     * [Shared]
     * 
     * Causes a specified function to be run if the entity is removed by any means. This can later be undone by [Entity:RemoveCallOnRemove](https://wiki.facepunch.com/gmod/Entity:RemoveCallOnRemove) if you need it to not run.
     * 
     * **Warning:**
     * >This hook is called clientside during full updates. See [GM:EntityRemoved](https://wiki.facepunch.com/gmod/GM:EntityRemoved) for more information.
     * 
     * @param identifier - Identifier that can be optionally used with [Entity:RemoveCallOnRemove](https://wiki.facepunch.com/gmod/Entity:RemoveCallOnRemove) to undo this call on remove.
     * @param removeFunc - Function to be called on remove
     * @param args - Optional arguments to pass to removeFunc. Do note that the first argument passed to the function will always be the entity being removed, and the arguments passed on here start after that.
     */
    CallOnRemove(identifier: string, removeFunc: Function, ...args: any[]): void;
    
    /**
     * [Server]
     * 
     * Clears all registered events for map I/O outputs on this entity. If a string is given, will use the string as a wildcard to limit removed outputs by name matches.
     * @param [outputName = nil] - An optional string that will be used to limit removed outputs by name matches, supports wildcards.
     */
    ClearAllOutputs(outputName?: string): void;
    
    /**
     * [Shared]
     * 
     * Resets all pose parameters such as aim_yaw, aim_pitch and rotation.
     * 
     */
    ClearPoseParameters(): void;
    
    /**
     * [Shared]
     * 
     * Declares that the collision rules of the entity have changed, and subsequent calls for [GM:ShouldCollide](https://wiki.facepunch.com/gmod/GM:ShouldCollide) with this entity may return a different value than they did previously.
     * 
     * **Warning:**
     * >This function must **not** be called inside of [GM:ShouldCollide](https://wiki.facepunch.com/gmod/GM:ShouldCollide). Instead, it must be called in advance when the condition is known to change.
     * 
     * **Warning:**
     * >Failure to use this function correctly will result in a crash of the physics engine.
     * 
     * 
     */
    CollisionRulesChanged(): void;
    
    /**
     * [Server]
     * 
     * Creates bone followers based on the current entity model.
     * 
     * Bone followers are physics objects that follow the visual mesh. This is what is used by `prop_dynamic` for things like big combine doors for vehicles with multiple physics objects which follow the visual mesh of the door when it animates.
     * 
     * You must call [Entity:UpdateBoneFollowers](https://wiki.facepunch.com/gmod/Entity:UpdateBoneFollowers) every tick for bone followers to update their positions.
     * 
     * **Note:**
     * >This function only works on `anim` type entities.
     * 
     * 
     */
    CreateBoneFollowers(): void;
    
    /**
     * [Shared]
     * 
     * Returns whether the entity was created by map or not.
     * 
     */
    CreatedByMap(): boolean;
    
    /**
     * [Client]
     * 
     * Creates a clientside particle system attached to the entity. See also [Global.CreateParticleSystem](https://wiki.facepunch.com/gmod/Global.CreateParticleSystem)
     * 
     * **Note:**
     * >The particle effect must be precached with [Global.PrecacheParticleSystem](https://wiki.facepunch.com/gmod/Global.PrecacheParticleSystem) and the file its from must be added via [game.AddParticles](https://wiki.facepunch.com/gmod/game.AddParticles) before it can be used!
     * 
     * @param particle - The particle name to create
     * @param attachment - Attachment ID to attach the particle to
     * @param [options = nil] - A table of tables ( IDs 1 to 64 ) having the following structure:
     * * [number](https://wiki.facepunch.com/gmod/number) attachtype - The particle attach type. See <page text='PATTACH'>Enums/PATTACH</page>. **Default:** PATTACH_ABSORIGIN
     * * [Entity](https://wiki.facepunch.com/gmod/Entity) entity - The parent entity? **Default:** NULL
     * * [Vector](https://wiki.facepunch.com/gmod/Vector) position - The offset position for given control point. **Default:**  nil
     * This only affects the control points of the particle effects and will do nothing if the effect doesn't use control points.
     */
    CreateParticleEffect(particle: string, attachment: number, options?: any): CNewParticleEffect;
    
    /**
     * [Client]
     * 
     * Draws the shadow of an entity.
     * 
     */
    CreateShadow(): void;
    
    /**
     * [Server]
     * 
     * Whenever the entity is removed, entityToRemove will be removed also.
     * @param entityToRemove - The entity to be removed
     */
    DeleteOnRemove(entityToRemove: Entity): void;
    
    /**
     * [Server]
     * 
     * Destroys bone followers created by [Entity:CreateBoneFollowers](https://wiki.facepunch.com/gmod/Entity:CreateBoneFollowers).
     * 
     * **Note:**
     * >This function only works on `anim` type entities.
     * 
     * 
     */
    DestroyBoneFollowers(): void;
    
    /**
     * [Client]
     * 
     * Removes the shadow for the entity.
     * 
     * The shadow will be recreated as soon as the entity wakes.
     * 
     * **Note:**
     * >Doesn't affect shadows from flashlight/lamps/env_projectedtexture.
     * 
     * 
     */
    DestroyShadow(): void;
    
    /**
     * [Client]
     * 
     * Disables an active matrix.
     * @param matrixType - The name of the matrix type to disable.
     * The only known matrix type is "RenderMultiply".
     */
    DisableMatrix(matrixType: string): void;
    
    /**
     * [Shared]
     * 
     * Performs a trace attack towards the entity this function is called on. Visually identical to [Entity:TakeDamageInfo](https://wiki.facepunch.com/gmod/Entity:TakeDamageInfo).
     * 
     * **Warning:**
     * >Calling this function on the victim entity in [ENTITY:OnTakeDamage](https://wiki.facepunch.com/gmod/ENTITY:OnTakeDamage) can cause infinite loops.
     * 
     * @param damageInfo - The damage to apply.
     * @param traceRes - Trace result to use to deal damage. See [Structures/TraceResult](https://wiki.facepunch.com/gmod/Structures/TraceResult)
     * @param [dir = traceRes.HitNormal] - Direction of the attack.
     */
    DispatchTraceAttack(damageInfo: CTakeDamageInfo, traceRes: TraceResult, dir?: Vector): void;
    
    /**
     * [Server]
     * 
     * This removes the argument entity from an ent's list of entities to 'delete on remove'
     * 
     * **Note:**
     * >Also see [Entity:DeleteOnRemove](https://wiki.facepunch.com/gmod/Entity:DeleteOnRemove)
     * 
     * @param entityToUnremove - The entity to be removed from the list of entities to delete
     */
    DontDeleteOnRemove(entityToUnremove: Entity): void;
    
    /**
     * [Client]
     * 
     * Draws the entity or model.
     * 
     * If called inside [ENTITY:Draw](https://wiki.facepunch.com/gmod/ENTITY:Draw) or [ENTITY:DrawTranslucent](https://wiki.facepunch.com/gmod/ENTITY:DrawTranslucent), it only draws the entity's model itself.
     * 
     * If called outside of those hooks, it will call both of said hooks depending on [Entity:GetRenderGroup](https://wiki.facepunch.com/gmod/Entity:GetRenderGroup), drawing the entire entity again.
     * 
     * **Bug [#1558](https://github.com/Facepunch/garrysmod-issues/issues/1558):**
     * >Calling this on entities withandapplied causes a crash.
     * 
     * **Bug [#2688](https://github.com/Facepunch/garrysmod-issues/issues/2688):**
     * >Using this with a map model ([game.GetWorld](https://wiki.facepunch.com/gmod/game.GetWorld)():()) crashes the game.
     * 
     * **Note:**
     * >When drawing an entity more than once per frame in different positions, you should call [Entity:SetupBones](https://wiki.facepunch.com/gmod/Entity:SetupBones) before each draw; Otherwise, the entity will retain its first drawn position.
     * 
     * @param [flags = STUDIO_RENDER] - The optional <page text="STUDIO_">Enums/STUDIO</page> flags, usually taken from [ENTITY:Draw](https://wiki.facepunch.com/gmod/ENTITY:Draw) and similar hooks.
     */
    DrawModel(flags?: number): void;
    
    /**
     * [Shared]
     * 
     * Sets whether an entity's shadow should be drawn.
     * @param shouldDraw - True to enable, false to disable shadow drawing.
     */
    DrawShadow(shouldDraw: boolean): void;
    
    /**
     * [Server]
     * 
     * Move an entity down until it collides with something.
     * 
     * **Warning:**
     * >The entity needs to already have something below it within 256 units.
     * 
     * 
     */
    DropToFloor(): void;
    
    /**
     * [Shared]
     * 
     * **d**
     * 
     * Sets up a self.dt.NAME alias for a Data Table variable.
     * @param Type - The type of the DTVar being set up. It can be one of the following: 'Int', 'Float', 'Vector', 'Angle', 'Bool', 'Entity' or 'String'
     * @param ID - The ID of the DTVar. Can be between 0 and 3 for strings, 0 and 31 for everything else.
     * @param Name - Name by which you will refer to DTVar. It must be a valid variable name. (No spaces!)
     */
    DTVar(Type: string, ID: number, Name: string): void;
    
    /**
     * [Shared]
     * 
     * Plays a sound on an entity. If run clientside, the sound will only be heard locally.
     * 
     * If used on a player or NPC character with the mouth rigged, the character will "lip-sync". This does not work with all sound files.
     * 
     * **Bug [#2651](https://github.com/Facepunch/garrysmod-issues/issues/2651):**
     * >This does not respond to [Global.SuppressHostEvents](https://wiki.facepunch.com/gmod/Global.SuppressHostEvents).
     * 
     * **Note:**
     * >When using this function with weapons, use the [Weapon](https://wiki.facepunch.com/gmod/Weapon) itself as the entity, not its owner!
     * 
     * @param soundName - The name of the sound to be played.
     * This should either be a sound script name ([sound.Add](https://wiki.facepunch.com/gmod/sound.Add)) or a file path relative to the `sound/` folder. (Make note that it's not sound**s**)
     * **Warning:**
     * >The string cannot have whitespace at the start or end. You can remove this with [string.Trim](https://wiki.facepunch.com/gmod/string.Trim).
     * 
     * @param [soundLevel = 75] - A modifier for the distance this sound will reach, acceptable range is 0 to 511. 100 means no adjustment to the level. See [Enums/SNDLVL](https://wiki.facepunch.com/gmod/Enums/SNDLVL)
     * Will not work if a [sound script](https://developer.valvesoftware.com/wiki/Soundscripts) is used.
     * @param [pitchPercent = 100] - The pitch applied to the sound. The acceptable range is from 0 to 255. 100 means the pitch is not changed.
     * @param [volume = 1] - The volume, from 0 to 1.
     * @param [channel = CHAN_AUTO, CHAN_WEAPON for weapons] - The sound channel, see [Enums/CHAN](https://wiki.facepunch.com/gmod/Enums/CHAN).
     * Will not work if a [sound script](https://developer.valvesoftware.com/wiki/Soundscripts) is used.
     * @param [soundFlags = 0] - The flags of the sound, see [Enums/SND](https://wiki.facepunch.com/gmod/Enums/SND)
     * @param [dsp = 0] - The DSP preset for this sound. [List of DSP presets](https://developer.valvesoftware.com/wiki/Dsp_presets)
     * @param [filter = nil] - If set serverside, the sound will only be networked to the clients in the filter.
     */
    EmitSound(soundName: string, soundLevel = 75, pitchPercent = 100, volume = 1, channel?: CHAN, soundFlags = 0, dsp = 0, filter?: CRecipientFilter): void;
    
    /**
     * [Server]
     * 
     * Toggles the constraints of this ragdoll entity on and off.
     * @param toggleConstraints - Set to true to enable the constraints and false to disable them.
     * Disabling constraints will delete the constraint entities.
     */
    EnableConstraints(toggleConstraints: boolean): void;
    
    /**
     * [Shared]
     * 
     * Flags an entity as using custom lua defined collisions. Fixes entities having spongy player collisions or not hitting traces, such as after [Entity:PhysicsFromMesh](https://wiki.facepunch.com/gmod/Entity:PhysicsFromMesh)
     * 
     * Internally identical to `Entity:AddSolidFlags( bit.bor( FSOLID_CUSTOMRAYTEST, FSOLID_CUSTOMBOXTEST ) )`
     * 
     * Do not confuse this function with [Entity:SetCustomCollisionCheck](https://wiki.facepunch.com/gmod/Entity:SetCustomCollisionCheck), they are not the same.
     * @param useCustom - True to flag this entity
     */
    EnableCustomCollisions(useCustom: boolean): void;
    
    /**
     * [Client]
     * 
     * Can be used to apply a custom [VMatrix](https://wiki.facepunch.com/gmod/VMatrix) to the entity, mostly used for scaling the model by a [Vector](https://wiki.facepunch.com/gmod/Vector).
     * 
     * To disable it, use [Entity:DisableMatrix](https://wiki.facepunch.com/gmod/Entity:DisableMatrix).
     * 
     * If your old scales are wrong due to a recent update, use [Entity:SetLegacyTransform](https://wiki.facepunch.com/gmod/Entity:SetLegacyTransform) as a quick fix.
     * 
     * **Bug [#3502](https://github.com/Facepunch/garrysmod-issues/issues/3502):**
     * >This does not scale procedural bones, and disables inverse kinematics of the entity.
     * 
     * **Note:**
     * >The matrix can also be modified to apply a custom rotation and offset via the [VMatrix:SetAngles](https://wiki.facepunch.com/gmod/VMatrix:SetAngles) and [VMatrix:SetTranslation](https://wiki.facepunch.com/gmod/VMatrix:SetTranslation) functions.
     * 
     * @param matrixType - The name of the matrix type. <br/>
     * The only implemented matrix type is "RenderMultiply".
     * @param matrix - The matrix to apply before drawing the entity.
     */
    EnableMatrix(matrixType: string, matrix: VMatrix): void;
    
    /**
     * [Shared]
     * 
     * Gets the unique entity index of an entity.
     * 
     * **Note:**
     * >Entity indices are marked as unused after deletion, and can be reused by newly-created entities
     * 
     * 
     */
    EntIndex(): number;
    
    /**
     * [Server]
     * 
     * Extinguishes the entity if it is on fire.
     * 
     * Has no effect if called inside [GM:EntityTakeDamage](https://wiki.facepunch.com/gmod/GM:EntityTakeDamage) (and the attacker is the flame that's hurting the entity)
     * 
     * See also [Entity:Ignite](https://wiki.facepunch.com/gmod/Entity:Ignite).
     * 
     */
    Extinguish(): void;
    
    /**
     * [Shared]
     * 
     * Returns the direction a player, npc or ragdoll is looking as a world-oriented angle.
     * 
     * **Bug [#1150](https://github.com/Facepunch/garrysmod-issues/issues/1150):**
     * >This can return an incorrect value in vehicles (like pods, buggy, ...). **This bug has been fixed in the past but was causing many addons being broken, so the fix has been removed but applied to [Player:GetAimVector](https://wiki.facepunch.com/gmod/Player:GetAimVector) only**.
     * 
     * **Bug [#2620](https://github.com/Facepunch/garrysmod-issues/issues/2620):**
     * >This may return local angles in jeeps when used with [Player:EnterVehicle](https://wiki.facepunch.com/gmod/Player:EnterVehicle). **A workaround is available in the second example.**
     * 
     * 
     */
    EyeAngles(): Angle;
    
    /**
     * [Shared]
     * 
     * Returns the position of an Player/NPC's view.
     * 
     */
    EyePos(): Vector;
    
    /**
     * [Shared]
     * 
     * Searches for bodygroup with given name.
     * 
     * **Note:**
     * >If called for Weapon (after Initialize hook) with different body groups on world model and view model will return value form view model.
     * 
     * @param name - The bodygroup name to search for.
     */
    FindBodygroupByName(name: string): number;
    
    /**
     * [Shared]
     * 
     * Returns a transition from the given start and end sequence.
     * 
     * This function was only used by HL1 entities and NPCs, before the advent of sequence blending and gestures.
     * @param currentSequence - The currently playing sequence
     * @param goalSequence - The goal sequence.
     */
    FindTransitionSequence(currentSequence: number, goalSequence: number): number;
    
    /**
     * [Server]
     * 
     * Fires an entity's input, conforming to the map IO event queue system. You can find inputs for most entities on the [Valve Developer Wiki](https://developer.valvesoftware.com/wiki/Output)
     * 
     * See also [Entity:Input](https://wiki.facepunch.com/gmod/Entity:Input) for a function that bypasses the event queue and [GM:AcceptInput](https://wiki.facepunch.com/gmod/GM:AcceptInput).
     * @param input - The name of the input to fire
     * @param [param = nil] - The value to give to the input, can also be a [number](https://wiki.facepunch.com/gmod/number) or a [boolean](https://wiki.facepunch.com/gmod/boolean).
     * @param [delay = 0] - Delay in seconds before firing
     * @param [activator = nil] - The entity that caused this input (i.e. the player who pushed a button)
     * @param [caller = nil] - The entity that is triggering this input (i.e. the button that was pushed)
     */
    Fire(input: string, param?: string, delay = 0, activator?: Entity, caller?: Entity): void;
    
    /**
     * [Shared]
     * 
     * Fires a bullet.
     * 
     * When used in a  hook such as [WEAPON:Think](https://wiki.facepunch.com/gmod/WEAPON:Think) or [WEAPON:PrimaryAttack](https://wiki.facepunch.com/gmod/WEAPON:PrimaryAttack), it will use [Player:LagCompensation](https://wiki.facepunch.com/gmod/Player:LagCompensation) internally.
     * 
     * **Note:**
     * >Lag compensation will not work if this function is called in a timer, regardless if the timer was made in a  hook.
     * 
     * **Note:**
     * >Due to how FireBullets is set up internally, bullet tracers will always originate from attachment 1.
     * 
     * @param bulletInfo - The bullet data to be used. See the [Structures/Bullet](https://wiki.facepunch.com/gmod/Structures/Bullet).
     * @param [suppressHostEvents = false] - Has the effect of encasing the FireBullets call in [Global.SuppressHostEvents](https://wiki.facepunch.com/gmod/Global.SuppressHostEvents), only works in multiplayer.
     */
    FireBullets(bulletInfo: Bullet, suppressHostEvents = false): void;
    
    /**
     * [Shared]
     * 
     * Makes an entity follow another entity's bone.
     * 
     * Internally this function calls [Entity:SetParent](https://wiki.facepunch.com/gmod/Entity:SetParent)( parent, boneid ), [Entity:AddEffects](https://wiki.facepunch.com/gmod/Entity:AddEffects)( EF_FOLLOWBONE 
     *  ) and sets an internal flag to always rebuild all bones.
     * 
     * **Warning:**
     * >This function will not work if the target bone's parent bone is invalid or if the bone is not used by VERTEX LOD0
     * 
     * **Note:**
     * >If the entity vibrates or stops following the parent, you probably need to run [Entity:SetPredictable](https://wiki.facepunch.com/gmod/Entity:SetPredictable)( true ) clientside.
     * 
     * @param [parent = NULL] - The entity to follow the bone of. If unset, removes the FollowBone effect.
     * @param boneid - The bone to follow
     */
    FollowBone(parent?: Entity, boneid: number): void;
    
    /**
     * [Shared]
     * 
     * Forces the Entity to be dropped, when it is being held by a player's gravitygun or physgun.
     * 
     */
    ForcePlayerDrop(): void;
    
    /**
     * [Shared]
     * 
     * Advances the cycle of an animated entity.
     * 
     * Animations that loop will automatically reset the cycle so you don't have to - ones that do not will stop animating once you reach the end of their sequence.
     * 
     * **Warning:**
     * >Do not call this function multiple times a frame, as it can cause unexpected results, such as animations playing at increased rate, etc.
     * 
     * [NextBot:BodyMoveXY](https://wiki.facepunch.com/gmod/NextBot:BodyMoveXY) calls this internally, so do not call this function before or after [NextBot:BodyMoveXY](https://wiki.facepunch.com/gmod/NextBot:BodyMoveXY).
     * 
     * 
     */
    FrameAdvance(): void;
    
    /**
     * [Shared]
     * 
     * Returns the entity's velocity.
     * 
     * **Note:**
     * >Actually binds to CBaseEntity::GetLocalVelocity() which retrieves the velocity of the entity due to its movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision.
     * 
     * 
     */
    GetAbsVelocity(): Vector;
    
    /**
     * [Shared]
     * 
     * Gets the angles of given entity.
     * 
     * **Bug [#2764](https://github.com/Facepunch/garrysmod-issues/issues/2764):**
     * >This returns incorrect results for the local player clientside.
     * 
     * **Bug [#3106](https://github.com/Facepunch/garrysmod-issues/issues/3106):**
     * >This will return the local player's [Global.EyeAngles](https://wiki.facepunch.com/gmod/Global.EyeAngles) in.
     * 
     * **Bug [#3107](https://github.com/Facepunch/garrysmod-issues/issues/3107):**
     * >This will return [Global.Angle](https://wiki.facepunch.com/gmod/Global.Angle)(0,0,0) inwhile paused in single-player.
     * 
     * 
     */
    GetAngles(): Angle;
    
    /**
     * [Shared]
     * 
     * Returns the amount of animations (not to be confused with sequences) the entity's model has. A sequence can consist of multiple animations.
     * 
     * See also [Entity:GetAnimInfo](https://wiki.facepunch.com/gmod/Entity:GetAnimInfo)
     * 
     */
    GetAnimCount(): number;
    
    /**
     * [Shared]
     * 
     * Returns a table containing the number of frames, flags, name, and FPS of an entity's animation ID.
     * 
     * **Note:**
     * >Animation ID is not the same as sequence ID. See [Entity:GetAnimCount](https://wiki.facepunch.com/gmod/Entity:GetAnimCount)
     * 
     * @param animIndex - The animation ID to look up
     */
    GetAnimInfo(animIndex: number): any;
    
    /**
     * [Client]
     * 
     * Returns the last time the entity had an animation update. Returns 0 if the entity doesn't animate.
     * 
     */
    GetAnimTime(): number;
    
    /**
     * [Shared]
     * 
     * Returns the amount of time since last animation.
     * 
     * Works only on `CBaseAnimating` entities.
     * 
     */
    GetAnimTimeInterval(): number;
    
    /**
     * [Shared]
     * 
     * Gets the orientation and position of the attachment by its ID, returns nothing if the attachment does not exist.
     * 
     * **Bug [#1255](https://github.com/Facepunch/garrysmod-issues/issues/1255):**
     * >This will return improper values for viewmodels if used in [GM:CalcView](https://wiki.facepunch.com/gmod/GM:CalcView).
     * 
     * **Note:**
     * >The update rate of this function is limited by the setting of ENT.AutomaticFrameAdvance for [Scripted Entities](https://wiki.facepunch.com/gmod/Scripted_Entities)!
     * 
     * @param attachmentId - The internal ID of the attachment.
     */
    GetAttachment(attachmentId: number): AngPos;
    
    /**
     * [Shared]
     * 
     * Returns a table containing all attachments of the given entity's model.
     * 
     * Returns an empty table or **nil** in case its model has no attachments.
     * 
     * **Bug [#3167](https://github.com/Facepunch/garrysmod-issues/issues/3167):**
     * >This can have inconsistent results in single-player.
     * 
     * 
     */
    GetAttachments(): AttachmentData;
    
    /**
     * [Shared]
     * 
     * Returns the entity's base velocity which is their velocity due to forces applied by other entities. This includes entity-on-entity collision or riding a treadmill.
     * 
     */
    GetBaseVelocity(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the blood color of this entity. This can be set with [Entity:SetBloodColor](https://wiki.facepunch.com/gmod/Entity:SetBloodColor).
     * 
     */
    GetBloodColor(): BLOOD_COLOR;
    
    /**
     * [Shared]
     * 
     * Gets the exact value for specific bodygroup of given entity.
     * 
     * **Note:**
     * >If called for Weapon (after Initialize hook) with different body groups on world model and view model will return value form view model.
     * 
     * @param id - The id of bodygroup to get value of. Starts from 0.
     */
    GetBodygroup(id: number): number;
    
    /**
     * [Shared]
     * 
     * Returns the count of possible values for this bodygroup.
     * 
     * This is **not** the maximum value, since the bodygroups start with 0, not 1.
     * 
     * **Note:**
     * >If called for Weapon (after Initialize hook) with different body groups on world model and view model will return value form view model.
     * 
     * @param bodygroup - The ID of bodygroup to retrieve count of.
     */
    GetBodygroupCount(bodygroup: number): number;
    
    /**
     * [Shared]
     * 
     * Gets the name of specific bodygroup for given entity.
     * 
     * **Note:**
     * >If called for Weapon (after Initialize hook) with different body groups on world model and view model will return value form view model.
     * 
     * @param id - The id of bodygroup to get the name of.
     */
    GetBodygroupName(id: number): string;
    
    /**
     * [Shared]
     * 
     * Returns a list of all body groups of the entity.
     * 
     * **Note:**
     * >If called for Weapon (after Initialize hook) with different body groups on world model and view model will return body groups form view model.
     * 
     * 
     */
    GetBodyGroups(): BodyGroupData;
    
    /**
     * [Shared]
     * 
     * Returns the contents of the specified bone.
     * @param bone - The bone id, starting at index 0. See [Entity:LookupBone](https://wiki.facepunch.com/gmod/Entity:LookupBone).
     */
    GetBoneContents(bone: number): CONTENTS;
    
    /**
     * [Shared]
     * 
     * Returns the value of the bone controller with the specified ID.
     * 
     * **Note:**
     * >This is the precursor of pose parameters, and only works for Half Life 1: Source models supporting it.
     * 
     * @param boneID - ID of the bone controller. Goes from 0 to 3.
     */
    GetBoneController(boneID: number): number;
    
    /**
     * [Shared]
     * 
     * Returns the amount of bones in the entity.
     * 
     * **Note:**
     * >Will return `0` for [Global.ClientsideModel](https://wiki.facepunch.com/gmod/Global.ClientsideModel) or undrawn entities until [Entity:SetupBones](https://wiki.facepunch.com/gmod/Entity:SetupBones) is called on the entity.
     * 
     * 
     */
    GetBoneCount(): number;
    
    /**
     * [Shared]
     * 
     * Returns the transformation matrix of a given bone on the entity's model. The matrix contains the transformation used to position the bone in the world. It is not relative to the parent bone.
     * 
     * This is equivalent to constructing a [VMatrix](https://wiki.facepunch.com/gmod/VMatrix) using [Entity:GetBonePosition](https://wiki.facepunch.com/gmod/Entity:GetBonePosition).
     * 
     * **Bug [#884](https://github.com/Facepunch/garrysmod-issues/issues/884):**
     * >This can return the server's matrix during server lag.
     * 
     * **Bug [#3285](https://github.com/Facepunch/garrysmod-issues/issues/3285):**
     * >This can return garbage serverside or a 0,0,0 fourth column (represents position) for v49 models.
     * 
     * @param boneID - The bone ID to retrieve matrix of, starting at index 0.
     * * Bones clientside and serverside will differ
     */
    GetBoneMatrix(boneID: number): VMatrix;
    
    /**
     * [Shared]
     * 
     * Returns name of given bone id.
     * @param index - ID of bone to lookup name of, starting at index 0.
     */
    GetBoneName(index: number): string;
    
    /**
     * [Shared]
     * 
     * Returns parent bone of given bone.
     * 
     * **Note:**
     * >Will return -1 for [Global.ClientsideModel](https://wiki.facepunch.com/gmod/Global.ClientsideModel) until [Entity:SetupBones](https://wiki.facepunch.com/gmod/Entity:SetupBones) is called on the entity.
     * 
     * @param bone - The bode ID of the bone to get parent of, starting at index 0.
     */
    GetBoneParent(bone: number): number;
    
    /**
     * [Shared]
     * 
     * Returns the position and angle of the given attachment, relative to the world.
     * 
     * **Warning:**
     * >This function can return entity's `GetPos()` instead if the entity doesn't have it's bone cache set up.
     * 
     * To ensure the bone position is correct use this:
     * ```lua
     * local pos = ent:GetBonePosition(0)
     * if pos == ent:GetPos() then
     * 	pos = ent:GetBoneMatrix(0):GetTranslation()
     * end
     * ```
     * 
     * **Bug [#884](https://github.com/Facepunch/garrysmod-issues/issues/884):**
     * >This can return the server's position during server lag.
     * 
     * **Bug [#3285](https://github.com/Facepunch/garrysmod-issues/issues/3285):**
     * >This can return garbage serverside or [Global.Vector](https://wiki.facepunch.com/gmod/Global.Vector)(0,0,0) for v49 models.
     * 
     * **Bug [#3739](https://github.com/Facepunch/garrysmod-issues/issues/3739):**
     * >This can return garbage if a trace passed through the target bone during bone matrix access.
     * 
     * **Note:**
     * >This function returns the bone position from the last tick, so if your framerate is higher than the server's tickrate it may appear to lag behind if used on a fast moving entity. You can fix this by using the bone's matrix instead:
     * ```lua
     * local matrix = entity:GetBoneMatrix(0)
     * local pos = matrix:GetTranslation()
     * local ang = matrix:GetAngles()
     * ```
     * 
     * @param boneIndex - The bone index of the bone to get the position of, starting at index 0. See [Entity:LookupBone](https://wiki.facepunch.com/gmod/Entity:LookupBone).
     */
    GetBonePosition(boneIndex: number): LuaMultiReturn<[Vector, Angle]>;
    
    /**
     * [Shared]
     * 
     * Returns the surface property of the specified bone.
     * @param bone - The bone id, starting at index 0. See [Entity:LookupBone](https://wiki.facepunch.com/gmod/Entity:LookupBone).
     */
    GetBoneSurfaceProp(bone: number): string;
    
    /**
     * [Shared]
     * 
     * Returns info about given plane of non-nodraw brush model surfaces of the entity's model. Works on worldspawn as well.
     * 
     * **Warning:**
     * >This only works on entities with brush models.
     * 
     * @param id - The index of the plane to get info of. Starts from 0.
     */
    GetBrushPlane(id: number): LuaMultiReturn<[Vector, Vector, number]>;
    
    /**
     * [Shared]
     * 
     * Returns the amount of planes of non-nodraw brush model surfaces of the entity's model.
     * 
     */
    GetBrushPlaneCount(): number;
    
    /**
     * [Shared]
     * 
     * Returns a table of brushes surfaces for brush model entities.
     * 
     */
    GetBrushSurfaces(): any;
    
    /**
     * [Shared]
     * 
     * Returns the specified hook callbacks for this entity added with [Entity:AddCallback](https://wiki.facepunch.com/gmod/Entity:AddCallback)
     * 
     * The callbacks can then be removed with [Entity:RemoveCallback](https://wiki.facepunch.com/gmod/Entity:RemoveCallback).
     * @param hook - The hook to retrieve the callbacks from, see [Entity Callbacks](https://wiki.facepunch.com/gmod/Entity_Callbacks) for the possible hooks.
     */
    GetCallbacks(hook: string): any;
    
    /**
     * [Shared]
     * 
     * Returns ids of child bones of given bone.
     * @param boneid - Bone id to lookup children of
     */
    GetChildBones(boneid: number): any;
    
    /**
     * [Shared]
     * 
     * Gets the children of the entity - that is, every entity whose move parent is this entity.
     * 
     * **Note:**
     * >This function returns [Entity:SetMoveParent](https://wiki.facepunch.com/gmod/Entity:SetMoveParent) children, **NOT** [Entity:SetParent](https://wiki.facepunch.com/gmod/Entity:SetParent)!
     * 
     * [Entity:SetParent](https://wiki.facepunch.com/gmod/Entity:SetParent) however also calls [Entity:SetMoveParent](https://wiki.facepunch.com/gmod/Entity:SetMoveParent).
     * 
     * This means that some entities in the returned list might have a NULL [Entity:GetParent](https://wiki.facepunch.com/gmod/Entity:GetParent).
     * 
     * This also means that using this function on players will return their weapons on the client but not the server.
     * 
     * 
     */
    GetChildren(): any;
    
    /**
     * [Shared]
     * 
     * Returns the classname of a entity. This is often the name of the Lua file or folder containing the files for the entity
     * 
     */
    GetClass(): string;
    
    /**
     * [Shared]
     * 
     * Returns an entity's collision bounding box. In most cases, this will return the same bounding box as [Entity:GetModelBounds](https://wiki.facepunch.com/gmod/Entity:GetModelBounds) unless the entity does not have a physics mesh or it has a [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) different from the default.
     * 
     * **Bug [#223](https://github.com/Facepunch/garrysmod-issues/issues/223):**
     * >This can be out-of-sync between the client and server for weapons.
     * 
     * 
     */
    GetCollisionBounds(): LuaMultiReturn<[Vector, Vector]>;
    
    /**
     * [Shared]
     * 
     * Returns the entity's collision group
     * 
     */
    GetCollisionGroup(): COLLISION_GROUP;
    
    /**
     * [Shared]
     * 
     * Returns the color the entity is set to.
     * 
     */
    GetColor(): Color;
    
    /**
     * [Shared]
     * 
     * Returns the color the entity is set to without using a color object.
     * 
     * Internally used to implement [Entity:GetColor](https://wiki.facepunch.com/gmod/Entity:GetColor).
     * 
     */
    GetColor4Part(): LuaMultiReturn<[number, number, number, number]>;
    
    /**
     * [Server]
     * 
     * Returns the two entities involved in a constraint ent, or nil if the entity is not a constraint.
     * 
     */
    GetConstrainedEntities(): LuaMultiReturn<[Entity, Entity]>;
    
    /**
     * [Server]
     * 
     * Returns the two entities physobjects involved in a constraint ent, or no value if the entity is not a constraint.
     * 
     */
    GetConstrainedPhysObjects(): LuaMultiReturn<[PhysObj, PhysObj]>;
    
    /**
     * [Shared]
     * 
     * Returns entity's creation ID. Unlike [Entity:EntIndex](https://wiki.facepunch.com/gmod/Entity:EntIndex) or [Entity:MapCreationID](https://wiki.facepunch.com/gmod/Entity:MapCreationID).
     * 
     * It will increase up until value of `10 000 000`, at which point it will reset back to `0`.
     * 
     */
    GetCreationID(): number;
    
    /**
     * [Shared]
     * 
     * Returns the time the entity was created on, relative to [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime).
     * 
     */
    GetCreationTime(): number;
    
    /**
     * [Server]
     * 
     * Gets the creator of the SENT.
     * 
     */
    GetCreator(): Player;
    
    /**
     * [Shared]
     * 
     * Returns whether this entity uses custom collision check set by [Entity:SetCustomCollisionCheck](https://wiki.facepunch.com/gmod/Entity:SetCustomCollisionCheck).
     * 
     */
    GetCustomCollisionCheck(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns the frame of the currently played sequence. This will be a number between 0 and 1 as a representation of sequence progress.
     * 
     */
    GetCycle(): number;
    
    /**
     * [Shared]
     * 
     * This is called internally by the [Entity:NetworkVar](https://wiki.facepunch.com/gmod/Entity:NetworkVar) system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Get an angle stored in the datatable of the entity.
     * @param key - Goes from 0 to 31.
     * Specifies what key to grab from datatable.
     */
    GetDTAngle(key: number): Angle;
    
    /**
     * [Shared]
     * 
     * This is called internally by the [Entity:NetworkVar](https://wiki.facepunch.com/gmod/Entity:NetworkVar) system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Get a boolean stored in the datatable of the entity.
     * @param key - Goes from 0 to 31.
     * Specifies what key to grab from datatable.
     */
    GetDTBool(key: number): boolean;
    
    /**
     * [Shared]
     * 
     * This is called internally by the [Entity:NetworkVar](https://wiki.facepunch.com/gmod/Entity:NetworkVar) system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Returns an entity stored in the datatable of the entity.
     * @param key - Goes from 0 to 31.
     * Specifies what key to grab from datatable.
     */
    GetDTEntity(key: number): Entity;
    
    /**
     * [Shared]
     * 
     * This is called internally by the [Entity:NetworkVar](https://wiki.facepunch.com/gmod/Entity:NetworkVar) system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Get a float stored in the datatable of the entity.
     * @param key - Goes from 0 to 31.
     * Specifies what key to grab from datatable.
     */
    GetDTFloat(key: number): number;
    
    /**
     * [Shared]
     * 
     * This is called internally by the [Entity:NetworkVar](https://wiki.facepunch.com/gmod/Entity:NetworkVar) system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Get an integer stored in the datatable of the entity.
     * @param key - Goes from 0 to 31.
     * Specifies what key to grab from datatable.
     */
    GetDTInt(key: number): number;
    
    /**
     * [Shared]
     * 
     * This is called internally by the [Entity:NetworkVar](https://wiki.facepunch.com/gmod/Entity:NetworkVar) system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Get a string stored in the datatable of the entity.
     * @param key - Goes from 0 to 3.
     * Specifies what key to grab from datatable.
     */
    GetDTString(key: number): string;
    
    /**
     * [Shared]
     * 
     * This is called internally by the [Entity:NetworkVar](https://wiki.facepunch.com/gmod/Entity:NetworkVar) system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Get a vector stored in the datatable of the entity.
     * @param key - Goes from 0 to 31.
     * Specifies what key to grab from datatable.
     */
    GetDTVector(key: number): Vector;
    
    /**
     * [Shared]
     * 
     * Returns internal data about editable [Entity:NetworkVar](https://wiki.facepunch.com/gmod/Entity:NetworkVar)s.
     * 
     * 		This is used internally by [DEntityProperties](https://wiki.facepunch.com/gmod/DEntityProperties) and [Editable Entities](https://wiki.facepunch.com/gmod/Editable_Entities) system.
     * 
     * **Note:**
     * >This function will only work on entities which had [Entity:InstallDataTable](https://wiki.facepunch.com/gmod/Entity:InstallDataTable) called on them, which is done automatically for players and all [Scripted Entities](https://wiki.facepunch.com/gmod/Scripted_Entities)
     * 
     * 
     */
    GetEditingData(): any;
    
    /**
     * [Shared]
     * 
     * Returns a bit flag of all engine effect flags of the entity.
     * 
     */
    GetEffects(): EF;
    
    /**
     * [Shared]
     * 
     * Returns a bit flag of all engine flags of the entity.
     * 
     */
    GetEFlags(): EFL;
    
    /**
     * [Shared]
     * 
     * Returns the elasticity of this entity, used by some flying entities such as the Helicopter NPC to determine how much it should bounce around when colliding.
     * 
     */
    GetElasticity(): number;
    
    /**
     * [Shared]
     * 
     * Returns all flags of given entity.
     * 
     */
    GetFlags(): FL;
    
    /**
     * [Shared]
     * 
     * Returns acceptable value range for the flex.
     * @param flex - The ID of the flex to look up bounds of
     */
    GetFlexBounds(flex: number): LuaMultiReturn<[number, number]>;
    
    /**
     * [Shared]
     * 
     * Returns the ID of the flex based on the beginning or the entire name.
     * @param name - The name of the flex to get the ID of. Case sensitive.
     */
    GetFlexIDByName(name: string): number;
    
    /**
     * [Shared]
     * 
     * Returns flex name.
     * @param id - The flex index to look up name of. The range is between `0` and [Entity:GetFlexNum](https://wiki.facepunch.com/gmod/Entity:GetFlexNum) - 1.
     */
    GetFlexName(id: number): string;
    
    /**
     * [Shared]
     * 
     * Returns the number of flex controllers this entity's model has.
     * 
     * **Note:**
     * >Please note that while this function can return the real number of flex controllers, the game supports only a certain amount due to networking limitations. See [Entity:SetFlexWeight](https://wiki.facepunch.com/gmod/Entity:SetFlexWeight).
     * 
     * 
     */
    GetFlexNum(): number;
    
    /**
     * [Shared]
     * 
     * Returns the flex scale of the entity.
     * 
     */
    GetFlexScale(): number;
    
    /**
     * [Shared]
     * 
     * Returns current weight ( value ) of given flex controller. Please see [Entity:SetFlexWeight](https://wiki.facepunch.com/gmod/Entity:SetFlexWeight) regarding limitations.
     * @param flex - The ID of the flex to get weight of
     */
    GetFlexWeight(flex: number): number;
    
    /**
     * [Shared]
     * 
     * Returns the forward vector of the entity, as a normalized direction vector
     * 
     */
    GetForward(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the friction modifier for this entity. Entities default to `1` (100%) and can be higher.
     * 
     */
    GetFriction(): number;
    
    /**
     * [Shared]
     * 
     * Gets the gravity multiplier of the entity.
     * 
     */
    GetGravity(): number;
    
    /**
     * [Shared]
     * 
     * Returns the object the entity is standing on.
     * 
     */
    GetGroundEntity(): Entity;
    
    /**
     * [Server]
     * 
     * Returns the entity's ground speed velocity, which is based on the entity's walk/run speed and/or the ground speed of their sequence ( [Entity:GetSequenceGroundSpeed](https://wiki.facepunch.com/gmod/Entity:GetSequenceGroundSpeed) ). Will return an empty [Vector](https://wiki.facepunch.com/gmod/Vector) if the entity isn't moving on the ground.
     * 
     */
    GetGroundSpeedVelocity(): Vector;
    
    /**
     * [Shared]
     * 
     * Gets the bone the hit box is attached to.
     * @param hitbox - The number of the hit box.
     * @param hboxset - The number of the hit box set. This should be 0 in most cases.
     * Numbering for these sets start from 0. The total amount of sets can be found with [Entity:GetHitBoxSetCount](https://wiki.facepunch.com/gmod/Entity:GetHitBoxSetCount).
     */
    GetHitBoxBone(hitbox: number, hboxset: number): number;
    
    /**
     * [Shared]
     * 
     * Gets the bounds (min and max corners) of a hit box.
     * @param hitbox - The number of the hit box.
     * @param set - The hitbox set of the hit box. This should be 0 in most cases.
     */
    GetHitBoxBounds(hitbox: number, set: number): LuaMultiReturn<[Vector, Vector]>;
    
    /**
     * [Shared]
     * 
     * Gets how many hit boxes are in a given hit box set.
     * @param set - The number of the hit box set.
     */
    GetHitBoxCount(set: number): number;
    
    /**
     * [Shared]
     * 
     * Returns the number of hit box sets that an entity has. Functionally identical to [Entity:GetHitboxSetCount](https://wiki.facepunch.com/gmod/Entity:GetHitboxSetCount)
     * 
     * @deprecated You should use [Entity:GetHitboxSetCount](https://wiki.facepunch.com/gmod/Entity:GetHitboxSetCount) instead.
     * 
     * 
     */
    GetHitBoxGroupCount(): number;
    
    /**
     * [Shared]
     * 
     * Gets the hit group of a given hitbox in a given hitbox set.
     * @param hitbox - The number of the hit box.
     * @param hitboxset - The number of the hit box set. This should be 0 in most cases.
     * Numbering for these sets start from 0. The total group count can be found with [Entity:GetHitBoxSetCount](https://wiki.facepunch.com/gmod/Entity:GetHitBoxSetCount).
     */
    GetHitBoxHitGroup(hitbox: number, hitboxset: number): HITGROUP;
    
    /**
     * [Shared]
     * 
     * Returns entity's current hit box set
     * 
     */
    GetHitboxSet(): LuaMultiReturn<[number, string]>;
    
    /**
     * [Shared]
     * 
     * Returns the amount of hitbox sets in the entity.
     * 
     */
    GetHitboxSetCount(): number;
    
    /**
     * [Shared]
     * 
     * An interface for accessing internal key values on entities.
     * 
     * See [Entity:GetSaveTable](https://wiki.facepunch.com/gmod/Entity:GetSaveTable) for a more detailed explanation. See [Entity:SetSaveValue](https://wiki.facepunch.com/gmod/Entity:SetSaveValue) for the opposite of this function.
     * @param variableName - Name of variable corresponding to an entity save value.
     */
    GetInternalVariable(variableName: string): any;
    
    /**
     * [Server]
     * 
     * Returns a table containing Hammer key values the entity has stored. **Not all key values will be accessible this way.** Use [GM:EntityKeyValue](https://wiki.facepunch.com/gmod/GM:EntityKeyValue) or [ENTITY:KeyValue](https://wiki.facepunch.com/gmod/ENTITY:KeyValue) to capture and store every key value.
     * 
     * Single key values can usually be retrieved with [Entity:GetInternalVariable](https://wiki.facepunch.com/gmod/Entity:GetInternalVariable).
     * 
     * Here's a list of keyvalues that will not appear in this list, as they are not stored/defined as actual keyvalues internally:
     * * rendercolor - [Entity:GetColor](https://wiki.facepunch.com/gmod/Entity:GetColor) (Only RGB)
     * * rendercolor32 - [Entity:GetColor](https://wiki.facepunch.com/gmod/Entity:GetColor) (RGBA)
     * * renderamt - [Entity:GetColor](https://wiki.facepunch.com/gmod/Entity:GetColor) (Alpha)
     * * disableshadows - <page text="EF_NOSHADOW">Enums/EF#EF_NOSHADOW</page>
     * * mins - [Entity:GetCollisionBounds](https://wiki.facepunch.com/gmod/Entity:GetCollisionBounds)
     * * maxs - [Entity:GetCollisionBounds](https://wiki.facepunch.com/gmod/Entity:GetCollisionBounds)
     * * disablereceiveshadows - <page text="EF_NORECEIVESHADOW">Enums/EF#EF_NORECEIVESHADOW</page>
     * * nodamageforces - <page text="EFL_NO_DAMAGE_FORCES">Enums/EFL#EFL_NO_DAMAGE_FORCES</page>
     * * angle - [Entity:GetAngles](https://wiki.facepunch.com/gmod/Entity:GetAngles)
     * * angles - [Entity:GetAngles](https://wiki.facepunch.com/gmod/Entity:GetAngles)
     * * origin - [Entity:GetPos](https://wiki.facepunch.com/gmod/Entity:GetPos)
     * * targetname - [Entity:GetName](https://wiki.facepunch.com/gmod/Entity:GetName)
     * 
     */
    GetKeyValues(): any;
    
    /**
     * [Shared]
     * 
     * Returns the animation cycle/frame for given layer.
     * 
     * **Note:**
     * >This function only works on [BaseAnimatingOverlay](https://wiki.facepunch.com/gmod/BaseAnimatingOverlay) entities.
     * 
     * @param layerID - The Layer ID
     */
    GetLayerCycle(layerID: number): number;
    
    /**
     * [Shared]
     * 
     * Returns the duration of given layer.
     * 
     * **Note:**
     * >This function only works on [BaseAnimatingOverlay](https://wiki.facepunch.com/gmod/BaseAnimatingOverlay) entities.
     * 
     * @param layerID - The Layer ID
     */
    GetLayerDuration(layerID: number): number;
    
    /**
     * [Shared]
     * 
     * Returns the layer playback rate. See also [Entity:GetLayerDuration](https://wiki.facepunch.com/gmod/Entity:GetLayerDuration).
     * 
     * **Note:**
     * >This function only works on [BaseAnimatingOverlay](https://wiki.facepunch.com/gmod/BaseAnimatingOverlay) entities.
     * 
     * @param layerID - The Layer ID
     */
    GetLayerPlaybackRate(layerID: number): number;
    
    /**
     * [Shared]
     * 
     * Returns the sequence id of given layer.
     * 
     * **Note:**
     * >This function only works on [BaseAnimatingOverlay](https://wiki.facepunch.com/gmod/BaseAnimatingOverlay) entities.
     * 
     * @param layerID - The Layer ID.
     */
    GetLayerSequence(layerID: number): number;
    
    /**
     * [Shared]
     * 
     * Returns the current weight of the layer. See [Entity:SetLayerWeight](https://wiki.facepunch.com/gmod/Entity:SetLayerWeight) for more information.
     * 
     * **Note:**
     * >This function only works on [BaseAnimatingOverlay](https://wiki.facepunch.com/gmod/BaseAnimatingOverlay) entities.
     * 
     * @param layerID - The Layer ID
     */
    GetLayerWeight(layerID: number): number;
    
    /**
     * [Server]
     * 
     * Returns the entity that is being used as the light origin position for this entity.
     * 
     */
    GetLightingOriginEntity(): Entity;
    
    /**
     * [Shared]
     * 
     * Returns the rotation of the entity relative to its parent entity.
     * 
     */
    GetLocalAngles(): Angle;
    
    /**
     * [Shared]
     * 
     * Returns the non-VPhysics angular velocity of the entity relative to its parent entity.
     * 
     */
    GetLocalAngularVelocity(): Angle;
    
    /**
     * [Shared]
     * 
     * Returns entity's position relative to it's parent.
     * 
     */
    GetLocalPos(): Vector;
    
    /**
     * [Shared]
     * 
     * Gets the entity's angle manipulation of the given bone. This is relative to the default angle, so the angle is zero when unmodified.
     * @param boneID - The bone's ID
     */
    GetManipulateBoneAngles(boneID: number): Angle;
    
    /**
     * [Shared]
     * 
     * Returns the jiggle amount of the entity's bone.
     * 
     * See [Entity:ManipulateBoneJiggle](https://wiki.facepunch.com/gmod/Entity:ManipulateBoneJiggle) for more info.
     * @param boneID - The bone ID
     */
    GetManipulateBoneJiggle(boneID: number): number;
    
    /**
     * [Shared]
     * 
     * Gets the entity's position manipulation of the given bone. This is relative to the default position, so it is zero when unmodified.
     * @param boneId - The bone's ID
     */
    GetManipulateBonePosition(boneId: number): Vector;
    
    /**
     * [Shared]
     * 
     * Gets the entity's scale manipulation of the given bone. Normal scale is Vector( 1, 1, 1 )
     * @param boneID - The bone's ID
     */
    GetManipulateBoneScale(boneID: number): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the material override for this entity. 
     * 
     * Returns an empty string if no material override exists. Use [Entity:GetMaterials](https://wiki.facepunch.com/gmod/Entity:GetMaterials) to list it's default materials.
     * 
     * **Bug [#3362](https://github.com/Facepunch/garrysmod-issues/issues/3362):**
     * >The server's value takes priority on the client.
     * 
     * 
     */
    GetMaterial(): string;
    
    /**
     * [Shared]
     * 
     * Returns all materials of the entity's model.
     * 
     * This function is unaffected by [Entity:SetSubMaterial](https://wiki.facepunch.com/gmod/Entity:SetSubMaterial) as it returns the original materials.
     * 
     * **Bug :**
     * >The table returned by this function will not contain materials if they are missing from the disk/repository. This means that if you are attempting to find the ID of a material to replace with [Entity:SetSubMaterial](https://wiki.facepunch.com/gmod/Entity:SetSubMaterial) and there are missing materials on the model, all subsequent materials will be offset in the table, meaning that the ID you are trying to get will be incorrect.
     * 
     * 
     */
    GetMaterials(): any;
    
    /**
     * [Server]
     * 
     * Returns the surface material of this entity.
     * 
     */
    GetMaterialType(): MAT;
    
    /**
     * [Shared]
     * 
     * Returns the max health that the entity was given. It can be set via [Entity:SetMaxHealth](https://wiki.facepunch.com/gmod/Entity:SetMaxHealth).
     * 
     */
    GetMaxHealth(): number;
    
    /**
     * [Shared]
     * 
     * Gets the model of given entity.
     * 
     * **Bug :**
     * >This does not necessarily return the model's path, as is the case for brush and virtual models. This is intentional behaviour, however, there is currently no way to retrieve the actual file path.
     * 
     * 
     */
    GetModel(): string;
    
    /**
     * [Shared]
     * 
     * Returns the entity's model bounds, not scaled by [Entity:SetModelScale](https://wiki.facepunch.com/gmod/Entity:SetModelScale).
     * 
     * These bounds are affected by all the animations the model has at compile time, if they go outside of the models' render bounds at any point.  
     * See [Entity:GetModelRenderBounds](https://wiki.facepunch.com/gmod/Entity:GetModelRenderBounds) for just the render bounds of the model.
     * 
     * This is different than the collision bounds/hull, which are set via [Entity:SetCollisionBounds](https://wiki.facepunch.com/gmod/Entity:SetCollisionBounds).
     * 
     */
    GetModelBounds(): LuaMultiReturn<[Vector, Vector]>;
    
    /**
     * [Shared]
     * 
     * Returns the contents of the entity's current model.
     * 
     */
    GetModelContents(): CONTENTS;
    
    /**
     * [Client]
     * 
     * Gets the physics bone count of the entity's model. This is only applicable to `anim` type [Scripted Entities](https://wiki.facepunch.com/gmod/Scripted_Entities) with ragdoll models.
     * 
     */
    GetModelPhysBoneCount(): number;
    
    /**
     * [Shared]
     * 
     * Gets the models radius.
     * 
     */
    GetModelRadius(): number;
    
    /**
     * [Shared]
     * 
     * Returns the entity's model render bounds. Unlike [Entity:GetModelBounds](https://wiki.facepunch.com/gmod/Entity:GetModelBounds), bounds returning by this function will not be affected by animations (at compile time).
     * 
     */
    GetModelRenderBounds(): LuaMultiReturn<[Vector, Vector]>;
    
    /**
     * [Shared]
     * 
     * Gets the selected entity's model scale.
     * 
     */
    GetModelScale(): number;
    
    /**
     * [Server]
     * 
     * Returns the amount a momentary_rot_button entity is turned based on the given angle. 0 meaning completely turned closed, 1 meaning completely turned open.
     * 
     * **Warning:**
     * >This only works on momentary_rot_button entities.
     * 
     * @param turnAngle - The angle of rotation to compare - usually should be [Entity:GetAngles](https://wiki.facepunch.com/gmod/Entity:GetAngles).
     */
    GetMomentaryRotButtonPos(turnAngle: Angle): number;
    
    /**
     * [Shared]
     * 
     * Returns the move collide type of the entity. The move collide is the way a physics object reacts to hitting an object - will it bounce, slide?
     * 
     */
    GetMoveCollide(): MOVECOLLIDE;
    
    /**
     * [Shared]
     * 
     * Returns the movement parent of this entity.
     * 
     * See [Entity:SetMoveParent](https://wiki.facepunch.com/gmod/Entity:SetMoveParent) for more info.
     * 
     */
    GetMoveParent(): Entity;
    
    /**
     * [Shared]
     * 
     * Returns the entity's movetype
     * 
     */
    GetMoveType(): MOVETYPE;
    
    /**
     * [Server]
     * 
     * Returns the map/hammer targetname of this entity.
     * 
     */
    GetName(): string;
    
    /**
     * [Client]
     * 
     * Gets networked angles for entity.
     * 
     */
    GetNetworkAngles(): Angle;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked angle value at specified index on the entity that is set by [Entity:SetNetworked2Angle](https://wiki.facepunch.com/gmod/Entity:SetNetworked2Angle).
     * 
     * @deprecated You should be using [Entity:GetNW2Angle](https://wiki.facepunch.com/gmod/Entity:GetNW2Angle) instead.
     * 
     * @param key - The key that is associated with the value
     * @param [fallback = Angle( 0, 0, 0 )] - The value to return if we failed to retrieve the value. (If it isn't set)
     */
    GetNetworked2Angle(key: string, fallback?: any): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked boolean value at specified index on the entity that is set by [Entity:SetNetworked2Bool](https://wiki.facepunch.com/gmod/Entity:SetNetworked2Bool).
     * 
     * @deprecated You should be using [Entity:GetNW2Bool](https://wiki.facepunch.com/gmod/Entity:GetNW2Bool) instead.
     * 
     * @param key - The key that is associated with the value
     * @param [fallback = false] - The value to return if we failed to retrieve the value. (If it isn't set)
     */
    GetNetworked2Bool(key: string, fallback = false): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked entity value at specified index on the entity that is set by [Entity:SetNetworked2Entity](https://wiki.facepunch.com/gmod/Entity:SetNetworked2Entity).
     * 
     * @deprecated You should be using [Entity:GetNW2Entity](https://wiki.facepunch.com/gmod/Entity:GetNW2Entity) instead.
     * 
     * @param key - The key that is associated with the value
     * @param [fallback = NULL] - The value to return if we failed to retrieve the value. (If it isn't set)
     */
    GetNetworked2Entity(key: string, fallback?: any): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked float value at specified index on the entity that is set by [Entity:SetNetworked2Float](https://wiki.facepunch.com/gmod/Entity:SetNetworked2Float).
     * 
     * @deprecated You should be using [Entity:GetNW2Float](https://wiki.facepunch.com/gmod/Entity:GetNW2Float) instead.
     * 
     * @param key - The key that is associated with the value
     * @param [fallback = 0] - The value to return if we failed to retrieve the value. (If it isn't set)
     */
    GetNetworked2Float(key: string, fallback = 0): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked integer (whole number) value that was previously set by [Entity:SetNetworked2Int](https://wiki.facepunch.com/gmod/Entity:SetNetworked2Int).
     * 
     * @deprecated You should be using [Entity:GetNW2Int](https://wiki.facepunch.com/gmod/Entity:GetNW2Int) instead.
     * 
     * **Warning:**
     * >The integer has a 32 bit limit. Use [Entity:SetNWInt](https://wiki.facepunch.com/gmod/Entity:SetNWInt) and [Entity:GetNWInt](https://wiki.facepunch.com/gmod/Entity:GetNWInt) instead
     * 
     * @param key - The key that is associated with the value
     * @param [fallback = 0] - The value to return if we failed to retrieve the value (If it isn't set).
     */
    GetNetworked2Int(key: string, fallback = 0): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked string value at specified index on the entity that is set by [Entity:SetNetworked2String](https://wiki.facepunch.com/gmod/Entity:SetNetworked2String).
     * 
     * @deprecated You should be using [Entity:GetNW2String](https://wiki.facepunch.com/gmod/Entity:GetNW2String) instead.
     * 
     * @param key - The key that is associated with the value
     * @param [fallback = ] - The value to return if we failed to retrieve the value. (If it isn't set)
     */
    GetNetworked2String(key: string, fallback?: any): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked value at specified index on the entity that is set by [Entity:SetNetworked2Var](https://wiki.facepunch.com/gmod/Entity:SetNetworked2Var).
     * 
     * @deprecated You should be using [Entity:GetNW2Var](https://wiki.facepunch.com/gmod/Entity:GetNW2Var) instead.
     * 
     * @param key - The key that is associated with the value
     * @param [fallback = nil] - The value to return if we failed to retrieve the value. (If it isn't set)
     */
    GetNetworked2Var(key: string, fallback?: any): any;
    
    /**
     * [Shared]
     * 
     * Returns callback function for given NWVar of this entity.
     * @param key - The key of the NWVar to get callback of.
     */
    GetNetworked2VarProxy(key: any): Function;
    
    /**
     * [Shared]
     * 
     * Returns all the networked2 variables in an entity.
     * 
     * @deprecated You should be using [Entity:GetNW2VarTable](https://wiki.facepunch.com/gmod/Entity:GetNW2VarTable) instead.
     * 
     * 
     */
    GetNetworked2VarTable(): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked vector value at specified index on the entity that is set by [Entity:SetNetworked2Vector](https://wiki.facepunch.com/gmod/Entity:SetNetworked2Vector).
     * 
     * @deprecated You should be using [Entity:GetNW2Vector](https://wiki.facepunch.com/gmod/Entity:GetNW2Vector) instead.
     * 
     * @param key - The key that is associated with the value
     * @param [fallback = Vector( 0, 0, 0 )] - The value to return if we failed to retrieve the value. (If it isn't set)
     */
    GetNetworked2Vector(key: string, fallback?: any): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked angle value at specified index on the entity that is set by [Entity:SetNetworkedAngle](https://wiki.facepunch.com/gmod/Entity:SetNetworkedAngle).
     * 
     * @deprecated You should use [Entity:GetNWAngle](https://wiki.facepunch.com/gmod/Entity:GetNWAngle) instead.
     * 
     * @param key - The key that is associated with the value
     * @param [fallback = Angle( 0, 0, 0 )] - The value to return if we failed to retrieve the value. ( If it isn't set )
     */
    GetNetworkedAngle(key: string, fallback?: Angle): Angle;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked boolean value at specified index on the entity that is set by [Entity:SetNetworkedBool](https://wiki.facepunch.com/gmod/Entity:SetNetworkedBool).
     * 
     * @deprecated You should use [Entity:GetNWBool](https://wiki.facepunch.com/gmod/Entity:GetNWBool) instead.
     * 
     * @param key - The key that is associated with the value
     * @param [fallback = false] - The value to return if we failed to retrieve the value. ( If it isn't set )
     */
    GetNetworkedBool(key: string, fallback = false): boolean;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked float value at specified index on the entity that is set by [Entity:SetNetworkedEntity](https://wiki.facepunch.com/gmod/Entity:SetNetworkedEntity).
     * 
     * @deprecated You should use [Entity:GetNWEntity](https://wiki.facepunch.com/gmod/Entity:GetNWEntity) instead.
     * 
     * @param key - The key that is associated with the value
     * @param [fallback = NULL] - The value to return if we failed to retrieve the value. ( If it isn't set )
     */
    GetNetworkedEntity(key: string, fallback?: Entity): Entity;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked float value at specified index on the entity that is set by [Entity:SetNetworkedFloat](https://wiki.facepunch.com/gmod/Entity:SetNetworkedFloat).
     * 
     * Seems to be the same as [Entity:GetNetworkedInt](https://wiki.facepunch.com/gmod/Entity:GetNetworkedInt).
     * 
     * @deprecated You should use [Entity:GetNWFloat](https://wiki.facepunch.com/gmod/Entity:GetNWFloat) instead.
     * 
     * @param key - The key that is associated with the value
     * @param [fallback = 0] - The value to return if we failed to retrieve the value. ( If it isn't set )
     */
    GetNetworkedFloat(key: string, fallback = 0): number;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked integer value at specified index on the entity that is set by [Entity:SetNetworkedInt](https://wiki.facepunch.com/gmod/Entity:SetNetworkedInt).
     * 
     * @deprecated You should use [Entity:GetNWInt](https://wiki.facepunch.com/gmod/Entity:GetNWInt) instead.
     * 
     * @param key - The key that is associated with the value
     * @param [fallback = 0] - The value to return if we failed to retrieve the value. ( If it isn't set )
     */
    GetNetworkedInt(key: string, fallback = 0): number;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked string value at specified index on the entity that is set by [Entity:SetNetworkedString](https://wiki.facepunch.com/gmod/Entity:SetNetworkedString).
     * 
     * @deprecated You should use [Entity:GetNWString](https://wiki.facepunch.com/gmod/Entity:GetNWString) instead.
     * 
     * @param key - The key that is associated with the value
     * @param [fallback = ] - The value to return if we failed to retrieve the value. ( If it isn't set )
     */
    GetNetworkedString(key: string, fallback?: string): string;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked value at specified index on the entity that is set by [Entity:SetNetworkedVar](https://wiki.facepunch.com/gmod/Entity:SetNetworkedVar).
     * @param key - The key that is associated with the value
     * @param [fallback = nil] - The value to return if we failed to retrieve the value. (If it isn't set)
     */
    GetNetworkedVar(key: string, fallback?: any): any;
    
    /**
     * [Shared]
     * 
     * <removed>This function was superseded by [Entity:GetNetworked2VarProxy](https://wiki.facepunch.com/gmod/Entity:GetNetworked2VarProxy). This page still exists an archive in case anybody ever stumbles across old code and needs to know what it is</removed>
     * Returns callback function for given NWVar of this entity.
     * @param name - The name of the NWVar to get callback of.
     */
    GetNetworkedVarProxy(name: string): Function;
    
    /**
     * [Shared]
     * 
     * Returns all the networked variables in an entity.
     * 
     * @deprecated You should be using [Entity:GetNWVarTable](https://wiki.facepunch.com/gmod/Entity:GetNWVarTable) instead.
     * 
     * 
     */
    GetNetworkedVarTable(): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked vector value at specified index on the entity that is set by [Entity:SetNetworkedVector](https://wiki.facepunch.com/gmod/Entity:SetNetworkedVector).
     * 
     * @deprecated You should use [Entity:GetNWVector](https://wiki.facepunch.com/gmod/Entity:GetNWVector) instead.
     * 
     * @param key - The key that is associated with the value
     * @param [fallback = Vector( 0, 0, 0 )] - The value to return if we failed to retrieve the value. ( If it isn't set )
     */
    GetNetworkedVector(key: string, fallback?: Vector): Vector;
    
    /**
     * [Shared]
     * 
     * Gets networked origin for entity.
     * 
     */
    GetNetworkOrigin(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns all network vars created by [Entity:NetworkVar](https://wiki.facepunch.com/gmod/Entity:NetworkVar) and [Entity:NetworkVarElement](https://wiki.facepunch.com/gmod/Entity:NetworkVarElement) and their current values.
     * 
     * 		This is used internally by the duplicator.
     * 
     * 		For NWVars see [Entity:GetNWVarTable](https://wiki.facepunch.com/gmod/Entity:GetNWVarTable).
     * 
     * **Note:**
     * >This function will only work on entities which had [Entity:InstallDataTable](https://wiki.facepunch.com/gmod/Entity:InstallDataTable) called on them, which is done automatically for players and all [Scripted Entities](https://wiki.facepunch.com/gmod/Scripted_Entities)
     * 
     * 
     */
    GetNetworkVars(): any;
    
    /**
     * [Shared]
     * 
     * Returns if the entity's rendering and transmitting has been disabled.
     * 
     * **Note:**
     * >This is equivalent to calling [Entity:IsEffectActive](https://wiki.facepunch.com/gmod/Entity:IsEffectActive)( EF_NODRAW )
     * 
     * 
     */
    GetNoDraw(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns the body group count of the entity.
     * 
     * **Note:**
     * >If called for Weapon (after Initialize hook) with different body groups on world model and view model will return value form view model.
     * 
     * 
     */
    GetNumBodyGroups(): number;
    
    /**
     * [Shared]
     * 
     * Returns the number of pose parameters this entity has.
     * 
     */
    GetNumPoseParameters(): number;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked angle value at specified index on the entity that is set by [Entity:SetNW2Angle](https://wiki.facepunch.com/gmod/Entity:SetNW2Angle).
     * @param key - The key that is associated with the value
     * @param [fallback = Angle( 0, 0, 0 )] - The value to return if we failed to retrieve the value. (If it isn't set)
     */
    GetNW2Angle(key: string, fallback?: any): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked boolean value at specified index on the entity that is set by [Entity:SetNW2Bool](https://wiki.facepunch.com/gmod/Entity:SetNW2Bool).
     * @param key - The key that is associated with the value
     * @param [fallback = false] - The value to return if we failed to retrieve the value. (If it isn't set)
     */
    GetNW2Bool(key: string, fallback = false): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked entity value at specified index on the entity that is set by [Entity:SetNW2Entity](https://wiki.facepunch.com/gmod/Entity:SetNW2Entity).
     * @param key - The key that is associated with the value
     * @param [fallback = NULL] - The value to return if we failed to retrieve the value. (If it isn't set)
     */
    GetNW2Entity(key: string, fallback?: any): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked float value at specified index on the entity that is set by [Entity:SetNW2Float](https://wiki.facepunch.com/gmod/Entity:SetNW2Float).
     * @param key - The key that is associated with the value
     * @param [fallback = 0] - The value to return if we failed to retrieve the value. (If it isn't set)
     */
    GetNW2Float(key: string, fallback = 0): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked integer (whole number) value that was previously set by [Entity:SetNW2Int](https://wiki.facepunch.com/gmod/Entity:SetNW2Int).
     * 
     * **Warning:**
     * >The integer has a 32 bit limit. Use [Entity:SetNWInt](https://wiki.facepunch.com/gmod/Entity:SetNWInt) and [Entity:GetNWInt](https://wiki.facepunch.com/gmod/Entity:GetNWInt) instead
     * 
     * @param key - The key that is associated with the value
     * @param [fallback = 0] - The value to return if we failed to retrieve the value (If it isn't set).
     */
    GetNW2Int(key: string, fallback = 0): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked string value at specified index on the entity that is set by [Entity:SetNW2String](https://wiki.facepunch.com/gmod/Entity:SetNW2String).
     * @param key - The key that is associated with the value
     * @param [fallback = ] - The value to return if we failed to retrieve the value. (If it isn't set)
     */
    GetNW2String(key: string, fallback?: any): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked value at specified index on the entity that is set by [Entity:SetNW2Var](https://wiki.facepunch.com/gmod/Entity:SetNW2Var).
     * @param key - The key that is associated with the value
     * @param [fallback = nil] - The value to return if we failed to retrieve the value. (If it isn't set)
     */
    GetNW2Var(key: string, fallback?: any): any;
    
    /**
     * [Shared]
     * 
     * Returns callback function for given NWVar of this entity.  
     * 				Alias of [Entity:GetNetworked2VarProxy](https://wiki.facepunch.com/gmod/Entity:GetNetworked2VarProxy)
     * @param key - The key of the NWVar to get callback of.
     */
    GetNW2VarProxy(key: any): Function;
    
    /**
     * [Shared]
     * 
     * Returns all the NW2 variables in an entity.
     * 
     * **Bug [#5396](https://github.com/Facepunch/garrysmod-issues/issues/5396):**
     * >This function will return keys with empty tables if the NW2Var is nil.
     * 
     * 
     */
    GetNW2VarTable(): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked vector value at specified index on the entity that is set by [Entity:SetNW2Vector](https://wiki.facepunch.com/gmod/Entity:SetNW2Vector).
     * @param key - The key that is associated with the value
     * @param [fallback = Vector( 0, 0, 0 )] - The value to return if we failed to retrieve the value. (If it isn't set)
     */
    GetNW2Vector(key: string, fallback?: any): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked angle value at specified index on the entity that is set by [Entity:SetNWAngle](https://wiki.facepunch.com/gmod/Entity:SetNWAngle).
     * @param key - The key that is associated with the value
     * @param [fallback = Angle( 0, 0, 0 )] - The value to return if we failed to retrieve the value. (If it isn't set)
     */
    GetNWAngle(key: string, fallback?: any): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked boolean value at specified index on the entity that is set by [Entity:SetNWBool](https://wiki.facepunch.com/gmod/Entity:SetNWBool).
     * @param key - The key that is associated with the value
     * @param [fallback = false] - The value to return if we failed to retrieve the value. (If it isn't set)
     */
    GetNWBool(key: string, fallback = false): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked entity value at specified index on the entity that is set by [Entity:SetNWEntity](https://wiki.facepunch.com/gmod/Entity:SetNWEntity).
     * @param key - The key that is associated with the value
     * @param [fallback = NULL] - The value to return if we failed to retrieve the value. (If it isn't set)
     */
    GetNWEntity(key: string, fallback?: any): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked float value at specified index on the entity that is set by [Entity:SetNWFloat](https://wiki.facepunch.com/gmod/Entity:SetNWFloat).
     * @param key - The key that is associated with the value
     * @param [fallback = 0] - The value to return if we failed to retrieve the value. (If it isn't set)
     */
    GetNWFloat(key: string, fallback = 0): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked integer (whole number) value that was previously set by [Entity:SetNWInt](https://wiki.facepunch.com/gmod/Entity:SetNWInt).
     * 
     * **Bug [#3374](https://github.com/Facepunch/garrysmod-issues/issues/3374):**
     * >This function will not round decimal values as it actually networks a float internally.
     * 
     * @param key - The key that is associated with the value
     * @param [fallback = 0] - The value to return if we failed to retrieve the value (If it isn't set).
     */
    GetNWInt(key: string, fallback = 0): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked string value at specified index on the entity that is set by [Entity:SetNWString](https://wiki.facepunch.com/gmod/Entity:SetNWString).
     * @param key - The key that is associated with the value
     * @param [fallback = ] - The value to return if we failed to retrieve the value. (If it isn't set)
     */
    GetNWString(key: string, fallback?: any): any;
    
    /**
     * [Shared]
     * 
     * Returns callback function for given NWVar of this entity.
     * <removed>This function was superseded by [Entity:GetNW2VarProxy](https://wiki.facepunch.com/gmod/Entity:GetNW2VarProxy). This page still exists an archive in case anybody ever stumbles across old code and needs to know what it is</removed>
     * @param key - The key of the NWVar to get callback of.
     */
    GetNWVarProxy(key: any): Function;
    
    /**
     * [Shared]
     * 
     * Returns all the networked variables in an entity.
     * 
     */
    GetNWVarTable(): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a networked vector value at specified index on the entity that is set by [Entity:SetNWVector](https://wiki.facepunch.com/gmod/Entity:SetNWVector).
     * @param key - The key that is associated with the value
     * @param [fallback = Vector( 0, 0, 0 )] - The value to return if we failed to retrieve the value. (If it isn't set)
     */
    GetNWVector(key: string, fallback?: any): any;
    
    /**
     * [Shared]
     * 
     * Returns the owner entity of this entity. See [Entity:SetOwner](https://wiki.facepunch.com/gmod/Entity:SetOwner) for more info.
     * 
     * **Note:**
     * >This function is generally used to disable physics interactions on projectiles being fired by their owner, but can also be used for normal ownership in case physics interactions are not involved at all. The Gravity gun will be able to pick up the entity even if the owner can't collide with it, the Physics gun however will not.
     * 
     * 
     */
    GetOwner(): Entity;
    
    /**
     * [Shared]
     * 
     * Returns the parent entity of this entity.
     * 
     */
    GetParent(): Entity;
    
    /**
     * [Shared]
     * 
     * Returns the attachment index of the entity's parent. Returns 0 if the entity is not parented to a specific attachment or if it isn't parented at all.
     * 
     * This is set by second argument of [Entity:SetParent](https://wiki.facepunch.com/gmod/Entity:SetParent) or the **SetParentAttachment** input.
     * 
     */
    GetParentAttachment(): number;
    
    /**
     * [Shared]
     * 
     * If the entity is parented to an entity that has a model with multiple physics objects (like a ragdoll), this is used to retrieve what physics object number the entity is parented to on it's parent.
     * 
     */
    GetParentPhysNum(): number;
    
    /**
     * [Shared]
     * 
     * Returns the position and angle of the entity's move parent as a 3x4 matrix ([VMatrix](https://wiki.facepunch.com/gmod/VMatrix) is 4x4 so the fourth row goes unused). The first three columns store the angle as a [rotation matrix](https://en.wikipedia.org/wiki/Rotation_matrix), and the fourth column stores the position vector.
     * 
     */
    GetParentWorldTransformMatrix(): VMatrix;
    
    /**
     * [Shared]
     * 
     * Returns whether the entity is persistent or not.
     * 
     * See [Entity:SetPersistent](https://wiki.facepunch.com/gmod/Entity:SetPersistent) for more information on persistence.
     * 
     */
    GetPersistent(): boolean;
    
    /**
     * [Server]
     * 
     * Returns player who is claiming kills of physics damage the entity deals.
     * @param [timeLimit = 1] - The time to check if the entity was still a proper physics attacker.
     * **Note:**
     * >Some entities such as the Combine Ball disregard the time limit and always return the physics attacker.
     * 
     */
    GetPhysicsAttacker(timeLimit = 1): Player;
    
    /**
     * [Shared]
     * 
     * Returns the entity's physics object, if the entity has physics.
     * 
     * **Note:**
     * >Entities don't have clientside physics objects by default, so this will return `[NULL PHYSOBJ]` on the client in most cases.
     * 
     * 
     */
    GetPhysicsObject(): PhysObj;
    
    /**
     * [Shared]
     * 
     * Returns the number of physics objects an entity has (usually 1 for non-ragdolls)
     * 
     */
    GetPhysicsObjectCount(): number;
    
    /**
     * [Shared]
     * 
     * Returns a specific physics object from an entity with multiple [PhysObj](https://wiki.facepunch.com/gmod/PhysObj)ects (like ragdolls)
     * 
     * See also [Entity:TranslateBoneToPhysBone](https://wiki.facepunch.com/gmod/Entity:TranslateBoneToPhysBone).
     * @param physNum - The number corresponding to the [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) to grab. Starts at 0.
     */
    GetPhysicsObjectNum(physNum: number): PhysObj;
    
    /**
     * [Shared]
     * 
     * Returns the playback rate of the main sequence on this entity, with 1.0 being the default speed.
     * 
     */
    GetPlaybackRate(): number;
    
    /**
     * [Shared]
     * 
     * Gets the position of entity in world.
     * 
     */
    GetPos(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the pose parameter value
     * @param name - Pose parameter name to look up
     */
    GetPoseParameter(name: string): number;
    
    /**
     * [Shared]
     * 
     * Returns name of given pose parameter
     * @param id - Id of the pose paremeter
     */
    GetPoseParameterName(id: number): string;
    
    /**
     * [Shared]
     * 
     * Returns pose parameter range
     * @param id - Pose parameter ID to look up
     */
    GetPoseParameterRange(id: number): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client]
     * 
     * Returns whether this entity is predictable or not.
     * 
     * See [Entity:SetPredictable](https://wiki.facepunch.com/gmod/Entity:SetPredictable) for more information
     * 
     */
    GetPredictable(): boolean;
    
    /**
     * [Server]
     * 
     * Called to override the preferred carry angles of this object.
     * 
     * **Note:**
     * >This callback is only called for `anim` type entities.
     * 
     * @param ply - The player who is holding the object.
     */
    GetPreferredCarryAngles(ply: Player): Angle;
    
    /**
     * [Shared]
     * 
     * Returns the entity which the ragdoll came from. The opposite of [Player:GetRagdollEntity](https://wiki.facepunch.com/gmod/Player:GetRagdollEntity).
     * 
     */
    GetRagdollOwner(): Entity;
    
    /**
     * [Client]
     * 
     * Returns the entity's render angles, set by [Entity:SetRenderAngles](https://wiki.facepunch.com/gmod/Entity:SetRenderAngles) in a drawing hook.
     * 
     */
    GetRenderAngles(): Angle;
    
    /**
     * [Client]
     * 
     * Returns render bounds of the entity as local vectors. Can be overridden by [Entity:SetRenderBounds](https://wiki.facepunch.com/gmod/Entity:SetRenderBounds).
     * 
     * If the render bounds are not inside players view, the entity will not be drawn!
     * 
     */
    GetRenderBounds(): LuaMultiReturn<[Vector, Vector]>;
    
    /**
     * [Shared]
     * 
     * Returns current render FX of the entity.
     * 
     */
    GetRenderFX(): kRenderFx;
    
    /**
     * [Client]
     * 
     * Returns the render group of the entity.
     * 
     */
    GetRenderGroup(): RENDERGROUP;
    
    /**
     * [Shared]
     * 
     * Returns the render mode of the entity.
     * 
     */
    GetRenderMode(): RENDERMODE;
    
    /**
     * [Client]
     * 
     * Returns the entity's render origin, set by [Entity:SetRenderOrigin](https://wiki.facepunch.com/gmod/Entity:SetRenderOrigin) in a drawing hook.
     * 
     */
    GetRenderOrigin(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the rightward vector of the entity, as a normalized direction vector
     * 
     */
    GetRight(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns axis-aligned bounding box (AABB) of a orientated bounding box (OBB) based on entity's rotation.
     * @param min - Minimum extent of an OBB in local coordinates.
     * @param max - Maximum extent of an OBB in local coordinates.
     */
    GetRotatedAABB(min: Vector, max: Vector): LuaMultiReturn<[Vector, Vector]>;
    
    /**
     * [Shared]
     * 
     * Returns a table of save values for an entity.
     * 
     * These tables are not the same between the client and the server, and different entities may have different fields.
     * 
     * You can get the list different fields an entity has by looking at it's source code (the 2013 SDK can be found [online](https://github.com/ValveSoftware/source-sdk-2013)). Accessible fields are defined by each `DEFINE_FIELD` and `DEFINE_KEYFIELD` inside the `DATADESC` block.
     * 
     * Take the headcrab, for example:
     * 
     * ```
     * BEGIN_DATADESC( CBaseHeadcrab )
     * 	// m_nGibCount - don't save
     * 	DEFINE_FIELD( m_bHidden, FIELD_BOOLEAN ),
     * 	DEFINE_FIELD( m_flTimeDrown, FIELD_TIME ),
     * 	DEFINE_FIELD( m_bCommittedToJump, FIELD_BOOLEAN ),
     * 	DEFINE_FIELD( m_vecCommittedJumpPos, FIELD_POSITION_VECTOR ),
     * 	DEFINE_FIELD( m_flNextNPCThink, FIELD_TIME ),
     * 	DEFINE_FIELD( m_flIgnoreWorldCollisionTime, FIELD_TIME ),
     * 	
     * 	DEFINE_KEYFIELD( m_bStartBurrowed, FIELD_BOOLEAN, "startburrowed" ),
     * 	DEFINE_FIELD( m_bBurrowed, FIELD_BOOLEAN ),
     * 	DEFINE_FIELD( m_flBurrowTime, FIELD_TIME ),
     * 	DEFINE_FIELD( m_nContext, FIELD_INTEGER ),
     * 	DEFINE_FIELD( m_bCrawlFromCanister, FIELD_BOOLEAN ),
     * 	DEFINE_FIELD( m_bMidJump, FIELD_BOOLEAN ),
     * 	DEFINE_FIELD( m_nJumpFromCanisterDir, FIELD_INTEGER ),
     * 	DEFINE_FIELD( m_bHangingFromCeiling, FIELD_BOOLEAN ),
     * 	DEFINE_FIELD( m_flIlluminatedTime, FIELD_TIME ),
     * 		
     * 	DEFINE_INPUTFUNC( FIELD_VOID, "Burrow", InputBurrow ),
     * 	DEFINE_INPUTFUNC( FIELD_VOID, "BurrowImmediate", InputBurrowImmediate ),
     * 	DEFINE_INPUTFUNC( FIELD_VOID, "Unburrow", InputUnburrow ),
     * 	DEFINE_INPUTFUNC( FIELD_VOID, "StartHangingFromCeiling", InputStartHangingFromCeiling ),
     * 	DEFINE_INPUTFUNC( FIELD_VOID, "DropFromCeiling", InputDropFromCeiling ),
     * 	
     * 	// Function Pointers
     * 	DEFINE_THINKFUNC( EliminateRollAndPitch ),
     * 	DEFINE_THINKFUNC( ThrowThink ),
     * 	DEFINE_ENTITYFUNC( LeapTouch ),
     * END_DATADESC()
     * ```
     * 
     * * For each **DEFINE_FIELD**, the save table will have a key with name of **first** argument.
     * * For each **DEFINE_KEYFIELD**, the save table will have a key with name of the **third** argument.
     * 
     * **Note:**
     * >It is highly recommended to use [Entity:GetInternalVariable](https://wiki.facepunch.com/gmod/Entity:GetInternalVariable) for retrieving a single key of the save table for performance reasons.
     * 
     * @param showAll - If set, shows all variables, not just the ones marked for save/load system.
     */
    GetSaveTable(showAll: boolean): any;
    
    /**
     * [Shared]
     * 
     * Return the index of the model sequence that is currently active for the entity.
     * 
     */
    GetSequence(): number;
    
    /**
     * [Shared]
     * 
     * Return activity id out of sequence id. Opposite of [Entity:SelectWeightedSequence](https://wiki.facepunch.com/gmod/Entity:SelectWeightedSequence).
     * @param seq - The sequence ID
     */
    GetSequenceActivity(seq: number): ACT;
    
    /**
     * [Shared]
     * 
     * Returns the activity name for the given sequence id.
     * @param sequenceId - The sequence id.
     */
    GetSequenceActivityName(sequenceId: number): ACT;
    
    /**
     * [Shared]
     * 
     * Returns the amount of sequences ( animations ) the entity's model has.
     * 
     */
    GetSequenceCount(): number;
    
    /**
     * [Shared]
     * 
     * Returns the ground speed of the entity's sequence.
     * @param sequenceId - The sequence ID.
     */
    GetSequenceGroundSpeed(sequenceId: number): number;
    
    /**
     * [Shared]
     * 
     * Returns a table of information about an entity's sequence.
     * @param sequenceId - The sequence id of the entity.
     */
    GetSequenceInfo(sequenceId: number): SequenceInfo;
    
    /**
     * [Shared]
     * 
     * Returns a list of all sequences ( animations ) the model has.
     * 
     */
    GetSequenceList(): any;
    
    /**
     * [Shared]
     * 
     * Returns an entity's sequence move distance (the change in position over the course of the entire sequence).
     * 
     * See [Entity:GetSequenceMovement](https://wiki.facepunch.com/gmod/Entity:GetSequenceMovement) for a similar function with more options.
     * @param sequenceId - The sequence index.
     */
    GetSequenceMoveDist(sequenceId: number): number;
    
    /**
     * [Shared]
     * 
     * Returns the delta movement and angles of a sequence of the entity's model.
     * @param sequenceId - The sequence index. See [Entity:LookupSequence](https://wiki.facepunch.com/gmod/Entity:LookupSequence).
     * @param [startCycle = 0] - The sequence start cycle. 0 is the start of the animation, 1 is the end.
     * @param [endCyclnde = 1] - The sequence end cycle. 0 is the start of the animation, 1 is the end. Values like 2, etc are allowed.
     */
    GetSequenceMovement(sequenceId: number, startCycle = 0, endCyclnde = 1): LuaMultiReturn<[boolean, Vector, Angle]>;
    
    /**
     * [Server]
     * 
     * Returns the change in heading direction in between the start and the end of the sequence.
     * @param seq - The sequence index. See [Entity:LookupSequence](https://wiki.facepunch.com/gmod/Entity:LookupSequence).
     */
    GetSequenceMoveYaw(seq: number): number;
    
    /**
     * [Shared]
     * 
     * Return the name of the sequence for the index provided.
     * Refer to [Entity:GetSequence](https://wiki.facepunch.com/gmod/Entity:GetSequence) to find the current active sequence on this entity.
     * 
     * See [Entity:LookupSequence](https://wiki.facepunch.com/gmod/Entity:LookupSequence) for a function that does the opposite.
     * @param index - The index of the sequence to look up.
     */
    GetSequenceName(index: number): string;
    
    /**
     * [Shared]
     * 
     * Returns an entity's sequence velocity at given animation frame.
     * @param sequenceId - The sequence index.
     * @param cycle - The point in animation, from `0` to `1`.
     */
    GetSequenceVelocity(sequenceId: number, cycle: number): Vector;
    
    /**
     * [Shared]
     * 
     * Checks if the entity plays a sound when picked up by a player.
     * 
     */
    GetShouldPlayPickupSound(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns if entity should create a server ragdoll on death or a client one.
     * 
     */
    GetShouldServerRagdoll(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns the skin index of the current skin.
     * 
     */
    GetSkin(): number;
    
    /**
     * [Shared]
     * 
     * Returns solid type of an entity.
     * 
     */
    GetSolid(): SOLID;
    
    /**
     * [Shared]
     * 
     * Returns solid flag(s) of an entity.
     * 
     */
    GetSolidFlags(): FSOLID;
    
    /**
     * [Shared]
     * 
     * Returns if we should show a spawn effect on spawn on this entity.
     * 
     */
    GetSpawnEffect(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns the bitwise spawn flags used by the entity. These can be set by [Entity:SetKeyValue](https://wiki.facepunch.com/gmod/Entity:SetKeyValue).
     * 
     */
    GetSpawnFlags(): number;
    
    /**
     * [Shared]
     * 
     * Returns the material override for the given index. 
     * 
     * Returns "" if no material override exists. Use [Entity:GetMaterials](https://wiki.facepunch.com/gmod/Entity:GetMaterials) to list it's default materials.
     * 
     * **Bug [#3362](https://github.com/Facepunch/garrysmod-issues/issues/3362):**
     * >The server's value takes priority on the client.
     * 
     * @param index - The index of the sub material. Acceptable values are from 0 to 31.
     */
    GetSubMaterial(index: number): string;
    
    /**
     * [Shared]
     * 
     * Returns a list of models included into the entity's model in the .qc file.
     * 
     */
    GetSubModels(): any;
    
    /**
     * [Shared]
     * 
     * Returns two vectors representing the minimum and maximum extent of the entity's axis-aligned bounding box for hitbox detection. In most cases, this will return the same bounding box as [Entity:WorldSpaceAABB](https://wiki.facepunch.com/gmod/Entity:WorldSpaceAABB) unless it was changed by [Entity:SetSurroundingBounds](https://wiki.facepunch.com/gmod/Entity:SetSurroundingBounds) or [Entity:SetSurroundingBoundsType](https://wiki.facepunch.com/gmod/Entity:SetSurroundingBoundsType).
     * 
     */
    GetSurroundingBounds(): LuaMultiReturn<[Vector, Vector]>;
    
    /**
     * [Shared]
     * 
     * Returns the table that contains all script values saved within the entity.
     * 
     */
    GetTable(): any;
    
    /**
     * [Shared]
     * 
     * Returns the last trace used in the collision callbacks such as [ENTITY:StartTouch](https://wiki.facepunch.com/gmod/ENTITY:StartTouch), [ENTITY:Touch](https://wiki.facepunch.com/gmod/ENTITY:Touch) and [ENTITY:EndTouch](https://wiki.facepunch.com/gmod/ENTITY:EndTouch).
     * 
     * **Note:**
     * >This returns the last collision trace used, regardless of the entity that caused it. As such, it's only reliable when used in the hooks mentioned above
     * 
     * 
     */
    GetTouchTrace(): TraceResult;
    
    /**
     * [Shared]
     * 
     * Returns true if the TransmitWithParent flag is set or not.
     * 
     */
    GetTransmitWithParent(): boolean;
    
    /**
     * [Server]
     * 
     * Returns if the entity is unfreezable, meaning it can't be frozen with the physgun. By default props are freezable, so this function will typically return false.
     * 
     */
    GetUnFreezable(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns the upward vector of the entity, as a normalized direction vector
     * 
     */
    GetUp(): Vector;
    
    /**
     * [Shared]
     * 
     * Retrieves a value from entity's [Entity:GetTable](https://wiki.facepunch.com/gmod/Entity:GetTable). Set by [Entity:SetVar](https://wiki.facepunch.com/gmod/Entity:SetVar).
     * @param key - Key of the value to retrieve
     * @param [default_ = nil] - A default value to fallback to if we couldn't retrieve the value from entity
     */
    GetVar(key: any, default_?: any): any;
    
    /**
     * [Shared]
     * 
     * Returns the entity's velocity.
     * 
     * **Bug [#774](https://github.com/Facepunch/garrysmod-issues/issues/774):**
     * >This can become out-of-sync on the client if the server has been up for a long time.
     * 
     * **Note:**
     * >Actually binds to `CBaseEntity::GetAbsVelocity()` on the server and `C_BaseEntity::EstimateAbsVelocity()` on the client. This returns the total velocity of the entity and is equal to local velocity + base velocity.
     * 
     * 
     */
    GetVelocity(): Vector;
    
    /**
     * [Server]
     * 
     * Returns ID of workshop addon that the entity is from.
     * 
     * @deprecated The function **currently** does nothing and always returns nil
     * 
     * 
     */
    GetWorkshopID(): number;
    
    /**
     * [Shared]
     * 
     * Returns the position and angle of the entity as a 3x4 matrix ([VMatrix](https://wiki.facepunch.com/gmod/VMatrix) is 4x4 so the fourth row goes unused). The first three columns store the angle as a [rotation matrix](https://en.wikipedia.org/wiki/Rotation_matrix), and the fourth column stores the position vector.
     * 
     * **Bug [#2764](https://github.com/Facepunch/garrysmod-issues/issues/2764):**
     * >This returns incorrect results for the angular component (columns 1-3) for the local player clientside.
     * 
     * **Bug [#3106](https://github.com/Facepunch/garrysmod-issues/issues/3106):**
     * >This will use the local player's [Global.EyeAngles](https://wiki.facepunch.com/gmod/Global.EyeAngles) in.
     * 
     * **Bug [#3107](https://github.com/Facepunch/garrysmod-issues/issues/3107):**
     * >Columns 1-3 will be all 0 (angular component) inwhile paused in single-player.
     * 
     * 
     */
    GetWorldTransformMatrix(): VMatrix;
    
    /**
     * [Shared]
     * 
     * Causes the entity to break into its current models gibs, if it has any.
     * 
     * You must call [Entity:PrecacheGibs](https://wiki.facepunch.com/gmod/Entity:PrecacheGibs) on the entity before using this function, or it will not create any gibs.
     * 
     * If called on server, the gibs will be spawned on the currently connected clients and will not be synchronized. Otherwise the gibs will be spawned only for the client the function is called on.
     * 
     * **Note:**
     * >this function will not remove or hide the entity it is called on.
     * 	For more expensive version of this function see [Entity:GibBreakServer](https://wiki.facepunch.com/gmod/Entity:GibBreakServer).
     * 
     * @param force - The force to apply to the created gibs.
     * @param [clr = nil] - If set, this will be color of the broken gibs instead of the entity's color.
     */
    GibBreakClient(force: Vector, clr?: any): void;
    
    /**
     * [Shared]
     * 
     * Causes the entity to break into its current models gibs, if it has any.
     * 
     * You must call [Entity:PrecacheGibs](https://wiki.facepunch.com/gmod/Entity:PrecacheGibs) on the entity before using this function, or it will not create any gibs.
     * 
     * The gibs will be spawned on the server and be synchronized with all clients.
     * 
     * Note, that this function will not remove or hide the entity it is called on.
     * 
     * This function is affected by `props_break_max_pieces_perframe` and `props_break_max_pieces` console variables.
     * 
     * **Warning:**
     * >Large numbers of serverside gibs will cause lag.
     * 
     * You can avoid this cost by spawning the gibs on the client using [Entity:GibBreakClient](https://wiki.facepunch.com/gmod/Entity:GibBreakClient)
     * 
     * **Note:**
     * >Despite existing on client, it doesn't actually do anything on client.
     * 
     * @param force - The force to apply to the created gibs
     */
    GibBreakServer(force: Vector): void;
    
    /**
     * [Shared]
     * 
     * Returns whether or not the bone manipulation functions have ever been called on given  entity.
     * 
     * Related functions are [Entity:ManipulateBonePosition](https://wiki.facepunch.com/gmod/Entity:ManipulateBonePosition), [Entity:ManipulateBoneAngles](https://wiki.facepunch.com/gmod/Entity:ManipulateBoneAngles), [Entity:ManipulateBoneJiggle](https://wiki.facepunch.com/gmod/Entity:ManipulateBoneJiggle), and [Entity:ManipulateBoneScale](https://wiki.facepunch.com/gmod/Entity:ManipulateBoneScale).
     * 
     * **Bug [#3131](https://github.com/Facepunch/garrysmod-issues/issues/3131):**
     * >This will return true if the entity's bones have ever been manipulated. Resetting the position/angles/jiggle/scaling to 0,0,0 will not affect this function.
     * 
     * 
     */
    HasBoneManipulations(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether or not the the entity has had flex manipulations performed with [Entity:SetFlexWeight](https://wiki.facepunch.com/gmod/Entity:SetFlexWeight) or [Entity:SetFlexScale](https://wiki.facepunch.com/gmod/Entity:SetFlexScale).
     * 
     */
    HasFlexManipulatior(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether this entity has the specified spawnflags bits set.
     * @param spawnFlags - The spawnflag bits to check, see [Enums/SF](https://wiki.facepunch.com/gmod/Enums/SF).
     */
    HasSpawnFlags(spawnFlags: SF): boolean;
    
    /**
     * [Server]
     * 
     * Returns the position of the head of this entity, NPCs use this internally to aim at their targets.
     * 
     * **Note:**
     * >This only works on players and NPCs.
     * 
     * @param origin - The vector of where the attack comes from.
     */
    HeadTarget(origin: Vector): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the health of the entity.
     * 
     */
    Health(): number;
    
    /**
     * [Server]
     * 
     * Sets the entity on fire.
     * 
     * See also [Entity:Extinguish](https://wiki.facepunch.com/gmod/Entity:Extinguish).
     * @param length - How long to keep the entity ignited, in seconds.
     * @param [radius = 0] - The radius of the ignition, will ignite everything around the entity that is in this radius.
     */
    Ignite(length: number, radius = 0): void;
    
    /**
     * [Client]
     * 
     * Initializes this entity as being clientside only.
     * 
     * Only works on entities fully created clientside, and as such it currently has no use due to this being automatically called by [ents.CreateClientProp](https://wiki.facepunch.com/gmod/ents.CreateClientProp), [ents.CreateClientside](https://wiki.facepunch.com/gmod/ents.CreateClientside), [Global.ClientsideModel](https://wiki.facepunch.com/gmod/Global.ClientsideModel) and [Global.ClientsideScene](https://wiki.facepunch.com/gmod/Global.ClientsideScene).
     * 
     * @deprecated This function got disabled and will always throw an error if it's used. This is the error: 
     * ```
     * [ERROR] InitializeAsClientEntity is deprecated and should no longer be used.
     * ```
     * 
     * 
     */
    InitializeAsClientEntity(): void;
    
    /**
     * [Server]
     * 
     * Fires input to the entity with the ability to make another entity responsible, bypassing the event queue system.
     * 
     * You should only use this function over [Entity:Fire](https://wiki.facepunch.com/gmod/Entity:Fire) if you know what you are doing.
     * 
     * See also [Entity:Fire](https://wiki.facepunch.com/gmod/Entity:Fire) for a function that conforms to the internal map IO event queue and [GM:AcceptInput](https://wiki.facepunch.com/gmod/GM:AcceptInput) for a hook that can intercept inputs.
     * @param input - The name of the input to fire
     * @param [activator = nil] - The entity that caused this input (i.e. the player who pushed a button)
     * @param [caller = nil] - The entity that is triggering this input (i.e. the button that was pushed)
     * @param [param = nil] - The value to give to the input. Can be either a [string](https://wiki.facepunch.com/gmod/string), a [number](https://wiki.facepunch.com/gmod/number) or a [boolean](https://wiki.facepunch.com/gmod/boolean).
     */
    Input(input: string, activator?: Entity, caller?: Entity, param?: any): void;
    
    /**
     * [Shared]
     * 
     * Sets up Data Tables from entity to use with [Entity:NetworkVar](https://wiki.facepunch.com/gmod/Entity:NetworkVar).
     * 
     */
    InstallDataTable(): void;
    
    /**
     * [Client]
     * 
     * Resets the entity's bone cache values in order to prepare for a model change.
     * 
     * This should be called after calling [Entity:SetPoseParameter](https://wiki.facepunch.com/gmod/Entity:SetPoseParameter).
     * 
     */
    InvalidateBoneCache(): void;
    
    /**
     * [Shared]
     * 
     * Returns true if the entity has constraints attached to it
     * 
     * **Bug [#3837](https://github.com/Facepunch/garrysmod-issues/issues/3837):**
     * >This will only update clientside if the server calls it first. This only checks constraints added through the [constraint](https://wiki.facepunch.com/gmod/constraint) so this will not react to map constraints.
     * 
     * 
     */
    IsConstrained(): boolean;
    
    /**
     * [Server]
     * 
     * Returns if entity is constraint or not
     * 
     */
    IsConstraint(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether the entity is dormant or not.
     * 
     * Client/server entities become dormant when they leave the PVS on the server. Client side entities can decide for themselves whether to become dormant.   
     * This mainly applies to [PVS (Potential Visibility Set)](https://developer.valvesoftware.com/wiki/PVS "PVS - Valve Developer Community").
     * 
     */
    IsDormant(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether an entity has engine effect applied or not.
     * @param effect - The effect to check for, see [Enums/EF](https://wiki.facepunch.com/gmod/Enums/EF).
     */
    IsEffectActive(effect: EF): boolean;
    
    /**
     * [Shared]
     * 
     * Checks if given flag is set or not.
     * @param flag - The engine flag to test, see [Enums/EFL](https://wiki.facepunch.com/gmod/Enums/EFL)
     */
    IsEFlagSet(flag: EFL): boolean;
    
    /**
     * [Shared]
     * 
     * Checks if given flag(s) is set or not.
     * @param flag - The engine flag(s) to test, see [Enums/FL](https://wiki.facepunch.com/gmod/Enums/FL)
     */
    IsFlagSet(flag: FL): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether the entity is inside a wall or outside of the map.
     * 
     * **Note:**
     * >Internally this function uses [util.IsInWorld](https://wiki.facepunch.com/gmod/util.IsInWorld), that means that this function only checks [Entity:GetPos](https://wiki.facepunch.com/gmod/Entity:GetPos) of the entity. If an entity is only partially inside a wall, or has a weird GetPos offset, this function may not give reliable output.
     * 
     * 
     */
    IsInWorld(): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether the entity is lag compensated or not.
     * 
     */
    IsLagCompensated(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns true if the target is in line of sight.
     * 
     * **Note:**
     * >This will only work when called on CBaseCombatCharacter entities. This includes players, NPCs, grenades, RPG rockets, crossbow bolts, and physics cannisters.
     * 
     * @param target - The target to test. You can also supply an [Entity](https://wiki.facepunch.com/gmod/Entity) instead of a [Vector](https://wiki.facepunch.com/gmod/Vector)
     */
    IsLineOfSightClear(target: Vector): boolean;
    
    /**
     * [Shared]
     * 
     * Returns if the entity is going to be deleted in the next frame. Entities marked for deletion should not be accessed.
     * 
     */
    IsMarkedForDeletion(): boolean;
    
    /**
     * [Shared]
     * 
     * Checks if the entity is a [NextBot](https://wiki.facepunch.com/gmod/NextBot) or not.
     * 
     */
    IsNextBot(): boolean;
    
    /**
     * [Shared]
     * 
     * Checks if the entity is an NPC or not.
     * 
     * This will return false for [NextBot](https://wiki.facepunch.com/gmod/NextBot)s, see [Entity:IsNextBot](https://wiki.facepunch.com/gmod/Entity:IsNextBot) for that.
     * 
     */
    IsNPC(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether the entity is on fire.
     * 
     */
    IsOnFire(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether the entity is on ground or not.
     * 
     * Internally, this checks if <page text="FL_ONGROUND">Enums/FL</page> is set on the entity.
     * 
     * This function is an alias of [Entity:OnGround](https://wiki.facepunch.com/gmod/Entity:OnGround).
     * 
     */
    IsOnGround(): boolean;
    
    /**
     * [Shared]
     * 
     * Checks if the entity is a player or not.
     * 
     */
    IsPlayer(): boolean;
    
    /**
     * [Server]
     * 
     * Returns true if the entity is being held by a player. Either by physics gun, gravity gun or use-key (+use).
     * 
     * **Bug [#2046](https://github.com/Facepunch/garrysmod-issues/issues/2046):**
     * >If multiple players are holding an object and one drops it, this will return false despite the object still being held.
     * 
     * 
     */
    IsPlayerHolding(): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether there's a gesture with the given activity being played.
     * 
     * **Note:**
     * >This function only works on [BaseAnimatingOverlay](https://wiki.facepunch.com/gmod/BaseAnimatingOverlay) entites!
     * 
     * @param activity - The activity to test. See [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT).
     */
    IsPlayingGesture(activity: ACT): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether a given point is within the entity's Orientated Bounding Box.
     * 
     * This relies on the entity having a collision mesh (not a physics object) and will be affected by `SOLID_NONE`.
     * @param point - The point to test, in world space coordinates.
     */
    IsPointInBounds(point: Vector): boolean;
    
    /**
     * [Shared]
     * 
     * Checks if the entity is a ragdoll.
     * 
     */
    IsRagdoll(): boolean;
    
    /**
     * [Shared]
     * 
     * Checks if the entity is a SENT or a built-in entity.
     * 
     */
    IsScripted(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether the entity's current sequence is finished or not.
     * 
     */
    IsSequenceFinished(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns if the entity is solid or not.
     * Very useful for determining if the entity is a trigger or not.
     * 
     */
    IsSolid(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether the entity is a valid entity or not.
     * 
     * An entity is valid if:
     * * It is not a <page text="NULL">Global_Variables</page> entity
     * * It is not the worldspawn entity ([game.GetWorld](https://wiki.facepunch.com/gmod/game.GetWorld))
     * 
     * This might be a cause for a lot of headache. Usually happening during networking etc., when completely valid entities suddenly become invalid on the client, but are never filtered with IsValid(). See [GM:InitPostEntity](https://wiki.facepunch.com/gmod/GM:InitPostEntity) for more details.
     * 
     * **Warning:**
     * >NULL entities can still be assigned with key/value pairs, but they will be instantly negated. See example 3
     * 
     * **Note:**
     * >Instead of calling this method directly, it's a good idea to call the global [Global.IsValid](https://wiki.facepunch.com/gmod/Global.IsValid) instead, however if you're sure the variable you're using is always an entity object it's better to use this method
     * 
     * 
     */
    IsValid(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether the given layer ID is valid and exists on this entity.
     * 
     * **Note:**
     * >This function only works on [BaseAnimatingOverlay](https://wiki.facepunch.com/gmod/BaseAnimatingOverlay) entities.
     * 
     * @param layerID - The Layer ID
     */
    IsValidLayer(layerID: number): boolean;
    
    /**
     * [Shared]
     * 
     * Checks if the entity is a vehicle or not.
     * 
     */
    IsVehicle(): boolean;
    
    /**
     * [Shared]
     * 
     * Checks if the entity is a weapon or not.
     * 
     */
    IsWeapon(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether the entity is a widget or not.
     * 
     * This is used by the "Edit Bones" context menu property.
     * 
     */
    IsWidget(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns if the entity is the map's Entity[0] worldspawn
     * 
     */
    IsWorld(): boolean;
    
    /**
     * [Shared]
     * 
     * Converts a vector local to an entity into a worldspace vector
     * @param lpos - The local vector
     */
    LocalToWorld(lpos: Vector): Vector;
    
    /**
     * [Shared]
     * 
     * Converts a local angle (local to the entity) to a world angle.
     * @param ang - The local angle
     */
    LocalToWorldAngles(ang: Angle): Angle;
    
    /**
     * [Shared]
     * 
     * Returns the attachment index of the given attachment name.
     * @param attachmentName - The name of the attachment.
     */
    LookupAttachment(attachmentName: string): number;
    
    /**
     * [Shared]
     * 
     * Gets the bone index of the given bone name, returns nothing if the bone does not exist.
     * @param boneName - The name of the bone.
     * Common generic bones ( for player models and some HL2 models ): 
     * * ValveBiped.Bip01_Head1
     * * ValveBiped.Bip01_Spine
     * * ValveBiped.Anim_Attachment_RH
     * Common hand bones (left hand equivalents also available, replace _R_ with _L_)
     * * ValveBiped.Bip01_R_Hand
     * * ValveBiped.Bip01_R_Forearm
     * * ValveBiped.Bip01_R_Foot
     * * ValveBiped.Bip01_R_Thigh
     * * ValveBiped.Bip01_R_Calf
     * * ValveBiped.Bip01_R_Shoulder
     * * ValveBiped.Bip01_R_Elbow
     */
    LookupBone(boneName: string): number;
    
    /**
     * [Shared]
     * 
     * Returns pose parameter ID from its name.
     * @param name - Pose parameter name
     */
    LookupPoseParameter(name: string): number;
    
    /**
     * [Shared]
     * 
     * Returns sequence ID from its name. See [Entity:GetSequenceName](https://wiki.facepunch.com/gmod/Entity:GetSequenceName) for a function that does the opposite.
     * @param name - Sequence name
     */
    LookupSequence(name: string): LuaMultiReturn<[number, number]>;
    
    /**
     * [Shared]
     * 
     * Turns the [Entity:GetPhysicsObject](https://wiki.facepunch.com/gmod/Entity:GetPhysicsObject) into a physics shadow.
     * It's used internally for the Player's and NPC's physics object, and certain HL2 entities such as the crane.
     * 
     * A physics shadow can be used to have static entities that never move by setting both arguments to false.
     * 
     * **Note:**
     * >Unlike [Entity:PhysicsInitShadow](https://wiki.facepunch.com/gmod/Entity:PhysicsInitShadow), this function doesn't remove the current physics object.
     * 
     * @param [allowPhysicsMovement = true] - Whether to allow the physics shadow to move under stress.
     * @param [allowPhysicsRotation = true] - Whether to allow the physics shadow to rotate under stress.
     */
    MakePhysicsObjectAShadow(allowPhysicsMovement = true, allowPhysicsRotation = true): void;
    
    /**
     * [Shared]
     * 
     * Sets custom bone angles.
     * 
     * **Bug [#5148](https://github.com/Facepunch/garrysmod-issues/issues/5148):**
     * >When used repeatedly serverside, this method is strongly discouraged due to the huge network traffic produced.
     * 
     * @param boneID - Index of the bone you want to manipulate
     * @param ang - Angle to apply.
     * The angle is relative to the original bone angle, not relative to the world or the entity.
     * @param [networking = true] - boolean to network these changes (if called from server)
     */
    ManipulateBoneAngles(boneID: number, ang: Angle, networking = true): void;
    
    /**
     * [Shared]
     * 
     * Manipulates the bone's jiggle status. This allows non jiggly bones to become jiggly.
     * @param boneID - Index of the bone you want to manipulate.
     * @param enabled - * `0` = No Jiggle
     * * `1` = Jiggle
     */
    ManipulateBoneJiggle(boneID: number, enabled: number): void;
    
    /**
     * [Shared]
     * 
     * Sets custom bone offsets.
     * @param boneID - Index of the bone you want to manipulate.
     * @param pos - Position vector to apply. Note that the position is relative to the original bone position, not relative to the world or the entity.
     * @param [networking = true] - boolean to network these changes (if called from server)
     */
    ManipulateBonePosition(boneID: number, pos: Vector, networking = true): void;
    
    /**
     * [Shared]
     * 
     * Sets custom bone scale.
     * 
     * **Bug [#5148](https://github.com/Facepunch/garrysmod-issues/issues/5148):**
     * >When used repeatedly serverside, this method is strongly discouraged due to the huge network traffic produced.
     * 
     * **Bug [#3502](https://github.com/Facepunch/garrysmod-issues/issues/3502):**
     * >This does not scale procedural bones.
     * 
     * @param boneID - Index of the bone you want to manipulate
     * @param scale - Scale vector to apply. Note that the scale is relative to the original bone scale, not relative to the world or the entity.
     * **Bug [#1249](https://github.com/Facepunch/garrysmod-issues/issues/1249):**
     * >The vector will be normalised if its longer than 32 units.
     * 
     */
    ManipulateBoneScale(boneID: number, scale: Vector): void;
    
    /**
     * [Shared]
     * 
     * Returns entity's map creation ID. Unlike [Entity:EntIndex](https://wiki.facepunch.com/gmod/Entity:EntIndex) or [Entity:GetCreationID](https://wiki.facepunch.com/gmod/Entity:GetCreationID), it will always be the same on same map, no matter how much you clean up or restart it.
     * 
     * To be used in conjunction with [ents.GetMapCreatedEntity](https://wiki.facepunch.com/gmod/ents.GetMapCreatedEntity).
     * 
     */
    MapCreationID(): number;
    
    /**
     * [Client]
     * 
     * Refreshes the shadow of the entity.
     * 
     */
    MarkShadowAsDirty(): void;
    
    /**
     * [Shared]
     * 
     * Fires the muzzle flash effect of the weapon the entity is carrying. This only creates a light effect and is often called alongside [Weapon:SendWeaponAnim](https://wiki.facepunch.com/gmod/Weapon:SendWeaponAnim)
     * 
     */
    MuzzleFlash(): void;
    
    /**
     * [Shared]
     * 
     * Performs a Ray-Orientated Bounding Box intersection from the given position to the origin of the OBBox with the entity and returns the hit position on the OBBox.
     * 
     * This relies on the entity having a collision mesh (not a physics object) and will be affected by `SOLID_NONE`
     * @param position - The vector to start the intersection from.
     */
    NearestPoint(position: Vector): Vector;
    
    /**
     * [Shared]
     * 
     * Creates a network variable on the entity and adds Set/Get functions for it. This function should only be called in [ENTITY:SetupDataTables](https://wiki.facepunch.com/gmod/ENTITY:SetupDataTables).
     * 
     * See [Entity:NetworkVarNotify](https://wiki.facepunch.com/gmod/Entity:NetworkVarNotify) for a function to hook NetworkVar changes.
     * 
     * Combining this function with [util.TableToJSON](https://wiki.facepunch.com/gmod/util.TableToJSON) can also provide a way to network tables as serialized strings.
     * 
     * **Warning:**
     * >Make sure to not call the SetDT* and your custom set methods on the client realm unless you know exactly what you are doing.
     * 
     * **Note:**
     * >Entity NetworkVars are influenced by the return value of [ENTITY:UpdateTransmitState](https://wiki.facepunch.com/gmod/ENTITY:UpdateTransmitState).  
     * 	So if you use the **PVS**(**default**), then the NetworkVars can be different for each client.
     * 
     * @param type - Supported choices:
     * * `String` (up to 511 characters)
     * * `Bool`
     * * `Float`
     * * `Int` (32-bit signed integer)
     * * `Vector`
     * * `Angle`
     * * `Entity`
     * @param slot - Each network variable has to have a unique slot. The slot is per type - so you can have an int in slot `0`, a bool in slot `0` and a float in slot `0` etc. You can't have two ints in slot `0`, instead you would do a int in slot `0` and another int in slot `1`.
     * The max slots right now are `32` - so you should pick a number between `0` and `31`. An exception to this is strings which has a max slots of `4`.
     * @param name - The name will affect how you access it. If you call it `Foo` you would add two new functions on your entity - `SetFoo()` and `GetFoo()`. So be careful that what you call it won't collide with any existing functions (don't call it `Pos` for example).
     * @param [extended = nil] - A table of extended information.
     * `KeyName`
     * * Allows the NetworkVar to be set using [Entity:SetKeyValue](https://wiki.facepunch.com/gmod/Entity:SetKeyValue). This is useful if you're making an entity that you want to be loaded in a map. The sky entity uses this.
     * `Edit`
     * * The edit key lets you mark this variable as editable. See [Editable Entities](https://wiki.facepunch.com/gmod/Editable_Entities) for more information.
     */
    NetworkVar(type: string, slot: number, name: string, extended?: any): void;
    
    /**
     * [Shared]
     * 
     * Similarly to [Entity:NetworkVar](https://wiki.facepunch.com/gmod/Entity:NetworkVar), creates a network variable on the entity and adds Set/Get functions for it. This method stores it's value as a member value of a vector or an angle. This allows to go beyond the normal variable limit of [Entity:NetworkVar](https://wiki.facepunch.com/gmod/Entity:NetworkVar) for `Int` and `Float` types, at the expense of `Vector` and `Angle` limit.
     * 
     * This function should only be called in [ENTITY:SetupDataTables](https://wiki.facepunch.com/gmod/ENTITY:SetupDataTables).
     * 
     * **Warning:**
     * >Make sure to not call the SetDT* and your custom set methods on the client realm unless you know exactly what you are doing.
     * 
     * @param type - Supported choices:
     * * `Vector`
     * * `Angle`
     * @param slot - The slot for this `Vector` or `Angle`, from `0` to `31`. See [Entity:NetworkVar](https://wiki.facepunch.com/gmod/Entity:NetworkVar) for more detailed explanation.
     * @param element - Which element of a `Vector` or an `Angle` to store the value on. This can be `p`, `y`, `r` for [Angle](https://wiki.facepunch.com/gmod/Angle)s, and `x`, `y`, `z` for [Vector](https://wiki.facepunch.com/gmod/Vector)s
     * @param name - The name will affect how you access it. If you call it `Foo` you would add two new functions on your entity - `SetFoo()` and `GetFoo()`. So be careful that what you call it won't collide with any existing functions (don't call it "Pos" for example).
     * @param [extended = nil] - A table of extra information. See [Entity:NetworkVar](https://wiki.facepunch.com/gmod/Entity:NetworkVar) for details.
     */
    NetworkVarElement(type: string, slot: number, element: string, name: string, extended?: any): void;
    
    /**
     * [undefined]
     * 
     * Creates a callback that will execute when the given network variable changes - that is, when the `Set<name>()` function is run.
     * 
     * 	</description>
     * 	<realm>Shared</realm>
     * 	<file line="315-L325">lua/includes/extensions/entity.lua</file>
     * 	<args>
     * 		<arg name="name" type="string">Name of variable to track changes of.</arg>
     * 		<arg name="callback" type="function">The function to call when the variable changes. It is passed 4 arguments:
     * * [Entity](https://wiki.facepunch.com/gmod/Entity) entity - Entity whos variable changed.
     * * [string](https://wiki.facepunch.com/gmod/string) name - Name of changed variable.
     * * [any](https://wiki.facepunch.com/gmod/any) old - Old/current variable value.
     * * [any](https://wiki.facepunch.com/gmod/any) new - New variable value that it was set to.</arg>
     * 	</args>
     * 
     */
    NetworkVarNotify(): void;
    
    /**
     * [Shared]
     * 
     * In the case of a scripted entity, this will cause the next [ENTITY:Think](https://wiki.facepunch.com/gmod/ENTITY:Think) event to be run at the given time.
     * 
     * Does not work clientside! Use [Entity:SetNextClientThink](https://wiki.facepunch.com/gmod/Entity:SetNextClientThink) instead.
     * 
     * **Bug [#3269](https://github.com/Facepunch/garrysmod-issues/issues/3269):**
     * >This does not work with SWEPs or Nextbots.
     * 
     * @param timestamp - The relative to [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime) timestamp, at which the next think should occur.
     */
    NextThink(timestamp: number): void;
    
    /**
     * [Shared]
     * 
     * Returns the center of an entity's bounding box in local space.
     * 
     */
    OBBCenter(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the highest corner of an entity's bounding box as a local vector.
     * 
     */
    OBBMaxs(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the lowest corner of an entity's bounding box as a local vector.
     * 
     */
    OBBMins(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the entity's capabilities as a bitfield.
     * 
     * In the engine this function is mostly used to check the use type, the save/restore system and level transitions flags.
     * 
     * Even though the function is defined shared, it is not guaranteed to return the same value across states.
     * 
     * **Note:**
     * >The enums for this are not currently implemented in Lua, however you can access the defines [here](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/shared/baseentity_shared.h#L21-L38).
     * 
     * 
     */
    ObjectCaps(): number;
    
    /**
     * [Shared]
     * 
     * Returns true if the entity is on the ground, and false if it isn't.
     * 
     * Internally, this checks if <page text="FL_ONGROUND">Enums/FL</page> is set on the entity. This is only updated for players and NPCs, and thus won't inherently work for other entities.
     * 
     */
    OnGround(): boolean;
    
    /**
     * [Server]
     * 
     * Tests whether the damage passes the entity filter.
     * 
     * This will call [ENTITY:PassesDamageFilter](https://wiki.facepunch.com/gmod/ENTITY:PassesDamageFilter) on scripted entities of the type "filter".
     * 
     * **Note:**
     * >This function only works on entities of the type "filter". ( filter_* entities, including base game filter entites )
     * 
     * @param dmg - The damage info to test
     */
    PassesDamageFilter(dmg: CTakeDamageInfo): boolean;
    
    /**
     * [Server]
     * 
     * Tests whether the entity passes the entity filter.
     * 
     * This will call [ENTITY:PassesFilter](https://wiki.facepunch.com/gmod/ENTITY:PassesFilter) on scripted entities of the type "filter".
     * 
     * **Note:**
     * >This function only works on entities of the type "filter". ( filter_* entities, including base game filter entites )
     * 
     * @param caller - The initiator of the test.
     * For example the trigger this filter entity is used in.
     * @param ent - The entity to test against the entity filter.
     */
    PassesFilter(caller: Entity, ent: Entity): boolean;
    
    /**
     * [Shared]
     * 
     * Destroys the current physics object of an entity.
     * 
     * **Note:**
     * >Cannot be used on a ragdoll or the world entity.
     * 
     * 
     */
    PhysicsDestroy(): void;
    
    /**
     * [Shared]
     * 
     * Initializes the physics mesh of the entity from a triangle soup defined by a table of vertices. The resulting mesh is hollow, may contain holes, and always has a volume of 0.
     * 
     * While this is very useful for static geometry such as terrain displacements, it is advised to use [Entity:PhysicsInitConvex](https://wiki.facepunch.com/gmod/Entity:PhysicsInitConvex) or [Entity:PhysicsInitMultiConvex](https://wiki.facepunch.com/gmod/Entity:PhysicsInitMultiConvex) for moving solid objects instead.
     * 
     * [Entity:EnableCustomCollisions](https://wiki.facepunch.com/gmod/Entity:EnableCustomCollisions) needs to be called if you want players to collide with the entity correctly.
     * @param vertices - A table consisting of [Structures/MeshVertex](https://wiki.facepunch.com/gmod/Structures/MeshVertex) (only the `pos` element is taken into account). Every 3 vertices define a triangle in the physics mesh.
     * @param [surfaceprop = default] - Physical material from [surfaceproperties.txt](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/scripts/surfaceproperties.txt) or added with [physenv.AddSurfaceData](https://wiki.facepunch.com/gmod/physenv.AddSurfaceData).
     */
    PhysicsFromMesh(vertices: MeshVertex, surfaceprop?: string): void;
    
    /**
     * [Shared]
     * 
     * Initializes the <page text="physics object">Entity:GetPhysicsObject</page> of the entity using its current <page text="model">Entity:GetModel</page>. Deletes the previous physics object if it existed and the new object creation was successful.
     * 
     * If the entity's current model has no physics mesh associated to it, no physics object will be created and the previous object will still exist, if applicable.
     * 
     * **Bug [#5060](https://github.com/Facepunch/garrysmod-issues/issues/5060):**
     * >Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.
     * 
     * A workaround is available on the [Entity:PhysicsInitConvex](https://wiki.facepunch.com/gmod/Entity:PhysicsInitConvex) page.
     * 
     * **Note:**
     * >When called clientside, this will not create a valid [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) if the model hasn't beenserverside.
     * 
     * If successful, this function will automatically call [Entity:SetSolid](https://wiki.facepunch.com/gmod/Entity:SetSolid)( solidType ) and [Entity:SetSolidFlags](https://wiki.facepunch.com/gmod/Entity:SetSolidFlags)( 0 ).
     * 
     * @param solidType - The solid type of the physics object to create, see [Enums/SOLID](https://wiki.facepunch.com/gmod/Enums/SOLID). Should be `SOLID_VPHYSICS` in most cases.
     * **Note:**
     * >Using `SOLID_NONE` will only delete the current physics object - it does not create a new one.
     * 
     */
    PhysicsInit(solidType: SOLID): boolean;
    
    /**
     * [Shared]
     * 
     * Makes the physics object of the entity a AABB.
     * 
     * This function will automatically destroy any previous physics objects and do the following:
     * * [Entity:SetSolid](https://wiki.facepunch.com/gmod/Entity:SetSolid)( `SOLID_BBOX` )
     * * [Entity:SetMoveType](https://wiki.facepunch.com/gmod/Entity:SetMoveType)( `MOVETYPE_VPHYSICS` )
     * * [Entity:SetCollisionBounds](https://wiki.facepunch.com/gmod/Entity:SetCollisionBounds)( `mins`, `maxs` )
     * 
     * **Bug [#5060](https://github.com/Facepunch/garrysmod-issues/issues/5060):**
     * >Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.
     * 
     * A workaround is available on the [Entity:PhysicsInitConvex](https://wiki.facepunch.com/gmod/Entity:PhysicsInitConvex) page.
     * 
     * **Note:**
     * >If the volume of the resulting box is 0 (the mins and maxs are the same), the mins and maxs will be changed to [Global.Vector](https://wiki.facepunch.com/gmod/Global.Vector)( -1, -1, -1 ) and [Global.Vector](https://wiki.facepunch.com/gmod/Global.Vector)( 1, 1, 1 ), respectively.
     * 
     * @param mins - The minimum position of the box. This is automatically ordered with the maxs.
     * @param maxs - The maximum position of the box. This is automatically ordered with the mins.
     * @param [surfaceprop = default] - Physical material from [surfaceproperties.txt](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/scripts/surfaceproperties.txt) or added with [physenv.AddSurfaceData](https://wiki.facepunch.com/gmod/physenv.AddSurfaceData).
     */
    PhysicsInitBox(mins: Vector, maxs: Vector, surfaceprop?: string): void;
    
    /**
     * [Shared]
     * 
     * Initializes the physics mesh of the entity with a convex mesh defined by a table of points. The resulting mesh is the  of all the input points. If successful, the previous physics object will be removed.
     * 
     * This is the standard way of creating moving physics objects with a custom convex shape. For more complex, concave shapes, see [Entity:PhysicsInitMultiConvex](https://wiki.facepunch.com/gmod/Entity:PhysicsInitMultiConvex).
     * 
     * **Bug [#3301](https://github.com/Facepunch/garrysmod-issues/issues/3301):**
     * >This will crash if given all [Global.Vector](https://wiki.facepunch.com/gmod/Global.Vector)(0,0,0)s.
     * 
     * **Bug [#5060](https://github.com/Facepunch/garrysmod-issues/issues/5060):**
     * >Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.
     * 
     * You can use the following workaround for movement, though clientside collisions will still be broken.
     * ```
     * function ENT:Think()
     * 	if ( CLIENT ) then
     * 		local physobj = self:GetPhysicsObject()
     * 
     * 		if ( IsValid( physobj ) ) then
     * 			physobj:SetPos( self:GetPos() )
     * 			physobj:SetAngles( self:GetAngles() )
     * 		end
     * 	end
     * end
     * ```
     * 
     * @param points - A table of eight [Vector](https://wiki.facepunch.com/gmod/Vector)s, in local coordinates, to be used in the computation of the convex mesh. Order does not matter.
     * @param [surfaceprop = default] - Physical material from [surfaceproperties.txt](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/scripts/surfaceproperties.txt) or added with [physenv.AddSurfaceData](https://wiki.facepunch.com/gmod/physenv.AddSurfaceData).
     */
    PhysicsInitConvex(points: any, surfaceprop?: string): void;
    
    /**
     * [Shared]
     * 
     * An advanced version of [Entity:PhysicsInitConvex](https://wiki.facepunch.com/gmod/Entity:PhysicsInitConvex) which initializes a physics object from multiple convex meshes. This should be used for physics objects with a custom shape which cannot be represented by a single convex mesh.
     * 
     * If successful, the previous physics object will be removed.
     * 
     * **Bug [#5060](https://github.com/Facepunch/garrysmod-issues/issues/5060):**
     * >Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.
     * 
     * A workaround is available on the [Entity:PhysicsInitConvex](https://wiki.facepunch.com/gmod/Entity:PhysicsInitConvex) page.
     * 
     * @param vertices - A table consisting of tables of [Vector](https://wiki.facepunch.com/gmod/Vector)s. Each sub-table defines a set of points to be used in the computation of one convex mesh.
     * @param [surfaceprop = default] - Physical material from [surfaceproperties.txt](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/scripts/surfaceproperties.txt) or added with [physenv.AddSurfaceData](https://wiki.facepunch.com/gmod/physenv.AddSurfaceData).
     */
    PhysicsInitMultiConvex(vertices: any, surfaceprop?: string): void;
    
    /**
     * [Shared]
     * 
     * Initializes the entity's physics object as a physics shadow. Removes the previous physics object if successful. This is used internally for the Player's and NPC's physics object, and certain HL2 entities such as the crane.
     * 
     * A physics shadow can be used to have static entities that never move by setting both arguments to false.
     * 
     * **Bug [#5060](https://github.com/Facepunch/garrysmod-issues/issues/5060):**
     * >Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.
     * 
     * A workaround is available on the [Entity:PhysicsInitConvex](https://wiki.facepunch.com/gmod/Entity:PhysicsInitConvex) page.
     * 
     * @param [allowPhysicsMovement = true] - Whether to allow the physics shadow to move under stress.
     * @param [allowPhysicsRotation = true] - Whether to allow the physics shadow to rotate under stress.
     */
    PhysicsInitShadow(allowPhysicsMovement = true, allowPhysicsRotation = true): boolean;
    
    /**
     * [Shared]
     * 
     * Makes the physics object of the entity a sphere.
     * 
     * This function will automatically destroy any previous physics objects and do the following:
     * * [Entity:SetSolid](https://wiki.facepunch.com/gmod/Entity:SetSolid)( `SOLID_BBOX` )
     * * [Entity:SetMoveType](https://wiki.facepunch.com/gmod/Entity:SetMoveType)( `MOVETYPE_VPHYSICS` )
     * 
     * **Bug [#5060](https://github.com/Facepunch/garrysmod-issues/issues/5060):**
     * >Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.
     * 
     * A workaround is available on the [Entity:PhysicsInitConvex](https://wiki.facepunch.com/gmod/Entity:PhysicsInitConvex) page.
     * 
     * @param radius - The radius of the sphere.
     * @param [physmat = default] - Physical material from [surfaceproperties.txt](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/scripts/surfaceproperties.txt) or added with [physenv.AddSurfaceData](https://wiki.facepunch.com/gmod/physenv.AddSurfaceData).
     */
    PhysicsInitSphere(radius: number, physmat?: string): boolean;
    
    /**
     * [Shared]
     * 
     * Initializes a static physics object of the entity using its <page text="current model">Entity:GetModel</page>. If successful, the previous physics object is removed.
     * 
     * This is what used by entities such as `func_breakable`, `prop_dynamic`, `item_suitcharger`, `prop_thumper` and `npc_rollermine` while it is in its "buried" state in the Half-Life 2 Campaign.
     * 
     * If the entity's current model has no physics mesh associated to it, no physics object will be created.
     * 
     * **Bug [#5060](https://github.com/Facepunch/garrysmod-issues/issues/5060):**
     * >Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.
     * 
     * A workaround is available on the [Entity:PhysicsInitConvex](https://wiki.facepunch.com/gmod/Entity:PhysicsInitConvex) page.
     * 
     * **Note:**
     * >This function will automatically call [Entity:SetSolid](https://wiki.facepunch.com/gmod/Entity:SetSolid)( `solidType` ).
     * 
     * @param solidType - The solid type of the physics object to create, see [Enums/SOLID](https://wiki.facepunch.com/gmod/Enums/SOLID). Should be `SOLID_VPHYSICS` in most cases.
     */
    PhysicsInitStatic(solidType: SOLID): boolean;
    
    /**
     * [Shared]
     * 
     * Wakes up the entity's physics object
     * 
     */
    PhysWake(): void;
    
    /**
     * [Server]
     * 
     * Makes the entity play a .vcd scene. [All scenes from Half-Life 2](https://developer.valvesoftware.com/wiki/Half-Life_2_Scenes_List).
     * @param scene - Filepath to scene.
     * @param [delay = 0] - Delay in seconds until the scene starts playing.
     */
    PlayScene(scene: string, delay = 0): LuaMultiReturn<[number, Entity]>;
    
    /**
     * [Server]
     * 
     * Changes an entities angles so that it faces the target entity.
     * @param target - The entity to face.
     */
    PointAtEntity(target: Entity): void;
    
    /**
     * [Server]
     * 
     * Precaches gibs for the entity's model.
     * 
     * Normally this function should be ran when the entity is spawned, for example the [ENTITY:Initialize](https://wiki.facepunch.com/gmod/ENTITY:Initialize), after [Entity:SetModel](https://wiki.facepunch.com/gmod/Entity:SetModel) is called.
     * 
     * This is required for [Entity:GibBreakServer](https://wiki.facepunch.com/gmod/Entity:GibBreakServer) and [Entity:GibBreakClient](https://wiki.facepunch.com/gmod/Entity:GibBreakClient) to work.
     * 
     */
    PrecacheGibs(): number;
    
    /**
     * [Server]
     * 
     * Normalizes the ragdoll. This is used alongside Kinect in [Entity:SetRagdollBuildFunction](https://wiki.facepunch.com/gmod/Entity:SetRagdollBuildFunction), for more info see ragdoll_motion entity.
     * 
     */
    RagdollSolve(): void;
    
    /**
     * [Server]
     * 
     * Sets the function to build the ragdoll. This is used alongside Kinect in [Entity:SetRagdollBuildFunction](https://wiki.facepunch.com/gmod/Entity:SetRagdollBuildFunction), for more info see ragdoll_motion entity.
     * 
     */
    RagdollStopControlling(): void;
    
    /**
     * [Server]
     * 
     * Makes the physics objects follow the set bone positions. This is used alongside Kinect in [Entity:SetRagdollBuildFunction](https://wiki.facepunch.com/gmod/Entity:SetRagdollBuildFunction), for more info see ragdoll_motion entity.
     * 
     */
    RagdollUpdatePhysics(): void;
    
    /**
     * [Shared]
     * 
     * Removes the entity it is used on. The entity will be removed at the start of next tick.
     * 
     */
    Remove(): void;
    
    /**
     * [Shared]
     * 
     * Removes all decals from the entities surface.
     * 
     */
    RemoveAllDecals(): void;
    
    /**
     * [Server]
     * 
     * Removes and stops all gestures.
     * 
     * **Note:**
     * >This function only works on [BaseAnimatingOverlay](https://wiki.facepunch.com/gmod/BaseAnimatingOverlay) entites!
     * 
     * 
     */
    RemoveAllGestures(): void;
    
    /**
     * [Shared]
     * 
     * Removes a callback previously added with [Entity:AddCallback](https://wiki.facepunch.com/gmod/Entity:AddCallback)
     * @param hook - The hook name to remove. See [Entity Callbacks](https://wiki.facepunch.com/gmod/Entity_Callbacks)
     * @param callbackid - The callback id previously retrieved with the return of [Entity:AddCallback](https://wiki.facepunch.com/gmod/Entity:AddCallback) or [Entity:GetCallbacks](https://wiki.facepunch.com/gmod/Entity:GetCallbacks)
     */
    RemoveCallback(hook: string, callbackid: number): void;
    
    /**
     * [Shared]
     * 
     * Removes a function previously added via [Entity:CallOnRemove](https://wiki.facepunch.com/gmod/Entity:CallOnRemove).
     * @param identifier - Identifier of the function given to [Entity:CallOnRemove](https://wiki.facepunch.com/gmod/Entity:CallOnRemove).
     */
    RemoveCallOnRemove(identifier: string): void;
    
    /**
     * [Shared]
     * 
     * Removes an engine effect applied to an entity.
     * @param effect - The effect to remove, see [Enums/EF](https://wiki.facepunch.com/gmod/Enums/EF).
     */
    RemoveEffects(effect: EF): void;
    
    /**
     * [Shared]
     * 
     * Removes specified engine flag
     * @param flag - The flag to remove, see [Enums/EFL](https://wiki.facepunch.com/gmod/Enums/EFL)
     */
    RemoveEFlags(flag: EFL): void;
    
    /**
     * [Shared]
     * 
     * Removes specified flag(s) from the entity
     * @param flag - The flag(s) to remove, see [Enums/FL](https://wiki.facepunch.com/gmod/Enums/FL)
     */
    RemoveFlags(flag: FL): void;
    
    /**
     * [Shared]
     * 
     * Removes a [PhysObj](https://wiki.facepunch.com/gmod/PhysObj)ect from the entity's motion controller so that [ENTITY:PhysicsSimulate](https://wiki.facepunch.com/gmod/ENTITY:PhysicsSimulate) will no longer be called for given [PhysObj](https://wiki.facepunch.com/gmod/PhysObj)ect.
     * 
     * You must first create a motion controller with [Entity:StartMotionController](https://wiki.facepunch.com/gmod/Entity:StartMotionController).
     * 
     * **Note:**
     * >Only works on a scripted [Entity](https://wiki.facepunch.com/gmod/Entity) of anim type
     * 
     * @param physObj - The [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) to remove from the motion controller.
     */
    RemoveFromMotionController(physObj: PhysObj): void;
    
    /**
     * [Server]
     * 
     * Removes and stops the gesture with given activity.
     * 
     * **Note:**
     * >This function only works on [BaseAnimatingOverlay](https://wiki.facepunch.com/gmod/BaseAnimatingOverlay) entites!
     * 
     * @param activity - The activity remove. See [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT).
     */
    RemoveGesture(activity: ACT): void;
    
    /**
     * [Shared]
     * 
     * Breaks internal Ragdoll constrains, so you can for example separate an arm from the body of a ragdoll and preserve all physics.
     * 
     * The visual mesh will still stretch as if it was properly connected unless the ragdoll model is specifically designed to avoid that.
     * @param [num = -1] - Which constraint to break, values below 0 mean break them all
     */
    RemoveInternalConstraint(num = -1): void;
    
    /**
     * [Shared]
     * 
     * Removes solid flag(s) from the entity.
     * @param flags - The flag(s) to remove, see [Enums/FSOLID](https://wiki.facepunch.com/gmod/Enums/FSOLID).
     */
    RemoveSolidFlags(flags: FSOLID): void;
    
    /**
     * [Shared]
     * 
     * Plays an animation on the entity. This may not always work on engine entities.
     * 
     * **Warning:**
     * >This will not reset the animation on viewmodels, use [Entity:SendViewModelMatchingSequence](https://wiki.facepunch.com/gmod/Entity:SendViewModelMatchingSequence) instead.
     * 
     * **Note:**
     * >This will not work properly if called directly after calling [Entity:SetModel](https://wiki.facepunch.com/gmod/Entity:SetModel). Consider waiting until the next Tick.
     * 
     * Will not work on players due to the animations being reset every frame by the base gamemode animation system. See [GM:CalcMainActivity](https://wiki.facepunch.com/gmod/GM:CalcMainActivity).
     * 
     * For custom scripted entities you will want to apply example from [ENTITY:Think](https://wiki.facepunch.com/gmod/ENTITY:Think) to make animations work.
     * 
     * @param sequence - The sequence to play. Also accepts strings.
     * **Note:**
     * >If set to a string, the function will automatically call [Entity:LookupSequence](https://wiki.facepunch.com/gmod/Entity:LookupSequence) to retrieve the sequence ID as a number.
     * 
     */
    ResetSequence(sequence: number): void;
    
    /**
     * [Shared]
     * 
     * Reset entity sequence info such as playback rate, ground speed, last event check, etc.
     * 
     */
    ResetSequenceInfo(): void;
    
    /**
     * [Server]
     * 
     * Makes the entity/weapon respawn.
     * 
     * Only usable on HL2/HL:S pickups and any weapons. Seems to be buggy with weapons.
     * Very unreliable.
     * 
     */
    Respawn(): void;
    
    /**
     * [Server]
     * 
     * Restarts the entity's animation gesture. If the given gesture is already playing, it will reset it and play it from the beginning.
     * 
     * **Note:**
     * >This function only works on [BaseAnimatingOverlay](https://wiki.facepunch.com/gmod/BaseAnimatingOverlay) entites.
     * 
     * @param activity - The activity number to send to the entity. See [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT) and [Entity:GetSequenceActivity](https://wiki.facepunch.com/gmod/Entity:GetSequenceActivity)
     * @param [addIfMissing = true] - Add/start the gesture to if it has not been yet started.
     * @param [autokill = true] - 
     */
    RestartGesture(activity: ACT, addIfMissing = true, autokill = true): void;
    
    /**
     * [Shared]
     * 
     * Returns sequence ID corresponding to given activity ID.
     * 
     * Opposite of [Entity:GetSequenceActivity](https://wiki.facepunch.com/gmod/Entity:GetSequenceActivity).
     * 
     * Similar to [Entity:LookupSequence](https://wiki.facepunch.com/gmod/Entity:LookupSequence).
     * 
     * See also [Entity:SelectWeightedSequenceSeeded](https://wiki.facepunch.com/gmod/Entity:SelectWeightedSequenceSeeded).
     * @param act - The activity ID, see [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT).
     */
    SelectWeightedSequence(act: ACT): number;
    
    /**
     * [Shared]
     * 
     * Returns the sequence ID corresponding to given activity ID, and uses the provided seed for random selection. The seed should be the same server-side and client-side if used in a predicted environment.
     * 
     * See [Entity:SelectWeightedSequence](https://wiki.facepunch.com/gmod/Entity:SelectWeightedSequence) for a provided-seed version of this function.
     * @param act - The activity ID, see [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT).
     * @param seed - The seed to use for randomly selecting a sequence in the case the activity ID has multiple sequences bound to it. [Entity:SelectWeightedSequence](https://wiki.facepunch.com/gmod/Entity:SelectWeightedSequence) uses the same seed as [util.SharedRandom](https://wiki.facepunch.com/gmod/util.SharedRandom) internally for this.
     */
    SelectWeightedSequenceSeeded(act: ACT, seed: number): number;
    
    /**
     * [Shared]
     * 
     * Sends sequence animation to the view model. It is recommended to use this for view model animations, instead of [Entity:ResetSequence](https://wiki.facepunch.com/gmod/Entity:ResetSequence).
     * 
     * This function is only usable on view models.
     * @param seq - The sequence ID returned by [Entity:LookupSequence](https://wiki.facepunch.com/gmod/Entity:LookupSequence) or  [Entity:SelectWeightedSequence](https://wiki.facepunch.com/gmod/Entity:SelectWeightedSequence).
     */
    SendViewModelMatchingSequence(seq: number): void;
    
    /**
     * [Shared]
     * 
     * Returns length of currently played sequence.
     * 
     * **Bug [#2783](https://github.com/Facepunch/garrysmod-issues/issues/2783):**
     * >This will return incorrect results for weapons and viewmodels clientside in thirdperson.
     * 
     * @param [seqid = nil] - A sequence ID to return the length specific sequence of instead of the entity's main/currently playing sequence.
     */
    SequenceDuration(seqid?: number): number;
    
    /**
     * [Shared]
     * 
     * Sets the entity's velocity.
     * 
     * **Note:**
     * >Actually binds to CBaseEntity::SetLocalVelocity() which sets the entity's velocity due to movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision or other world movement.
     * 
     * @param velocity - The new velocity to set.
     */
    SetAbsVelocity(velocity: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the angles of the entity.
     * 
     * **Note:**
     * >To set a player's angles, use [Player:SetEyeAngles](https://wiki.facepunch.com/gmod/Player:SetEyeAngles) instead.
     * 
     * @param angles - The new angles.
     */
    SetAngles(angles: Angle): void;
    
    /**
     * [Shared]
     * 
     * Sets a player's third-person animation. Mainly used by [Weapon](https://wiki.facepunch.com/gmod/Weapon)s to start the player's weapon attack and reload animations.
     * @param playerAnim - Player animation, see [Enums/PLAYER](https://wiki.facepunch.com/gmod/Enums/PLAYER).
     */
    SetAnimation(playerAnim: PLAYERANIM): void;
    
    /**
     * [Client]
     * 
     * Sets the start time (relative to [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime)) of the current animation, which is used to determine [Entity:GetCycle](https://wiki.facepunch.com/gmod/Entity:GetCycle). Should be less than CurTime to play an animation from the middle.
     * @param time - The time the animation was supposed to begin.
     */
    SetAnimTime(time: number): void;
    
    /**
     * [Shared]
     * 
     * Parents the sprite to an attachment on another model.
     * 
     * Works only on env_sprite.
     * 
     * Despite existing on client, it doesn't actually do anything on client.
     * 
     * @deprecated You should be using [Entity:SetParent](https://wiki.facepunch.com/gmod/Entity:SetParent) instead.
     * 
     * @param ent - The entity to attach/parent to
     * @param attachment - The attachment ID to parent to
     */
    SetAttachment(ent: Entity, attachment: number): void;
    
    /**
     * [Server]
     * 
     * Sets the blood color this entity uses.
     * @param bloodColor - An integer corresponding to [Enums/BLOOD_COLOR](https://wiki.facepunch.com/gmod/Enums/BLOOD_COLOR).
     */
    SetBloodColor(bloodColor: BLOOD_COLOR): void;
    
    /**
     * [Shared]
     * 
     * Sets an entities' bodygroup.
     * 
     * **Note:**
     * >If called for Weapon (after Initialize hook) with different body groups on world model and view model, check will occur by view model.
     * 
     * @param bodygroup - The id of the bodygroup you're setting. Starts from 0.
     * @param value - The value you're setting the bodygroup to. Starts from 0.
     */
    SetBodygroup(bodygroup: number, value: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the bodygroups from a string. A convenience function for [Entity:SetBodygroup](https://wiki.facepunch.com/gmod/Entity:SetBodygroup).
     * 
     * **Note:**
     * >If called for Weapon (after Initialize hook) with different body groups on world model and view model, check will occur by view model.
     * 
     * @param bodygroups - Body groups to set. Each character in the string represents a separate bodygroup. (`0` to `9`, `a` to `z` being (`10` to `35`))
     */
    SetBodyGroups(bodygroups: string): void;
    
    /**
     * [Shared]
     * 
     * Sets the specified value on the bone controller with the given ID of this entity, it's used in HL1 to change the head rotation of NPCs, turret aiming and so on.
     * 
     * **Note:**
     * >This is the precursor of pose parameters, and only works for Half Life 1: Source models supporting it.
     * 
     * @param boneControllerID - The ID of the bone controller to set the value to.
     * Goes from 0 to 3.
     * @param value - The value to set on the specified bone controller.
     */
    SetBoneController(boneControllerID: number, value: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the bone matrix of given bone to given matrix. See also [Entity:GetBoneMatrix](https://wiki.facepunch.com/gmod/Entity:GetBoneMatrix).
     * 
     * **Note:**
     * >Despite existing serverside, it does nothing.
     * 
     * @param boneid - The ID of the bone
     * @param matrix - The matrix to set.
     */
    SetBoneMatrix(boneid: number, matrix: VMatrix): void;
    
    /**
     * [Client]
     * 
     * Sets the bone position and angles.
     * @param bone - The bone ID to manipulate
     * @param pos - The position to set
     * @param ang - The angles to set
     */
    SetBonePosition(bone: number, pos: Vector, ang: Angle): void;
    
    /**
     * [Shared]
     * 
     * Sets the collision bounds for the entity, which are used for triggers ([Entity:SetTrigger](https://wiki.facepunch.com/gmod/Entity:SetTrigger), [ENTITY:Touch](https://wiki.facepunch.com/gmod/ENTITY:Touch)), and collision (If [Entity:SetSolid](https://wiki.facepunch.com/gmod/Entity:SetSolid) set as <page text="SOLID_BBOX">Enums/SOLID</page>).
     * 
     * Input bounds are relative to [Entity:GetPos](https://wiki.facepunch.com/gmod/Entity:GetPos)! 
     * See also [Entity:SetCollisionBoundsWS](https://wiki.facepunch.com/gmod/Entity:SetCollisionBoundsWS).
     * 
     * **Note:**
     * >Player collision bounds are reset every frame to player's [Player:SetHull](https://wiki.facepunch.com/gmod/Player:SetHull) values.
     * 
     * @param mins - The minimum vector of the bounds.
     * @param maxs - The maximum vector of the bounds.
     */
    SetCollisionBounds(mins: Vector, maxs: Vector): void;
    
    /**
     * [Shared]
     * 
     * A convenience function that sets the collision bounds for the entity in world space coordinates by transforming given vectors to entity's local space and passing them to [Entity:SetCollisionBounds](https://wiki.facepunch.com/gmod/Entity:SetCollisionBounds)
     * @param vec1 - The first vector of the bounds.
     * @param vec2 - The second vector of the bounds.
     */
    SetCollisionBoundsWS(vec1: Vector, vec2: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the entity's collision group.
     * @param group - Collision group of the entity, see [Enums/COLLISION_GROUP](https://wiki.facepunch.com/gmod/Enums/COLLISION_GROUP)
     */
    SetCollisionGroup(group: COLLISION_GROUP): void;
    
    /**
     * [Shared]
     * 
     * Sets the color of an entity.
     * 
     * Some entities may need a custom [render mode](Enums/RENDERMODE) set for transparency to work. See example 2.<br/>
     * Entities also must have a proper [render group](Enums/RENDERGROUP) set for transparency to work.
     * @param [color = Color(255, 0, 255, 255)] - The color to set. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     */
    SetColor(color?: Color): void;
    
    /**
     * [Shared]
     * 
     * Sets the color of an entity without usage of a [Global.Color](https://wiki.facepunch.com/gmod/Global.Color) object.
     * 
     * Used internally to implement [Entity:SetColor](https://wiki.facepunch.com/gmod/Entity:SetColor).
     * @param r - 
     * @param g - 
     * @param b - 
     * @param a - 
     */
    SetColor4Part(r: number, g: number, b: number, a: number): void;
    
    /**
     * [Server]
     * 
     * Sets the creator of the Entity. This is set automatically in Sandbox gamemode when spawning SENTs, but is never used/read by default.
     * @param ply - The creator
     */
    SetCreator(ply: Player): void;
    
    /**
     * [Shared]
     * 
     * Marks the entity to call [GM:ShouldCollide](https://wiki.facepunch.com/gmod/GM:ShouldCollide). Not to be confused with [Entity:EnableCustomCollisions](https://wiki.facepunch.com/gmod/Entity:EnableCustomCollisions).
     * @param enable - Enable or disable the custom collision check
     */
    SetCustomCollisionCheck(enable: boolean): void;
    
    /**
     * [Shared]
     * 
     * Sets the progress of the current animation to a specific value between 0 and 1.
     * 
     * **Bug [#3038](https://github.com/Facepunch/garrysmod-issues/issues/3038):**
     * >This does not work with viewmodels.
     * 
     * @param value - The desired cycle value
     */
    SetCycle(value: number): void;
    
    /**
     * [Shared]
     * 
     * This is called internally by the [Entity:NetworkVar](https://wiki.facepunch.com/gmod/Entity:NetworkVar) system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Sets the specified angle on the entity's datatable.
     * @param key - Goes from 0 to 31.
     * @param ang - The angle to write on the entity's datatable.
     */
    SetDTAngle(key: number, ang: Angle): void;
    
    /**
     * [Shared]
     * 
     * This is called internally by the [Entity:NetworkVar](https://wiki.facepunch.com/gmod/Entity:NetworkVar) system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Sets the specified bool on the entity's datatable.
     * @param key - Goes from 0 to 31.
     * @param bool - The boolean to write on the entity's metatable.
     */
    SetDTBool(key: number, bool: boolean): void;
    
    /**
     * [Shared]
     * 
     * This is called internally by the [Entity:NetworkVar](https://wiki.facepunch.com/gmod/Entity:NetworkVar) system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Sets the specified entity on this entity's datatable.
     * @param key - Goes from 0 to 31.
     * @param ent - The entity to write on this entity's datatable.
     */
    SetDTEntity(key: number, ent: Entity): void;
    
    /**
     * [Shared]
     * 
     * This is called internally by the [Entity:NetworkVar](https://wiki.facepunch.com/gmod/Entity:NetworkVar) system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Sets the specified float on the entity's datatable.
     * @param key - Goes from 0 to 31.
     * @param float - The float to write on the entity's datatable.
     */
    SetDTFloat(key: number, float: number): void;
    
    /**
     * [Shared]
     * 
     * This is called internally by the [Entity:NetworkVar](https://wiki.facepunch.com/gmod/Entity:NetworkVar) system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Sets the specified integer on the entity's datatable.
     * @param key - Goes from 0 to 31.
     * @param integer - The integer to write on the entity's datatable. This will be cast to a 32-bit signed integer internally.
     */
    SetDTInt(key: number, integer: number): void;
    
    /**
     * [Shared]
     * 
     * This is called internally by the [Entity:NetworkVar](https://wiki.facepunch.com/gmod/Entity:NetworkVar) system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Sets the specified string on the entity's datatable.
     * 
     * **Note:**
     * >The length of these strings are capped at 512 characters.
     * 
     * @param key - Goes from 0 to 3.
     * @param str - The string to write on the entity's datatable, can't be more than 512 characters per string.
     */
    SetDTString(key: number, str: string): void;
    
    /**
     * [Shared]
     * 
     * This is called internally by the [Entity:NetworkVar](https://wiki.facepunch.com/gmod/Entity:NetworkVar) system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Sets the specified vector on the entity's datatable.
     * @param key - Goes from 0 to 31.
     * @param vec - The vector to write on the entity's datatable.
     */
    SetDTVector(key: number, vec: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the elasticity of this entity, used by some flying entities such as the Helicopter NPC to determine how much it should bounce around when colliding.
     * @param elasticity - The elasticity to set.
     */
    SetElasticity(elasticity: number): void;
    
    /**
     * [Shared]
     * 
     * Allows you to set the Start or End entity attachment for the rope.
     * @param name - The name of the variable to modify.
     * Accepted names are StartEntity and EndEntity.
     * @param entity - The entity to apply to the specific attachment.
     */
    SetEntity(name: string, entity: Entity): void;
    
    /**
     * [Shared]
     * 
     * Sets the position an entity's eyes look toward. This works as an override for default behavior. Set to `0,0,0` to disable the override.
     * @param pos - If NPC, the **world position** for the entity to look towards, for Ragdolls, a **local position** in front of their `eyes` attachment.
     */
    SetEyeTarget(pos: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the scale of all the flexes of this entity. See [Entity:SetFlexWeight](https://wiki.facepunch.com/gmod/Entity:SetFlexWeight).
     * @param scale - The new flex scale to set to
     */
    SetFlexScale(scale: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the weight/value of given flex controller.
     * 
     * **Note:**
     * >Only `96` flex controllers can be set! Flex controllers on models with higher amounts will not be accessible.
     * 
     * @param flex - The ID of the flex to modify weight of.  The range is between `0` and [Entity:GetFlexNum](https://wiki.facepunch.com/gmod/Entity:GetFlexNum) - 1.
     * @param weight - The new weight to set
     */
    SetFlexWeight(flex: number, weight: number): void;
    
    /**
     * [Shared]
     * 
     * Sets friction multiplier for this entity when sliding against a surface. Entities default to 1 (100%) and can be higher.
     * 
     * For players, the range is 0 to 10.
     * 
     * **Note:**
     * >This only multiplies the friction of the entity, to change the value itself use [PhysObj:SetMaterial](https://wiki.facepunch.com/gmod/PhysObj:SetMaterial).
     * 
     * **Note:**
     * >Works only for MOVETYPE_STEP entities.
     * 
     * @param friction - Friction multiplier
     */
    SetFriction(friction: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the gravity multiplier of the entity.
     * 
     * **Bug [#3648](https://github.com/Facepunch/garrysmod-issues/issues/3648):**
     * >This function is not predicted.
     * 
     * **Note:**
     * >This only works on players
     * 
     * @param gravityMultiplier - Value which specifies the gravity multiplier.
     */
    SetGravity(gravityMultiplier: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the ground the entity is standing on.
     * @param ground - The ground entity.
     */
    SetGroundEntity(ground: Entity): void;
    
    /**
     * [Shared]
     * 
     * Sets the health of the entity.
     * 
     * **Note:**
     * >You may want to take [Entity:GetMaxHealth](https://wiki.facepunch.com/gmod/Entity:GetMaxHealth) into account when calculating what to set health to, in case a gamemode has a different max health than 100.  
     * In some cases, setting health only serverside can cause hitches in movement, for example if something is modifying the player speed based on health.  
     * To solve this issue, it is better to set it shared in a predicted hook.
     * 
     * @param newHealth - New health value.
     */
    SetHealth(newHealth: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the current Hitbox set for the entity.
     * @param id - The new hitbox set to set. Can be a name as a [string](https://wiki.facepunch.com/gmod/string), or the ID as a [number](https://wiki.facepunch.com/gmod/number).
     * If the operation failed, the function will silently fail.
     */
    SetHitboxSet(id: number): void;
    
    /**
     * [Shared]
     * 
     * Enables or disable the inverse kinematic usage of this entity.
     * 
     * **Warning:**
     * >Calling this with false outside of [ENTITY:Initialize](https://wiki.facepunch.com/gmod/ENTITY:Initialize) requires a model change to take effect.
     * 
     * @param [useIK = false] - The state of the IK.
     */
    SetIK(useIK = false): void;
    
    /**
     * [Shared]
     * 
     * Sets Hammer key values on an entity.
     * 
     * You can look up which entities have what key values on the [Valve Developer Community](https://developer.valvesoftware.com/wiki/) on entity pages.
     * 
     * A  list of basic entities can be found [here](https://developer.valvesoftware.com/wiki/List_of_entities).
     * 
     * Alternatively you can look at the .fgd files shipped with Garry's Mod in the bin/ folder with a text editor to see the key values as they appear in Hammer.
     * @param key - The internal key name
     * @param value - The value to set
     */
    SetKeyValue(key: string, value: string): void;
    
    /**
     * [Server]
     * 
     * This allows the entity to be lag compensated during [Player:LagCompensation](https://wiki.facepunch.com/gmod/Player:LagCompensation).
     * 
     * As a side note for parented entities, if your entity can be shot at, keep in mind that its collision bounds need to be bigger than the bone's hitbox the entity is parented to, or hull/line traces ( such as the crowbar attack or bullets ) might not hit at all.
     * 
     * **Note:**
     * >Players are lag compensated by default and there's no need to call this function for them.
     * 
     * It's best to not enable lag compensation on parented entities, as the system does not handle it that well ( they will be moved back but then the entity will lag behind ).
     * Parented entities move back with the parent if it's lag compensated, so if you are making some kind of armor piece you shouldn't do anything.
     * 
     * @param enable - Whether the entity should be lag compensated or not.
     */
    SetLagCompensated(enable: boolean): void;
    
    /**
     * [Shared]
     * 
     * **Note:**
     * >This function only works on [BaseAnimatingOverlay](https://wiki.facepunch.com/gmod/BaseAnimatingOverlay) entites!
     * 
     * @param layerID - The Layer ID
     * @param blendIn - 
     */
    SetLayerBlendIn(layerID: number, blendIn: number): void;
    
    /**
     * [Shared]
     * 
     * **Note:**
     * >This function only works on [BaseAnimatingOverlay](https://wiki.facepunch.com/gmod/BaseAnimatingOverlay) entites!
     * 
     * @param layerID - The Layer ID
     * @param blendOut - 
     */
    SetLayerBlendOut(layerID: number, blendOut: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the animation cycle/frame of given layer.
     * 
     * **Note:**
     * >This function only works on [BaseAnimatingOverlay](https://wiki.facepunch.com/gmod/BaseAnimatingOverlay) entities.
     * 
     * @param layerID - The Layer ID
     * @param cycle - The new animation cycle/frame for given layer.
     */
    SetLayerCycle(layerID: number, cycle: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the duration of given layer. This internally overrides the [Entity:SetLayerPlaybackRate](https://wiki.facepunch.com/gmod/Entity:SetLayerPlaybackRate).
     * 
     * **Note:**
     * >This function only works on [BaseAnimatingOverlay](https://wiki.facepunch.com/gmod/BaseAnimatingOverlay) entities.
     * 
     * @param layerID - The Layer ID
     * @param duration - The new duration of the layer in seconds.
     */
    SetLayerDuration(layerID: number, duration: number): void;
    
    /**
     * [Server]
     * 
     * Sets whether the layer should loop or not.
     * 
     * **Note:**
     * >This function only works on [BaseAnimatingOverlay](https://wiki.facepunch.com/gmod/BaseAnimatingOverlay) entites!
     * 
     * @param layerID - The Layer ID
     * @param loop - Whether the layer should loop or not.
     */
    SetLayerLooping(layerID: number, loop: boolean): void;
    
    /**
     * [Shared]
     * 
     * Sets the layer playback rate. See also [Entity:SetLayerDuration](https://wiki.facepunch.com/gmod/Entity:SetLayerDuration).
     * 
     * **Note:**
     * >This function only works on [BaseAnimatingOverlay](https://wiki.facepunch.com/gmod/BaseAnimatingOverlay) entities.
     * 
     * @param layerID - The Layer ID
     * @param rate - The new playback rate.
     */
    SetLayerPlaybackRate(layerID: number, rate: number): void;
    
    /**
     * [Server]
     * 
     * Sets the priority of given layer.
     * 
     * **Note:**
     * >This function only works on [BaseAnimatingOverlay](https://wiki.facepunch.com/gmod/BaseAnimatingOverlay) entites!
     * 
     * @param layerID - The Layer ID
     * @param priority - The new priority of the layer.
     */
    SetLayerPriority(layerID: number, priority: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the sequence of given layer.
     * 
     * **Note:**
     * >This function only works on [BaseAnimatingOverlay](https://wiki.facepunch.com/gmod/BaseAnimatingOverlay) entities.
     * 
     * @param layerID - The Layer ID.
     * @param seq - The sequenceID to set. See [Entity:LookupSequence](https://wiki.facepunch.com/gmod/Entity:LookupSequence).
     */
    SetLayerSequence(layerID: number, seq: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the layer weight. This influences how strongly the animation should be overriding the normal animations of the entity.
     * 
     * **Note:**
     * >This function only works on [BaseAnimatingOverlay](https://wiki.facepunch.com/gmod/BaseAnimatingOverlay) entities.
     * 
     * @param layerID - The Layer ID
     * @param weight - The new layer weight.
     */
    SetLayerWeight(layerID: number, weight: number): void;
    
    /**
     * [Client]
     * 
     * This forces an entity to use the bone transformation behaviour from versions prior to **8 July 2014**.
     * 
     * This behaviour affects [Entity:EnableMatrix](https://wiki.facepunch.com/gmod/Entity:EnableMatrix) and [Entity:SetModelScale](https://wiki.facepunch.com/gmod/Entity:SetModelScale) and is incorrect, therefore this function be used exclusively as a quick fix for old scripts that rely on it.
     * @param enabled - Whether the entity should use the old bone transformation behaviour or not.
     */
    SetLegacyTransform(enabled: boolean): void;
    
    /**
     * [Server]
     * 
     * Sets the entity to be used as the light origin position for this entity.
     * @param lightOrigin - The lighting entity.
     */
    SetLightingOriginEntity(lightOrigin: Entity): void;
    
    /**
     * [Shared]
     * 
     * Sets angles relative to angles of [Entity:GetParent](https://wiki.facepunch.com/gmod/Entity:GetParent)
     * @param ang - The local angle
     */
    SetLocalAngles(ang: Angle): void;
    
    /**
     * [Shared]
     * 
     * Sets the entity's angular velocity (rotation speed).
     * @param angVel - The angular velocity to set.
     */
    SetLocalAngularVelocity(angVel: Angle): void;
    
    /**
     * [Shared]
     * 
     * Sets local position relative to the parented position. This is for use with [Entity:SetParent](https://wiki.facepunch.com/gmod/Entity:SetParent) to offset position.
     * @param pos - The local position
     */
    SetLocalPos(pos: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the entity's local velocity which is their velocity due to movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision or other world movement.
     * 
     * **Warning:**
     * >Same as [Entity:SetAbsVelocity](https://wiki.facepunch.com/gmod/Entity:SetAbsVelocity), but clamps the given velocity, and is not recommended to be used because of that.
     * 
     * @param velocity - The new velocity to set.
     */
    SetLocalVelocity(velocity: Vector): void;
    
    /**
     * [Client]
     * 
     * Sets the Level Of Detail model to use with this entity. This may not work for all models if the model doesn't include any LOD sub models.
     * 
     * This function works exactly like the clientside r_lod convar and takes priority over it.
     * @param [lod = -1] - The Level Of Detail model ID to use. -1 leaves the engine to automatically set the Level of Detail.
     * The Level Of Detail may range from 0 to 8, with 0 being the highest quality and 8 the lowest.
     */
    SetLOD(lod = -1): void;
    
    /**
     * [Shared]
     * 
     * Sets the rendering material override of the entity.
     * 
     * To set a Lua material created with [Global.CreateMaterial](https://wiki.facepunch.com/gmod/Global.CreateMaterial), just prepend a "!" to the material name.
     * 
     * If you wish to override a single material on the model, use [Entity:SetSubMaterial](https://wiki.facepunch.com/gmod/Entity:SetSubMaterial) instead.
     * 
     * **Bug [#3362](https://github.com/Facepunch/garrysmod-issues/issues/3362):**
     * >The server's value takes priority on the client.
     * 
     * **Note:**
     * >To apply materials to models, that material **must** have **VertexLitGeneric** shader. For that reason you cannot apply map textures onto models, map textures use a different material shader - **LightmappedGeneric**, which can be used on brush entities.
     * 
     * @param materialName - New material name. Use an empty string ("") to reset to the default materials.
     */
    SetMaterial(materialName: string): void;
    
    /**
     * [Server]
     * 
     * Sets the maximum health for entity. Note, that you can still set entity's health above this amount with [Entity:SetHealth](https://wiki.facepunch.com/gmod/Entity:SetHealth).
     * @param maxhealth - What the max health should be
     */
    SetMaxHealth(maxhealth: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the model of the entity.
     * 
     * This does not update the physics of the entity - see [Entity:PhysicsInit](https://wiki.facepunch.com/gmod/Entity:PhysicsInit).
     * 
     * **Warning:**
     * >This silently fails when given an empty string.
     * 
     * @param modelName - New model value.
     */
    SetModel(modelName: string): void;
    
    /**
     * [Shared]
     * 
     * Alter the model name returned by [Entity:GetModel](https://wiki.facepunch.com/gmod/Entity:GetModel). Does not affect the entity's actual model.
     * @param modelname - The new model name.
     */
    SetModelName(modelname: string): void;
    
    /**
     * [Shared]
     * 
     * Scales the model of the entity, if the entity is a [Player](https://wiki.facepunch.com/gmod/Player) or an [NPC](https://wiki.facepunch.com/gmod/NPC) the hitboxes will be scaled as well.
     * 
     * For some entities, calling [Entity:Activate](https://wiki.facepunch.com/gmod/Entity:Activate) after this will scale the collision bounds and [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) as well; be wary as there's no optimization being done internally and highly complex collision models might crash the server.
     * 
     * This is the same system used in TF2 for the Mann Vs Machine robots.
     * 
     * To resize the entity along any axis, use [Entity:EnableMatrix](https://wiki.facepunch.com/gmod/Entity:EnableMatrix) instead.
     * 
     * Client-side trace detection seems to mess up if deltaTime is set to anything but zero. A very small decimal can be used instead of zero to solve this issue.
     * 
     * If your old scales are wrong, use [Entity:SetLegacyTransform](https://wiki.facepunch.com/gmod/Entity:SetLegacyTransform) as a quick fix.
     * 
     * **Bug [#3502](https://github.com/Facepunch/garrysmod-issues/issues/3502):**
     * >This does not scale procedural bones and disables IK.
     * 
     * **Note:**
     * >If you do not want the physics to be affected by [Entity:Activate](https://wiki.facepunch.com/gmod/Entity:Activate), you can use [Entity:ManipulateBoneScale](https://wiki.facepunch.com/gmod/Entity:ManipulateBoneScale)`( 0, Vector( scale, scale, scale ) )` instead.
     * 
     * @param scale - A float to scale the model by. 0 will not draw anything. A number less than 0 will draw the model inverted.
     * @param [deltaTime = 0] - Transition time of the scale change, set to 0 to modify the scale right away. To avoid issues with client-side trace detection this must be set, and can be an extremely low number to mimic a value of 0 such as .000001.
     */
    SetModelScale(scale: number, deltaTime = 0): void;
    
    /**
     * [Shared]
     * 
     * Sets the move collide type of the entity. The move collide is the way a physics object reacts to hitting an object - will it bounce, slide?
     * @param moveCollideType - The move collide type, see [Enums/MOVECOLLIDE](https://wiki.facepunch.com/gmod/Enums/MOVECOLLIDE)
     */
    SetMoveCollide(moveCollideType: MOVECOLLIDE): void;
    
    /**
     * [Shared]
     * 
     * Sets the Movement Parent of an entity to another entity.
     * 
     * Similar to [Entity:SetParent](https://wiki.facepunch.com/gmod/Entity:SetParent), except the object's coordinates are not translated automatically before parenting.
     * 
     * Does nothing on client.
     * @param Parent - The entity to change this entity's Movement Parent to.
     */
    SetMoveParent(Parent: Entity): void;
    
    /**
     * [Shared]
     * 
     * Sets the entity's move type. This should be called before initializing the physics object on the entity, unless it will override SetMoveType such as [Entity:PhysicsInitBox](https://wiki.facepunch.com/gmod/Entity:PhysicsInitBox).
     * 
     * Despite existing on client, it doesn't actually do anything on client.
     * @param movetype - The new movetype, see [Enums/MOVETYPE](https://wiki.facepunch.com/gmod/Enums/MOVETYPE)
     */
    SetMoveType(movetype: MOVETYPE): void;
    
    /**
     * [Server]
     * 
     * Sets the mapping name of the entity.
     * @param mappingName - The name to set for the entity.
     */
    SetName(mappingName: string): void;
    
    /**
     * [Client]
     * 
     * Alters the entity's perceived serverside angle on the client.
     * @param angle - Networked angle.
     */
    SetNetworkAngles(angle: Angle): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked angle value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNetworked2Angle](https://wiki.facepunch.com/gmod/Entity:GetNetworked2Angle) both from client and server.
     * 
     * @deprecated You should be using [Entity:SetNW2Angle](https://wiki.facepunch.com/gmod/Entity:SetNW2Angle) instead.
     * 
     * **Warning:**
     * >The value will only be updated clientside if the entity is or enters the clients PVS. use [Entity:SetNWAngle](https://wiki.facepunch.com/gmod/Entity:SetNWAngle) instead
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.  
     * The value will only be networked if it isn't the same as the current value and unlike SetNW*
     * the value will only be networked once and not every 10 seconds.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set
     */
    SetNetworked2Angle(key: string, value: Angle): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked boolean value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNetworked2Bool](https://wiki.facepunch.com/gmod/Entity:GetNetworked2Bool) both from client and server.
     * 
     * @deprecated You should be using [Entity:SetNW2Bool](https://wiki.facepunch.com/gmod/Entity:SetNW2Bool) instead.
     * 
     * **Warning:**
     * >The value will only be updated clientside if the entity is or enters the clients PVS. use [Entity:SetNWBool](https://wiki.facepunch.com/gmod/Entity:SetNWBool) instead
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.  
     * The value will only be networked if it isn't the same as the current value and unlike SetNW*
     * the value will only be networked once and not every 10 seconds.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set
     */
    SetNetworked2Bool(key: string, value: boolean): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked entity value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNetworked2Entity](https://wiki.facepunch.com/gmod/Entity:GetNetworked2Entity) both from client and server.
     * 
     * @deprecated You should be using [Entity:SetNW2Entity](https://wiki.facepunch.com/gmod/Entity:SetNW2Entity) instead.
     * 
     * **Warning:**
     * >The value will only be updated clientside if the entity is or enters the clients PVS. use [Entity:SetNWEntity](https://wiki.facepunch.com/gmod/Entity:SetNWEntity) instead
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.  
     * The value will only be networked if it isn't the same as the current value and unlike SetNW*
     * the value will only be networked once and not every 10 seconds.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set
     */
    SetNetworked2Entity(key: string, value: Entity): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked float (number) value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNetworked2Float](https://wiki.facepunch.com/gmod/Entity:GetNetworked2Float) both from client and server.
     * 
     * Unlike [Entity:SetNetworked2Int](https://wiki.facepunch.com/gmod/Entity:SetNetworked2Int), floats don't have to be whole numbers.
     * 
     * **Warning:**
     * >The value will only be updated clientside if the entity is or enters the clients PVS. use [Entity:SetNWFloat](https://wiki.facepunch.com/gmod/Entity:SetNWFloat) instead
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.  
     * The value will only be networked if it isn't the same as the current value and unlike SetNW*
     * the value will only be networked once and not every 10 seconds.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set
     */
    SetNetworked2Float(key: string, value: number): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked integer (whole number) value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNetworked2Int](https://wiki.facepunch.com/gmod/Entity:GetNetworked2Int) both from client and server.
     * 
     * See [Entity:SetNW2Float](https://wiki.facepunch.com/gmod/Entity:SetNW2Float) for numbers that aren't integers.
     * 
     * @deprecated You should be using [Entity:SetNW2Int](https://wiki.facepunch.com/gmod/Entity:SetNW2Int) instead.
     * 
     * **Warning:**
     * >The value will only be updated clientside if the entity is or enters the clients PVS.  
     * The integer has a 32 bit limit. Use [Entity:SetNWInt](https://wiki.facepunch.com/gmod/Entity:SetNWInt) instead
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.  
     * The value will only be networked if it isn't the same as the current value and unlike SetNW*
     * the value will only be networked once and not every 10 seconds.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set
     */
    SetNetworked2Int(key: string, value: number): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked string value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNetworked2String](https://wiki.facepunch.com/gmod/Entity:GetNetworked2String) both from client and server.
     * 
     * @deprecated You should be using [Entity:SetNW2String](https://wiki.facepunch.com/gmod/Entity:SetNW2String) instead.
     * 
     * **Warning:**
     * >The value will only be updated clientside if the entity is or enters the clients PVS. use [Entity:SetNWString](https://wiki.facepunch.com/gmod/Entity:SetNWString) instead
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.  
     * The value will only be networked if it isn't the same as the current value and unlike SetNW*
     * the value will only be networked once and not every 10 seconds.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set, up to 511 characters.
     */
    SetNetworked2String(key: string, value: string): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNetworked2Var](https://wiki.facepunch.com/gmod/Entity:GetNetworked2Var) both from client and server.
     * 
     * | Allowed Types   |  
     * | --------------- |  
     * | Angle           |  
     * | Boolean         |  
     * | Entity          |  
     * | Float           |  
     * | Int             |  
     * | String          |  
     * | Vector          |
     * 
     * @deprecated You should be using [Entity:SetNW2Var](https://wiki.facepunch.com/gmod/Entity:SetNW2Var) instead.
     * 
     * **Warning:**
     * >Trying to network a type that is not listed above leads to the value not being networked!
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.  
     * The value will only be networked if it isn't the same as the current value and unlike SetNW*
     * the value will only ne networked once and not every 10 seconds.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set
     */
    SetNetworked2Var(key: string, value: any): void;
    
    /**
     * [Shared]
     * 
     * Sets a function to be called when the NW2Var changes. Internally uses [GM:EntityNetworkedVarChanged](https://wiki.facepunch.com/gmod/GM:EntityNetworkedVarChanged) to call the function.
     * 
     * **Note:**
     * >Only one NW2VarProxy can be set per-var  
     * Running this function clientside will only set it for the client it is called on.
     * 
     * @param name - The name of the NW2Var to add callback for.
     * @param callback - The function to be called when the NW2Var changes. It has 4 arguments:
     * * [Entity](https://wiki.facepunch.com/gmod/Entity) ent - The entity
     * * [string](https://wiki.facepunch.com/gmod/string) name - Name of the NW2Var that has changed
     * * [any](https://wiki.facepunch.com/gmod/any) oldval - The old value
     * * [any](https://wiki.facepunch.com/gmod/any) newval - The new value
     */
    SetNetworked2VarProxy(name: string, callback: Function): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked vector value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNetworked2Vector](https://wiki.facepunch.com/gmod/Entity:GetNetworked2Vector) both from client and server.
     * 
     * @deprecated You should be using [Entity:SetNW2Vector](https://wiki.facepunch.com/gmod/Entity:SetNW2Vector) instead.
     * 
     * **Warning:**
     * >The value will only be updated clientside if the entity is or enters the clients PVS. use [Entity:SetNWVector](https://wiki.facepunch.com/gmod/Entity:SetNWVector) instead
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.  
     * The value will only be networked if it isn't the same as the current value and unlike SetNW*
     * the value will only be networked once and not every 10 seconds.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set
     */
    SetNetworked2Vector(key: string, value: Vector): void;
    
    /**
     * [Shared]
     * 
     * @deprecated You should use [Entity:SetNWAngle](https://wiki.facepunch.com/gmod/Entity:SetNWAngle) instead.
     * 
     * **Note:**
     * >Running this function clientside will only set it clientside for the client it is called on.
     * 
     * @param key - The key to associate the value with
     * @param [value = Angle( 0, 0, 0 )] - The value to set
     */
    SetNetworkedAngle(key: string, value?: Angle): void;
    
    /**
     * [Shared]
     * 
     * @deprecated You should use [Entity:SetNWBool](https://wiki.facepunch.com/gmod/Entity:SetNWBool) instead.
     * 
     * **Note:**
     * >Running this function clientside will only set it clientside for the client it is called on.
     * 
     * @param key - The key to associate the value with
     * @param [value = false] - The value to set
     */
    SetNetworkedBool(key: string, value = false): void;
    
    /**
     * [Shared]
     * 
     * @deprecated You should use [Entity:SetNWEntity](https://wiki.facepunch.com/gmod/Entity:SetNWEntity) instead.
     * 
     * **Note:**
     * >Running this function clientside will only set it clientside for the client it is called on.
     * 
     * @param key - The key to associate the value with
     * @param [value = NULL] - The value to set
     */
    SetNetworkedEntity(key: string, value?: Entity): void;
    
    /**
     * [Shared]
     * 
     * @deprecated You should use [Entity:SetNWFloat](https://wiki.facepunch.com/gmod/Entity:SetNWFloat) instead.
     * 
     * **Note:**
     * >Running this function clientside will only set it clientside for the client it is called on.
     * 
     * @param key - The key to associate the value with
     * @param [value = 0] - The value to set
     */
    SetNetworkedFloat(key: string, value = 0): void;
    
    /**
     * [Shared]
     * 
     * @deprecated You should use [Entity:SetNWInt](https://wiki.facepunch.com/gmod/Entity:SetNWInt) instead.
     * 
     * **Note:**
     * >Running this function clientside will only set it clientside for the client it is called on.
     * 
     * @param key - The key to associate the value with
     * @param [value = 0] - The value to set
     */
    SetNetworkedInt(key: string, value = 0): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked number at the specified index on the entity.
     * 
     * @deprecated You should be using [Entity:SetNWFloat](https://wiki.facepunch.com/gmod/Entity:SetNWFloat) instead.
     * 
     * @param index - The index that the value is stored in.
     * @param number - The value to network.
     */
    SetNetworkedNumber(index: any, number: number): void;
    
    /**
     * [Shared]
     * 
     * @deprecated You should use [Entity:SetNWString](https://wiki.facepunch.com/gmod/Entity:SetNWString) instead.
     * 
     * **Note:**
     * >Running this function clientside will only set it clientside for the client it is called on.
     * 
     * @param key - The key to associate the value with
     * @param [value = ] - The value to set
     */
    SetNetworkedString(key: string, value?: string): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNetworkedVar](https://wiki.facepunch.com/gmod/Entity:GetNetworkedVar) both from client and server.
     * 
     * | Allowed Types   |  
     * | --------------- |  
     * | Angle           |  
     * | Boolean         |  
     * | Entity          |  
     * | Float           |  
     * | Int             |  
     * | String          |  
     * | Vector          |
     * 
     * **Warning:**
     * >Trying to network a type that is not listed above leads to the value not being networked!  
     * the value will only be updated clientside if the entity is or enters the clients PVS.
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.  
     * The value will only be networked if it isn't the same as the current value and unlike SetNW*
     * the value will only be networked once and not every 10 seconds.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set
     */
    SetNetworkedVar(key: string, value: any): void;
    
    /**
     * [Shared]
     * 
     * Sets callback function to be called when given NWVar changes.
     * 
     * @deprecated You should be using [Entity:SetNWVarProxy](https://wiki.facepunch.com/gmod/Entity:SetNWVarProxy) instead.
     * 
     * @param name - The name of the NWVar to add callback for.
     * @param callback - The function to be called when the NWVar changes.
     */
    SetNetworkedVarProxy(name: string, callback: Function): void;
    
    /**
     * [Shared]
     * 
     * @deprecated You should use [Entity:SetNWVector](https://wiki.facepunch.com/gmod/Entity:SetNWVector) instead.
     * 
     * **Note:**
     * >Running this function clientside will only set it clientside for the client it is called on.
     * 
     * @param key - The key to associate the value with
     * @param [value = Vector( 0, 0, 0 )] - The value to set
     */
    SetNetworkedVector(key: string, value?: Vector): void;
    
    /**
     * [Shared]
     * 
     * Virtually changes entity position for clients. Does the same thing as [Entity:SetPos](https://wiki.facepunch.com/gmod/Entity:SetPos) when used serverside.
     * @param origin - The position to make clients think this entity is at.
     */
    SetNetworkOrigin(origin: Vector): void;
    
    /**
     * [Client]
     * 
     * Sets the next time the clientside [ENTITY:Think](https://wiki.facepunch.com/gmod/ENTITY:Think) is called.
     * @param nextthink - The next time, relative to [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime), to execute the [ENTITY:Think](https://wiki.facepunch.com/gmod/ENTITY:Think) clientside.
     */
    SetNextClientThink(nextthink: number): void;
    
    /**
     * [Shared]
     * 
     * Sets if the entity's model should render at all.
     * 
     * If set on the server, this entity will no longer network to clients, and for all intents and purposes cease to exist clientside.
     * @param shouldNotDraw - true disables drawing
     */
    SetNoDraw(shouldNotDraw: boolean): void;
    
    /**
     * [Shared]
     * 
     * Sets whether the entity is solid or not.
     * @param IsNotSolid - True will make the entity not solid, false will make it solid.
     */
    SetNotSolid(IsNotSolid: boolean): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked angle value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNW2Angle](https://wiki.facepunch.com/gmod/Entity:GetNW2Angle) both from client and server.
     * 
     * **Warning:**
     * >The value will only be updated clientside if the entity is or enters the clients PVS. use [Entity:SetNWAngle](https://wiki.facepunch.com/gmod/Entity:SetNWAngle) instead
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.  
     * The value will only be networked if it isn't the same as the current value and unlike SetNW*
     * the value will only be networked once and not every 10 seconds.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set
     */
    SetNW2Angle(key: string, value: Angle): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked boolean value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNW2Bool](https://wiki.facepunch.com/gmod/Entity:GetNW2Bool) both from client and server.
     * 
     * **Warning:**
     * >The value will only be updated clientside if the entity is or enters the clients PVS. use [Entity:SetNWBool](https://wiki.facepunch.com/gmod/Entity:SetNWBool) instead
     * 
     * **Bug [#5455](https://github.com/Facepunch/garrysmod-issues/issues/5455):**
     * >You should not use the NW2 System on entities that are based on a Lua Entity or else NW2Vars could get mixed up, updated multiple times or not be set.
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.  
     * The value will only be networked if it isn't the same as the current value and unlike SetNW*
     * the value will only be networked once and not every 10 seconds.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set
     */
    SetNW2Bool(key: string, value: boolean): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked entity value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNW2Entity](https://wiki.facepunch.com/gmod/Entity:GetNW2Entity) both from client and server.
     * 
     * **Warning:**
     * >The value will only be updated clientside if the entity is or enters the clients PVS. use [Entity:SetNWEntity](https://wiki.facepunch.com/gmod/Entity:SetNWEntity) instead
     * 
     * **Bug [#5455](https://github.com/Facepunch/garrysmod-issues/issues/5455):**
     * >You should not use the NW2 System on entities that are based on a Lua Entity or else NW2Vars could get mixed up, updated multiple times or not be set.
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.  
     * The value will only be networked if it isn't the same as the current value and unlike SetNW*
     * the value will only be networked once and not every 10 seconds.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set
     */
    SetNW2Entity(key: string, value: Entity): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked float (number) value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNW2Float](https://wiki.facepunch.com/gmod/Entity:GetNW2Float) both from client and server.
     * 
     * Unlike [Entity:SetNW2Int](https://wiki.facepunch.com/gmod/Entity:SetNW2Int), floats don't have to be whole numbers.
     * 
     * **Warning:**
     * >The value will only be updated clientside if the entity is or enters the clients PVS. use [Entity:SetNWFloat](https://wiki.facepunch.com/gmod/Entity:SetNWFloat) instead
     * 
     * **Bug [#5455](https://github.com/Facepunch/garrysmod-issues/issues/5455):**
     * >You should not use the NW2 System on entities that are based on a Lua Entity or else NW2Vars could get mixed up, updated multiple times or not be set.
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.  
     * The value will only be networked if it isn't the same as the current value and unlike SetNW*
     * the value will only be networked once and not every 10 seconds.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set
     */
    SetNW2Float(key: string, value: number): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked integer (whole number) value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNW2Int](https://wiki.facepunch.com/gmod/Entity:GetNW2Int) both from client and server.
     * 
     * See [Entity:SetNW2Float](https://wiki.facepunch.com/gmod/Entity:SetNW2Float) for numbers that aren't integers.
     * 
     * **Warning:**
     * >The value will only be updated clientside if the entity is or enters the clients PVS.  
     * The integer has a 32 bit limit. Use [Entity:SetNWInt](https://wiki.facepunch.com/gmod/Entity:SetNWInt) instead
     * 
     * **Bug [#5455](https://github.com/Facepunch/garrysmod-issues/issues/5455):**
     * >You should not use the NW2 System on entities that are based on a Lua Entity or else NW2Vars could get mixed up, updated multiple times or not be set.
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.  
     * The value will only be networked if it isn't the same as the current value and unlike SetNW*
     * the value will only be networked once and not every 10 seconds.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set
     */
    SetNW2Int(key: string, value: number): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked string value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNW2String](https://wiki.facepunch.com/gmod/Entity:GetNW2String) both from client and server.
     * 
     * **Warning:**
     * >The value will only be updated clientside if the entity is or enters the clients PVS. use [Entity:SetNWString](https://wiki.facepunch.com/gmod/Entity:SetNWString) instead
     * 
     * **Bug [#5455](https://github.com/Facepunch/garrysmod-issues/issues/5455):**
     * >You should not use the NW2 System on entities that are based on a Lua Entity or else NW2Vars could get mixed up, updated multiple times or not be set.
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.  
     * The value will only be networked if it isn't the same as the current value and unlike SetNW*
     * the value will only be networked once and not every 10 seconds.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set, up to 511 characters.
     */
    SetNW2String(key: string, value: string): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNW2Var](https://wiki.facepunch.com/gmod/Entity:GetNW2Var) both from client and server.
     * 
     * | Allowed Types   |  
     * | --------------- |  
     * | Angle           |  
     * | Boolean         |  
     * | Entity          |  
     * | Float           |  
     * | Int             |  
     * | String          |  
     * | Vector          |
     * 
     * **Warning:**
     * >Trying to network a type that is not listed above leads to the value not being networked!  
     * the value will only be updated clientside if the entity is or enters the clients PVS.
     * 
     * **Bug [#5455](https://github.com/Facepunch/garrysmod-issues/issues/5455):**
     * >You should not use the NW2 System on entities that are based on a Lua Entity or else NW2Vars could get mixed up, updated multiple times or not be set.
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.  
     * The value will only be networked if it isn't the same as the current value and unlike SetNW*
     * the value will only be networked once and not every 10 seconds.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set
     */
    SetNW2Var(key: string, value: any): void;
    
    /**
     * [Shared]
     * 
     * Sets a function to be called when the NW2Var changes. Internally uses [GM:EntityNetworkedVarChanged](https://wiki.facepunch.com/gmod/GM:EntityNetworkedVarChanged) to call the function.  
     * Alias of [Entity:SetNetworked2VarProxy](https://wiki.facepunch.com/gmod/Entity:SetNetworked2VarProxy)
     * 
     * **Bug [#5455](https://github.com/Facepunch/garrysmod-issues/issues/5455):**
     * >You should not use the NW2 System on entities that are based on a Lua Entity, or else this will be called multiple times and the NW2Var could get mixed up with other ones.
     * 
     * **Note:**
     * >Only one NW2VarProxy can be set per-var  
     * Running this function will only set it for the realm it is called on.
     * 
     * @param key - The key of the NW2Var to add callback for.
     * @param callback - The function to be called when the NW2Var changes. It has 4 arguments:
     * * [Entity](https://wiki.facepunch.com/gmod/Entity) ent - The entity
     * * [string](https://wiki.facepunch.com/gmod/string) name - Name of the NW2Var that has changed
     * * [any](https://wiki.facepunch.com/gmod/any) oldval - The old value
     * * [any](https://wiki.facepunch.com/gmod/any) newval - The new value
     */
    SetNW2VarProxy(key: any, callback: Function): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked vector value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNW2Vector](https://wiki.facepunch.com/gmod/Entity:GetNW2Vector) both from client and server.
     * 
     * **Warning:**
     * >The value will only be updated clientside if the entity is or enters the clients PVS. use [Entity:SetNWVector](https://wiki.facepunch.com/gmod/Entity:SetNWVector) instead
     * 
     * **Bug [#5455](https://github.com/Facepunch/garrysmod-issues/issues/5455):**
     * >You should not use the NW2 System on entities that are based on a Lua Entity or else NW2Vars could get mixed up, updated multiple times or not be set.
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.  
     * The value will only be networked if it isn't the same as the current value and unlike SetNW*
     * the value will only be networked once and not every 10 seconds.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set
     */
    SetNW2Vector(key: string, value: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked angle value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNWAngle](https://wiki.facepunch.com/gmod/Entity:GetNWAngle) both from client and server.
     * 
     * **Warning:**
     * >There's a 4095 slots Network limit. If you need more, consider using the [net](https://wiki.facepunch.com/gmod/net) library or [Entity:SetNW2Angle](https://wiki.facepunch.com/gmod/Entity:SetNW2Angle). You should also consider the fact that you have way too many variables. You can learn more about this limit here: [Networking_Usage#nwlimits](https://wiki.facepunch.com/gmod/Networking_Usage#nwlimits)
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set
     */
    SetNWAngle(key: string, value: Angle): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked boolean value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNWBool](https://wiki.facepunch.com/gmod/Entity:GetNWBool) both from client and server.
     * 
     * **Warning:**
     * >There's a 4096 slots Network limit. If you need more, consider using the [net](https://wiki.facepunch.com/gmod/net) library or [Entity:SetNW2Bool](https://wiki.facepunch.com/gmod/Entity:SetNW2Bool). You should also consider the fact that you have way too many variables. You can learn more about this limit here: [Networking_Usage#nwlimits](https://wiki.facepunch.com/gmod/Networking_Usage#nwlimits)
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set
     */
    SetNWBool(key: string, value: boolean): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked entity value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNWEntity](https://wiki.facepunch.com/gmod/Entity:GetNWEntity) both from client and server.
     * 
     * **Warning:**
     * >There's a 4096 slots Network limit. If you need more, consider using the [net](https://wiki.facepunch.com/gmod/net) library or [Entity:SetNW2Entity](https://wiki.facepunch.com/gmod/Entity:SetNW2Entity). You should also consider the fact that you have way too many variables. You can learn more about this limit here: [Networking_Usage#nwlimits](https://wiki.facepunch.com/gmod/Networking_Usage#nwlimits)
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set
     */
    SetNWEntity(key: string, value: Entity): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked float (number) value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNWFloat](https://wiki.facepunch.com/gmod/Entity:GetNWFloat) both from client and server.
     * 
     * Unlike [Entity:SetNWInt](https://wiki.facepunch.com/gmod/Entity:SetNWInt), floats don't have to be whole numbers.
     * 
     * **Warning:**
     * >There's a 4095 slots Network limit. If you need more, consider using the [net](https://wiki.facepunch.com/gmod/net) library or [Entity:SetNW2Float](https://wiki.facepunch.com/gmod/Entity:SetNW2Float). You should also consider the fact that you have way too many variables. You can learn more about this limit here: [Networking_Usage#nwlimits](https://wiki.facepunch.com/gmod/Networking_Usage#nwlimits)
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set
     */
    SetNWFloat(key: string, value: number): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked integer (whole number) value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNWInt](https://wiki.facepunch.com/gmod/Entity:GetNWInt) both from client and server.
     * 
     * See [Entity:SetNWFloat](https://wiki.facepunch.com/gmod/Entity:SetNWFloat) for numbers that aren't integers.
     * 
     * **Warning:**
     * >There's a 4095 slots Network limit. If you need more, consider using the [net](https://wiki.facepunch.com/gmod/net) library or [Entity:SetNW2Int](https://wiki.facepunch.com/gmod/Entity:SetNW2Int). You should also consider the fact that you have way too many variables. You can learn more about this limit here: [Networking_Usage#nwlimits](https://wiki.facepunch.com/gmod/Networking_Usage#nwlimits)
     * 
     * **Bug [#3374](https://github.com/Facepunch/garrysmod-issues/issues/3374):**
     * >This function will not round decimal values as it actually networks a float internally.
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set
     */
    SetNWInt(key: string, value: number): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked string value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNWString](https://wiki.facepunch.com/gmod/Entity:GetNWString) both from client and server.
     * 
     * **Warning:**
     * >There's a 4095 slots Network limit. If you need more, consider using the [net](https://wiki.facepunch.com/gmod/net) library or [Entity:SetNW2String](https://wiki.facepunch.com/gmod/Entity:SetNW2String). You should also consider the fact that you have way too many variables. You can learn more about this limit here: [Networking_Usage#nwlimits](https://wiki.facepunch.com/gmod/Networking_Usage#nwlimits)
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set, up to 199 characters.
     */
    SetNWString(key: string, value: string): void;
    
    /**
     * [Shared]
     * 
     * Sets a function to be called when the NWVar changes.
     * 
     * **Note:**
     * >Only one NWVarProxy can be set per-var  
     * Running this function will only set it for the realm it is called on.
     * 
     * @param key - The key of the NWVar to add callback for.
     * @param callback - The function to be called when the NWVar changes. It has 4 arguments:
     * * [Entity](https://wiki.facepunch.com/gmod/Entity) ent - The entity
     * * [string](https://wiki.facepunch.com/gmod/string) name - Name of the NWVar that has changed
     * * [any](https://wiki.facepunch.com/gmod/any) oldval - The old value
     * * [any](https://wiki.facepunch.com/gmod/any) newval - The new value
     */
    SetNWVarProxy(key: any, callback: Function): void;
    
    /**
     * [Shared]
     * 
     * Sets a networked vector value on the entity.
     * 
     * The value can then be accessed with [Entity:GetNWVector](https://wiki.facepunch.com/gmod/Entity:GetNWVector) both from client and server.
     * 
     * **Warning:**
     * >There's a 4095 slots Network limit. If you need more, consider using the [net](https://wiki.facepunch.com/gmod/net) library or [Entity:SetNW2Vector](https://wiki.facepunch.com/gmod/Entity:SetNW2Vector). You should also consider the fact that you have way too many variables. You can learn more about this limit here: [Networking_Usage#nwlimits](https://wiki.facepunch.com/gmod/Networking_Usage#nwlimits)
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.
     * 
     * @param key - The key to associate the value with
     * @param value - The value to set
     */
    SetNWVector(key: string, value: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the owner of this entity, disabling all physics interaction with it.
     * 
     * **Note:**
     * >This function is generally used to disable physics interactions on projectiles being fired by their owner, but can also be used for normal ownership in case physics interactions are not involved at all. The Gravity gun will be able to pick up the entity even if the owner can't collide with it, the Physics gun however will not.
     * 
     * @param [owner = NULL] - The entity to be set as owner.
     */
    SetOwner(owner?: Entity): void;
    
    /**
     * [Shared]
     * 
     * Sets the parent of this entity, making it move with its parent. This will make the child entity non solid, nothing can interact with them, including traces.
     * 
     * **Warning:**
     * >This can cause undefined physics behaviour when used on entities that don't support parenting. See the [Valve developer wiki](https://developer.valvesoftware.com/wiki/Entity_Hierarchy_(parenting)) for more information.
     * 
     * **Note:**
     * >This does not work on.
     * 
     * @param [parent = NULL] - The entity to parent to. Setting this to nil will clear the parent.
     * @param [attachmentId = -1] - The attachment id to use when parenting, defaults to -1 or whatever the parent had set previously.
     * **Note:**
     * >You must call [Entity:SetMoveType](https://wiki.facepunch.com/gmod/Entity:SetMoveType)( MOVETYPE_NONE ) on the child for this argument to have any effect!
     * 
     */
    SetParent(parent?: Entity, attachmentId = -1): void;
    
    /**
     * [Shared]
     * 
     * Sets the parent of an entity to another entity with the given physics bone number. Similar to [Entity:SetParent](https://wiki.facepunch.com/gmod/Entity:SetParent), except it is parented to a physbone. This function is useful mainly for ragdolls.
     * 
     * **Note:**
     * >Despite this function being available server side, it doesn't actually do anything server side.
     * 
     * @param bone - Physics bone number to attach to. Use 0 for objects with only one physics bone. (See [Entity:GetPhysicsObjectNum](https://wiki.facepunch.com/gmod/Entity:GetPhysicsObjectNum))
     */
    SetParentPhysNum(bone: number): void;
    
    /**
     * [Shared]
     * 
     * Sets whether or not the given entity is persistent. A persistent entity will be saved on server shutdown and loaded back when the server starts up. Additionally, by default persistent entities cannot be grabbed with the physgun and tools cannot be used on them.
     * 
     * In sandbox, this can be set on an entity by opening the context menu, right clicking the entity, and choosing `"Make Persistent"`.
     * 
     * **Note:**
     * >Persistence can only be enabled with the sbox_persist convar, which works as an identifier for the current set of persistent entities. An empty identifier (which is the default value) disables this feature.
     * 
     * @param persist - Whether or not the entity should be persistent.
     */
    SetPersistent(persist: boolean): void;
    
    /**
     * [Server]
     * 
     * When called on a constraint entity, sets the two physics objects to be constrained.
     * 
     * Usage is not recommended as the Constraint library provides easier ways to deal with constraints.
     * @param Phys1 - The first physics object to be constrained.
     * @param Phys2 - The second physics object to be constrained.
     */
    SetPhysConstraintObjects(Phys1: PhysObj, Phys2: PhysObj): void;
    
    /**
     * [Server]
     * 
     * Sets the player who gets credit if this entity kills something with physics damage within the time limit.
     * 
     * **Note:**
     * >This can only be called on props, "anim" type SENTs and vehicles.
     * 
     * @param ent - Player who gets the kills. Setting this to a non-player entity will not work.
     * @param [timeLimit = 5] - Time in seconds until the entity forgets its physics attacker and prevents it from getting the kill credit.
     */
    SetPhysicsAttacker(ent: Player, timeLimit = 5): void;
    
    /**
     * [Shared]
     * 
     * Allows you to set how fast an entity's animation will play, with 1.0 being the default speed.
     * @param fSpeed - How fast the animation will play.
     */
    SetPlaybackRate(fSpeed: number): void;
    
    /**
     * [Shared]
     * 
     * Moves the entity to the specified position.
     * 
     * Some entities, such as ragdolls, will continually reset their position. Consider using [PhysObj:SetPos](https://wiki.facepunch.com/gmod/PhysObj:SetPos) on every physics object to move ragdolls.
     * 
     * **Warning:**
     * >Entities with [Entity:GetSolid](https://wiki.facepunch.com/gmod/Entity:GetSolid) of `SOLID_BBOX` will have their angles reset!
     * 
     * **Bug [#2447](https://github.com/Facepunch/garrysmod-issues/issues/2447):**
     * >This will fail inside of predicted functions called during player movement processing. This includes [WEAPON:PrimaryAttack](https://wiki.facepunch.com/gmod/WEAPON:PrimaryAttack) and [WEAPON:Think](https://wiki.facepunch.com/gmod/WEAPON:Think).
     * 
     * **Note:**
     * >If the new position doesn't take effect right away, you can use [Entity:SetupBones](https://wiki.facepunch.com/gmod/Entity:SetupBones) to force it to do so. This issue is especially common when trying to render the same entity twice or more in a single frame at different positions.
     * 
     * @param position - The position to move the entity to.
     */
    SetPos(position: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the specified pose parameter to the specified value.
     * 
     * You should call [Entity:InvalidateBoneCache](https://wiki.facepunch.com/gmod/Entity:InvalidateBoneCache) after calling this function.
     * 
     * **Note:**
     * >Avoid calling this in draw hooks, especially when animating things, as it might cause visual artifacts.
     * 
     * @param poseName - Name of the pose parameter. [Entity:GetPoseParameterName](https://wiki.facepunch.com/gmod/Entity:GetPoseParameterName) might come in handy here.
     * @param poseValue - The value to set the pose to.
     */
    SetPoseParameter(poseName: string, poseValue: number): void;
    
    /**
     * [Client]
     * 
     * Sets whether an entity should be predictable or not.
     * When an entity is set as predictable, its DT vars can be changed during predicted hooks. This is useful for entities which can be controlled by player input.
     * 
     * Any datatable value that mismatches from the server will be overridden and a prediction error will be spewed.
     * 
     * Weapons are predictable by default, and the drive system uses this function to make the controlled prop predictable as well.
     * 
     * Visit  for a list of all predicted hooks, and the [Prediction](https://wiki.facepunch.com/gmod/Prediction) page.
     * For further technical information on the subject, visit [valve's wiki](https://developer.valvesoftware.com/wiki/Prediction).
     * 
     * **Note:**
     * >This function resets the datatable variables everytime it's called, it should ideally be called when a player starts using the entity and when he stops
     * 
     * **Note:**
     * >Entities set as predictable with this function will be unmarked when the user lags and receives a full packet update, to handle such case visit [GM:NotifyShouldTransmit](https://wiki.facepunch.com/gmod/GM:NotifyShouldTransmit)
     * 
     * @param setPredictable - whether to make this entity predictable or not.
     */
    SetPredictable(setPredictable: boolean): void;
    
    /**
     * [Server]
     * 
     * Prevents the server from sending any further information about the entity to a player.
     * 
     * <validate>When using this function, [Entity:SetFlexScale](https://wiki.facepunch.com/gmod/Entity:SetFlexScale) will conflict with this function. Instead, consider using [Entity:SetFlexScale](https://wiki.facepunch.com/gmod/Entity:SetFlexScale) on the client.</validate>
     * 
     * **Bug [#1736](https://github.com/Facepunch/garrysmod-issues/issues/1736):**
     * >This does not work for nextbots unless you recursively loop their children and update them too.
     * 
     * **Note:**
     * >You must also call this function on a player's children if you would like to prevent transmission for players. See [Entity:GetChildren](https://wiki.facepunch.com/gmod/Entity:GetChildren).
     * 
     * @param player - The player to stop networking the entity to.
     * @param stopTransmitting - true to stop the entity from networking, false to make it network again.
     */
    SetPreventTransmit(player: Player, stopTransmitting: boolean): void;
    
    /**
     * [Server]
     * 
     * Sets the bone angles. This is used alongside Kinect in [Entity:SetRagdollBuildFunction](https://wiki.facepunch.com/gmod/Entity:SetRagdollBuildFunction), for more info see ragdoll_motion entity.
     * @param boneid - Bone ID
     * @param pos - Angle to set
     */
    SetRagdollAng(boneid: number, pos: Angle): void;
    
    /**
     * [Server]
     * 
     * Sets the function to build the ragdoll. This is used alongside Kinect, for more info see ragdoll_motion entity.
     * @param func - The build function. This function has one argument:
     * * [Entity](https://wiki.facepunch.com/gmod/Entity) ragdoll - The ragdoll to build
     */
    SetRagdollBuildFunction(func: Function): void;
    
    /**
     * [Server]
     * 
     * Sets the bone position. This is used alongside Kinect in [Entity:SetRagdollBuildFunction](https://wiki.facepunch.com/gmod/Entity:SetRagdollBuildFunction), for more info see ragdoll_motion entity.
     * @param boneid - Bone ID
     * @param pos - Position to set
     */
    SetRagdollPos(boneid: number, pos: Vector): void;
    
    /**
     * [Client]
     * 
     * Sets the render angle override for the Entity.
     * @param [newAngles = nil] - The new render angles to be set to. To disable the override, set to [nil](https://wiki.facepunch.com/gmod/nil).
     */
    SetRenderAngles(newAngles?: Angle): void;
    
    /**
     * [Client]
     * 
     * Sets the render bounds for the entity. For world space coordinates see [Entity:SetRenderBoundsWS](https://wiki.facepunch.com/gmod/Entity:SetRenderBoundsWS).
     * @param mins - The minimum corner of the bounds, relative to origin of the entity.
     * @param maxs - The maximum corner of the bounds, relative to origin of the entity.
     * @param [add = Vector( 0, 0, 0 )] - If defined, adds this vector to maxs and subtracts this vector from mins.
     */
    SetRenderBounds(mins: Vector, maxs: Vector, add?: Vector): void;
    
    /**
     * [Client]
     * 
     * Sets the render bounds for the entity in world space coordinates. For relative coordinates see [Entity:SetRenderBounds](https://wiki.facepunch.com/gmod/Entity:SetRenderBounds).
     * @param mins - The minimum corner of the bounds, relative to origin of the world/map.
     * @param maxs - The maximum corner of the bounds, relative to origin of the world/map.
     * @param [add = Vector( 0, 0, 0 )] - If defined, adds this vector to maxs and subtracts this vector from mins.
     */
    SetRenderBoundsWS(mins: Vector, maxs: Vector, add?: Vector): void;
    
    /**
     * [Client]
     * 
     * Used to specify a plane, past which an object will be visually clipped.
     * @param planeNormal - The normal of the plane. Anything behind the normal will be clipped.
     * @param planePosition - The position of the plane.
     */
    SetRenderClipPlane(planeNormal: Vector, planePosition: number): void;
    
    /**
     * [Client]
     * 
     * Enables the use of clipping planes to "cut" objects.
     * @param enabled - Enable or disable clipping planes
     */
    SetRenderClipPlaneEnabled(enabled: boolean): void;
    
    /**
     * [Shared]
     * 
     * Sets entity's render FX.
     * @param renderFX - The new render FX to set, see [Enums/kRenderFx](https://wiki.facepunch.com/gmod/Enums/kRenderFx)
     */
    SetRenderFX(renderFX: kRenderFx): void;
    
    /**
     * [Shared]
     * 
     * Sets the render mode of the entity.
     * @param renderMode - New render mode to set, see [Enums/RENDERMODE](https://wiki.facepunch.com/gmod/Enums/RENDERMODE).
     */
    SetRenderMode(renderMode: RENDERMODE): void;
    
    /**
     * [Client]
     * 
     * Set the render origin override, a position where the Entity will be rendered at.
     * @param [newOrigin = nil] - The new origin in world coordinates where the Entity's model will now be rendered at. To disable the override, set to [nil](https://wiki.facepunch.com/gmod/nil).
     */
    SetRenderOrigin(newOrigin?: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets a save value for an entity. You can see a full list of an entity's save values by creating it and printing [Entity:GetSaveTable](https://wiki.facepunch.com/gmod/Entity:GetSaveTable)().
     * 
     * See [Entity:GetInternalVariable](https://wiki.facepunch.com/gmod/Entity:GetInternalVariable) for the opposite of this function.
     * @param name - Name of the save value to set
     * @param value - Value to set
     */
    SetSaveValue(name: string, value: any): boolean;
    
    /**
     * [Shared]
     * 
     * Sets the entity's model sequence.
     * 
     * If the specified sequence is already active, the animation will not be restarted. See [Entity:ResetSequence](https://wiki.facepunch.com/gmod/Entity:ResetSequence) for a function that restarts the animation even if it is already playing.
     * 
     * In some cases you want to run [Entity:ResetSequenceInfo](https://wiki.facepunch.com/gmod/Entity:ResetSequenceInfo) to make this function run.
     * 
     * **Note:**
     * >This will not work properly if called directly after calling [Entity:SetModel](https://wiki.facepunch.com/gmod/Entity:SetModel). Consider waiting until the next Tick.
     * 
     * Will not work on players due to the animations being reset every frame by the base gamemode animation system. See [GM:CalcMainActivity](https://wiki.facepunch.com/gmod/GM:CalcMainActivity).
     * 
     * For custom scripted entities you will want to apply example from [ENTITY:Think](https://wiki.facepunch.com/gmod/ENTITY:Think) to make animations work.
     * 
     * @param sequenceId - The sequence to play. Also accepts strings.
     * **Note:**
     * >If set to a string, the function will automatically call [Entity:LookupSequence](https://wiki.facepunch.com/gmod/Entity:LookupSequence) to retrieve the sequence ID as a number.
     * 
     */
    SetSequence(sequenceId: number): void;
    
    /**
     * [Shared]
     * 
     * Sets whether or not the entity should make a physics contact sound when it's been picked up by a player.
     * @param [playsound = false] - True to play the pickup sound, false otherwise.
     */
    SetShouldPlayPickupSound(playsound = false): void;
    
    /**
     * [Shared]
     * 
     * Sets if entity should create a server ragdoll on death or a client one.
     * 
     * **Note:**
     * >Player ragdolls created with this enabled will have an owner set, see [Entity:SetOwner](https://wiki.facepunch.com/gmod/Entity:SetOwner) for more information on what effects this has.
     * 
     * This is reset for players when they respawn ([Entity:Spawn](https://wiki.facepunch.com/gmod/Entity:Spawn)).
     * 
     * @param serverragdoll - Set `true` if ragdoll should be created on server, `false` if on client.
     */
    SetShouldServerRagdoll(serverragdoll: boolean): void;
    
    /**
     * [Shared]
     * 
     * Sets the skin of the entity.
     * @param skinIndex - 0-based index of the skin to use.
     */
    SetSkin(skinIndex: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the solidity of an entity.
     * @param solid_type - The solid type. See the [Enums/SOLID](https://wiki.facepunch.com/gmod/Enums/SOLID).
     */
    SetSolid(solid_type: SOLID): void;
    
    /**
     * [Shared]
     * 
     * Sets solid flag(s) for the entity.
     * 
     * This overrides any other flags the entity might have had. See [Entity:AddSolidFlags](https://wiki.facepunch.com/gmod/Entity:AddSolidFlags) for adding flags.
     * @param flags - The flag(s) to set, see [Enums/FSOLID](https://wiki.facepunch.com/gmod/Enums/FSOLID).
     */
    SetSolidFlags(flags: FSOLID): void;
    
    /**
     * [Shared]
     * 
     * Sets whether the entity should use a spawn effect when it is created on the client.
     * 
     * See [Entity:GetSpawnEffect](https://wiki.facepunch.com/gmod/Entity:GetSpawnEffect) for more information on how the effect is applied.
     * 
     * **Note:**
     * >This function will only have an effect when the entity spawns. After that it will do nothing even is set to true.
     * 
     * @param spawnEffect - Sets if we should show a spawn effect.
     */
    SetSpawnEffect(spawnEffect: boolean): void;
    
    /**
     * [Shared]
     * 
     * Overrides a single material on the model of this entity.
     * 
     * To set a Lua material created with [Global.CreateMaterial](https://wiki.facepunch.com/gmod/Global.CreateMaterial), just prepend a `!` to the material name.
     * 
     * **Bug [#3362](https://github.com/Facepunch/garrysmod-issues/issues/3362):**
     * >The server's value takes priority on the client.
     * 
     * @param [index = nil] - Index of the material to override, acceptable values are from 0 to 31.
     * Indexes are by [Entity:GetMaterials](https://wiki.facepunch.com/gmod/Entity:GetMaterials), but you have to subtract 1 from them.
     * If called with no arguments, all sub materials will be reset.
     * @param [material = nil] - The material to override the default one with. Set to nil to revert to default material.
     */
    SetSubMaterial(index?: number, material?: string): void;
    
    /**
     * [Shared]
     * 
     * Sets the axis-aligned bounding box (AABB) for an entity's hitbox detection.
     * 
     * 	See also [Entity:SetSurroundingBoundsType](https://wiki.facepunch.com/gmod/Entity:SetSurroundingBoundsType) (mutually exclusive).
     * @param min - Minimum extent of the AABB relative to entity's position.
     * @param max - Maximum extent of the AABB relative to entity's position.
     */
    SetSurroundingBounds(min: Vector, max: Vector): void;
    
    /**
     * [Shared]
     * 
     * Automatically sets the axis-aligned bounding box (AABB) for an entity's hitbox detection.
     * 
     * 	See also [Entity:SetSurroundingBounds](https://wiki.facepunch.com/gmod/Entity:SetSurroundingBounds) (mutually exclusive).
     * @param bounds - Bounds type of the entity, see [Enums/BOUNDS](https://wiki.facepunch.com/gmod/Enums/BOUNDS)
     */
    SetSurroundingBoundsType(bounds: BOUNDS): void;
    
    /**
     * [Shared]
     * 
     * Changes the table that can be accessed by indexing an entity. Each entity starts with its own table by default.
     * @param tab - Table for the entity to use
     */
    SetTable(tab: any): void;
    
    /**
     * [Shared]
     * 
     * When this flag is set the entity will only transmit to the player when its parent is transmitted. This is useful for things like viewmodel attachments since without this flag they will transmit to everyone (and cause the viewmodels to transmit to everyone too).
     * 
     * **Note:**
     * >In the case of scripted entities, this will override [ENTITY:UpdateTransmitState](https://wiki.facepunch.com/gmod/ENTITY:UpdateTransmitState)
     * 
     * @param onoff - Will set the TransmitWithParent flag on or off
     */
    SetTransmitWithParent(onoff: boolean): void;
    
    /**
     * [Server]
     * 
     * Marks the entity as a trigger, so it will generate [ENTITY:StartTouch](https://wiki.facepunch.com/gmod/ENTITY:StartTouch), [ENTITY:Touch](https://wiki.facepunch.com/gmod/ENTITY:Touch) and [ENTITY:EndTouch](https://wiki.facepunch.com/gmod/ENTITY:EndTouch) callbacks.
     * 
     * Internally this is stored as <page text="FSOLID_TRIGGER">Enums/FSOLID</page> flag.
     * @param maketrigger - Make the entity trigger or not
     */
    SetTrigger(maketrigger: boolean): void;
    
    /**
     * [Server]
     * 
     * Sets whether an entity can be unfrozen, meaning that it cannot be unfrozen using the physgun.
     * @param [freezable = false] - True to make the entity unfreezable, false otherwise.
     */
    SetUnFreezable(freezable = false): void;
    
    /**
     * [Client]
     * 
     * Forces the entity to reconfigure its bones. You might need to call this after changing your model's scales or when manually drawing the entity multiple times at different positions.
     * 
     * **Note:**
     * >This calls the BuildBonePositions callback added via [Entity:AddCallback](https://wiki.facepunch.com/gmod/Entity:AddCallback), so avoid calling this function inside it to prevent an infinite loop.
     * 
     * 
     */
    SetupBones(): void;
    
    /**
     * [Client]
     * 
     * Initializes the class names of an entity's phoneme mappings (mouth movement data). This is called by default with argument "phonemes" when a flex-based entity (such as an [NPC](https://wiki.facepunch.com/gmod/NPC)) is created.
     * 
     * **Note:**
     * >TF2 phonemes can be accessed by using a path such as "player/scout/phonemes/phonemes" , check TF2's "tf2_misc_dir.vpk" with GCFScape for other paths, however it seems that TF2 sounds don't contain phoneme definitions anymore after being converted to mp3 and only rely on VCD animations, this needs to be further investigated
     * 
     * @param fileRoot - The file prefix of the phoneme mappings (relative to "garrysmod/expressions/").
     */
    SetupPhonemeMappings(fileRoot: string): void;
    
    /**
     * [Server]
     * 
     * Sets the use type of an entity, affecting how often [ENTITY:Use](https://wiki.facepunch.com/gmod/ENTITY:Use) will be called for Lua entities.
     * @param useType - The use type to apply to the entity. Uses [Enums/_USE](https://wiki.facepunch.com/gmod/Enums/_USE).
     */
    SetUseType(useType: _USE): void;
    
    /**
     * [Shared]
     * 
     * Allows to quickly set variable to entity's [Entity:GetTable](https://wiki.facepunch.com/gmod/Entity:GetTable).
     * 
     * **Note:**
     * >This will not network the variable to client(s). You want [Entity:SetNWString](https://wiki.facepunch.com/gmod/Entity:SetNWString) and similar functions for that
     * 
     * @param key - Key of the value to set
     * @param value - Value to set the variable to
     */
    SetVar(key: any, value: any): void;
    
    /**
     * [Shared]
     * 
     * Sets the entity's velocity. For entities with physics, consider using [PhysObj:SetVelocity](https://wiki.facepunch.com/gmod/PhysObj:SetVelocity) on the [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) of the entity.
     * 
     * **Warning:**
     * >If applied to a player, this will actually **ADD** velocity, not set it. (due to how movement code handles base velocity)
     * 
     * **Note:**
     * >Actually binds to CBaseEntity::SetBaseVelocity() which sets the entity's velocity due to forces applied by other entities.
     * 
     * @param velocity - The new velocity to set.
     */
    SetVelocity(velocity: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the model and associated weapon to this viewmodel entity.
     * 
     * This is used internally when the player switches weapon.
     * 
     * **Warning:**
     * >This will silently fail if the entity is not a viewmodel.
     * 
     * **Note:**
     * >View models are not drawn without a weapons associated to them.
     * 
     * @param viewModel - The model string to give to this viewmodel.
     * Example: "models/weapons/c_smg1.mdl"
     * @param [weapon = NULL] - The weapon entity to associate this viewmodel to.
     */
    SetWeaponModel(viewModel: string, weapon?: Weapon): void;
    
    /**
     * [Shared]
     * 
     * Returns the amount of skins the entity has.
     * 
     */
    SkinCount(): number;
    
    /**
     * [Client]
     * 
     * Moves the model instance from the source entity to this entity. This can be used to transfer decals that have been applied on one entity to another.
     * 
     * Both entities must have the same model.
     * @param srcEntity - Entity to move the model instance from.
     */
    SnatchModelInstance(srcEntity: Entity): boolean;
    
    /**
     * [Shared]
     * 
     * Initializes the entity and starts its networking. If called on a player, it will respawn them.
     * 
     * This calls [ENTITY:Initialize](https://wiki.facepunch.com/gmod/ENTITY:Initialize) on Lua-defined entities.
     * 
     */
    Spawn(): void;
    
    /**
     * [Shared]
     * 
     * Starts a "looping" sound. As with any other sound playing methods, this function expects the sound file to be looping itself and will not automatically loop a non looping sound file as one might expect.
     * 
     * This function is almost identical to [Global.CreateSound](https://wiki.facepunch.com/gmod/Global.CreateSound), with the exception of the sound being created in the STATIC channel and with normal attenuation.
     * 
     * See also [Entity:StopLoopingSound](https://wiki.facepunch.com/gmod/Entity:StopLoopingSound)
     * @param sound - Sound to play. Can be either a sound script or a filepath.
     */
    StartLoopingSound(sound: string): number;
    
    /**
     * [Shared]
     * 
     * Starts a motion controller in the physics engine tied to this entity's [PhysObj](https://wiki.facepunch.com/gmod/PhysObj), which enables the use of [ENTITY:PhysicsSimulate](https://wiki.facepunch.com/gmod/ENTITY:PhysicsSimulate).
     * 
     * The motion controller can later be destroyed via [Entity:StopMotionController](https://wiki.facepunch.com/gmod/Entity:StopMotionController).
     * 
     * Motion controllers are used internally to control other Entities' [PhysObj](https://wiki.facepunch.com/gmod/PhysObj)ects, such as the Gravity Gun, +use pickup and the Physics Gun.
     * 
     * This function should be called every time you recreate the Entity's [PhysObj](https://wiki.facepunch.com/gmod/PhysObj). Or alternatively you should call [Entity:AddToMotionController](https://wiki.facepunch.com/gmod/Entity:AddToMotionController) on the new [PhysObj](https://wiki.facepunch.com/gmod/PhysObj).
     * 
     * Also see [Entity:AddToMotionController](https://wiki.facepunch.com/gmod/Entity:AddToMotionController) and [Entity:RemoveFromMotionController](https://wiki.facepunch.com/gmod/Entity:RemoveFromMotionController).
     * 
     * **Note:**
     * >Only works on a scripted [Entity](https://wiki.facepunch.com/gmod/Entity) of anim type.
     * 
     * 
     */
    StartMotionController(): void;
    
    /**
     * [Client]
     * 
     * Stops all particle effects parented to the entity and immediately destroys them.
     * 
     */
    StopAndDestroyParticles(): void;
    
    /**
     * [Shared]
     * 
     * Stops a sound created by [Entity:StartLoopingSound](https://wiki.facepunch.com/gmod/Entity:StartLoopingSound).
     * @param id - The sound ID returned by [Entity:StartLoopingSound](https://wiki.facepunch.com/gmod/Entity:StartLoopingSound)
     */
    StopLoopingSound(id: number): void;
    
    /**
     * [Shared]
     * 
     * Stops the motion controller created with [Entity:StartMotionController](https://wiki.facepunch.com/gmod/Entity:StartMotionController).
     * 
     */
    StopMotionController(): void;
    
    /**
     * [Client]
     * 
     * Stops all particle effects parented to the entity.
     * 
     * This is ran automatically on every client by [Entity:StopParticles](https://wiki.facepunch.com/gmod/Entity:StopParticles) if called on the server.
     * 
     */
    StopParticleEmission(): void;
    
    /**
     * [Shared]
     * 
     * Stops any attached to the entity .pcf particles using [Global.ParticleEffectAttach](https://wiki.facepunch.com/gmod/Global.ParticleEffectAttach) or [Global.ParticleEffect](https://wiki.facepunch.com/gmod/Global.ParticleEffect).
     * 
     * On client, this is the same as [Entity:StopParticleEmission](https://wiki.facepunch.com/gmod/Entity:StopParticleEmission). ( and you should use StopParticleEmission instead )
     * 
     * On server, this is the same as running [Entity:StopParticleEmission](https://wiki.facepunch.com/gmod/Entity:StopParticleEmission) on every client.
     * 
     */
    StopParticles(): void;
    
    /**
     * [Client]
     * 
     * Stops all particle effects parented to the entity with given name.
     * @param name - The name of the particle to stop.
     */
    StopParticlesNamed(name: string): void;
    
    /**
     * [Client]
     * 
     * Stops all particle effects parented to the entity with given name on given attachment.
     * @param name - The name of the particle to stop.
     * @param attachment - The attachment of the entity to stop particles on.
     */
    StopParticlesWithNameAndAttachment(name: string, attachment: number): void;
    
    /**
     * [Shared]
     * 
     * Stops emitting the given sound from the entity, especially useful for looping sounds.
     * @param sound - The name of the sound script or the filepath to stop playback of.
     */
    StopSound(sound: string): void;
    
    /**
     * [Server]
     * 
     * Applies the specified amount of damage to the entity with <page text="DMG_GENERIC">Enums/DMG</page> flag.
     * 
     * **Warning:**
     * >Calling this function on the victim entity in [ENTITY:OnTakeDamage](https://wiki.facepunch.com/gmod/ENTITY:OnTakeDamage) can cause infinite loops.
     * 
     * **Warning:**
     * >This function does not seem to do any damage if you apply it to a player who is driving a prop_vehicle_jeep or prop_vehicle_jeep_old vehicle. You need to call it on the vehicle instead.
     * 
     * @param damageAmount - The amount of damage to be applied.
     * @param attacker - The entity that initiated the attack that caused the damage.
     * @param inflictor - The entity that applied the damage, eg. a weapon.
     */
    TakeDamage(damageAmount: number, attacker: Entity, inflictor: Entity): void;
    
    /**
     * [Server]
     * 
     * Applies the damage specified by the damage info to the entity.
     * 
     * **Warning:**
     * >Calling this function on the victim entity in [ENTITY:OnTakeDamage](https://wiki.facepunch.com/gmod/ENTITY:OnTakeDamage) can cause infinite loops.
     * 
     * **Warning:**
     * >This function does not seem to do any damage if you apply it to a player who is driving a prop_vehicle_jeep or prop_vehicle_jeep_old vehicle. You need to call it on the vehicle instead.
     * 
     * @param damageInfo - The damage to apply.
     */
    TakeDamageInfo(damageInfo: CTakeDamageInfo): void;
    
    /**
     * [Server]
     * 
     * Applies forces to our physics object in response to damage.
     * @param dmginfo - The damageinfo to apply. Only [CTakeDamageInfo:GetDamageForce](https://wiki.facepunch.com/gmod/CTakeDamageInfo:GetDamageForce) and [CTakeDamageInfo:GetDamagePosition](https://wiki.facepunch.com/gmod/CTakeDamageInfo:GetDamagePosition) are used.
     */
    TakePhysicsDamage(dmginfo: CTakeDamageInfo): void;
    
    /**
     * [Server]
     * 
     * Check if the given position or entity is within this entity's [PVS(Potential Visibility Set)](https://developer.valvesoftware.com/wiki/PVS "PVS - Valve Developer Community").
     * 
     * See also [Entity:IsDormant](https://wiki.facepunch.com/gmod/Entity:IsDormant).
     * 
     * **Note:**
     * >The function won't take in to account [Global.AddOriginToPVS](https://wiki.facepunch.com/gmod/Global.AddOriginToPVS) and the like.
     * 
     * @param testPoint - [Entity](https://wiki.facepunch.com/gmod/Entity) or [Vector](https://wiki.facepunch.com/gmod/Vector) to test against. If an entity is given, this function will test using its bounding box.
     */
    TestPVS(testPoint: any): boolean;
    
    /**
     * [Shared]
     * 
     * Returns the ID of a [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) attached to the given bone. To be used with [Entity:GetPhysicsObjectNum](https://wiki.facepunch.com/gmod/Entity:GetPhysicsObjectNum).
     * 
     * See [Entity:TranslatePhysBoneToBone](https://wiki.facepunch.com/gmod/Entity:TranslatePhysBoneToBone) for reverse function.
     * @param boneID - The ID of a bone to look up the "physics root" bone of.
     */
    TranslateBoneToPhysBone(boneID: number): number;
    
    /**
     * [Shared]
     * 
     * Returns the boneID of the bone the given [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) is attached to.
     * 
     * See [Entity:TranslateBoneToPhysBone](https://wiki.facepunch.com/gmod/Entity:TranslateBoneToPhysBone) for reverse function.
     * @param physNum - The [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) number on the entity
     */
    TranslatePhysBoneToBone(physNum: number): number;
    
    /**
     * [Server]
     * 
     * Updates positions of bone followers created by [Entity:CreateBoneFollowers](https://wiki.facepunch.com/gmod/Entity:CreateBoneFollowers).
     * 
     * This should be called every tick.
     * 
     * **Note:**
     * >This function only works on `anim` type entities.
     * 
     * 
     */
    UpdateBoneFollowers(): void;
    
    /**
     * [Client]
     * 
     * Updates the shadow of this entity.
     * 
     */
    UpdateShadow(): void;
    
    /**
     * [Server]
     * 
     * Simulates a `+use` action on an entity.
     * @param activator - The entity that caused this input. This will usually be the player who pressed their use key
     * @param [caller = NULL] - The entity responsible for the input. This will typically be the same as `activator` unless some other entity is acting as a proxy
     * @param [useType = USE_ON] - Use type, see [Enums/USE](https://wiki.facepunch.com/gmod/Enums/USE).
     * @param [value = 0] - Any value.
     */
    Use(activator: Entity, caller?: Entity, useType?: USE, value = 0): void;
    
    /**
     * [Shared]
     * 
     * Animations will be handled purely clientside instead of a fixed animtime, enabling interpolation. This does not affect layers and gestures.
     * 
     * **Note:**
     * >Does nothing on server.
     * 
     * 
     */
    UseClientSideAnimation(): void;
    
    /**
     * [Shared]
     * 
     * Enables or disables trigger bounds.
     * 
     * This will give the entity a "trigger box" that extends around its bounding box by boundSize units in X/Y and (boundSize / 2) in +Z (-Z remains the same).
     * The trigger box is world aligned and will work regardless of the object's solidity and collision group.
     * 
     * Valve use trigger boxes for all pickup items. Their bloat size is 24, a surprisingly large figure.
     * 
     * **Note:**
     * >The trigger boxes can be made visible as a light blue box by using the **ent_bbox** console command while looking at the entity. Alternatively a classname or entity index can be used as the first argument.
     * 
     * This requires **developer** to be set to **1**.
     * 
     * @param enable - Enable or disable the bounds.
     * @param [boundSize = 0] - The distance/size of the trigger bounds.
     */
    UseTriggerBounds(enable: boolean, boundSize = 0): void;
    
    /**
     * [Shared]
     * 
     * Returns the index of this view model, it can be used to identify which one of the player's view models this entity is.
     * 
     */
    ViewModelIndex(): number;
    
    /**
     * [Server]
     * 
     * Returns whether the target/given entity is visible from the this entity.
     * 
     * This is meant to be used only with NPCs.
     * 
     * Differences from a simple trace include:
     * * If target has `FL_NOTARGET`, returns `false`
     * * If `ai_ignoreplayers` is turned on and target is a player, returns `false`
     * * Reacts to `ai_LOS_mode`:
     * * * If `1`, does a simple trace with `COLLISION_GROUP_NONE` and `MASK_BLOCKLOS`
     * * * If not, does a trace with `MASK_BLOCKLOS_AND_NPCS` (- `CONTENTS_BLOCKLOS` is target is player) and a custom LOS filter (`CTraceFilterLOS`)
     * * Returns `true` if hits a vehicle the target is driving
     * @param target - Entity to check for visibility to.
     */
    Visible(target: Entity): boolean;
    
    /**
     * [Server]
     * 
     * Returns true if supplied vector is visible from the entity's line of sight.
     * 
     * This is achieved similarly to a trace.
     * @param pos - The position to check for visibility
     */
    VisibleVec(pos: Vector): boolean;
    
    /**
     * [Shared]
     * 
     * Returns an integer that represents how deep in water the entity is.
     * 		
     * 
     * * **0** - The entity isn't in water.
     * 
     * * **1** - Slightly submerged (at least to the feet).
     * 
     * * **2** - The majority of the entity is submerged (at least to the waist).
     * 
     * * **3** - Completely submerged.
     * 
     * **Note:**
     * >This function will currently work on players only due to the way it is implemented in the engine. If you need to check interaction with water for regular entities you better use [util.PointContents](https://wiki.facepunch.com/gmod/util.PointContents).
     * 
     * 
     */
    WaterLevel(): number;
    
    /**
     * [Shared]
     * 
     * Sets the activity of the entity's active weapon.
     * 
     * **Note:**
     * >This does nothing on the client.
     * 
     * **Note:**
     * >Only works for CBaseCombatCharacter entities, which includes players and NPCs.
     * 
     * @param act - Activity number. See [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT).
     * @param duration - How long the animation should take in seconds.
     */
    Weapon_SetActivity(act: ACT, duration: number): void;
    
    /**
     * [Shared]
     * 
     * Calls and returns [WEAPON:TranslateActivity](https://wiki.facepunch.com/gmod/WEAPON:TranslateActivity) on the weapon the entity ( player or NPC ) carries.
     * 
     * Despite existing on client, it doesn't actually do anything on client.
     * @param act - The activity to translate
     */
    Weapon_TranslateActivity(act: number): number;
    
    /**
     * [Shared]
     * 
     * Returns two vectors representing the minimum and maximum extent of the entity's axis-aligned bounding box (which is calculated from entity's collision bounds.
     * 
     */
    WorldSpaceAABB(): LuaMultiReturn<[Vector, Vector]>;
    
    /**
     * [Shared]
     * 
     * Returns the center of the entity according to its collision model.
     * 
     */
    WorldSpaceCenter(): Vector;
    
    /**
     * [Shared]
     * 
     * Converts a worldspace vector into a vector local to an entity
     * @param wpos - The world vector
     */
    WorldToLocal(wpos: Vector): Vector;
    
    /**
     * [Shared]
     * 
     * Converts world angles to local angles ( local to the entity )
     * @param ang - The world angles
     */
    WorldToLocalAngles(ang: Angle): Angle;

}

/**
 * This is the file object. It used used primarily to read or write binary data from files.  
 * The default endianness is little-endian. To use big-endian you will need to provide your own functions to read and write shorts and longs.
 * 
 * 		The object is returned by [file.Open](https://wiki.facepunch.com/gmod/file.Open).
 */
interface File {
    

    /**
     * [Shared and Menu]
     * 
     * Dumps the file changes to disk and closes the file handle which makes the handle useless.
     * 
     */
    Close(): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns whether the [File](https://wiki.facepunch.com/gmod/File) object has reached the end of file or not.
     * 
     */
    EndOfFile(): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Dumps the file changes to disk and saves the file.
     * 
     */
    Flush(): void;
    
    /**
     * [Shared and Menu]
     * 
     * Reads the specified amount of chars and returns them as a binary string.
     * @param [length = nil] - Reads the specified amount of chars. If not set, will read the entire file.
     */
    Read(length?: number): string;
    
    /**
     * [Shared and Menu]
     * 
     * Reads one byte of the file and returns whether that byte was not 0.
     * 
     */
    ReadBool(): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Reads one unsigned 8-bit integer from the file.
     * 
     */
    ReadByte(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Reads an 8-byte little-endian IEEE-754 floating point double from the file.
     * 
     */
    ReadDouble(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Reads an IEEE 754 little-endian 4-byte float from the file.
     * 
     */
    ReadFloat(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the contents of the file from the current position up until the end of the current line.
     * 
     * **Note:**
     * >This function will look specifically for `Line Feed` characters `\n` and will **completely ignore `Carriage Return` characters** `\r`.
     * 
     * **Note:**
     * >This function will not return more than 8192 characters. The return value will include the `\n` character.
     * 
     * 
     */
    ReadLine(): string;
    
    /**
     * [Shared and Menu]
     * 
     * Reads a signed little-endian 32-bit integer from the file.
     * 
     */
    ReadLong(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Reads a signed little-endian 16-bit integer from the file.
     * 
     */
    ReadShort(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Reads an unsigned 64-bit integer from the file.
     * 
     */
    ReadUInt64(): string;
    
    /**
     * [Shared and Menu]
     * 
     * Reads an unsigned little-endian 32-bit integer from the file.
     * 
     */
    ReadULong(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Reads an unsigned little-endian 16-bit integer from the file.
     * 
     */
    ReadUShort(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Sets the file pointer to the specified position.
     * @param pos - Pointer position, in bytes.
     */
    Seek(pos: number): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the size of the file in bytes.
     * 
     */
    Size(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Moves the file pointer by the specified amount of chars.
     * @param amount - The amount of chars to skip, can be negative to skip backwards.
     */
    Skip(amount: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the current position of the file pointer.
     * 
     */
    Tell(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Writes the given string into the file.
     * @param data - Binary data to write to the file.
     */
    Write(data: string): void;
    
    /**
     * [Shared and Menu]
     * 
     * Writes a boolean value to the file as one **byte**.
     * @param bool - The bool to be written to the file.
     */
    WriteBool(bool: boolean): void;
    
    /**
     * [Shared and Menu]
     * 
     * Write an 8-bit unsigned integer to the file.
     * @param uint8 - The 8-bit unsigned integer to be written to the file.
     */
    WriteByte(uint8: number): void;
    
    /**
     * [Shared and Menu]
     * 
     * Writes an 8-byte little-endian IEEE-754 floating point double to the file.
     * @param double - The double to be written to the file.
     */
    WriteDouble(double: number): void;
    
    /**
     * [Shared and Menu]
     * 
     * Writes an IEEE 754 little-endian 4-byte float to the file.
     * @param float - The float to be written to the file.
     */
    WriteFloat(float: number): void;
    
    /**
     * [Shared and Menu]
     * 
     * Writes a signed little-endian 32-bit integer to the file.
     * @param int32 - The 32-bit signed integer to be written to the file.
     */
    WriteLong(int32: number): void;
    
    /**
     * [Shared and Menu]
     * 
     * Writes a signed little-endian 16-bit integer to the file.
     * @param int16 - The 16-bit signed integer to be written to the file.
     */
    WriteShort(int16: number): void;
    
    /**
     * [Shared and Menu]
     * 
     * Writes an unsigned 64-bit integer to the file.
     * @param uint64 - The unsigned 64-bit integer to be written to the file.
     * **Note:**
     * >Since Lua cannot store full 64-bit integers, this function takes a string. It is mainly aimed at usage with [Player:SteamID64](https://wiki.facepunch.com/gmod/Player:SteamID64).
     * 
     */
    WriteUInt64(uint64: string): void;
    
    /**
     * [Shared and Menu]
     * 
     * Writes an unsigned little-endian 32-bit integer to the file.
     * @param uint32 - The unsigned 32-bit integer to be written to the file.
     */
    WriteULong(uint32: number): void;
    
    /**
     * [Shared and Menu]
     * 
     * Writes an unsigned little-endian 16-bit integer to the file.
     * @param uint16 - The unsigned 16-bit integer to the file.
     */
    WriteUShort(uint16: number): void;

}

/**
 * A sound channel returned by a callback of [sound.PlayURL](https://wiki.facepunch.com/gmod/sound.PlayURL) and [sound.PlayFile](https://wiki.facepunch.com/gmod/sound.PlayFile).
 */
interface IGModAudioChannel {
    

    /**
     * [Client]
     * 
     * Enables or disables looping of audio channel, requires noblock flag.
     * @param enable - Enable or disable looping of this audio channel.
     */
    EnableLooping(enable: boolean): void;
    
    /**
     * [Client]
     * 
     * Computes the [DFT (discrete Fourier transform)](https://en.wikipedia.org/wiki/Discrete_Fourier_transform) of the sound channel.
     * 
     * The size parameter specifies the number of consecutive audio samples to use as the input to the DFT and is restricted to a power of two. A [Hann window](https://en.wikipedia.org/wiki/Hann_function) is applied to the input data.
     * 
     * The computed DFT has the same number of frequency bins as the number of samples. Only half of this DFT is returned, since [the DFT magnitudes are symmetric for real input data](https://en.wikipedia.org/wiki/Discrete_Fourier_transform#The_real-input_DFT). The magnitudes of the DFT (values from 0 to 1) are used to fill the output table, starting at index 1.
     * 
     * **Visualization protip:** For a size N DFT, bin k (1-indexed) corresponds to a frequency of (k - 1) / N * sampleRate.
     * 
     * **Visualization protip:** Sound energy is proportional to the square of the magnitudes. Adding magnitudes together makes no sense physically, but adding energies does.
     * 
     * **Visualization protip:** The human ear works on a logarithmic amplitude scale. You can convert to [decibels](https://en.wikipedia.org/wiki/Decibel) by taking 20 * [math.log10](https://wiki.facepunch.com/gmod/math.log10) of frequency magnitudes, or 10 * [math.log10](https://wiki.facepunch.com/gmod/math.log10) of energy. The decibel values will range from -infinity to 0.
     * @param tbl - The table to output the DFT magnitudes (numbers between 0 and 1) into. Indices start from 1.
     * @param size - The number of samples to use. See [Enums/FFT](https://wiki.facepunch.com/gmod/Enums/FFT)
     */
    FFT(tbl: any, size: FFT): number;
    
    /**
     * [Client]
     * 
     * Returns 3D cone of the sound channel. See [IGModAudioChannel:Set3DCone](https://wiki.facepunch.com/gmod/IGModAudioChannel:Set3DCone).
     * 
     */
    Get3DCone(): LuaMultiReturn<[number, number, number]>;
    
    /**
     * [Client]
     * 
     * Returns if the sound channel is currently in 3D mode or not. This value will be affected by [IGModAudioChannel:Set3DEnabled](https://wiki.facepunch.com/gmod/IGModAudioChannel:Set3DEnabled).
     * 
     */
    Get3DEnabled(): boolean;
    
    /**
     * [Client]
     * 
     * Returns 3D fade distances of a sound channel.
     * 
     */
    Get3DFadeDistance(): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client]
     * 
     * Returns the average bit rate of the sound channel.
     * 
     */
    GetAverageBitRate(): number;
    
    /**
     * [Client]
     * 
     * Retrieves the number of bits per sample of the sound channel.
     * 
     * Doesn't work for mp3 and ogg files.
     * 
     */
    GetBitsPerSample(): number;
    
    /**
     * [Client]
     * 
     * Returns the buffered time of the sound channel in seconds, for online streaming sound channels. ([sound.PlayURL](https://wiki.facepunch.com/gmod/sound.PlayURL))
     * 
     * For offline channels this will be equivalent to [IGModAudioChannel:GetLength](https://wiki.facepunch.com/gmod/IGModAudioChannel:GetLength).
     * 
     */
    GetBufferedTime(): number;
    
    /**
     * [Client]
     * 
     * Returns the filename for the sound channel.
     * 
     */
    GetFileName(): string;
    
    /**
     * [Client]
     * 
     * Returns the length of sound played by the sound channel in seconds.
     * 
     */
    GetLength(): number;
    
    /**
     * [Client]
     * 
     * Returns the right and left levels of sound played by the sound channel.
     * 
     */
    GetLevel(): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client]
     * 
     * Gets the relative volume of the left and right channels.
     * 
     */
    GetPan(): number;
    
    /**
     * [Client]
     * 
     * Returns the playback rate of the sound channel.
     * 
     */
    GetPlaybackRate(): number;
    
    /**
     * [Client]
     * 
     * Returns position of the sound channel
     * 
     */
    GetPos(): Vector;
    
    /**
     * [Client]
     * 
     * Returns the sample rate for currently playing sound.
     * 
     */
    GetSamplingRate(): number;
    
    /**
     * [Client]
     * 
     * Returns the state of a sound channel
     * 
     */
    GetState(): GMOD_CHANNEL;
    
    /**
     * [Client]
     * 
     * Retrieves HTTP headers from a bass stream channel created by [sound.PlayURL](https://wiki.facepunch.com/gmod/sound.PlayURL), if available.
     * 
     */
    GetTagsHTTP(): any;
    
    /**
     * [Client]
     * 
     * Retrieves the ID3 version 1 info from a bass channel created by [sound.PlayFile](https://wiki.facepunch.com/gmod/sound.PlayFile) or [sound.PlayURL](https://wiki.facepunch.com/gmod/sound.PlayURL), if available.
     * 
     * ID3v2 is not supported.
     * 
     */
    GetTagsID3(): any;
    
    /**
     * [Client]
     * 
     * Retrieves meta stream info from a bass stream channel created by [sound.PlayURL](https://wiki.facepunch.com/gmod/sound.PlayURL), if available.
     * 
     */
    GetTagsMeta(): string;
    
    /**
     * [Client]
     * 
     * Retrieves OGG media info tag, from a bass channel created by [sound.PlayURL](https://wiki.facepunch.com/gmod/sound.PlayURL) or [sound.PlayFile](https://wiki.facepunch.com/gmod/sound.PlayFile), if available.
     * 
     */
    GetTagsOGG(): any;
    
    /**
     * [Client]
     * 
     * Retrieves OGG Vendor tag, usually containing the application that created the file, from a bass channel created by [sound.PlayURL](https://wiki.facepunch.com/gmod/sound.PlayURL) or [sound.PlayFile](https://wiki.facepunch.com/gmod/sound.PlayFile), if available.
     * 
     */
    GetTagsVendor(): string;
    
    /**
     * [Client]
     * 
     * Returns the current time of the sound channel in seconds
     * 
     */
    GetTime(): number;
    
    /**
     * [Client]
     * 
     * Returns volume of a sound channel
     * 
     */
    GetVolume(): number;
    
    /**
     * [Client]
     * 
     * Returns if the sound channel is in 3D mode or not.
     * 
     */
    Is3D(): boolean;
    
    /**
     * [Client]
     * 
     * Returns whether the audio stream is block streamed or not.
     * 
     */
    IsBlockStreamed(): boolean;
    
    /**
     * [Client]
     * 
     * Returns if the sound channel is looping or not.
     * 
     */
    IsLooping(): boolean;
    
    /**
     * [Client]
     * 
     * Returns if the sound channel is streamed from the Internet or not.
     * 
     */
    IsOnline(): boolean;
    
    /**
     * [Client]
     * 
     * Returns if the sound channel is valid or not.
     * 
     */
    IsValid(): boolean;
    
    /**
     * [Client]
     * 
     * Pauses the stream. It can be started again using [IGModAudioChannel:Play](https://wiki.facepunch.com/gmod/IGModAudioChannel:Play)
     * 
     */
    Pause(): void;
    
    /**
     * [Client]
     * 
     * Starts playing the stream.
     * 
     */
    Play(): void;
    
    /**
     * [Client]
     * 
     * Sets 3D cone of the sound channel.
     * @param innerAngle - The angle of the inside projection cone in degrees.
     * Range is from 0 (no cone) to 360 (sphere), -1 = leave current.
     * @param outerAngle - The angle of the outside projection cone in degrees.
     * Range is from 0 (no cone) to 360 (sphere), -1 = leave current.
     * @param outerVolume - The delta-volume outside the outer projection cone.
     * Range is from 0 (silent) to 1 (same as inside the cone), less than 0 = leave current.
     */
    Set3DCone(innerAngle: number, outerAngle: number, outerVolume: number): void;
    
    /**
     * [Client]
     * 
     * Sets the 3D mode of the channel. This will affect [IGModAudioChannel:Get3DEnabled](https://wiki.facepunch.com/gmod/IGModAudioChannel:Get3DEnabled) but not [IGModAudioChannel:Is3D](https://wiki.facepunch.com/gmod/IGModAudioChannel:Is3D).
     * 
     * This feature **requires** the channel to be initially created in 3D mode, i.e. [IGModAudioChannel:Is3D](https://wiki.facepunch.com/gmod/IGModAudioChannel:Is3D) should return true or this function will do nothing.
     * @param enable - true to enable, false to disable 3D.
     */
    Set3DEnabled(enable: boolean): void;
    
    /**
     * [Client]
     * 
     * Sets 3D fade distances of a sound channel.
     * @param min - The minimum distance. The channel's volume is at maximum when the listener is within this distance.
     * 0 or less = leave current.
     * @param max - The maximum distance. The channel's volume stops decreasing when the listener is beyond this distance.
     * 0 or less = leave current.
     */
    Set3DFadeDistance(min: number, max: number): void;
    
    /**
     * [Client]
     * 
     * Sets the relative volume of the left and right channels.
     * @param pan - Relative volume between the left and right channels. `-1` means only in left channel, `0` is center (default) and `1` is only in the right channel. Fractional values are supported.
     */
    SetPan(pan: number): void;
    
    /**
     * [Client]
     * 
     * Sets the playback rate of the sound channel. May not work with high values for radio streams.
     * @param rate - Playback rate to set to. 1 is normal speed, 0.5 is half the normal speed, etc.
     */
    SetPlaybackRate(rate: number): void;
    
    /**
     * [Client]
     * 
     * Sets position of sound channel in case the sound channel has a 3d option set.
     * @param pos - The position to put the sound into
     * @param [dir = Vector( 0, 0, 0 )] - The direction of the sound
     */
    SetPos(pos: Vector, dir?: Vector): void;
    
    /**
     * [Client]
     * 
     * Sets the sound channel to specified time ( Rewind to that position of the song ). Does not work on online radio streams.
     * 
     * Streamed sounds must have "noblock" parameter for this to work and [IGModAudioChannel:IsBlockStreamed](https://wiki.facepunch.com/gmod/IGModAudioChannel:IsBlockStreamed) must return false.
     * @param secs - The time to set the stream to, in seconds.
     * @param [dont_decode = false] - Set to true to skip decoding to set time, and instead just seek to it which is faster. Certain streams do not support seeking and have to decode to the given position.
     */
    SetTime(secs: number, dont_decode = false): void;
    
    /**
     * [Client]
     * 
     * Sets the volume of a sound channel
     * @param volume - Volume to set. 1 meaning 100% volume, 0.5 is 50% and 3 is 300%, etc.
     */
    SetVolume(volume: number): void;
    
    /**
     * [Client]
     * 
     * Stop the stream. It can be started again using [IGModAudioChannel:Play](https://wiki.facepunch.com/gmod/IGModAudioChannel:Play).
     * 
     * **Bug [#1497](https://github.com/Facepunch/garrysmod-issues/issues/1497):**
     * >Calling this invalidates the IGModAudioChannel object rendering it unusable for further functions.
     * 
     * 
     */
    Stop(): void;

}

/**
 * A Material object. It represents a game material, similarly to how a .vmt file does.
 * 
 * It can be created with [Global.Material](https://wiki.facepunch.com/gmod/Global.Material) or [Global.CreateMaterial](https://wiki.facepunch.com/gmod/Global.CreateMaterial).
 */
interface IMaterial {
    

    /**
     * [Shared and Menu]
     * 
     * Returns the color of the specified pixel of the $basetexture, only works for materials created from PNG files.
     * 
     * Basically identical to [ITexture:GetColor](https://wiki.facepunch.com/gmod/ITexture:GetColor) used on [IMaterial:GetTexture](https://wiki.facepunch.com/gmod/IMaterial:GetTexture)( "$basetexture" ).
     * 
     * **Bug [#2407](https://github.com/Facepunch/garrysmod-issues/issues/2407):**
     * >The returned color will not have the color metatable.
     * 
     * @param x - The X coordinate.
     * @param y - The Y coordinate.
     */
    GetColor(x: number, y: number): Color;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the specified material value as a float, or nil if the value is not set.
     * @param materialFloat - The name of the material value.
     */
    GetFloat(materialFloat: string): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the specified material value as a int, rounds the value if its a float, or nil if the value is not set.
     * 
     * **Note:**
     * >Please note that certain material flags such as `$model` are stored in the `$flags` variable and cannot be directly retrieved with this function. See the full list here: [Material Flags](https://wiki.facepunch.com/gmod/Material_Flags)
     * 
     * @param materialInt - The name of the material integer.
     */
    GetInt(materialInt: string): number;
    
    /**
     * [Shared]
     * 
     * Gets all the key values defined for the material.
     * 
     */
    GetKeyValues(): any;
    
    /**
     * [Shared]
     * 
     * Returns the specified material matrix as a int, or nil if the value is not set or is not a matrix.
     * @param materialMatrix - The name of the material matrix.
     */
    GetMatrix(materialMatrix: string): VMatrix;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the name of the material, in most cases the path.
     * 
     */
    GetName(): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the name of the materials shader.
     * 
     * **Bug [#3256](https://github.com/Facepunch/garrysmod-issues/issues/3256):**
     * >This function does not work serverside on Linux SRCDS.
     * 
     * 
     */
    GetShader(): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the specified material string, or nil if the value is not set or if the value can not be converted to a string.
     * @param materialString - The name of the material string.
     */
    GetString(materialString: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns an [ITexture](https://wiki.facepunch.com/gmod/ITexture) based on the passed shader parameter.
     * @param param - The [shader parameter](https://developer.valvesoftware.com/wiki/Category:List_of_Shader_Parameters) to retrieve. This should normally be `$basetexture`.
     */
    GetTexture(param: string): ITexture;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the specified material vector, or nil if the value is not set.
     * 
     * See also [IMaterial:GetVectorLinear](https://wiki.facepunch.com/gmod/IMaterial:GetVectorLinear)
     * @param materialVector - The name of the material vector.
     */
    GetVector(materialVector: string): Vector;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the specified material vector as a 4 component vector.
     * @param name - The name of the material vector to retrieve.
     */
    GetVector4D(name: string): LuaMultiReturn<[number, number, number, number]>;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the specified material linear color vector, or nil if the value is not set.
     * 
     * See https://en.wikipedia.org/wiki/Gamma_correction
     * 
     * See also [IMaterial:GetVector](https://wiki.facepunch.com/gmod/IMaterial:GetVector)
     * @param materialVector - The name of the material vector.
     */
    GetVectorLinear(materialVector: string): Vector;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the height of the member texture set for $basetexture.
     * 
     */
    Height(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns whenever the material is valid, i.e. whether it was not loaded successfully from disk or not.
     * 
     */
    IsError(): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Recomputes the material's snapshot. This needs to be called if you have changed variables on your material and it isn't changing. 
     * 
     * Be careful though - this function is slow - so try to call it only when needed!
     * 
     */
    Recompute(): void;
    
    /**
     * [Menu]
     * 
     * Changes the Material into the give Image.
     * 		**.**
     * @param path - The path to a Image.
     */
    SetDynamicImage(path: string): void;
    
    /**
     * [Shared and Menu]
     * 
     * Sets the specified material float to the specified float, does nothing on a type mismatch.
     * @param materialFloat - The name of the material float.
     * @param float - The new float value.
     */
    SetFloat(materialFloat: string, float: number): void;
    
    /**
     * [Shared and Menu]
     * 
     * Sets the specified material value to the specified int, does nothing on a type mismatch.
     * 
     * **Note:**
     * >Please note that certain material flags such as `$model` are stored in the `$flags` variable and cannot be directly set with this function. See the full list here: [Material Flags](https://wiki.facepunch.com/gmod/Material_Flags)
     * 
     * @param materialInt - The name of the material int.
     * @param int - The new int value.
     */
    SetInt(materialInt: string, int: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the specified material value to the specified matrix, does nothing on a type mismatch.
     * @param materialMatrix - The name of the material int.
     * @param matrix - The new matrix.
     */
    SetMatrix(materialMatrix: string, matrix: VMatrix): void;
    
    /**
     * [Shared and Menu]
     * 
     * The functionality of this function was removed due to the amount of crashes it caused.
     * 
     * @deprecated This function does nothing
     * 
     * @param shaderName - Name of the shader
     */
    SetShader(shaderName: string): void;
    
    /**
     * [Shared and Menu]
     * 
     * Sets the specified material value to the specified string, does nothing on a type mismatch.
     * @param materialString - The name of the material string.
     * @param string - The new string.
     */
    SetString(materialString: string, string: string): void;
    
    /**
     * [Shared and Menu]
     * 
     * Sets the specified material texture to the specified texture, does nothing on a type mismatch.
     * @param materialTexture - The name of the keyvalue on the material to store the texture on.
     * @param texture - The new texture. This can also be a string, the name of the new texture.
     */
    SetTexture(materialTexture: string, texture: ITexture): void;
    
    /**
     * [Shared and Menu]
     * 
     * Unsets the value for the specified material value.
     * @param materialValueName - The name of the material value to be unset.
     */
    SetUndefined(materialValueName: string): void;
    
    /**
     * [Shared and Menu]
     * 
     * Sets the specified material vector to the specified vector, does nothing on a type mismatch.
     * @param MaterialVector - The name of the material vector.
     * @param vec - The new vector.
     */
    SetVector(MaterialVector: string, vec: Vector): void;
    
    /**
     * [Shared and Menu]
     * 
     * Sets the specified material vector to the specified 4 component vector, does nothing on a type mismatch.
     * @param name - The name of the material vector.
     * @param x - The x component of the new vector.
     * @param y - The y component of the new vector.
     * @param z - The z component of the new vector.
     * @param w - The w component of the new vector.
     */
    SetVector4D(name: string, x: number, y: number, z: number, w: number): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the width of the member texture set for $basetexture.
     * 
     */
    Width(): number;

}

/**
 * Renderable mesh object, can be used to create models on the fly. 
 * 		The only way to create your own IMesh object is to call [Global.Mesh](https://wiki.facepunch.com/gmod/Global.Mesh).
 * 
 * **Note:**
 * >IMeshes only respond to one projected texture.  
 * 			See the [render.RenderFlashlights](https://wiki.facepunch.com/gmod/render.RenderFlashlights) function and example that solves this problem.
 * 
 */
interface IMesh {
    

    /**
     * [Client]
     * 
     * Builds the mesh from a table mesh vertexes.
     * 
     * When modifying a previously built mesh, your new mesh must match the vertex count!
     * 
     * See [Global.Mesh](https://wiki.facepunch.com/gmod/Global.Mesh) and [util.GetModelMeshes](https://wiki.facepunch.com/gmod/util.GetModelMeshes) for examples.
     * 
     * **Warning:**
     * >[IMesh](https://wiki.facepunch.com/gmod/IMesh) appears to have a limit of 65535 vertices. You should split your mesh into multiple meshes when above this limit. 
     * 
     * Exceeding the limit may lead to undefined rendering behavior.
     * 
     * @param vertexes - A table consisting of [Structures/MeshVertex](https://wiki.facepunch.com/gmod/Structures/MeshVertex)s.
     */
    BuildFromTriangles(vertexes: MeshVertex): void;
    
    /**
     * [Client]
     * 
     * Deletes the mesh and frees the memory used by it.
     * 
     */
    Destroy(): void;
    
    /**
     * [Client]
     * 
     * Renders the mesh with the active matrix.
     * 
     */
    Draw(): void;
    
    /**
     * [Client]
     * 
     * Returns whether this [IMesh](https://wiki.facepunch.com/gmod/IMesh) is valid or not.
     * 
     */
    IsValid(): boolean;

}

/**
 * The object used in the [saverestore](https://wiki.facepunch.com/gmod/saverestore), mainly in [saverestore.AddRestoreHook](https://wiki.facepunch.com/gmod/saverestore.AddRestoreHook).
 * 
 * It allows you to read blocks directly from the save game files used by Half-Life 2 save system when such save is loaded.
 */
interface IRestore {
    

    /**
     * [Shared]
     * 
     * Ends current data block started with [IRestore:StartBlock](https://wiki.facepunch.com/gmod/IRestore:StartBlock) and returns to the parent block.
     * 
     * To avoid all sorts of errors, you **must** end all blocks you start.
     * 
     */
    EndBlock(): void;
    
    /**
     * [Shared]
     * 
     * Reads next bytes from the restore object as an [Angle](https://wiki.facepunch.com/gmod/Angle).
     * 
     */
    ReadAngle(): Angle;
    
    /**
     * [Shared]
     * 
     * Reads next bytes from the restore object as a [boolean](https://wiki.facepunch.com/gmod/boolean).
     * 
     */
    ReadBool(): boolean;
    
    /**
     * [Shared]
     * 
     * Reads next bytes from the restore object as an [Entity](https://wiki.facepunch.com/gmod/Entity).
     * 
     */
    ReadEntity(): Entity;
    
    /**
     * [Shared]
     * 
     * Reads next bytes from the restore object as a floating point [number](https://wiki.facepunch.com/gmod/number).
     * 
     */
    ReadFloat(): number;
    
    /**
     * [Shared]
     * 
     * Reads next bytes from the restore object as an integer [number](https://wiki.facepunch.com/gmod/number).
     * 
     */
    ReadInt(): number;
    
    /**
     * [Shared]
     * 
     * Reads next bytes from the restore object as a [string](https://wiki.facepunch.com/gmod/string).
     * 
     */
    ReadString(): string;
    
    /**
     * [Shared]
     * 
     * Reads next bytes from the restore object as a [Vector](https://wiki.facepunch.com/gmod/Vector).
     * 
     */
    ReadVector(): Vector;
    
    /**
     * [Shared]
     * 
     * Loads next block of data to be read inside current block. Blocks **must** be ended with [IRestore:EndBlock](https://wiki.facepunch.com/gmod/IRestore:EndBlock).
     * 
     */
    StartBlock(): string;

}

/**
 * The object used in the [saverestore](https://wiki.facepunch.com/gmod/saverestore), mainly in [saverestore.AddSaveHook](https://wiki.facepunch.com/gmod/saverestore.AddSaveHook).
 * 
 * It allows you to write blocks directly into the save game files used by Half-Life 2 save system when such save is being saved.
 */
interface ISave {
    

    /**
     * [Shared]
     * 
     * Ends current data block started with [ISave:StartBlock](https://wiki.facepunch.com/gmod/ISave:StartBlock) and returns to the parent block.
     * 
     * To avoid all sorts of errors, you **must** end all blocks you start.
     * 
     */
    EndBlock(): void;
    
    /**
     * [Shared]
     * 
     * Starts a new block of data that you can write to inside current block. Blocks **must** be ended with [ISave:EndBlock](https://wiki.facepunch.com/gmod/ISave:EndBlock).
     * @param name - Name of the new block. Used for determining which block is which, returned by [IRestore:StartBlock](https://wiki.facepunch.com/gmod/IRestore:StartBlock) during game load.
     */
    StartBlock(name: string): void;
    
    /**
     * [Shared]
     * 
     * Writes an [Angle](https://wiki.facepunch.com/gmod/Angle) to the save object.
     * @param ang - The angle to write.
     */
    WriteAngle(ang: Angle): void;
    
    /**
     * [Shared]
     * 
     * Writes a [boolean](https://wiki.facepunch.com/gmod/boolean) to the save object.
     * @param bool - The boolean to write.
     */
    WriteBool(bool: boolean): void;
    
    /**
     * [Shared]
     * 
     * Writes an [Entity](https://wiki.facepunch.com/gmod/Entity) to the save object.
     * @param ent - The entity to write.
     */
    WriteEntity(ent: Entity): void;
    
    /**
     * [Shared]
     * 
     * Writes a floating point [number](https://wiki.facepunch.com/gmod/number) to the save object.
     * @param float - The floating point number to write.
     */
    WriteFloat(float: number): void;
    
    /**
     * [Shared]
     * 
     * Writes an integer [number](https://wiki.facepunch.com/gmod/number) to the save object.
     * @param int - The integer number to write.
     */
    WriteInt(int: number): void;
    
    /**
     * [Shared]
     * 
     * Writes a **null terminated** [string](https://wiki.facepunch.com/gmod/string) to the save object.
     * @param str - The string to write.
     */
    WriteString(str: string): void;
    
    /**
     * [Shared]
     * 
     * Writes a [Vector](https://wiki.facepunch.com/gmod/Vector) to the save object.
     * @param vec - The vector to write.
     */
    WriteVector(vec: Vector): void;

}

/**
 * An object representing game texture, like a .vtf file. Do not confuse with [IMaterial](https://wiki.facepunch.com/gmod/IMaterial). Returned by [IMaterial:GetTexture](https://wiki.facepunch.com/gmod/IMaterial:GetTexture)
 */
interface ITexture {
    

    /**
     * [Shared and Menu]
     * 
     * Invokes the generator of the texture. Reloads file based textures from disk and clears render target textures.
     * 
     */
    Download(): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the color of the specified pixel, only works for textures created from PNG files.
     * 
     * **Bug [#2407](https://github.com/Facepunch/garrysmod-issues/issues/2407):**
     * >The returned color will not have the color metatable.
     * 
     * @param x - The X coordinate.
     * @param y - The Y coordinate.
     */
    GetColor(x: number, y: number): Color;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the true unmodified height of the texture.
     * 
     */
    GetMappingHeight(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the true unmodified width of the texture.
     * 
     */
    GetMappingWidth(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the name of the texture, in most cases the path.
     * 
     */
    GetName(): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the number of animation frames in this texture.
     * 
     */
    GetNumAnimationFrames(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the modified height of the texture, this value may be affected by mipmapping and other factors.
     * 
     */
    Height(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns whenever the texture is valid. (i.e. was loaded successfully or not)
     * 
     * **Note:**
     * >The "error" texture is a valid texture, and therefore this function will return false when used on it. Use [ITexture:IsErrorTexture](https://wiki.facepunch.com/gmod/ITexture:IsErrorTexture), instead.
     * 
     * 
     */
    IsError(): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Returns whenever the texture is the error texture (pink and black checkerboard pattern).
     * 
     */
    IsErrorTexture(): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the modified width of the texture, this value may be affected by mipmapping and other factors.
     * 
     */
    Width(): number;

}

/**
 * This is returned from [video.Record](https://wiki.facepunch.com/gmod/video.Record).
 */
interface IVideoWriter {
    

    /**
     * [Client and Menu]
     * 
     * Adds the current framebuffer to the video stream.
     * @param frameTime - Usually set to what [Global.FrameTime](https://wiki.facepunch.com/gmod/Global.FrameTime) is, or simply 1/fps.
     * @param downsample - If true it will downsample the whole screenspace to the videos width and height, otherwise it will just record from the top left corner to the given width and height and therefor not the whole screen.
     */
    AddFrame(frameTime: number, downsample: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Ends the video recording and dumps it to disk.
     * 
     */
    Finish(): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the height of the video stream.
     * 
     */
    Height(): number;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether to record sound or not.
     * @param record - Record.
     */
    SetRecordSound(record: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the width of the video stream.
     * 
     */
    Width(): number;

}

/**
 * Object containing parsed markup for later rendering. Created by [markup.Parse](https://wiki.facepunch.com/gmod/markup.Parse).
 */
interface MarkupObject {
    

    /**
     * [Client and Menu]
     * 
     * Draws the computed markupobject to the screen. See [markup.Parse](https://wiki.facepunch.com/gmod/markup.Parse).
     * @param xOffset - The X coordinate on the screen.
     * @param yOffset - The Y coordinate on the screen.
     * @param [xAlign = TEXT_ALIGN_LEFT] - The alignment of the x coordinate within the text using [Enums/TEXT_ALIGN](https://wiki.facepunch.com/gmod/Enums/TEXT_ALIGN)
     * @param [yAlign = TEXT_ALIGN_TOP] - The alignment of the y coordinate within the text using [Enums/TEXT_ALIGN](https://wiki.facepunch.com/gmod/Enums/TEXT_ALIGN)
     * @param [alphaoverride = 255] - Sets the alpha of all drawn objects to this value.
     * @param [textAlign = TEXT_ALIGN_LEFT] - The alignment of the text horizontally using [Enums/TEXT_ALIGN](https://wiki.facepunch.com/gmod/Enums/TEXT_ALIGN)
     */
    Draw(xOffset: number, yOffset: number, xAlign?: TEXT_ALIGN, yAlign?: TEXT_ALIGN, alphaoverride = 255, textAlign?: TEXT_ALIGN): void;
    
    /**
     * [Client and Menu]
     * 
     * Gets computed the height of the markupobject.
     * 
     */
    GetHeight(): number;
    
    /**
     * [Client and Menu]
     * 
     * Gets maximum width for this markup object as defined in [markup.Parse](https://wiki.facepunch.com/gmod/markup.Parse).
     * 
     */
    GetMaxWidth(): number;
    
    /**
     * [Client and Menu]
     * 
     * Gets computed the width of the markupobject.
     * 
     */
    GetWidth(): number;
    
    /**
     * [Client and Menu]
     * 
     * Gets computed the width and height of the markupobject.
     * 
     */
    Size(): LuaMultiReturn<[number, number]>;

}

/**
 * NextBots are a new system to create NPCs in the Source Engine, utilizing the more powerful [navmesh](https://wiki.facepunch.com/gmod/navmesh) system for navigation over the old node based system.
 * 
 * This page lists all possible functions usable with NextBots.
 * 
 * See [NextBot NPC Creation](https://wiki.facepunch.com/gmod/NextBot_NPC_Creation) for more information on how to create NextBot NPCs.
 */
interface NextBot extends Entity {
    

    /**
     * [Server]
     * 
     * Become a ragdoll and remove the entity.
     * @param info - Damage info passed from an onkilled event
     */
    BecomeRagdoll(info: CTakeDamageInfo): Entity;
    
    /**
     * [Server]
     * 
     * Should only be called in [NEXTBOT:BodyUpdate](https://wiki.facepunch.com/gmod/NEXTBOT:BodyUpdate). This sets the `move_x` and `move_y` pose parameters of the bot to fit how they're currently moving, sets the animation speed ([Entity:GetPlaybackRate](https://wiki.facepunch.com/gmod/Entity:GetPlaybackRate)) to suit the ground speed, and calls [Entity:FrameAdvance](https://wiki.facepunch.com/gmod/Entity:FrameAdvance).
     * 
     * **Bug [#3420](https://github.com/Facepunch/garrysmod-issues/issues/3420):**
     * >This function might cause crashes with some activities.
     * 
     * 
     */
    BodyMoveXY(): void;
    
    /**
     * [Server]
     * 
     * Clears this bot's last known area. See [NextBot:GetLastKnownArea](https://wiki.facepunch.com/gmod/NextBot:GetLastKnownArea).
     * 
     */
    ClearLastKnownArea(): void;
    
    /**
     * [Server]
     * 
     * Like [NextBot:FindSpots](https://wiki.facepunch.com/gmod/NextBot:FindSpots) but only returns a vector.
     * @param type - Either `"random"`, `"near"`, `"far"`.
     * @param options - This table should contain the search info.
     * * [string](https://wiki.facepunch.com/gmod/string) type - The type (Only `hiding` for now)
     * * [Vector](https://wiki.facepunch.com/gmod/Vector) pos - the position to search.
     * * [number](https://wiki.facepunch.com/gmod/number) radius - the radius to search.
     * * [number](https://wiki.facepunch.com/gmod/number) stepup - the highest step to step up.
     * * [number](https://wiki.facepunch.com/gmod/number) stepdown - the highest we can step down without being hurt.
     */
    FindSpot(type: string, options: any): Vector;
    
    /**
     * [Server]
     * 
     * Returns a table of hiding spots.
     * @param specs - This table should contain the search info.
     * * [string](https://wiki.facepunch.com/gmod/string) type - The type (optional, only `hiding` supported)
     * * [Vector](https://wiki.facepunch.com/gmod/Vector) pos - the position to search.
     * * [number](https://wiki.facepunch.com/gmod/number) radius - the radius to search.
     * * [number](https://wiki.facepunch.com/gmod/number) stepup - the highest step to step up.
     * * [number](https://wiki.facepunch.com/gmod/number) stepdown - the highest we can step down without being hurt.
     */
    FindSpots(specs: any): any;
    
    /**
     * [Server]
     * 
     * Returns the currently running activity
     * 
     */
    GetActivity(): number;
    
    /**
     * [Server]
     * 
     * Returns the Field of View of the Nextbot NPC, used for its vision functionality, such as [NextBot:IsAbleToSee](https://wiki.facepunch.com/gmod/NextBot:IsAbleToSee).
     * 
     */
    GetFOV(): number;
    
    /**
     * [Server]
     * 
     * Returns this bots last known area. See also [NextBot:ClearLastKnownArea](https://wiki.facepunch.com/gmod/NextBot:ClearLastKnownArea).
     * 
     */
    GetLastKnownArea(): CNavArea;
    
    /**
     * [Server]
     * 
     * Returns the maximum range the nextbot can see other nextbots/players at. See [NextBot:IsAbleToSee](https://wiki.facepunch.com/gmod/NextBot:IsAbleToSee).
     * 
     */
    GetMaxVisionRange(): number;
    
    /**
     * [Server]
     * 
     * Returns squared distance to an entity or a position.
     * 
     * See also [NextBot:GetRangeTo](https://wiki.facepunch.com/gmod/NextBot:GetRangeTo).
     * @param to - The position to measure distance to. Can be an entity.
     */
    GetRangeSquaredTo(to: Vector): number;
    
    /**
     * [Server]
     * 
     * Returns the distance to an entity or position.
     * 
     * See also [NextBot:GetRangeSquaredTo](https://wiki.facepunch.com/gmod/NextBot:GetRangeSquaredTo).
     * @param to - The position to measure distance to. Can be an entity.
     */
    GetRangeTo(to: Vector): number;
    
    /**
     * [Server]
     * 
     * Returns the solid mask for given NextBot.
     * 
     */
    GetSolidMask(): CONTENTS;
    
    /**
     * [Server]
     * 
     * Called from Lua when the NPC is stuck. This should only be called from the behaviour coroutine - so if you want to override this function and do something special that yields - then go for it.
     * 
     * You should always call self.loco:ClearStuck() in this function to reset the stuck status - so it knows it's unstuck. See [CLuaLocomotion:ClearStuck](https://wiki.facepunch.com/gmod/CLuaLocomotion:ClearStuck).
     * 
     */
    HandleStuck(): void;
    
    /**
     * [Server]
     * 
     * Returns if the Nextbot NPC can see the give entity or not.
     * 
     * **Warning:**
     * >Using this function creates the nextbot vision interface which will cause a significant performance hit!
     * 
     * @param ent - The entity to test if we can see
     * @param [useFOV = true] - Whether to use the Field of View of the Nextbot
     */
    IsAbleToSee(ent: Entity, useFOV = true): boolean;
    
    /**
     * [Server]
     * 
     * To be called in the behaviour coroutine only! Will yield until the bot has reached the goal or is stuck
     * @param pos - The position we want to get to
     * @param options - A table containing a bunch of tweakable options.
     * * [number](https://wiki.facepunch.com/gmod/number) lookahead - Minimum look ahead distance.
     * * [number](https://wiki.facepunch.com/gmod/number) tolerance - How close we must be to the goal before it can be considered complete.
     * * [boolean](https://wiki.facepunch.com/gmod/boolean) draw - Draw the path. Only visible on listen servers and single player.
     * * [number](https://wiki.facepunch.com/gmod/number) maxage - Maximum age of the path before it times out.
     * * [number](https://wiki.facepunch.com/gmod/number) repath - Rebuilds the path after this number of seconds.
     */
    MoveToPos(pos: Vector, options: any): string;
    
    /**
     * [Server]
     * 
     * To be called in the behaviour coroutine only! Plays an animation sequence and waits for it to end before returning.
     * @param name - The sequence name
     * @param [speed = 1] - Playback Rate of that sequence
     */
    PlaySequenceAndWait(name: string, speed = 1): void;
    
    /**
     * [Server]
     * 
     * Sets the Field of View for the Nextbot NPC, used for its vision functionality, such as [NextBot:IsAbleToSee](https://wiki.facepunch.com/gmod/NextBot:IsAbleToSee).
     * @param fov - The new FOV
     */
    SetFOV(fov: number): void;
    
    /**
     * [Server]
     * 
     * Sets the maximum range the nextbot can see other nextbots/players at. See [NextBot:IsAbleToSee](https://wiki.facepunch.com/gmod/NextBot:IsAbleToSee).
     * @param range - The new vision range to set.
     */
    SetMaxVisionRange(range: number): void;
    
    /**
     * [Server]
     * 
     * Sets the solid mask for given NextBot.
     * 
     * The default solid mask of a NextBot is <page text="MASK_NPCSOLID">Enums/MASK</page>.
     * @param mask - The new mask, see [Enums/CONTENTS](https://wiki.facepunch.com/gmod/Enums/CONTENTS) and [Enums/MASK](https://wiki.facepunch.com/gmod/Enums/MASK)
     */
    SetSolidMask(mask: CONTENTS): void;
    
    /**
     * [Server]
     * 
     * Start doing an activity (animation)
     * @param activity - One of the [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT)
     */
    StartActivity(activity: ACT): void;

}

/**
 * This is a list of all methods only available for NPCs. It is also possible to call [Entity](https://wiki.facepunch.com/gmod/Entity) functions on NPCs.
 */
interface NPC extends Entity {
    

    /**
     * [Server]
     * 
     * Makes the NPC like, hate, feel neutral towards, or fear the entity in question. If you want to setup relationship towards a certain entity `class`, use [NPC:AddRelationship](https://wiki.facepunch.com/gmod/NPC:AddRelationship).
     * 
     * **Note:**
     * >NPCs do not see [NextBot](https://wiki.facepunch.com/gmod/NextBot)s by default. This can be fixed by adding theflag to the NextBot.
     * 
     * @param target - The entity for the relationship to be applied to.
     * @param disposition - A [Enums/D](https://wiki.facepunch.com/gmod/Enums/D) representing the relationship type.
     * @param [priority = 0] - How strong the relationship is. Higher values mean higher priority over relationships with lower priority.
     */
    AddEntityRelationship(target: Entity, disposition: D, priority = 0): void;
    
    /**
     * [Server]
     * 
     * Changes how an NPC feels towards another NPC.  If you want to setup relationship towards a certain `entity`, use [NPC:AddEntityRelationship](https://wiki.facepunch.com/gmod/NPC:AddEntityRelationship).
     * 
     * **Warning:**
     * >Avoid using this in [GM:OnEntityCreated](https://wiki.facepunch.com/gmod/GM:OnEntityCreated) to prevent crashing due to infinite loops. This function may create an entity with given class and delete it immediately after.
     * 
     * @param relationstring - A string representing how the relationship should be set up.
     * Should be formatted as `"npc_class `[Enums/D](https://wiki.facepunch.com/gmod/Enums/D)` numberPriority"`.
     */
    AddRelationship(relationstring: D): void;
    
    /**
     * [Server]
     * 
     * Advances the NPC on its path to the next waypoint.
     * 
     */
    AdvancePath(): void;
    
    /**
     * [Server]
     * 
     * Force an NPC to play their Alert sound.
     * 
     */
    AlertSound(): void;
    
    /**
     * [Server]
     * 
     * Executes any movement the current sequence may have.
     * @param interval - This is a good place to use [Entity:GetAnimTimeInterval](https://wiki.facepunch.com/gmod/Entity:GetAnimTimeInterval).
     * @param [target = NULL] - 
     */
    AutoMovement(interval: number, target?: Entity): boolean;
    
    /**
     * [Server]
     * 
     * Adds a capability to the NPC.
     * @param capabilities - Capabilities to add, see [Enums/CAP](https://wiki.facepunch.com/gmod/Enums/CAP).
     */
    CapabilitiesAdd(capabilities: CAP): void;
    
    /**
     * [Server]
     * 
     * Removes all of Capabilities the NPC has.
     * 
     */
    CapabilitiesClear(): void;
    
    /**
     * [Server]
     * 
     * Returns the NPC's capabilities along the ones defined on its weapon.
     * 
     */
    CapabilitiesGet(): CAP;
    
    /**
     * [Server]
     * 
     * Remove a certain capability.
     * @param capabilities - Capabilities to remove, see [Enums/CAP](https://wiki.facepunch.com/gmod/Enums/CAP)
     */
    CapabilitiesRemove(capabilities: CAP): void;
    
    /**
     * [Server]
     * 
     * Returns the NPC class. Do not confuse with [Entity:GetClass](https://wiki.facepunch.com/gmod/Entity:GetClass)!
     * 
     */
    Classify(): CLASS;
    
    /**
     * [Server]
     * 
     * Resets the [NPC:GetBlockingEntity](https://wiki.facepunch.com/gmod/NPC:GetBlockingEntity).
     * 
     */
    ClearBlockingEntity(): void;
    
    /**
     * [Server]
     * 
     * Clears out the specified [Enums/COND](https://wiki.facepunch.com/gmod/Enums/COND) on this NPC.
     * @param condition - The [Enums/COND](https://wiki.facepunch.com/gmod/Enums/COND) to clear out.
     */
    ClearCondition(condition: COND): void;
    
    /**
     * [Server]
     * 
     * Clears the Enemy from the NPC's memory, effectively forgetting it until met again with either the NPC vision or with [NPC:UpdateEnemyMemory](https://wiki.facepunch.com/gmod/NPC:UpdateEnemyMemory).
     * @param [enemy = GetEnemy()] - The enemy to mark
     */
    ClearEnemyMemory(enemy?: Entity): void;
    
    /**
     * [Server]
     * 
     * Clears the NPC's current expression which can be set with [NPC:SetExpression](https://wiki.facepunch.com/gmod/NPC:SetExpression).
     * 
     */
    ClearExpression(): void;
    
    /**
     * [Server]
     * 
     * Clears the current NPC goal or target.
     * 
     */
    ClearGoal(): void;
    
    /**
     * [Server]
     * 
     * Stops the current schedule that the NPC is doing.
     * 
     */
    ClearSchedule(): void;
    
    /**
     * [Server]
     * 
     * Translates condition ID to a string.
     * @param cond - The NPCs condition ID, see [Enums/COND](https://wiki.facepunch.com/gmod/Enums/COND)
     */
    ConditionName(cond: COND): string;
    
    /**
     * [Server]
     * 
     * Returns the way the NPC "feels" about a given entity. See [NPC:AddEntityRelationship](https://wiki.facepunch.com/gmod/NPC:AddEntityRelationship).
     * @param ent - The entity to test our disposition towards.
     */
    Disposition(ent: Entity): LuaMultiReturn<[D, number]>;
    
    /**
     * [Server]
     * 
     * Forces the NPC to drop the specified weapon.
     * @param [weapon = nil] - Weapon to be dropped. If unset, will default to the currently equipped weapon.
     * @param [target = nil] - If set, launches the weapon at given position. There is a limit to how far it is willing to throw the weapon. Overrides velocity argument.
     * @param [velocity = nil] - If set and previous argument is unset, launches the weapon with given velocity. If the velocity is higher than 400, it will be clamped to 400.
     */
    DropWeapon(weapon?: Weapon, target?: Vector, velocity?: Vector): void;
    
    /**
     * [Server]
     * 
     * Makes an NPC exit a scripted sequence, if one is playing.
     * 
     */
    ExitScriptedSequence(): void;
    
    /**
     * [Server]
     * 
     * Force an NPC to play its Fear sound.
     * 
     */
    FearSound(): void;
    
    /**
     * [Server]
     * 
     * Force an NPC to play its FoundEnemy sound.
     * 
     */
    FoundEnemySound(): void;
    
    /**
     * [Shared]
     * 
     * Returns the weapon the NPC is currently carrying, or <page text="NULL">Global_Variables</page>.
     * 
     */
    GetActiveWeapon(): Entity;
    
    /**
     * [Server]
     * 
     * Returns the NPC's current activity.
     * 
     */
    GetActivity(): ACT;
    
    /**
     * [Server]
     * 
     * Returns the aim vector of the NPC. NPC alternative of [Player:GetAimVector](https://wiki.facepunch.com/gmod/Player:GetAimVector).
     * 
     */
    GetAimVector(): Vector;
    
    /**
     * [Server]
     * 
     * Returns the activity to be played when the NPC arrives at its goal
     * 
     */
    GetArrivalActivity(): ACT;
    
    /**
     * [Server]
     * 
     * Returns the direction from the NPC origin to its current navigational destination.
     * 
     */
    GetArrivalDirection(): Vector;
    
    /**
     * [Server]
     * 
     * Returns the sequence to be played when the NPC arrives at its goal.
     * 
     */
    GetArrivalSequence(): number;
    
    /**
     * [Server]
     * 
     * Returns the most dangerous/closest sound hint based on the NPCs location and the types of sounds it can sense.
     * @param types - The types of sounds to choose from. See <page text="SOUND_ enums">Enums/SOUND</page>
     */
    GetBestSoundHint(types: number): any;
    
    /**
     * [Server]
     * 
     * Returns the entity blocking the NPC along its path.
     * 
     */
    GetBlockingEntity(): Entity;
    
    /**
     * [Server]
     * 
     * Returns the goal type for current navigation path.
     * 
     */
    GetCurGoalType(): GOALTYPE;
    
    /**
     * [Server]
     * 
     * Returns the NPC's current schedule.
     * 
     */
    GetCurrentSchedule(): SCHED;
    
    /**
     * [Server]
     * 
     * Returns how proficient (skilled) an NPC is with its current weapon.
     * 
     */
    GetCurrentWeaponProficiency(): WEAPON_PROFICIENCY;
    
    /**
     * [Server]
     * 
     * Gets the NPC's current waypoint position (where NPC is currently moving towards), if any is available.
     * 
     */
    GetCurWaypointPos(): Vector;
    
    /**
     * [Server]
     * 
     * Returns the entity that this NPC is trying to fight.
     * 
     * **Bug [#3132](https://github.com/Facepunch/garrysmod-issues/issues/3132):**
     * >This returns nil if the NPC has no enemy. You should use [Global.IsValid](https://wiki.facepunch.com/gmod/Global.IsValid) (which accounts for nil and NULL) on the return to verify validity of the enemy.
     * 
     * 
     */
    GetEnemy(): NPC;
    
    /**
     * [Server]
     * 
     * Returns the first time an NPC's enemy was seen by the NPC.
     * @param [enemy = GetEnemy()] - The enemy to check.
     */
    GetEnemyFirstTimeSeen(enemy?: Entity): number;
    
    /**
     * [Server]
     * 
     * Returns the last known position of an NPC's enemy.
     * 
     * Similar to [NPC:GetEnemyLastSeenPos](https://wiki.facepunch.com/gmod/NPC:GetEnemyLastSeenPos), but the known position will be a few seconds ahead of the last seen position.
     * @param [enemy = GetEnemy()] - The enemy to check.
     */
    GetEnemyLastKnownPos(enemy?: Entity): Vector;
    
    /**
     * [Server]
     * 
     * Returns the last seen position of an NPC's enemy.
     * 
     * Similar to [NPC:GetEnemyLastKnownPos](https://wiki.facepunch.com/gmod/NPC:GetEnemyLastKnownPos), but the known position will be a few seconds ahead of the last seen position.
     * @param [enemy = GetEnemy()] - The enemy to check.
     */
    GetEnemyLastSeenPos(enemy?: Entity): Vector;
    
    /**
     * [Server]
     * 
     * Returns the last time an NPC's enemy was seen by the NPC.
     * @param [enemy = GetEnemy()] - The enemy to check.
     */
    GetEnemyLastTimeSeen(enemy?: Entity): number;
    
    /**
     * [Server]
     * 
     * Returns the expression file the NPC is currently playing.
     * 
     */
    GetExpression(): string;
    
    /**
     * [Server]
     * 
     * Returns the position we are trying to reach, if any.
     * 
     */
    GetGoalPos(): Vector;
    
    /**
     * [Server]
     * 
     * Returns the entity we are trying to reach, if any.
     * 
     */
    GetGoalTarget(): Entity;
    
    /**
     * [Server]
     * 
     * Returns NPCs hull type set by [NPC:SetHullType](https://wiki.facepunch.com/gmod/NPC:SetHullType).
     * 
     */
    GetHullType(): HULL;
    
    /**
     * [Server]
     * 
     * Returns the ideal activity the NPC currently wants to achieve.
     * 
     */
    GetIdealActivity(): ACT;
    
    /**
     * [Server]
     * 
     * Returns the ideal move acceleration of the NPC.
     * 
     */
    GetIdealMoveAcceleration(): number;
    
    /**
     * [Server]
     * 
     * Returns the ideal move speed of the NPC.
     * 
     */
    GetIdealMoveSpeed(): number;
    
    /**
     * [Server]
     * 
     * Returns the ideal yaw (left right rotation) for this NPC at this moment.
     * 
     */
    GetIdealYaw(): number;
    
    /**
     * [Server]
     * 
     * Returns all known enemies this NPC has.
     * 
     * See also [NPC:GetKnownEnemyCount](https://wiki.facepunch.com/gmod/NPC:GetKnownEnemyCount)
     * 
     */
    GetKnownEnemies(): any;
    
    /**
     * [Server]
     * 
     * Returns known enemy count of this NPC.
     * 
     * See also [NPC:GetKnownEnemies](https://wiki.facepunch.com/gmod/NPC:GetKnownEnemies)
     * 
     */
    GetKnownEnemyCount(): number;
    
    /**
     * [Server]
     * 
     * Returns [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime) based time since this NPC last received damage from given enemy.
     * @param [enemy = nil] - The enemy to test. Defaults to currently active enemy ([NPC:GetEnemy](https://wiki.facepunch.com/gmod/NPC:GetEnemy))
     */
    GetLastTimeTookDamageFromEnemy(enemy?: Entity): number;
    
    /**
     * [Server]
     * 
     * Returns NPCs max view distance. An NPC will not be able to see enemies outside of this distance.
     * 
     */
    GetMaxLookDistance(): number;
    
    /**
     * [Server]
     * 
     * Returns how far should the NPC look ahead in its route.
     * 
     */
    GetMinMoveCheckDist(): number;
    
    /**
     * [Server]
     * 
     * Returns how far before the NPC can come to a complete stop.
     * @param [minResult = 10] - The minimum value that will be returned by this function.
     */
    GetMinMoveStopDist(minResult = 10): number;
    
    /**
     * [Server]
     * 
     * Returns the current timestep the internal NPC motor is working on.
     * 
     */
    GetMoveInterval(): number;
    
    /**
     * [Server]
     * 
     * Returns the NPC's current movement activity.
     * 
     */
    GetMovementActivity(): ACT;
    
    /**
     * [Server]
     * 
     * Returns the index of the sequence the NPC uses to move.
     * 
     */
    GetMovementSequence(): number;
    
    /**
     * [Server]
     * 
     * Returns the current move velocity of the NPC.
     * 
     */
    GetMoveVelocity(): Vector;
    
    /**
     * [Server]
     * 
     * Returns the NPC's navigation type.
     * 
     */
    GetNavType(): NAV;
    
    /**
     * [Server]
     * 
     * Returns the nearest member of the squad the NPC is in.
     * 
     */
    GetNearestSquadMember(): NPC;
    
    /**
     * [Server]
     * 
     * Gets the NPC's next waypoint position, where NPC will be moving after reaching current waypoint, if any is available.
     * 
     */
    GetNextWaypointPos(): Vector;
    
    /**
     * [Server]
     * 
     * Returns the NPC's state.
     * 
     */
    GetNPCState(): NPC_STATE;
    
    /**
     * [Server]
     * 
     * Returns the distance the NPC is from Target Goal.
     * 
     */
    GetPathDistanceToGoal(): number;
    
    /**
     * [Server]
     * 
     * Returns the amount of time it will take for the NPC to get to its Target Goal.
     * 
     */
    GetPathTimeToGoal(): number;
    
    /**
     * [Server]
     * 
     * Returns the shooting position of the NPC.
     * 
     * **Note:**
     * >This only works properly when called on an NPC that can hold weapons, otherwise it will return the same value as [Entity:GetPos](https://wiki.facepunch.com/gmod/Entity:GetPos).
     * 
     * 
     */
    GetShootPos(): Vector;
    
    /**
     * [Server]
     * 
     * Returns the current squad name of the NPC, as set via [NPC:SetSquad](https://wiki.facepunch.com/gmod/NPC:SetSquad).
     * 
     */
    GetSquad(): string;
    
    /**
     * [Server]
     * 
     * Returns the NPC's current target set by [NPC:SetTarget](https://wiki.facepunch.com/gmod/NPC:SetTarget).
     * 
     * **Bug [#3132](https://github.com/Facepunch/garrysmod-issues/issues/3132):**
     * >This returns nil if the NPC has no target. You should use [Global.IsValid](https://wiki.facepunch.com/gmod/Global.IsValid) (which accounts for nil and NULL) on the return to verify validity of the target.
     * 
     * 
     */
    GetTarget(): Entity;
    
    /**
     * [Server]
     * 
     * Returns the status of the current task.
     * 
     */
    GetTaskStatus(): TASKSTATUS;
    
    /**
     * [Server]
     * 
     * Returns [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime) based time since the enemy was reacquired, meaning it is currently in Line of Sight of the NPC.
     * @param [enemy = nil] - The enemy to test. Defaults to currently active enemy ([NPC:GetEnemy](https://wiki.facepunch.com/gmod/NPC:GetEnemy))
     */
    GetTimeEnemyLastReacquired(enemy?: Entity): number;
    
    /**
     * [Server]
     * 
     * Returns the view offset of the NPC. Set by [NPC:SetViewOffset](https://wiki.facepunch.com/gmod/NPC:SetViewOffset).
     * 
     */
    GetViewOffset(): Vector;
    
    /**
     * [Server]
     * 
     * Returns a specific weapon the NPC owns.
     * @param class_ - A classname of the weapon to try to get.
     */
    GetWeapon(class_: string): Weapon;
    
    /**
     * [Server]
     * 
     * Returns a table of the NPC's weapons.
     * 
     */
    GetWeapons(): any;
    
    /**
     * [Server]
     * 
     * Used to give a weapon to an already spawned NPC.
     * @param weapon - Class name of the weapon to equip to the NPC.
     */
    Give(weapon: string): Weapon;
    
    /**
     * [Server]
     * 
     * Returns whether or not the NPC has the given condition.
     * @param condition - The condition index, see [Enums/COND](https://wiki.facepunch.com/gmod/Enums/COND).
     */
    HasCondition(condition: COND): boolean;
    
    /**
     * [Server]
     * 
     * Polls the enemy memory to check if the given entity has eluded us or not.
     * @param [enemy = GetEnemy()] - The enemy to test.
     */
    HasEnemyEluded(enemy?: Entity): boolean;
    
    /**
     * [Server]
     * 
     * Polls the enemy memory to check if the NPC has any memory of given enemy.
     * @param [enemy = GetEnemy()] - The entity to test.
     */
    HasEnemyMemory(enemy?: Entity): boolean;
    
    /**
     * [Server]
     * 
     * Returns true if the current navigation has a obstacle, this is different from [NPC:GetBlockingEntity](https://wiki.facepunch.com/gmod/NPC:GetBlockingEntity), this includes obstacles that it can steer around.
     * 
     */
    HasObstacles(): boolean;
    
    /**
     * [Server]
     * 
     * Force an NPC to play their Idle sound.
     * 
     */
    IdleSound(): void;
    
    /**
     * [Server]
     * 
     * Makes the NPC ignore given entity/enemy until given time.
     * @param enemy - The enemy to ignore.
     * @param until - How long to ignore the enemy for. This will be compared to [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime), so your value should be based on it.
     */
    IgnoreEnemyUntil(enemy: Entity, until: number): void;
    
    /**
     * [Server]
     * 
     * Returns whether or not the NPC is performing the given schedule.
     * @param schedule - The schedule number, see [Enums/SCHED](https://wiki.facepunch.com/gmod/Enums/SCHED).
     */
    IsCurrentSchedule(schedule: SCHED): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether the current navigational waypoint is the final one.
     * 
     */
    IsCurWaypointGoal(): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether the NPC is facing their ideal yaw. See [NPC:SetIdealYaw](https://wiki.facepunch.com/gmod/NPC:SetIdealYaw), [NPC:GetIdealYaw](https://wiki.facepunch.com/gmod/NPC:GetIdealYaw) and [NPC:SetIdealYawAndUpdate](https://wiki.facepunch.com/gmod/NPC:SetIdealYawAndUpdate).
     * 
     */
    IsFacingIdealYaw(): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether the NPC has an active goal.
     * 
     */
    IsGoalActive(): boolean;
    
    /**
     * [Server]
     * 
     * Returns if the current movement is locked on the Yaw axis.
     * 
     */
    IsMoveYawLocked(): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether the NPC is moving or not.
     * 
     */
    IsMoving(): boolean;
    
    /**
     * [Server]
     * 
     * Checks if the NPC is running an **ai_goal**. ( e.g. An npc_citizen NPC following the Player. )
     * 
     */
    IsRunningBehavior(): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether the current NPC is the leader of the squad it is in.
     * 
     */
    IsSquadLeader(): boolean;
    
    /**
     * [Server]
     * 
     * Returns true if the entity was remembered as unreachable. The memory is updated automatically from following engine tasks if they failed:
     * * TASK_GET_CHASE_PATH_TO_ENEMY
     * * TASK_GET_PATH_TO_ENEMY_LKP
     * * TASK_GET_PATH_TO_INTERACTION_PARTNER
     * * TASK_ANTLIONGUARD_GET_CHASE_PATH_ENEMY_TOLERANCE
     * * SCHED_FAIL_ESTABLISH_LINE_OF_FIRE - Combine NPCs, also when failing to change their enemy
     * @param testEntity - The entity to test.
     */
    IsUnreachable(testEntity: Entity): boolean;
    
    /**
     * [Server]
     * 
     * Force an NPC to play their LostEnemy sound.
     * 
     */
    LostEnemySound(): void;
    
    /**
     * [Server]
     * 
     * Tries to achieve our ideal animation state, playing any transition sequences that we need to play to get there.
     * 
     */
    MaintainActivity(): void;
    
    /**
     * [Server]
     * 
     * Causes the NPC to temporarily forget the current enemy and switch on to a better one.
     * @param [enemy = GetEnemy()] - The enemy to mark
     */
    MarkEnemyAsEluded(enemy?: Entity): void;
    
    /**
     * [Server]
     * 
     * Marks the NPC as took damage from given entity.
     * 
     * See also [NPC:GetLastTimeTookDamageFromEnemy](https://wiki.facepunch.com/gmod/NPC:GetLastTimeTookDamageFromEnemy).
     * @param [enemy = nil] - The enemy to mark. Defaults to currently active enemy ([NPC:GetEnemy](https://wiki.facepunch.com/gmod/NPC:GetEnemy))
     */
    MarkTookDamageFromEnemy(enemy?: Entity): void;
    
    /**
     * [Server]
     * 
     * Executes a climb move.
     * 
     * Related functions are [NPC:MoveClimbStart](https://wiki.facepunch.com/gmod/NPC:MoveClimbStart) and [NPC:MoveClimbStop](https://wiki.facepunch.com/gmod/NPC:MoveClimbStop).
     * @param destination - The destination of the climb.
     * @param dir - The direction of the climb.
     * @param distance - The distance.
     * @param yaw - The yaw angle.
     * @param left - Amount of climb nodes left?
     */
    MoveClimbExec(destination: Vector, dir: Vector, distance: number, yaw: number, left: number): AIMR;
    
    /**
     * [Server]
     * 
     * Starts a climb move.
     * 
     * Related functions are [NPC:MoveClimbExec](https://wiki.facepunch.com/gmod/NPC:MoveClimbExec) and [NPC:MoveClimbStop](https://wiki.facepunch.com/gmod/NPC:MoveClimbStop).
     * @param destination - The destination of the climb.
     * @param dir - The direction of the climb.
     * @param distance - The distance.
     * @param yaw - The yaw angle.
     */
    MoveClimbStart(destination: Vector, dir: Vector, distance: number, yaw: number): void;
    
    /**
     * [Server]
     * 
     * Stops a climb move.
     * 
     * Related functions are [NPC:MoveClimbExec](https://wiki.facepunch.com/gmod/NPC:MoveClimbExec) and [NPC:MoveClimbStart](https://wiki.facepunch.com/gmod/NPC:MoveClimbStart).
     * 
     */
    MoveClimbStop(): void;
    
    /**
     * [Server]
     * 
     * Executes a jump move.
     * 
     * Related functions are [NPC:MoveJumpStart](https://wiki.facepunch.com/gmod/NPC:MoveJumpStart) and [NPC:MoveJumpStop](https://wiki.facepunch.com/gmod/NPC:MoveJumpStop).
     * 
     */
    MoveJumpExec(): AIMR;
    
    /**
     * [Server]
     * 
     * Starts a jump move.
     * 
     * Related functions are [NPC:MoveJumpExec](https://wiki.facepunch.com/gmod/NPC:MoveJumpExec) and [NPC:MoveJumpStop](https://wiki.facepunch.com/gmod/NPC:MoveJumpStop).
     * @param vel - The jump velocity.
     */
    MoveJumpStart(vel: Vector): void;
    
    /**
     * [Server]
     * 
     * Stops a jump move.
     * 
     * Related functions are [NPC:MoveJumpExec](https://wiki.facepunch.com/gmod/NPC:MoveJumpExec) and [NPC:MoveJumpStart](https://wiki.facepunch.com/gmod/NPC:MoveJumpStart).
     * 
     */
    MoveJumpStop(): AIMR;
    
    /**
     * [Server]
     * 
     * Makes the NPC walk toward the given position. The NPC will return to the player after amount of time set by **player_squad_autosummon_time** [ConVar](https://wiki.facepunch.com/gmod/ConVar).
     * 
     * Only works on Citizens (npc_citizen) and is a part of the Half-Life 2 squad system.
     * 
     * The NPC **must** be in the player's squad for this to work.
     * @param position - The target position for the NPC to walk to.
     */
    MoveOrder(position: Vector): void;
    
    /**
     * [Server]
     * 
     * Pauses the NPC movement?
     * 
     * Related functions are [NPC:MoveStart](https://wiki.facepunch.com/gmod/NPC:MoveStart), [NPC:MoveStop](https://wiki.facepunch.com/gmod/NPC:MoveStop) and [NPC:ResetMoveCalc](https://wiki.facepunch.com/gmod/NPC:ResetMoveCalc).
     * 
     */
    MovePause(): void;
    
    /**
     * [Server]
     * 
     * Starts NPC movement?
     * 
     * Related functions are [NPC:MoveStop](https://wiki.facepunch.com/gmod/NPC:MoveStop), [NPC:MovePause](https://wiki.facepunch.com/gmod/NPC:MovePause) and [NPC:ResetMoveCalc](https://wiki.facepunch.com/gmod/NPC:ResetMoveCalc).
     * 
     */
    MoveStart(): void;
    
    /**
     * [Server]
     * 
     * Stops the NPC movement?
     * 
     * Related functions are [NPC:MoveStart](https://wiki.facepunch.com/gmod/NPC:MoveStart), [NPC:MovePause](https://wiki.facepunch.com/gmod/NPC:MovePause) and [NPC:ResetMoveCalc](https://wiki.facepunch.com/gmod/NPC:ResetMoveCalc).
     * 
     */
    MoveStop(): void;
    
    /**
     * [Server]
     * 
     * Works similarly to [NPC:NavSetRandomGoal](https://wiki.facepunch.com/gmod/NPC:NavSetRandomGoal).
     * @param pos - The origin to calculate a path from.
     * @param length - The target length of the path to calculate.
     * @param dir - The direction in which to look for a new path end goal.
     */
    NavSetGoal(pos: Vector, length: number, dir: Vector): boolean;
    
    /**
     * [Server]
     * 
     * Creates a path to closest node at given position. This won't actually force the NPC to move.
     * 
     * See also [NPC:NavSetRandomGoal](https://wiki.facepunch.com/gmod/NPC:NavSetRandomGoal).
     * @param pos - The position to calculate a path to.
     */
    NavSetGoalPos(pos: Vector): boolean;
    
    /**
     * [Server]
     * 
     * Set the goal target for an NPC.
     * @param target - The targeted entity to set the goal to.
     * @param [offset = Vector( 0, 0, 0 )] - The offset to apply to the targeted entity's position.
     */
    NavSetGoalTarget(target: Entity, offset?: Vector): boolean;
    
    /**
     * [Server]
     * 
     * Creates a random path of specified minimum length between a closest start node and random node in the specified direction. This won't actually force the NPC to move.
     * @param minPathLength - Minimum length of path in units
     * @param dir - Unit vector pointing in the direction of the target random node
     */
    NavSetRandomGoal(minPathLength: number, dir: Vector): boolean;
    
    /**
     * [Server]
     * 
     * Sets a goal in x, y offsets for the NPC to wander to
     * @param xOffset - X offset
     * @param yOffset - Y offset
     */
    NavSetWanderGoal(xOffset: number, yOffset: number): boolean;
    
    /**
     * [Server]
     * 
     * Forces the NPC to pickup an existing weapon entity. The NPC will not pick up the weapon if they already own a weapon of given type, or if the NPC could not normally have this weapon in their inventory.
     * @param wep - The weapon to try to pick up.
     */
    PickupWeapon(wep: Weapon): boolean;
    
    /**
     * [Server]
     * 
     * Forces the NPC to play a sentence from scripts/sentences.txt
     * @param sentence - The sentence string to speak.
     * @param delay - Delay in seconds until the sentence starts playing.
     * @param volume - The volume of the sentence, from 0 to 1.
     */
    PlaySentence(sentence: string, delay: number, volume: number): number;
    
    /**
     * [Server]
     * 
     * Makes the NPC remember an entity or an enemy as unreachable, for a specified amount of time. Use [NPC:IsUnreachable](https://wiki.facepunch.com/gmod/NPC:IsUnreachable) to check if an entity is still unreachable.
     * @param ent - The entity to mark as unreachable.
     * @param [time = 3] - For how long to remember the entity as unreachable. Negative values will act as `3` seconds.
     */
    RememberUnreachable(ent: Entity, time = 3): void;
    
    /**
     * [Server]
     * 
     * Removes conditions to ignore for the this NPC.
     * @param [conditions = nil] - Ignore conditions to remove, see [Enums/COND](https://wiki.facepunch.com/gmod/Enums/COND). If omitted, removes all ignore conditions.
     */
    RemoveIgnoreConditions(conditions?: COND): void;
    
    /**
     * [Server]
     * 
     * Resets the ideal activity of the NPC. See also [NPC:SetIdealActivity](https://wiki.facepunch.com/gmod/NPC:SetIdealActivity).
     * @param act - The new activity. See [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT).
     */
    ResetIdealActivity(act: ACT): void;
    
    /**
     * [Server]
     * 
     * Resets all the movement calculations.
     * 
     * Related functions are [NPC:MoveStart](https://wiki.facepunch.com/gmod/NPC:MoveStart), [NPC:MovePause](https://wiki.facepunch.com/gmod/NPC:MovePause) and [NPC:MoveStop](https://wiki.facepunch.com/gmod/NPC:MoveStop).
     * 
     */
    ResetMoveCalc(): void;
    
    /**
     * [Server]
     * 
     * Starts an engine task.
     * 
     * Used internally by the [ai_task](https://wiki.facepunch.com/gmod/ai_task).
     * @param taskID - The task ID, see [ai_task.h](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502)
     * @param taskData - The task data.
     */
    RunEngineTask(taskID: number, taskData: number): void;
    
    /**
     * [Server]
     * 
     * Forces the NPC to switch to a specific weapon the NPC owns. See [NPC:GetWeapons](https://wiki.facepunch.com/gmod/NPC:GetWeapons).
     * @param class_ - A classname of the weapon or a [Weapon](https://wiki.facepunch.com/gmod/Weapon) entity to switch to.
     */
    SelectWeapon(class_: string): void;
    
    /**
     * [Server]
     * 
     * Stops any sounds (speech) the NPC is currently palying.
     * 
     * Equivalent to `Entity:EmitSound( "AI_BaseNPC.SentenceStop" )`
     * 
     */
    SentenceStop(): void;
    
    /**
     * [Server]
     * 
     * Sets the NPC's current activity.
     * @param act - The new activity to set, see [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT).
     */
    SetActivity(act: ACT): void;
    
    /**
     * [Server]
     * 
     * @param act - See [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT).
     */
    SetArrivalActivity(act: ACT): void;
    
    /**
     * [Server]
     * 
     * Sets the direction from the NPC origin to its current navigational destination.
     * @param dir - The new arrival direction.
     */
    SetArrivalDirection(dir: Vector): void;
    
    /**
     * [Server]
     * 
     * Sets the distance to goal at which the NPC should stop moving and continue to other business such as doing the rest of their tasks in a schedule.
     * @param dist - The distance to goal that is close enough for the NPC
     */
    SetArrivalDistance(dist: number): void;
    
    /**
     * [Server]
     * 
     * Sets the sequence to be played when the NPC arrives at its goal.
     * @param seq - See [Entity:LookupSequence](https://wiki.facepunch.com/gmod/Entity:LookupSequence).
     */
    SetArrivalSequence(seq: number): void;
    
    /**
     * [Server]
     * 
     * Sets the arrival speed? of the NPC
     * @param speed - The new arrival speed
     */
    SetArrivalSpeed(speed: number): void;
    
    /**
     * [Server]
     * 
     * Sets an NPC condition.
     * @param condition - The condition index, see [Enums/COND](https://wiki.facepunch.com/gmod/Enums/COND).
     */
    SetCondition(condition: COND): void;
    
    /**
     * [Server]
     * 
     * Sets the weapon proficiency of an NPC (how skilled an NPC is with its current weapon).
     * @param proficiency - The proficiency for the NPC's current weapon. See [Enums/WEAPON_PROFICIENCY](https://wiki.facepunch.com/gmod/Enums/WEAPON_PROFICIENCY).
     */
    SetCurrentWeaponProficiency(proficiency: WEAPON_PROFICIENCY): void;
    
    /**
     * [Server]
     * 
     * Sets the target for an NPC.
     * @param enemy - The enemy that the NPC should target
     * @param [newenemy = true] - Calls [NPC:SetCondition](https://wiki.facepunch.com/gmod/NPC:SetCondition)(COND.NEW_ENEMY) if the new enemy is valid and not equal to the last enemy.
     */
    SetEnemy(enemy: Entity, newenemy = true): void;
    
    /**
     * [Server]
     * 
     * Sets the NPC's .vcd expression. Similar to [Entity:PlayScene](https://wiki.facepunch.com/gmod/Entity:PlayScene) except the scene is looped until it's interrupted by default NPC behavior or [NPC:ClearExpression](https://wiki.facepunch.com/gmod/NPC:ClearExpression).
     * @param expression - The expression filepath.
     */
    SetExpression(expression: string): number;
    
    /**
     * [Server]
     * 
     * Updates the NPC's hull and physics hull in order to match its model scale. [Entity:SetModelScale](https://wiki.facepunch.com/gmod/Entity:SetModelScale) seems to take care of this regardless.
     * 
     */
    SetHullSizeNormal(): void;
    
    /**
     * [Server]
     * 
     * Sets the hull type for the NPC.
     * @param hullType - Hull type. See [Enums/HULL](https://wiki.facepunch.com/gmod/Enums/HULL)
     */
    SetHullType(hullType: HULL): void;
    
    /**
     * [Server]
     * 
     * Sets the ideal activity the NPC currently wants to achieve. This is most useful for custom SNPCs.
     * @param __unnamedArg - The ideal activity to set. [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT).
     */
    SetIdealActivity(__unnamedArg: ACT): void;
    
    /**
     * [Server]
     * 
     * Sets the ideal yaw angle (left-right rotation) for the NPC. Does not actually force the NPC to start turning in that direction. See [NPC:UpdateYaw](https://wiki.facepunch.com/gmod/NPC:UpdateYaw), [NPC:GetIdealYaw](https://wiki.facepunch.com/gmod/NPC:GetIdealYaw) and [NPC:SetIdealYawAndUpdate](https://wiki.facepunch.com/gmod/NPC:SetIdealYawAndUpdate).
     * @param angle - The aim direction to set, the `yaw` component.
     */
    SetIdealYaw(angle: number): void;
    
    /**
     * [Server]
     * 
     * Sets the ideal yaw angle (left-right rotation) for the NPC and forces them to turn to that angle.
     * @param angle - The aim direction to set, the `yaw` component.
     * @param [speed = -1] - The turn speed. Special values are:
     * * `-1` - Calculate automatically
     * * `-2` - Keep the previous yaw speed
     */
    SetIdealYawAndUpdate(angle: number, speed = -1): void;
    
    /**
     * [Server]
     * 
     * Sets conditions to ignore for the this NPC.
     * @param conditions - Conditions to ignore, see [Enums/COND](https://wiki.facepunch.com/gmod/Enums/COND).
     */
    SetIgnoreConditions(conditions: COND): void;
    
    /**
     * [Server]
     * 
     * Sets the last registered or memorized position for an npc. When using scheduling, the NPC will focus on navigating to the last position via nodes.
     * 
     * **Note:**
     * >The navigation requires ground nodes to function properly, otherwise the NPC could only navigate in a small area. (https://developer.valvesoftware.com/wiki/Info_node)
     * 
     * @param Position - Where the NPC's last position will be set.
     */
    SetLastPosition(Position: Vector): void;
    
    /**
     * [Server]
     * 
     * Sets NPC's max view distance. An NPC will not be able to see enemies outside of this distance.
     * @param dist - New maximum distance the NPC can see at. Default is 2048 and 6000 for long range NPCs such as the sniper.
     */
    SetMaxLookDistance(dist: number): void;
    
    /**
     * [Server]
     * 
     * Sets how long to try rebuilding path before failing task.
     * @param time - How long to try rebuilding path before failing task
     */
    SetMaxRouteRebuildTime(time: number): void;
    
    /**
     * [Server]
     * 
     * Sets the timestep the internal NPC motor is working on.
     * @param time - The new timestep.
     */
    SetMoveInterval(time: number): void;
    
    /**
     * [Server]
     * 
     * Sets the activity the NPC uses when it moves.
     * @param activity - The movement activity, see [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT).
     */
    SetMovementActivity(activity: ACT): void;
    
    /**
     * [Server]
     * 
     * Sets the sequence the NPC navigation path uses for speed calculation. Doesn't seem to have any visible effect on NPC movement.
     * @param sequenceId - The movement sequence index
     */
    SetMovementSequence(sequenceId: number): void;
    
    /**
     * [Server]
     * 
     * Sets the move velocity of the NPC
     * @param vel - The new movement velocity.
     */
    SetMoveVelocity(vel: Vector): void;
    
    /**
     * [Server]
     * 
     * Sets whether the current movement should locked on the Yaw axis or not.
     * @param lock - Whether the movement should yaw locked or not.
     */
    SetMoveYawLocked(lock: boolean): void;
    
    /**
     * [Server]
     * 
     * Sets the navigation type of the NPC.
     * @param navtype - The new nav type. See [Enums/NAV](https://wiki.facepunch.com/gmod/Enums/NAV).
     */
    SetNavType(navtype: NAV): void;
    
    /**
     * [Server]
     * 
     * Sets the state the NPC is in to help it decide on a ideal schedule.
     * @param state - New NPC state, see [Enums/NPC_STATE](https://wiki.facepunch.com/gmod/Enums/NPC_STATE)
     */
    SetNPCState(state: NPC_STATE): void;
    
    /**
     * [Server]
     * 
     * Sets the NPC's current schedule.
     * @param schedule - The NPC schedule, see [Enums/SCHED](https://wiki.facepunch.com/gmod/Enums/SCHED).
     */
    SetSchedule(schedule: SCHED): void;
    
    /**
     * [Server]
     * 
     * Assigns the NPC to a new squad. A squad can have up to 16 NPCs. NPCs in a single squad should be friendly to each other.
     * 
     * See also [ai.GetSquadMembers](https://wiki.facepunch.com/gmod/ai.GetSquadMembers) and [NPC:GetSquad](https://wiki.facepunch.com/gmod/NPC:GetSquad).
     * 
     * NPCs within the same squad are meant to function more effectively, tactics wise.
     * @param name - The new squad name to set.
     */
    SetSquad(name: string): void;
    
    /**
     * [Server]
     * 
     * Sets the NPC's target. This is used in some engine schedules.
     * @param entity - The target of the NPC.
     */
    SetTarget(entity: Entity): void;
    
    /**
     * [Server]
     * 
     * Sets the status of the current task.
     * @param status - The status. See [Enums/TASKSTATUS](https://wiki.facepunch.com/gmod/Enums/TASKSTATUS).
     */
    SetTaskStatus(status: TASKSTATUS): void;
    
    /**
     * [Server]
     * 
     * Sets given entity as an unforgettable enemy.
     * @param enemy - The enemy entity to set.
     * @param [set = true] - The entity to set.
     */
    SetUnforgettable(enemy: Entity, set = true): void;
    
    /**
     * [Server]
     * 
     * Sets the view offset of the NPC. Player alternative of [Player:SetViewOffset](https://wiki.facepunch.com/gmod/Player:SetViewOffset).
     * 
     * This affects NPC's [NPC:GetShootPos](https://wiki.facepunch.com/gmod/NPC:GetShootPos).
     * @param __unnamedArg - The view offset to set.
     */
    SetViewOffset(__unnamedArg: Vector): void;
    
    /**
     * [Server]
     * 
     * Forces the NPC to start an engine task, this has different results for every NPC.
     * @param task - The id of the task to start, see [ai_task.h](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502)
     * @param taskData - The task data as a float, not all tasks make use of it.
     */
    StartEngineTask(task: number, taskData: number): void;
    
    /**
     * [Server]
     * 
     * Resets the NPC's movement animation and velocity. Does not actually stop the NPC from moving.
     * 
     */
    StopMoving(): void;
    
    /**
     * [Server]
     * 
     * Cancels [NPC:MoveOrder](https://wiki.facepunch.com/gmod/NPC:MoveOrder) basically.
     * 
     * Only works on Citizens (npc_citizen) and is a part of the Half-Life 2 squad system.
     * 
     * The NPC **must** be in the player's squad for this to work.
     * @param target - Must be a player, does nothing otherwise.
     */
    TargetOrder(target: Entity): void;
    
    /**
     * [Server]
     * 
     * Marks the current NPC task as completed.
     * 
     * This is meant to be used alongside [NPC:TaskFail](https://wiki.facepunch.com/gmod/NPC:TaskFail) to complete or fail custom Lua defined tasks. ([Schedule:AddTask](https://wiki.facepunch.com/gmod/Schedule:AddTask))
     * 
     */
    TaskComplete(): void;
    
    /**
     * [Server]
     * 
     * Marks the current NPC task as failed.
     * 
     * This is meant to be used alongside [NPC:TaskComplete](https://wiki.facepunch.com/gmod/NPC:TaskComplete) to complete or fail custom Lua defined tasks. ([Schedule:AddTask](https://wiki.facepunch.com/gmod/Schedule:AddTask))
     * @param task - A string most likely defined as a Source Task, for more information on Tasks go to https://developer.valvesoftware.com/wiki/Task
     */
    TaskFail(task: string): void;
    
    /**
     * [Server]
     * 
     * Force the NPC to update information on the supplied enemy, as if it had line of sight to it.
     * @param enemy - The enemy to update.
     * @param pos - The last known position of the enemy.
     */
    UpdateEnemyMemory(enemy: Entity, pos: Vector): void;
    
    /**
     * [Server]
     * 
     * Updates the turn activity. Basically applies the turn animations depending on the current turn yaw.
     * 
     */
    UpdateTurnActivity(): void;
    
    /**
     * [Server]
     * 
     * Forces the NPC to turn to their ideal yaw angle. See [NPC:SetIdealYaw](https://wiki.facepunch.com/gmod/NPC:SetIdealYaw) and [NPC:SetIdealYawAndUpdate](https://wiki.facepunch.com/gmod/NPC:SetIdealYawAndUpdate).
     * @param [speed = -1] - The turn speed. Special values are:
     * * `-1` - Calculate automatically
     * * `-2` - Keep the previous yaw speed
     */
    UpdateYaw(speed = -1): void;
    
    /**
     * [Server]
     * 
     * **Note:**
     * >This function only works on `ai` type [SENTs](Scripted_Entities).
     * 
     * 
     */
    UseActBusyBehavior(): boolean;
    
    /**
     * [Server]
     * 
     * **Note:**
     * >This function only works on `ai` type [SENTs](Scripted_Entities).
     * 
     * 
     */
    UseAssaultBehavior(): boolean;
    
    /**
     * [Server]
     * 
     * **Note:**
     * >This function only works on `ai` type [SENTs](Scripted_Entities).
     * 
     * 
     */
    UseFollowBehavior(): boolean;
    
    /**
     * [Server]
     * 
     * **Note:**
     * >This function only works on `ai` type [SENTs](Scripted_Entities).
     * 
     * 
     */
    UseFuncTankBehavior(): boolean;
    
    /**
     * [Server]
     * 
     * **Note:**
     * >This function only works on `ai` type [SENTs](Scripted_Entities).
     * 
     * 
     */
    UseLeadBehavior(): boolean;
    
    /**
     * [Server]
     * 
     * Undoes the other `Use*Behavior` functions.
     * 
     * **Note:**
     * >This function only works on `ai` type [SENTs](Scripted_Entities).
     * 
     * 
     */
    UseNoBehavior(): void;

}

/**
 * This is the base panel for every other [VGUI](vgui) panel.
 * 
 * It contains all of the basic methods, some of which may only work on certain VGUI elements. As their functionality is provided at the game's C/C++ level rather than by its Lua script extension, they are unfortunately unavailable for most practical purposes, however, they can still be obtained in a way similar to that provided by the [baseclass](https://wiki.facepunch.com/gmod/baseclass) library:
 * 
 * ```
 * -- Create a new panel type NewPanel that inherits all of its functionality from DLabel,
 * -- but has a different SetText method than DLabel does - all without the hassle of that
 * -- old DLabel's default text getting in the way. Fun stuff.
 * 
 * local PANEL = {}
 * 
 * function PANEL:Init()
 * 
 * 	self:SetText_Base( "" )
 * 	self:SetText( "Time for something different!" )
 * 
 * end
 * 
 * function PANEL:Paint( aWide, aTall )
 * 
 * 	local TextX, TextY = 0, 0
 * 	local TextColor = Color( 255, 0, 0, 255 )
 * 
 * 	surface.SetFont( self:GetFont() or "default" )
 * 	surface.SetTextColor( TextColor )
 * 	surface.SetTextPos( TextX, TextY )
 * 	surface.DrawText( self:GetText() )
 * 
 * end
 * 
 * -- And here we go:
 * PANEL.SetText_Base = FindMetaTable( "Panel" ).SetText
 * 
 * function PANEL:SetText( aText ) 
 * 
 * 	self.Text = tostring( aText ) 
 * 
 * end
 * 
 * function PANEL:GetText() 
 * 
 * 	return self.Text or "" 
 * 
 * end
 * 
 * vgui.Register( "NewPanel", PANEL, "DLabel" )
 * ```
 */
interface Panel {
    

    /**
     * [Client and Menu]
     * 
     * Adds the specified object to the panel.
     * @param object - The panel to be added (parented). Can also be:
     * * [string](https://wiki.facepunch.com/gmod/string) Class Name - creates panel with the specified name and adds it to the panel.
     * * [table](https://wiki.facepunch.com/gmod/table) PANEL table - creates a panel from table and adds it to the panel.
     */
    Add(object: Panel): Panel;
    
    /**
     * [Client and Menu]
     * 
     * This function does nothing.
     * 
     * @deprecated Does nothing
     * 
     * 
     */
    AddText(): void;
    
    /**
     * [Client and Menu]
     * 
     * Aligns the panel on the bottom of its parent with the specified offset.
     * @param [offset = 0] - The align offset.
     */
    AlignBottom(offset = 0): void;
    
    /**
     * [Client and Menu]
     * 
     * Aligns the panel on the left of its parent with the specified offset.
     * @param [offset = 0] - The align offset.
     */
    AlignLeft(offset = 0): void;
    
    /**
     * [Client and Menu]
     * 
     * Aligns the panel on the right of its parent with the specified offset.
     * @param [offset = 0] - The align offset.
     */
    AlignRight(offset = 0): void;
    
    /**
     * [Client and Menu]
     * 
     * Aligns the panel on the top of its parent with the specified offset.
     * @param [offset = 0] - The align offset.
     */
    AlignTop(offset = 0): void;
    
    /**
     * [Client and Menu]
     * 
     * Uses animation to transition the current alpha value of a panel to a new alpha, over a set period of time and after a specified delay.
     * @param alpha - The alpha value (0-255) to approach.
     * @param duration - The time in seconds it should take to reach the alpha.
     * @param [delay = 0] - The delay before the animation starts.
     * @param [callback = nil] - The function to be called once the animation finishes. Arguments are:
     * * [table](https://wiki.facepunch.com/gmod/table) animData - The AnimationData that was used. See [Structures/AnimationData](https://wiki.facepunch.com/gmod/Structures/AnimationData)
     * * [Panel](https://wiki.facepunch.com/gmod/Panel) pnl - The panel object whose alpha was changed.
     */
    AlphaTo(alpha: number, duration: number, delay = 0, callback?: Function): void;
    
    /**
     * [Client and Menu]
     * 
     * Performs the per-frame operations required for panel animations.
     * 
     * This is called every frame by [PANEL:AnimationThink](https://wiki.facepunch.com/gmod/PANEL:AnimationThink).
     * 
     */
    AnimationThinkInternal(): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the [Global.SysTime](https://wiki.facepunch.com/gmod/Global.SysTime) value when all animations for this panel object will end.
     * 
     */
    AnimTail(): number;
    
    /**
     * [Client and Menu]
     * 
     * Appends text to a [RichText](https://wiki.facepunch.com/gmod/RichText) element. This does not automatically add a new line.
     * @param txt - The text to append (add on).
     */
    AppendText(txt: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Appends text to a [RichText](https://wiki.facepunch.com/gmod/RichText) element (exactly like [Panel:AppendText](https://wiki.facepunch.com/gmod/Panel:AppendText)), while also parsing and adding valid URLs ([Panel:InsertClickableTextStart](https://wiki.facepunch.com/gmod/Panel:InsertClickableTextStart)). This does not automatically add a new line.
     * @param txt - The text to append (add on).
     */
    AppendTextWithURLs(txt: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Used by [Panel:LoadGWENFile](https://wiki.facepunch.com/gmod/Panel:LoadGWENFile) and [Panel:LoadGWENString](https://wiki.facepunch.com/gmod/Panel:LoadGWENString) to apply a GWEN controls table to a panel object.
     * 
     * You can do this manually using [file.Read](https://wiki.facepunch.com/gmod/file.Read) and [util.JSONToTable](https://wiki.facepunch.com/gmod/util.JSONToTable) to import and create a GWEN table structure from a `.gwen` file. This method can then be called, passing the GWEN table's `Controls` member.
     * @param GWENTable - The GWEN controls table to apply to the panel.
     */
    ApplyGWEN(GWENTable: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Centers the panel on its parent.
     * 
     */
    Center(): void;
    
    /**
     * [Client and Menu]
     * 
     * Centers the panel horizontally with specified fraction.
     * @param [fraction = 0.5] - The center fraction.
     */
    CenterHorizontal(fraction = 0.5): void;
    
    /**
     * [Client and Menu]
     * 
     * Centers the panel vertically with specified fraction.
     * @param [fraction = 0.5] - The center fraction.
     */
    CenterVertical(fraction = 0.5): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the amount of children of the of panel.
     * 
     */
    ChildCount(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the width and height of the space between the position of the panel (upper-left corner) and the max bound of the children panels (farthest reaching lower-right corner).
     * 
     */
    ChildrenSize(): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Marks all of the panel's children for deletion.
     * 
     */
    Clear(): void;
    
    /**
     * [Client and Menu]
     * 
     * Fades panels color to specified one. It won't work unless panel has SetColor function.
     * @param color - The color to fade to
     * @param length - Length of the animation
     * @param delay - Delay before start fading
     * @param callback - Function to execute when finished
     */
    ColorTo(color: any, length: number, delay: number, callback: Function): void;
    
    /**
     * [Client and Menu]
     * 
     * Updates a panel object's associated console variable. This must first be set up with [Global.Derma_Install_Convar_Functions](https://wiki.facepunch.com/gmod/Global.Derma_Install_Convar_Functions), and have a ConVar set using [Panel:SetConVar](https://wiki.facepunch.com/gmod/Panel:SetConVar).
     * @param newValue - The new value to set the associated console variable to.
     */
    ConVarChanged(newValue: string): void;
    
    /**
     * [Client and Menu]
     * 
     * A think hook for [Panel](https://wiki.facepunch.com/gmod/Panel)s using ConVars as a value. Call it in the Think hook. Sets the panel's value should the convar change.
     * 
     * This function is best for: checkboxes, sliders, number wangs
     * 
     * For a string alternative, see [Panel:ConVarStringThink](https://wiki.facepunch.com/gmod/Panel:ConVarStringThink).
     * 
     * **Note:**
     * >Make sure your Panel has a SetValue function, else you may get errors.
     * 
     * 
     */
    ConVarNumberThink(): void;
    
    /**
     * [Client and Menu]
     * 
     * A think hook for <page text="panels">Panel</page> using ConVars as a value. Call it in the Think hook. Sets the panel's value should the convar change.
     * 
     * This function is best for: text inputs, read-only inputs, dropdown selects
     * 
     * For a number alternative, see [Panel:ConVarNumberThink](https://wiki.facepunch.com/gmod/Panel:ConVarNumberThink).
     * 
     * **Note:**
     * >Make sure your Panel has a SetValue function, else you may get errors.
     * 
     * 
     */
    ConVarStringThink(): void;
    
    /**
     * [Client and Menu]
     * 
     * Gets the size, position and dock state of the passed panel object, and applies it to this one.
     * @param srcPanel - The panel to copy the boundary and dock settings from.
     */
    CopyBase(srcPanel: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Copies position and size of the panel.
     * @param base - The panel to copy size and position from.
     */
    CopyBounds(base: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Copies the height of the panel.
     * @param base - Panel to copy the height from.
     */
    CopyHeight(base: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Copies the position of the panel.
     * @param base - Panel to position the width from.
     */
    CopyPos(base: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Performs the <key>CONTROL</key> + <key>C</key> key combination effect ( Copy selection to clipboard ) on selected text in a [TextEntry](https://wiki.facepunch.com/gmod/TextEntry) or [RichText](https://wiki.facepunch.com/gmod/RichText) based element.
     * 
     */
    CopySelected(): void;
    
    /**
     * [Client and Menu]
     * 
     * Copies the width of the panel.
     * @param base - Panel to copy the width from.
     */
    CopyWidth(base: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the cursor position relative to the top left of the panel.
     * 
     * This is equivalent to calling [gui.MousePos](https://wiki.facepunch.com/gmod/gui.MousePos) and then [Panel:ScreenToLocal](https://wiki.facepunch.com/gmod/Panel:ScreenToLocal).
     * 
     * **Warning:**
     * >This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass.
     * 
     * ie. inaccurate results may be returned if the panel or any of its ancestors have been repositioned outside of [PANEL:Think](https://wiki.facepunch.com/gmod/PANEL:Think) or [PANEL:PerformLayout](https://wiki.facepunch.com/gmod/PANEL:PerformLayout) within the last frame.
     * 
     * 
     */
    CursorPos(): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Performs the <key>CONTROL</key> + <key>X</key> (delete text and copy it to clipboard buffer) action on selected text in a [TextEntry](https://wiki.facepunch.com/gmod/TextEntry) or [RichText](https://wiki.facepunch.com/gmod/RichText) based element.
     * 
     */
    CutSelected(): void;
    
    /**
     * [Client and Menu]
     * 
     * Deletes a cookie value using the panel's cookie name ( [Panel:GetCookieName](https://wiki.facepunch.com/gmod/Panel:GetCookieName) ) and the passed extension.
     * @param cookieName - The unique cookie name to delete.
     */
    DeleteCookie(cookieName: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Resets the panel object's [Panel:SetPos](https://wiki.facepunch.com/gmod/Panel:SetPos) method and removes its animation table (`Panel.LerpAnim`). This effectively undoes the changes made by [Panel:LerpPositions](https://wiki.facepunch.com/gmod/Panel:LerpPositions).
     * 
     * In order to use Lerp animation again, you must call [Panel:Stop](https://wiki.facepunch.com/gmod/Panel:Stop) before setting its `SetPosReal` property to `nil`. See the example below.
     * 
     */
    DisableLerp(): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the linear distance from the center of this panel object and another. **Both panels must have the same parent for this function to work properly.**
     * @param tgtPanel - The target object with which to compare position.
     */
    Distance(tgtPanel: Panel): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the distance between the center of this panel object and a specified point **local to the parent panel**.
     * @param posX - The horizontal (x) position in pixels of the point to compare with. Local to the parent panel, or container, not the panel the function is called on.
     * @param posY - The vertical (y) position in pixels of the point to compare with. Local to the parent panel, or container, not the panel the function is called on.
     */
    DistanceFrom(posX: number, posY: number): number;
    
    /**
     * [Client and Menu]
     * 
     * Sets the dock type for the panel, making the panel "dock" in a certain direction, modifying it's position and size.
     * 
     * You can set the inner spacing of a panel's docking using [Panel:DockPadding](https://wiki.facepunch.com/gmod/Panel:DockPadding), which will affect docked child panels, and you can set the outer spacing of a panel's docking using [Panel:DockMargin](https://wiki.facepunch.com/gmod/Panel:DockMargin), which affects how docked siblings are positioned/sized.
     * 
     * You may need to use [Panel:SetZPos](https://wiki.facepunch.com/gmod/Panel:SetZPos) to ensure child panels ([DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry)) stay in a specific order.
     * 
     * **Note:**
     * >After using this function, if you want to get the correct panel's bounds (position, size), use [Panel:InvalidateParent](https://wiki.facepunch.com/gmod/Panel:InvalidateParent) (use `true` as argument if you need to update immediately)
     * 
     * @param dockType - Dock type using [Enums/DOCK](https://wiki.facepunch.com/gmod/Enums/DOCK).
     */
    Dock(dockType: DOCK): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the dock margin of the panel.
     * 
     * The dock margin is the extra space that will be left around the edge when this element is docked inside its parent element.
     * @param marginLeft - The left margin to the parent.
     * @param marginTop - The top margin to the parent.
     * @param marginRight - The right margin to the parent.
     * @param marginBottom - The bottom margin to the parent.
     */
    DockMargin(marginLeft: number, marginTop: number, marginRight: number, marginBottom: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the dock padding of the panel.
     * 
     * The dock padding is the extra space that will be left around the edge when child elements are docked inside this element.
     * @param paddingLeft - The left padding to the parent.
     * @param paddingTop - The top padding to the parent.
     * @param paddingRight - The right padding to the parent.
     * @param paddingBottom - The bottom padding to the parent.
     */
    DockPadding(paddingLeft: number, paddingTop: number, paddingRight: number, paddingBottom: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Makes the panel "lock" the screen until it is removed. All input will be directed to the given panel.
     * 
     * It will silently fail if used while cursor is not visible.
     * Call [Panel:MakePopup](https://wiki.facepunch.com/gmod/Panel:MakePopup) before calling this function.
     * This must be called on a panel derived from [EditablePanel](https://wiki.facepunch.com/gmod/EditablePanel).
     * 
     */
    DoModal(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called by [Panel:DragMouseRelease](https://wiki.facepunch.com/gmod/Panel:DragMouseRelease) when a user clicks one mouse button whilst dragging with another.
     * 
     */
    DragClick(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Called by [dragndrop.HoverThink](https://wiki.facepunch.com/gmod/dragndrop.HoverThink) to perform actions on an object that is dragged and hovered over another.
     * @param HoverTime - If this time is greater than 0.1, [PANEL:DragHoverClick](https://wiki.facepunch.com/gmod/PANEL:DragHoverClick) is called, passing it as an argument.
     */
    DragHover(HoverTime: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Called to end a drag and hover action. This resets the panel's [PANEL:PaintOver](https://wiki.facepunch.com/gmod/PANEL:PaintOver) method, and is primarily used by [dragndrop.StopDragging](https://wiki.facepunch.com/gmod/dragndrop.StopDragging).
     * 
     */
    DragHoverEnd(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called to inform the [dragndrop](https://wiki.facepunch.com/gmod/dragndrop) that a mouse button is being held down on a panel object.
     * @param mouseCode - The code for the mouse button pressed, passed by, for example, [PANEL:OnMousePressed](https://wiki.facepunch.com/gmod/PANEL:OnMousePressed). See the [Enums/MOUSE](https://wiki.facepunch.com/gmod/Enums/MOUSE).
     */
    DragMousePress(mouseCode: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Called to inform the [dragndrop](https://wiki.facepunch.com/gmod/dragndrop) that a mouse button has been depressed on a panel object.
     * @param mouseCode - The code for the mouse button pressed, passed by, for example, [PANEL:OnMouseReleased](https://wiki.facepunch.com/gmod/PANEL:OnMouseReleased). See the [Enums/MOUSE](https://wiki.facepunch.com/gmod/Enums/MOUSE).
     */
    DragMouseRelease(mouseCode: number): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Called to draw the drop target when an object is being dragged across another. See [Panel:SetDropTarget](https://wiki.facepunch.com/gmod/Panel:SetDropTarget).
     * @param x - The x coordinate of the top-left corner of the drop area.
     * @param y - The y coordinate of the top-left corner of the drop area.
     * @param width - The width of the drop area.
     * @param height - The height of the drop area.
     */
    DrawDragHover(x: number, y: number, width: number, height: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Draws a coloured rectangle to fill the panel object this method is called on. The colour is set using [surface.SetDrawColor](https://wiki.facepunch.com/gmod/surface.SetDrawColor). This should only be called within the object's [PANEL:Paint](https://wiki.facepunch.com/gmod/PANEL:Paint) or [PANEL:PaintOver](https://wiki.facepunch.com/gmod/PANEL:PaintOver) hooks, as a shortcut for [surface.DrawRect](https://wiki.facepunch.com/gmod/surface.DrawRect).
     * 
     */
    DrawFilledRect(): void;
    
    /**
     * [Client and Menu]
     * 
     * Draws a hollow rectangle the size of the panel object this method is called on, with a border width of 1 px. The border colour is set using [surface.SetDrawColor](https://wiki.facepunch.com/gmod/surface.SetDrawColor). This should only be called within the object's [PANEL:Paint](https://wiki.facepunch.com/gmod/PANEL:Paint) or [PANEL:PaintOver](https://wiki.facepunch.com/gmod/PANEL:PaintOver) hooks, as a shortcut for [surface.DrawOutlinedRect](https://wiki.facepunch.com/gmod/surface.DrawOutlinedRect).
     * 
     */
    DrawOutlinedRect(): void;
    
    /**
     * [Client and Menu]
     * 
     * Used to draw the magenta highlight colour of a panel object when it is selected. This should be called in the object's [PANEL:PaintOver](https://wiki.facepunch.com/gmod/PANEL:PaintOver) hook. Once this is implemented, the highlight colour will be displayed only when the object is selectable and selected. This is achieved using [Panel:SetSelectable](https://wiki.facepunch.com/gmod/Panel:SetSelectable) and [Panel:SetSelected](https://wiki.facepunch.com/gmod/Panel:SetSelected) respectively.
     * 
     */
    DrawSelections(): void;
    
    /**
     * [Client and Menu]
     * 
     * Used to draw the text in a [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry) within a derma skin. This should be called within the [SKIN:PaintTextEntry](https://wiki.facepunch.com/gmod/SKIN:PaintTextEntry) skin hook.
     * 
     * **Note:**
     * >Will silently fail if any of arguments are not [Color](https://wiki.facepunch.com/gmod/Color).
     * 
     * @param textCol - The colour of the main text.
     * @param highlightCol - The colour of the selection highlight (when selecting text).
     * @param cursorCol - The colour of the text cursor (or caret).
     */
    DrawTextEntryText(textCol: any, highlightCol: any, cursorCol: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Draws a textured rectangle to fill the panel object this method is called on. The texture is set using [surface.SetTexture](https://wiki.facepunch.com/gmod/surface.SetTexture) or [surface.SetMaterial](https://wiki.facepunch.com/gmod/surface.SetMaterial). This should only be called within the object's [PANEL:Paint](https://wiki.facepunch.com/gmod/PANEL:Paint) or [PANEL:PaintOver](https://wiki.facepunch.com/gmod/PANEL:PaintOver) hooks, as a shortcut for [surface.DrawTexturedRect](https://wiki.facepunch.com/gmod/surface.DrawTexturedRect).
     * 
     */
    DrawTexturedRect(): void;
    
    /**
     * [Client and Menu]
     * 
     * Makes this panel droppable. This is used with [Panel:Receiver](https://wiki.facepunch.com/gmod/Panel:Receiver) to create drag and drop events.
     * 
     * Can be called multiple times with different names allowing to be dropped onto different receivers.
     * @param name - Name of your droppable panel
     */
    Droppable(name: string): any;
    
    /**
     * [Client and Menu]
     * 
     * Completes a box selection. If the end point of the selection box is within the selection canvas, mouse capture is disabled for the panel object, and the selected state of each child object within the selection box is toggled.
     * 
     */
    EndBoxSelection(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Used to run commands within a [DHTML](https://wiki.facepunch.com/gmod/DHTML) window.
     * @param cmd - The command to be run.
     */
    Exec(cmd: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Finds a panel in its children(and sub children) with the given name.
     * @param panelName - The name of the panel that should be found.
     */
    Find(panelName: string): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Focuses the next panel in the focus queue.
     * 
     */
    FocusNext(): void;
    
    /**
     * [Client and Menu]
     * 
     * Focuses the previous panel in the focus queue.
     * 
     */
    FocusPrevious(): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the alpha multiplier for this panel.
     * 
     */
    GetAlpha(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the background color of a panel such as a [RichText](https://wiki.facepunch.com/gmod/RichText), [Label](https://wiki.facepunch.com/gmod/Label) or [DColorCube](https://wiki.facepunch.com/gmod/DColorCube).
     * 
     * **Note:**
     * >This doesn't apply to all VGUI elements and its function varies between them
     * 
     * 
     */
    GetBGColor(): Color;
    
    /**
     * [Client and Menu]
     * 
     * Returns the position and size of the panel.
     * 
     * This is equivalent to calling [Panel:GetPos](https://wiki.facepunch.com/gmod/Panel:GetPos) and [Panel:GetSize](https://wiki.facepunch.com/gmod/Panel:GetSize) together.
     * 
     */
    GetBounds(): LuaMultiReturn<[number, number, number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Returns the position/offset of the caret (or text cursor) in a text-based panel object.
     * 
     */
    GetCaretPos(): number;
    
    /**
     * [Client and Menu]
     * 
     * Gets a child by its index. For use with [Panel:ChildCount](https://wiki.facepunch.com/gmod/Panel:ChildCount).
     * @param childIndex - The index of the child to get.
     * **Note:**
     * >This index starts at 0, except when you use this on a [DMenu](https://wiki.facepunch.com/gmod/DMenu).
     * 
     */
    GetChild(childIndex: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Gets a child object's position relative to this panel object. The number of levels is not relevant; the child may have many parents between itself and the object on which the method is called.
     * @param pnl - The panel to get the position of.
     */
    GetChildPosition(pnl: Panel): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Returns a table with all the child panels of the panel.
     * 
     */
    GetChildren(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns a table of all visible, selectable children of the panel object that lie at least partially within the specified rectangle.
     * @param x - The horizontal (x) position of the top-left corner of the rectangle, relative to the panel object.
     * @param y - The vertical (y) position of the top-left corner of the rectangle, relative to the panel object.
     * @param w - The width of the rectangle.
     * @param h - The height of the rectangle.
     */
    GetChildrenInRect(x: number, y: number, w: number, h: number): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns the class name of the panel.
     * 
     */
    GetClassName(): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns the child of this panel object that is closest to the specified point. The point is relative to the object on which the method is called. The distance the child is from this point is also returned.
     * @param x - The horizontal (x) position of the point.
     * @param y - The vertical (y) position of the point.
     */
    GetClosestChild(x: number, y: number): LuaMultiReturn<[Panel, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Gets the size of the content/children within a panel object.
     * 
     * Only works with [Label](https://wiki.facepunch.com/gmod/Label) derived panels by default such as [DLabel](https://wiki.facepunch.com/gmod/DLabel).
     * 
     * Will also work on any panel that manually implements this method.
     * 
     */
    GetContentSize(): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Gets the value of a cookie stored by the panel object. This can also be done with [cookie.GetString](https://wiki.facepunch.com/gmod/cookie.GetString), using the panel's cookie name, a fullstop, and then the actual name of the cookie.
     * 
     * Make sure the panel's cookie name has not changed since writing, or the cookie will not be accessible. This can be done with [Panel:GetCookieName](https://wiki.facepunch.com/gmod/Panel:GetCookieName) and [Panel:SetCookieName](https://wiki.facepunch.com/gmod/Panel:SetCookieName).
     * @param cookieName - The name of the cookie from which to retrieve the value.
     * @param default_ - The default value to return if the cookie does not exist.
     */
    GetCookie(cookieName: string, default_: string): string;
    
    /**
     * [Client and Menu]
     * 
     * Gets the name the panel uses to store cookies. This is set with [Panel:SetCookieName](https://wiki.facepunch.com/gmod/Panel:SetCookieName).
     * 
     */
    GetCookieName(): string;
    
    /**
     * [Client and Menu]
     * 
     * Gets the value of a cookie stored by the panel object, as a number. This can also be done with [cookie.GetNumber](https://wiki.facepunch.com/gmod/cookie.GetNumber), using the panel's cookie name, a fullstop, and then the actual name of the cookie.
     * 
     * Make sure the panel's cookie name has not changed since writing, or the cookie will not be accessible. This can be done with [Panel:GetCookieName](https://wiki.facepunch.com/gmod/Panel:GetCookieName) and [Panel:SetCookieName](https://wiki.facepunch.com/gmod/Panel:SetCookieName).
     * @param cookieName - The name of the cookie from which to retrieve the value.
     * @param default_ - The default value to return if the cookie does not exist.
     */
    GetCookieNumber(cookieName: string, default_: number): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns a dock enum for the panel's current docking type.
     * 
     */
    GetDock(): DOCK;
    
    /**
     * [Client and Menu]
     * 
     * Returns the docked margins of the panel. (set by [Panel:DockMargin](https://wiki.facepunch.com/gmod/Panel:DockMargin))
     * 
     */
    GetDockMargin(): LuaMultiReturn<[number, number, number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Returns the docked padding of the panel. (set by [Panel:DockPadding](https://wiki.facepunch.com/gmod/Panel:DockPadding))
     * 
     */
    GetDockPadding(): LuaMultiReturn<[number, number, number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Returns the foreground color of the panel.
     * 
     * For a [Label](https://wiki.facepunch.com/gmod/Label) or [RichText](https://wiki.facepunch.com/gmod/RichText), this is the color of its text.
     * 
     * **Note:**
     * >This doesn't apply to all VGUI elements (such as [DLabel](https://wiki.facepunch.com/gmod/DLabel)) and its function varies between them
     * 
     * 
     */
    GetFGColor(): Color;
    
    /**
     * [Client and Menu]
     * 
     * Returns the name of the font that the panel renders its text with.
     * 
     * This is the same font name set with [Panel:SetFontInternal](https://wiki.facepunch.com/gmod/Panel:SetFontInternal).
     * 
     * **Note:**
     * >Only works on [Label](https://wiki.facepunch.com/gmod/Label) and [TextEntry](https://wiki.facepunch.com/gmod/TextEntry) and their derived panels by default (such as [DLabel](https://wiki.facepunch.com/gmod/DLabel) and [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry)), and on any panel that manually implemented the [Panel:GetFont](https://wiki.facepunch.com/gmod/Panel:GetFont) method.
     * 
     * 
     */
    GetFont(): string;
    
    /**
     * [Client]
     * 
     * Returns the panel's HTML material. Only works with [Awesomium](https://wiki.facepunch.com/gmod/Awesomium), [HTML](https://wiki.facepunch.com/gmod/HTML) and [DHTML](https://wiki.facepunch.com/gmod/DHTML) panels that have been fully loaded.
     * 
     */
    GetHTMLMaterial(): IMaterial;
    
    /**
     * [Client and Menu]
     * 
     * Returns the height of a single line of a [RichText](https://wiki.facepunch.com/gmod/RichText) panel.
     * 
     */
    GetLineHeight(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the current maximum character count.
     * 
     * This function will only work on [RichText](https://wiki.facepunch.com/gmod/RichText) and [TextEntry](https://wiki.facepunch.com/gmod/TextEntry) panels and their derivatives.
     * 
     */
    GetMaximumCharCount(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the internal name of the panel. Can be set via [Panel:SetName](https://wiki.facepunch.com/gmod/Panel:SetName).
     * 
     */
    GetName(): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns the number of lines in a [RichText](https://wiki.facepunch.com/gmod/RichText) or a [TextEntry](https://wiki.facepunch.com/gmod/TextEntry).
     * 
     * You must wait a couple frames before calling this after using [Panel:AppendText](https://wiki.facepunch.com/gmod/Panel:AppendText) or [Panel:SetText](https://wiki.facepunch.com/gmod/Panel:SetText), otherwise it will return the number of text lines before the text change.
     * 
     */
    GetNumLines(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the parent of the panel, returns nil if there is no parent.
     * 
     */
    GetParent(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Returns the position of the panel relative to its [Panel:GetParent](https://wiki.facepunch.com/gmod/Panel:GetParent).
     * 
     * If you require the panel's position **and** size, consider using [Panel:GetBounds](https://wiki.facepunch.com/gmod/Panel:GetBounds) instead.
     * 
     * If you need the position in screen space, see [Panel:LocalToScreen](https://wiki.facepunch.com/gmod/Panel:LocalToScreen).
     * 
     * See also [Panel:GetX](https://wiki.facepunch.com/gmod/Panel:GetX) and [Panel:GetY](https://wiki.facepunch.com/gmod/Panel:GetY).
     * 
     */
    GetPos(): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Returns the vertical and horizontal start indexes of a [TextEntry](https://wiki.facepunch.com/gmod/TextEntry)'s visible text. This is useful when the panel is scrolled.
     * 
     */
    GetScrollStartIndexes(): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Returns a table of all children of the panel object that are selected. This is recursive, and the returned table will include tables for any child objects that also have children. This means that not all first-level members in the returned table will be of type [Panel](https://wiki.facepunch.com/gmod/Panel).
     * 
     */
    GetSelectedChildren(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns the currently selected range of text.
     * 
     * This function will only work on [RichText](https://wiki.facepunch.com/gmod/RichText) and [TextEntry](https://wiki.facepunch.com/gmod/TextEntry) panels and their derivatives.
     * 
     */
    GetSelectedTextRange(): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Returns the panel object (`self`) if it has been enabled as a selection canvas. This is achieved using [Panel:SetSelectionCanvas](https://wiki.facepunch.com/gmod/Panel:SetSelectionCanvas).
     * 
     */
    GetSelectionCanvas(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Returns the size of the panel.
     * 
     * If you require both the panel's position and size, consider using [Panel:GetBounds](https://wiki.facepunch.com/gmod/Panel:GetBounds) instead.
     * 
     */
    GetSize(): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Returns the table for the derma skin currently being used by this panel object.
     * 
     */
    GetSkin(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns the internal Lua table of the panel.
     * 
     */
    GetTable(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns the height of the panel.
     * 
     * See [Panel:GetWide](https://wiki.facepunch.com/gmod/Panel:GetWide) for the width of the panel. See also [Panel:GetSize](https://wiki.facepunch.com/gmod/Panel:GetSize) for a function that returns both.
     * 
     */
    GetTall(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the panel's text (where applicable).
     * 
     * This method returns a maximum of 1023 bytes, except for [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry).
     * 
     */
    GetText(): string;
    
    /**
     * [Client and Menu]
     * 
     * Gets the left and top text margins of a text-based panel object, such as a [DButton](https://wiki.facepunch.com/gmod/DButton) or [DLabel](https://wiki.facepunch.com/gmod/DLabel). This is set with [Panel:SetTextInset](https://wiki.facepunch.com/gmod/Panel:SetTextInset).
     * 
     */
    GetTextInset(): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Gets the size of the text within a [Label](https://wiki.facepunch.com/gmod/Label) derived panel.
     * 
     */
    GetTextSize(): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Returns the tooltip text that was set with [PANEL:SetTooltip](https://wiki.facepunch.com/gmod/PANEL:SetTooltip).
     * 
     */
    GetTooltip(): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns the tooltip delay (time between hovering over the panel, and the tooltip showing up) that was set with [Panel:SetTooltipDelay](https://wiki.facepunch.com/gmod/Panel:SetTooltipDelay), or nothing if it was not set.
     * 
     * If the delay is not explicitly set by this function, it will fallback to the value of the `tooltip_delay` [ConVar](https://wiki.facepunch.com/gmod/ConVar), which is `0.5` by default.
     * 
     */
    GetTooltipDelay(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the tooltip panel that was set with [PANEL:SetTooltipPanel](https://wiki.facepunch.com/gmod/PANEL:SetTooltipPanel).
     * 
     */
    GetTooltipPanel(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Gets valid receiver slot of currently dragged panel.
     * 
     */
    GetValidReceiverSlot(): LuaMultiReturn<[Panel, any]>;
    
    /**
     * [Client and Menu]
     * 
     * Returns the value the panel holds.
     * 
     * In engine is only implemented for [CheckButton](https://wiki.facepunch.com/gmod/CheckButton), [Label](https://wiki.facepunch.com/gmod/Label) and [TextEntry](https://wiki.facepunch.com/gmod/TextEntry) as a string.
     * 
     * **Note:**
     * >This function is limited to 8092 Bytes. If using [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry), use [Panel:GetText](https://wiki.facepunch.com/gmod/Panel:GetText) for unlimited bytes.
     * 
     * 
     */
    GetValue(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns the width of the panel.
     * 
     * See [Panel:GetTall](https://wiki.facepunch.com/gmod/Panel:GetTall) for the height of the panel. See also [Panel:GetSize](https://wiki.facepunch.com/gmod/Panel:GetSize) for a function that returns both.
     * 
     */
    GetWide(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the X position of the panel relative to its [Panel:GetParent](https://wiki.facepunch.com/gmod/Panel:GetParent).
     * 
     * Uses [Panel:GetPos](https://wiki.facepunch.com/gmod/Panel:GetPos) internally.
     * 
     */
    GetX(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the Y position of the panel relative to its [Panel:GetParent](https://wiki.facepunch.com/gmod/Panel:GetParent).
     * 
     * Uses [Panel:GetPos](https://wiki.facepunch.com/gmod/Panel:GetPos) internally.
     * 
     */
    GetY(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the Z position of the panel.
     * 
     */
    GetZPos(): number;
    
    /**
     * [Client and Menu]
     * 
     * Goes back one page in the HTML panel's history if available.
     * 
     */
    GoBack(): void;
    
    /**
     * [Client and Menu]
     * 
     * Goes forward one page in the HTML panel's history if available.
     * 
     */
    GoForward(): void;
    
    /**
     * [Client and Menu]
     * 
     * Goes to the page in the HTML panel's history at the specified relative offset.
     * @param offset - The offset in the panel's back/forward history, relative to the current page, that you would like to skip to. Because this is relative, 0 = current page while negative goes back and positive goes forward. For example, -2 will go back 2 pages in the history.
     */
    GoToHistoryOffset(offset: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Causes a [RichText](https://wiki.facepunch.com/gmod/RichText) element to scroll to the bottom of its text.
     * 
     */
    GotoTextEnd(): void;
    
    /**
     * [Client and Menu]
     * 
     * Causes a [RichText](https://wiki.facepunch.com/gmod/RichText) element to scroll to the top of its text.
     * 
     */
    GotoTextStart(): void;
    
    /**
     * [Client and Menu]
     * 
     * Used by [Panel:ApplyGWEN](https://wiki.facepunch.com/gmod/Panel:ApplyGWEN) to apply the `CheckboxText` property to a [DCheckBoxLabel](https://wiki.facepunch.com/gmod/DCheckBoxLabel). This does exactly the same as [Panel:GWEN_SetText](https://wiki.facepunch.com/gmod/Panel:GWEN_SetText), but exists to cater for the seperate GWEN properties.
     * @param txt - The text to be applied to the DCheckBoxLabel.
     */
    GWEN_SetCheckboxText(txt: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Used by [Panel:ApplyGWEN](https://wiki.facepunch.com/gmod/Panel:ApplyGWEN) to apply the `ControlName` property to a panel. This calls [Panel:SetName](https://wiki.facepunch.com/gmod/Panel:SetName).
     * @param name - The new name to apply to the panel.
     */
    GWEN_SetControlName(name: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Used by [Panel:ApplyGWEN](https://wiki.facepunch.com/gmod/Panel:ApplyGWEN) to apply the `Dock` property to a  panel object. This calls [Panel:Dock](https://wiki.facepunch.com/gmod/Panel:Dock).
     * @param dockState - The dock mode to pass to the panel's `Dock` method. This reads a string and applies the approriate [Enums/DOCK](https://wiki.facepunch.com/gmod/Enums/DOCK).
     * * `Right`: Dock right.
     * * `Left`: Dock left.
     * * `Bottom`: Dock at the bottom.
     * * `Top`: Dock at the top.
     * * `Fill`: Fill the parent panel.
     */
    GWEN_SetDock(dockState: DOCK): void;
    
    /**
     * [Client and Menu]
     * 
     * Used by [Panel:ApplyGWEN](https://wiki.facepunch.com/gmod/Panel:ApplyGWEN) to apply the `HorizontalAlign` property to a  panel object. This calls [Panel:SetContentAlignment](https://wiki.facepunch.com/gmod/Panel:SetContentAlignment).
     * @param hAlign - The alignment, as a string, to pass to [Panel:SetContentAlignment](https://wiki.facepunch.com/gmod/Panel:SetContentAlignment). Accepts:
     * * `Right`: Align mid-right.
     * * `Left`: Align mid-left.
     * * `Center`: Align mid-center.
     */
    GWEN_SetHorizontalAlign(hAlign: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Used by [Panel:ApplyGWEN](https://wiki.facepunch.com/gmod/Panel:ApplyGWEN) to apply the `Margin` property to a  panel object. This calls [Panel:DockMargin](https://wiki.facepunch.com/gmod/Panel:DockMargin).
     * @param margins - A four-membered table containing the margins as numbers:
     * * [number](https://wiki.facepunch.com/gmod/number) left - The left margin.
     * * [number](https://wiki.facepunch.com/gmod/number) top - The top margin.
     * * [number](https://wiki.facepunch.com/gmod/number) right - The right margin.
     * * [number](https://wiki.facepunch.com/gmod/number) bottom - The bottom margin.
     */
    GWEN_SetMargin(margins: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Used by [Panel:ApplyGWEN](https://wiki.facepunch.com/gmod/Panel:ApplyGWEN) to apply the `Max` property to a  [DNumberWang](https://wiki.facepunch.com/gmod/DNumberWang), [Slider](https://wiki.facepunch.com/gmod/Slider), [DNumSlider](https://wiki.facepunch.com/gmod/DNumSlider) or [DNumberScratch](https://wiki.facepunch.com/gmod/DNumberScratch). This calls `SetMax` on one of the previously listed methods.
     * @param maxValue - The maximum value the element is to permit.
     */
    GWEN_SetMax(maxValue: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Used by [Panel:ApplyGWEN](https://wiki.facepunch.com/gmod/Panel:ApplyGWEN) to apply the `Min` property to a  [DNumberWang](https://wiki.facepunch.com/gmod/DNumberWang), [Slider](https://wiki.facepunch.com/gmod/Slider), [DNumSlider](https://wiki.facepunch.com/gmod/DNumSlider) or [DNumberScratch](https://wiki.facepunch.com/gmod/DNumberScratch). This calls `SetMin` on one of the previously listed methods.
     * @param minValue - The minimum value the element is to permit.
     */
    GWEN_SetMin(minValue: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Used by [Panel:ApplyGWEN](https://wiki.facepunch.com/gmod/Panel:ApplyGWEN) to apply the `Position` property to a  panel object. This calls [Panel:SetPos](https://wiki.facepunch.com/gmod/Panel:SetPos).
     * @param pos - A two-membered table containing the x and y coordinates as numbers:
     * * [number](https://wiki.facepunch.com/gmod/number) x - The x coordinate.
     * * [number](https://wiki.facepunch.com/gmod/number) y - The y coordinate.
     */
    GWEN_SetPosition(pos: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Used by [Panel:ApplyGWEN](https://wiki.facepunch.com/gmod/Panel:ApplyGWEN) to apply the `Size` property to a  panel object. This calls [Panel:SetSize](https://wiki.facepunch.com/gmod/Panel:SetSize).
     * @param size - A two-membered table containing the width and heights as numbers:
     * * [number](https://wiki.facepunch.com/gmod/number) w - The width.
     * * [number](https://wiki.facepunch.com/gmod/number) h - The height.
     */
    GWEN_SetSize(size: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Used by [Panel:ApplyGWEN](https://wiki.facepunch.com/gmod/Panel:ApplyGWEN) to apply the `Text` property to a panel.
     * @param txt - The text to be applied to the panel.
     */
    GWEN_SetText(txt: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns whenever the panel has child panels.
     * 
     */
    HasChildren(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns if the panel is focused.
     * 
     */
    HasFocus(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns if the panel or any of its children(sub children and so on) has the focus.
     * 
     */
    HasHierarchicalFocus(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the panel is a descendent of the given panel.
     * @param parentPanel - 
     */
    HasParent(parentPanel: Panel): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Makes a panel invisible.
     * 
     */
    Hide(): void;
    
    /**
     * [Client and Menu]
     * 
     * Marks the end of a clickable text segment in a [RichText](https://wiki.facepunch.com/gmod/RichText) element, started with [Panel:InsertClickableTextStart](https://wiki.facepunch.com/gmod/Panel:InsertClickableTextStart).
     * 
     */
    InsertClickableTextEnd(): void;
    
    /**
     * [Client and Menu]
     * 
     * Starts the insertion of clickable text for a [RichText](https://wiki.facepunch.com/gmod/RichText) element. Any text appended with [Panel:AppendText](https://wiki.facepunch.com/gmod/Panel:AppendText) between this call and [Panel:InsertClickableTextEnd](https://wiki.facepunch.com/gmod/Panel:InsertClickableTextEnd) will become clickable text.
     * 
     * The hook [PANEL:OnTextClicked](https://wiki.facepunch.com/gmod/PANEL:OnTextClicked) is called when the text is clicked.
     * 
     * **Note:**
     * >The clickable text is a separate Derma panel which will not inherit the current font from the `RichText`.
     * 
     * @param signalValue - The text passed as the action signal's value.
     */
    InsertClickableTextStart(signalValue: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Inserts a color change in a [RichText](https://wiki.facepunch.com/gmod/RichText) element, which affects the color of all text added with [Panel:AppendText](https://wiki.facepunch.com/gmod/Panel:AppendText) until another color change is applied.
     * @param r - The red value `(0 - 255)`.
     * @param g - The green value `(0 - 255)`.
     * @param b - The blue value `(0 - 255)`.
     * @param a - The alpha value `(0 - 255)`.
     */
    InsertColorChange(r: number, g: number, b: number, a: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Begins a text fade for a [RichText](https://wiki.facepunch.com/gmod/RichText) element where the last appended text segment is fully faded out after a specific amount of time, at a specific speed.
     * 
     * The alpha of the text at any given time is determined by the text's base alpha * ((`sustain` - [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime)) / `length`) where [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime) is added to `sustain` when this method is called.
     * @param sustain - The number of seconds the text remains visible.
     * @param length - The number of seconds it takes the text to fade out.
     * If set **lower** than `sustain`, the text will not begin fading out until (`sustain` - `length`) seconds have passed.
     * If set **higher** than `sustain`, the text will begin fading out immediately at a fraction of the base alpha.
     * If set to **-1**, the text doesn't fade out.
     */
    InsertFade(sustain: number, length: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Invalidates the layout of this panel object and all its children. This will cause these objects to re-layout immediately, calling [PANEL:PerformLayout](https://wiki.facepunch.com/gmod/PANEL:PerformLayout). If you want to perform the layout in the next frame, you will have loop manually through all children, and call [Panel:InvalidateLayout](https://wiki.facepunch.com/gmod/Panel:InvalidateLayout) on each.
     * @param [recursive = false] - If `true`, the method will recursively invalidate the layout of all children. Otherwise, only immediate children are affected.
     */
    InvalidateChildren(recursive = false): void;
    
    /**
     * [Client and Menu]
     * 
     * Causes the panel to re-layout in the next frame. During the layout process  [PANEL:PerformLayout](https://wiki.facepunch.com/gmod/PANEL:PerformLayout) will be called on the target panel.
     * 
     * You should avoid calling this function every frame.
     * 
     * **Bug [#2574](https://github.com/Facepunch/garrysmod-issues/issues/2574):**
     * >Using this on a panel after clicking on a docked element will cause docked elements to reorient themselves incorrectly. This can be fixed by assigning a unique [Panel:SetZPos](https://wiki.facepunch.com/gmod/Panel:SetZPos) to each docked element.
     * 
     * @param [layoutNow = false] - If true the panel will re-layout instantly and not wait for the next frame.
     */
    InvalidateLayout(layoutNow = false): void;
    
    /**
     * [Client and Menu]
     * 
     * Calls [Panel:InvalidateLayout](https://wiki.facepunch.com/gmod/Panel:InvalidateLayout) on the panel's <page text="parent">Panel:GetParent</page>. This function will silently fail if the panel has no parent.
     * 
     * This will cause the parent panel to re-layout, calling [PANEL:PerformLayout](https://wiki.facepunch.com/gmod/PANEL:PerformLayout).
     * 
     * Internally sets `LayingOutParent` to `true` on this panel, and will silently fail if it is already set.
     * @param [layoutNow = false] - If `true`, the re-layout will occur immediately, otherwise it will be performed in the next frame.
     */
    InvalidateParent(layoutNow = false): void;
    
    /**
     * [Client and Menu]
     * 
     * Determines whether the mouse cursor is hovered over one of this panel object's children. This is a reverse process using [vgui.GetHoveredPanel](https://wiki.facepunch.com/gmod/vgui.GetHoveredPanel), and looks upward to find the parent.
     * @param [immediate = false] - Set to true to check only the immediate children of given panel ( first level )
     */
    IsChildHovered(immediate = false): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether this panel is draggable ( if user is able to drag it ) or not.
     * 
     */
    IsDraggable(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether this panel is currently being dragged or not.
     * 
     */
    IsDragging(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the the panel is enabled or disabled.
     * 
     * See [Panel:SetEnabled](https://wiki.facepunch.com/gmod/Panel:SetEnabled) for a function that makes the panel enabled or disabled.
     * 
     */
    IsEnabled(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the mouse cursor is hovering over this panel or not
     * 
     * Uses [vgui.GetHoveredPanel](https://wiki.facepunch.com/gmod/vgui.GetHoveredPanel) internally.
     * 
     * Requires [Panel:SetMouseInputEnabled](https://wiki.facepunch.com/gmod/Panel:SetMouseInputEnabled) to be set to true.
     * 
     */
    IsHovered(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns true if the panel can receive keyboard input.
     * 
     */
    IsKeyboardInputEnabled(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Determines whether or not a [HTML](https://wiki.facepunch.com/gmod/HTML) or [DHTML](https://wiki.facepunch.com/gmod/DHTML) element is currently loading a page.
     * 
     * **Note:**
     * >Before calling [Panel:SetHTML](https://wiki.facepunch.com/gmod/Panel:SetHTML) or [DHTML:OpenURL](https://wiki.facepunch.com/gmod/DHTML:OpenURL), the result seems to be `false` with the Awesomium web renderer and `true` for the Chromium web renderer. This difference can be used to determine the available HTML5 capabilities.
     * 
     * **Note:**
     * >On Awesomium, the result remains `true` until the root document is loaded and when in-page content is loading (when adding pictures, frames, etc.). During this state, the HTML texture is not refreshed and the panel is not painted (it becomes invisible).
     * 
     * On Chromium, the value is only `true` when the root document is not ready. The rendering is not suspended when in-page elements are loading.
     * 
     * 
     */
    IsLoading(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns if the panel is going to be deleted in the next frame.
     * 
     */
    IsMarkedForDeletion(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the panel was made modal or not. See [Panel:DoModal](https://wiki.facepunch.com/gmod/Panel:DoModal).
     * 
     */
    IsModal(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns true if the panel can receive mouse input.
     * 
     */
    IsMouseInputEnabled(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Determines whether or not a [TextEntry](https://wiki.facepunch.com/gmod/TextEntry) panel is in multi-line mode. This is set with [Panel:SetMultiline](https://wiki.facepunch.com/gmod/Panel:SetMultiline).
     * 
     */
    IsMultiline(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the panel contains the given panel, recursively.
     * @param childPanel - 
     */
    IsOurChild(childPanel: Panel): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns if the panel was made popup or not. See [Panel:MakePopup](https://wiki.facepunch.com/gmod/Panel:MakePopup)
     * 
     */
    IsPopup(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Determines if the panel object is selectable (like icons in the Spawn Menu, holding <key>Shift</key>). This is set with [Panel:SetSelectable](https://wiki.facepunch.com/gmod/Panel:SetSelectable).
     * 
     */
    IsSelectable(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns if the panel object is selected (like icons in the Spawn Menu, holding <key>Shift</key>). This can be set in Lua using [Panel:SetSelected](https://wiki.facepunch.com/gmod/Panel:SetSelected).
     * 
     */
    IsSelected(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Determines if the panel object is a selection canvas or not. This is set with [Panel:SetSelectionCanvas](https://wiki.facepunch.com/gmod/Panel:SetSelectionCanvas).
     * 
     */
    IsSelectionCanvas(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns if the panel is valid and not marked for deletion.
     * 
     */
    IsValid(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns if the panel is visible. This will **NOT** take into account visibility of the parent.
     * 
     */
    IsVisible(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns if a panel allows world clicking set by [Panel:SetWorldClicker](https://wiki.facepunch.com/gmod/Panel:SetWorldClicker).
     * 
     */
    IsWorldClicker(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Remove the focus from the panel.
     * 
     */
    KillFocus(): void;
    
    /**
     * [Client and Menu]
     * 
     * Redefines the panel object's [Panel:SetPos](https://wiki.facepunch.com/gmod/Panel:SetPos) method to operate using frame-by-frame linear interpolation ([Global.Lerp](https://wiki.facepunch.com/gmod/Global.Lerp)). When the panel's position is changed, it will move to the target position at the speed defined. You can undo this with [Panel:DisableLerp](https://wiki.facepunch.com/gmod/Panel:DisableLerp).
     * 
     * Unlike the other panel animation functions, such as [Panel:MoveTo](https://wiki.facepunch.com/gmod/Panel:MoveTo), this animation method will not operate whilst the game is paused. This is because it relies on [Global.FrameTime](https://wiki.facepunch.com/gmod/Global.FrameTime).
     * @param speed - The speed at which to move the panel. This is affected by the value of `easeOut`. Recommended values are:
     * * **0.1 - 10** when `easeOut` is `false`.
     * * **0.1 - 1** when `easeOut` is `true`.
     * @param easeOut - This causes the panel object to 'jump' at the target, slowing as it approaches. This affects the `speed` value significantly, see above.
     */
    LerpPositions(speed: number, easeOut: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Similar to [Panel:LoadControlsFromString](https://wiki.facepunch.com/gmod/Panel:LoadControlsFromString) but loads controls from a file.
     * @param path - The path to load the controls from.
     */
    LoadControlsFromFile(path: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Loads controls(positions, etc) from given data. This is what the default options menu uses.
     * @param data - The data to load controls from. Format unknown.
     */
    LoadControlsFromString(data: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Loads a .gwen file (created by GWEN Designer) and calls [Panel:LoadGWENString](https://wiki.facepunch.com/gmod/Panel:LoadGWENString) with the contents of the loaded file.
     * 
     * Used to load panel controls from a file.
     * @param filename - The file to open. The path is relative to garrysmod/garrysmod/.
     * @param [path = GAME] - The path used to look up the file.
     * * "GAME" Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)
     * * "LUA" or "lsv" - All Lua folders (lua/) including gamesmodes and addons
     * * "DATA" Data folder (garrysmod/data)
     * * "MOD" Strictly the game folder (garrysmod/), ignores mounting.
     */
    LoadGWENFile(filename: string, path?: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Loads controls for the panel from a JSON string.
     * @param str - JSON string containing information about controls to create.
     */
    LoadGWENString(str: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets a new image to be loaded by a [TGAImage](https://wiki.facepunch.com/gmod/TGAImage).
     * @param imageName - The file path.
     * @param strPath - The PATH to search in. See [File Search Paths](https://wiki.facepunch.com/gmod/File_Search_Paths).
     * This isn't used internally.
     */
    LoadTGAImage(imageName: string, strPath: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the cursor position local to the position of the panel (usually the upper-left corner).
     * 
     */
    LocalCursorPos(): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Gets the absolute screen position of the position specified relative to the panel.
     * 
     * See also [Panel:ScreenToLocal](https://wiki.facepunch.com/gmod/Panel:ScreenToLocal).
     * 
     * **Warning:**
     * >This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass, so inaccurate results may be returned if the panel or any of its ancestors have been re-positioned outside of [PANEL:Think](https://wiki.facepunch.com/gmod/PANEL:Think) or [PANEL:PerformLayout](https://wiki.facepunch.com/gmod/PANEL:PerformLayout) within the last frame.
     * 
     * **Note:**
     * >If the panel uses [Panel:Dock](https://wiki.facepunch.com/gmod/Panel:Dock), this function will return 0, 0 when the panel was created. The position will be updated in the next frame.
     * 
     * @param posX - The X coordinate of the position on the panel to translate.
     * @param posY - The Y coordinate of the position on the panel to translate.
     */
    LocalToScreen(posX: number, posY: number): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Focuses the panel and enables it to receive input.
     * 
     * This automatically calls [Panel:SetMouseInputEnabled](https://wiki.facepunch.com/gmod/Panel:SetMouseInputEnabled) and <page text="Panel:SetKeyboardInputEnabled">Panel:SetKeyboardInputEnabled(lowercase)</page> and sets them to `true`.
     * 
     * **Note:**
     * >Panels derived from [Panel](https://wiki.facepunch.com/gmod/Panel) will not work properly with this function. Due to this, any children will not be intractable with keyboard. Derive from [EditablePanel](https://wiki.facepunch.com/gmod/EditablePanel) instead.
     * 
     * For non gui related mouse focus, you can use [gui.EnableScreenClicker](https://wiki.facepunch.com/gmod/gui.EnableScreenClicker).
     * 
     * 
     */
    MakePopup(): void;
    
    /**
     * [Client and Menu]
     * 
     * Allows the panel to receive mouse input even if the mouse cursor is outside the bounds of the panel.
     * @param doCapture - Set to true to enable, set to false to disable.
     */
    MouseCapture(doCapture: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Places the panel above the passed panel with the specified offset.
     * @param panel - Panel to position relatively to.
     * @param [offset = 0] - The align offset.
     */
    MoveAbove(panel: Panel, offset = 0): void;
    
    /**
     * [Client and Menu]
     * 
     * Places the panel below the passed panel with the specified offset.
     * @param panel - Panel to position relatively to.
     * @param [offset = 0] - The align offset.
     */
    MoveBelow(panel: Panel, offset = 0): void;
    
    /**
     * [Client and Menu]
     * 
     * Moves the panel by the specified coordinates using animation.
     * @param moveX - The number of pixels to move by in the horizontal (x) direction.
     * @param moveY - The number of pixels to move by in the vertical (y) direction.
     * @param time - The time (in seconds) in which to perform the animation.
     * @param [delay = 0] - The delay (in seconds) before the animation begins.
     * @param [ease = -1] - The easing of the start and/or end speed of the animation. See [Panel:NewAnimation](https://wiki.facepunch.com/gmod/Panel:NewAnimation) for how this works.
     * @param [callback = nil] - The function to be called once the animation is complete. Arguments are:
     * * [table](https://wiki.facepunch.com/gmod/table) animData - The [AnimationData that was used.](https://wiki.facepunch.com/gmod/AnimationData_that_was_used.)
     * * [Panel](https://wiki.facepunch.com/gmod/Panel) pnl - The panel object that was moved.
     */
    MoveBy(moveX: number, moveY: number, time: number, delay = 0, ease = -1, callback?: Function): void;
    
    /**
     * [Client and Menu]
     * 
     * Places the panel left to the passed panel with the specified offset.
     * @param panel - Panel to position relatively to.
     * @param [offset = 0] - The align offset.
     */
    MoveLeftOf(panel: Panel, offset = 0): void;
    
    /**
     * [Client and Menu]
     * 
     * Places the panel right to the passed panel with the specified offset.
     * @param panel - Panel to position relatively to.
     * @param [offset = 0] - The align offset.
     */
    MoveRightOf(panel: Panel, offset = 0): void;
    
    /**
     * [Client and Menu]
     * 
     * Moves the panel to the specified position using animation.
     * 
     * **Note:**
     * >Setting the ease argument to 0 will result in the animation happening instantly, this applies to all MoveTo/SizeTo functions
     * 
     * @param posX - The target x coordinate of the panel.
     * @param posY - The target y coordinate of the panel.
     * @param time - The time to perform the animation within.
     * @param [delay = 0] - The delay before the animation starts.
     * @param [ease = -1] - The easing of the start and/or end speed of the animation. See [Panel:NewAnimation](https://wiki.facepunch.com/gmod/Panel:NewAnimation) for how this works.
     * @param callback - The function to be called once the animation finishes. Arguments are:
     * * [table](https://wiki.facepunch.com/gmod/table) animData - The [Structures/AnimationData](https://wiki.facepunch.com/gmod/Structures/AnimationData) that was used.
     * * [Panel](https://wiki.facepunch.com/gmod/Panel) pnl - The panel object that was moved.
     */
    MoveTo(posX: number, posY: number, time: number, delay = 0, ease = -1, callback: Function): void;
    
    /**
     * [Client and Menu]
     * 
     * Moves this panel object in front of the specified sibling (child of the same parent) in the render order, and shuffles up the Z-positions of siblings now behind.
     * @param siblingPanel - The panel to move this one in front of. Must be a child of the same parent panel.
     */
    MoveToAfter(siblingPanel: Panel): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Moves the panel object behind all other panels on screen. If the panel has been made a pop-up with [Panel:MakePopup](https://wiki.facepunch.com/gmod/Panel:MakePopup), it will still draw in front of any panels that haven't.
     * 
     */
    MoveToBack(): void;
    
    /**
     * [Client and Menu]
     * 
     * Moves this panel object behind the specified sibling (child of the same parent) in the render order, and shuffles up the [Panel:SetZPos](https://wiki.facepunch.com/gmod/Panel:SetZPos) of siblings now in front.
     * @param siblingPanel - The panel to move this one behind. Must be a child of the same parent panel.
     */
    MoveToBefore(siblingPanel: Panel): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Moves the panel in front of all other panels on screen. Unless the panel has been made a pop-up using [Panel:MakePopup](https://wiki.facepunch.com/gmod/Panel:MakePopup), it will still draw behind any that have.
     * 
     */
    MoveToFront(): void;
    
    /**
     * [Client and Menu]
     * 
     * Creates a new animation for the panel object.
     * 
     * Methods that use this function:
     * * [Panel:MoveTo](https://wiki.facepunch.com/gmod/Panel:MoveTo)
     * * [Panel:SizeTo](https://wiki.facepunch.com/gmod/Panel:SizeTo)
     * * [Panel:SlideUp](https://wiki.facepunch.com/gmod/Panel:SlideUp)
     * * [Panel:SlideDown](https://wiki.facepunch.com/gmod/Panel:SlideDown)
     * * [Panel:ColorTo](https://wiki.facepunch.com/gmod/Panel:ColorTo)
     * * [Panel:AlphaTo](https://wiki.facepunch.com/gmod/Panel:AlphaTo)
     * * [Panel:MoveBy](https://wiki.facepunch.com/gmod/Panel:MoveBy)
     * * [Panel:LerpPositions](https://wiki.facepunch.com/gmod/Panel:LerpPositions)
     * @param length - The length of the animation in seconds.
     * @param [delay = 0] - The delay before the animation starts.
     * @param [ease = -1] - The power/index to use for easing.
     * * Positive values greater than 1 will ease in; the higher the number, the sharper the curve's gradient (less linear).
     * * A value of 1 removes all easing.
     * * Positive values between 0 and 1 ease out; values closer to 0 increase the curve's gradient (less linear).
     * * A value of 0 will break the animation and should be avoided.
     * * Any value less than zero will ease in/out; the value has no effect on the gradient.
     * @param [callback = nil] - The function to be called when the animation ends. Arguments passed are:
     * * [table](https://wiki.facepunch.com/gmod/table) animTable - The [Structures/AnimationData](https://wiki.facepunch.com/gmod/Structures/AnimationData) that was used.
     * * [Panel](https://wiki.facepunch.com/gmod/Panel) tgtPanel - The panel object that was animated.
     */
    NewAnimation(length: number, delay = 0, ease = -1, callback?: Function): AnimationData;
    
    /**
     * [Client and Menu]
     * 
     * @param objectName - 
     */
    NewObject(objectName: string): void;
    
    /**
     * [Client and Menu]
     * 
     * @param objectName - 
     * @param callbackName - 
     */
    NewObjectCallback(objectName: string, callbackName: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether this panel's drawings should be clipped within the parent panel's bounds.
     * 
     * See also [Global.DisableClipping](https://wiki.facepunch.com/gmod/Global.DisableClipping).
     * @param clip - Whether to clip or not.
     */
    NoClipping(clip: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the number of children of the panel object that are selected. This is equivalent to calling [Panel:IsSelected](https://wiki.facepunch.com/gmod/Panel:IsSelected) on all child objects and counting the number of returns that are `true`.
     * 
     */
    NumSelectedChildren(): number;
    
    /**
     * [Client and Menu]
     * 
     * Instructs a HTML control to download and parse a HTML script using the passed URL.
     * 
     * This function can only be used on [HTML](HTML) panel and its derivatives.
     * @param URL - URL to open. It has to start or be one of the following:
     * * `http://`
     * * `https://`
     * * `asset://`
     * * `about:blank`
     * * `chrome://credits/`
     */
    OpenURL(URL: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Paints a ghost copy of the panel at the given position.
     * 
     * **Warning:**
     * >This function sets Z pos of panel's children ([PANEL:SetZPos](https://wiki.facepunch.com/gmod/PANEL:SetZPos))
     * 
     * @param posX - The x coordinate to draw the panel from.
     * @param posY - The y coordinate to draw the panel from.
     */
    PaintAt(posX: number, posY: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Paints the panel at its current position. To use this you must call [Panel:SetPaintedManually](https://wiki.facepunch.com/gmod/Panel:SetPaintedManually)(true).
     * @param [unclamp = false] - If set, overrides panels' clipping so that it can render fully when its size is larger than the game's resolution.
     */
    PaintManual(unclamp = false): void;
    
    /**
     * [Client]
     * 
     * Parents the panel to the HUD.
     * Makes it invisible on the escape-menu and disables controls.
     * 
     */
    ParentToHUD(): void;
    
    /**
     * [Client and Menu]
     * 
     * @deprecated Due to privacy concerns, this function has been disabled
     * 
     * **Note:**
     * >Tab characters will be dropped from the pasted text
     * 
     * 
     */
    Paste(): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the width and position of a [DLabel](https://wiki.facepunch.com/gmod/DLabel) and places the passed panel object directly to the right of it. Returns the `y` value of the bottom of the tallest object. The panel on which this method is run is not relevant; only the passed objects are affected.
     * @param lblWidth - The width to set the label to.
     * @param x - The horizontal (x) position at which to place the label.
     * @param y - The vertical (y) position at which to place the label.
     * @param lbl - The label to resize and position.
     * @param panelObj - The panel object to place to the right of the label.
     */
    PositionLabel(lblWidth: number, x: number, y: number, lbl: Panel, panelObj: Panel): number;
    
    /**
     * [Client and Menu]
     * 
     * Installs Lua defined functions into the panel.
     * 
     */
    Prepare(): void;
    
    /**
     * [Client and Menu]
     * 
     * Enables the queue for panel animations. If enabled, the next new animation will begin after all current animations have ended. This must be called before [Panel:NewAnimation](https://wiki.facepunch.com/gmod/Panel:NewAnimation) to work, and only applies to the next new animation. If you want to queue many, you must call this before each.
     * 
     */
    Queue(): void;
    
    /**
     * [Client]
     * 
     * Causes a [SpawnIcon](https://wiki.facepunch.com/gmod/SpawnIcon) to rebuild its model image.
     * 
     */
    RebuildSpawnIcon(): void;
    
    /**
     * [Client]
     * 
     * Re-renders a spawn icon with customized cam data.
     * 
     * [Global.PositionSpawnIcon](https://wiki.facepunch.com/gmod/Global.PositionSpawnIcon) can be used to easily calculate the necessary camera parameters.
     * 
     * **Note:**
     * >This function does **not** accept the standard [Structures/CamData](https://wiki.facepunch.com/gmod/Structures/CamData).
     * 
     * @param data - A four-membered table containing the information needed to re-render:
     * * [Vector](https://wiki.facepunch.com/gmod/Vector) cam_pos - The relative camera position the model is viewed from.
     * * [Angle](https://wiki.facepunch.com/gmod/Angle) cam_ang - The camera angle the model is viewed from.
     * * [number](https://wiki.facepunch.com/gmod/number) cam_fov - The camera's field of view (FOV).
     * * [Entity](https://wiki.facepunch.com/gmod/Entity) ent - The entity object of the model.
     * See the example below for how to retrieve these values.
     */
    RebuildSpawnIconEx(data: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Allows the panel to receive drag and drop events. Can be called multiple times with different names to receive multiple different draggable panel events.
     * @param name - Name of DnD panels to receive. This is set on the drag'n'drop-able panels via  [Panel:Droppable](https://wiki.facepunch.com/gmod/Panel:Droppable)
     * @param func - This function is called whenever a panel with valid name is hovering above and dropped on this panel. It has next arguments:
     * * [Panel](https://wiki.facepunch.com/gmod/Panel) pnl - The receiver panel
     * * [table](https://wiki.facepunch.com/gmod/table) tbl - A table of panels dropped onto receiver panel
     * * [boolean](https://wiki.facepunch.com/gmod/boolean) dropped - False if hovering over, true if dropped onto
     * * [number](https://wiki.facepunch.com/gmod/number) menuIndex - Index of clicked menu item from third argument of [Panel:Receiver](https://wiki.facepunch.com/gmod/Panel:Receiver)
     * * [number](https://wiki.facepunch.com/gmod/number) x - Cursor pos, relative to the receiver
     * * [number](https://wiki.facepunch.com/gmod/number) y - Cursor pos, relative to the receiver
     * @param menu - A table of strings that will act as a menu if drag'n'drop was performed with a right click
     */
    Receiver(name: string, func: Function, menu: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Refreshes the HTML panel's current page.
     * @param [ignoreCache = false] - If true, the refresh will ignore cached content similar to "ctrl+f5" in most browsers.
     */
    Refresh(ignoreCache = false): void;
    
    /**
     * [Client and Menu]
     * 
     * Marks a panel for deletion so it will be deleted on the next frame.
     * 
     * This will not mark child panels for deletion this frame, but they will be marked and deleted in the next frame.
     * 
     * See also [Panel:IsMarkedForDeletion](https://wiki.facepunch.com/gmod/Panel:IsMarkedForDeletion)
     * 
     * Will automatically call [Panel:InvalidateParent](https://wiki.facepunch.com/gmod/Panel:InvalidateParent).
     * 
     */
    Remove(): void;
    
    /**
     * [Client and Menu]
     * 
     * Attempts to obtain focus for this panel.
     * 
     */
    RequestFocus(): void;
    
    /**
     * [Client and Menu]
     * 
     * Resets all text fades in a [RichText](https://wiki.facepunch.com/gmod/RichText) element made with [Panel:InsertFade](https://wiki.facepunch.com/gmod/Panel:InsertFade).
     * @param hold - True to reset fades, false otherwise.
     * @param expiredOnly - Any value equating to `true` will reset fades only on text segments that are completely faded out.
     * @param newSustain - The new sustain value of each faded text segment. Set to -1 to keep the old sustain value.
     */
    ResetAllFades(hold: boolean, expiredOnly: boolean, newSustain: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Runs/Executes a string as JavaScript code in a panel.
     * 
     * **Note:**
     * >This function does **NOT** evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).Because a return value is nil/no value (a.k.a. void).If you wish to pass/return values from JS to Lua, you may want to use [DHTML:AddFunction](https://wiki.facepunch.com/gmod/DHTML:AddFunction) function to accomplish that job.
     * 
     * **Note:**
     * >The Awesomium web renderer automatically delays the code execution if the document is not ready, but the Chromium web renderer does not!
     * 
     * This means that with Chromium, you cannot JavaScript run code immediatly after calling [Panel:SetHTML](https://wiki.facepunch.com/gmod/Panel:SetHTML) or [DHTML:OpenURL](https://wiki.facepunch.com/gmod/DHTML:OpenURL). You should wait for the events [PANEL:OnDocumentReady](https://wiki.facepunch.com/gmod/PANEL:OnDocumentReady) or [PANEL:OnFinishLoadingDocument](https://wiki.facepunch.com/gmod/PANEL:OnFinishLoadingDocument) to be triggered before proceeding, otherwise you may manipulate an empty / incomplete document.
     * 
     * @param js - Specify JavaScript code to be executed.
     */
    RunJavascript(js: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Saves the current state (caret position and the text inside) of a [TextEntry](https://wiki.facepunch.com/gmod/TextEntry) as an undo state.
     * 
     * See also [Panel:Undo](https://wiki.facepunch.com/gmod/Panel:Undo).
     * 
     */
    SaveUndoState(): void;
    
    /**
     * [Client and Menu]
     * 
     * Translates global screen coordinate to coordinates relative to the panel.
     * 
     * See also [Panel:LocalToScreen](https://wiki.facepunch.com/gmod/Panel:LocalToScreen).
     * 
     * **Warning:**
     * >This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass, so inaccurate results may be returned if the panel or any of its ancestors have been re-positioned outside of [PANEL:Think](https://wiki.facepunch.com/gmod/PANEL:Think) or [PANEL:PerformLayout](https://wiki.facepunch.com/gmod/PANEL:PerformLayout) within the last frame.
     * 
     * @param screenX - The x coordinate of the screen position to be translated.
     * @param screenY - The y coordinate of the screed position be to translated.
     */
    ScreenToLocal(screenX: number, screenY: number): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Selects all items within a panel or object. For text-based objects, selects all text.
     * 
     * **Note:**
     * >Only works on [RichText](https://wiki.facepunch.com/gmod/RichText) and [TextEntry](https://wiki.facepunch.com/gmod/TextEntry) and their derived panels by default (such as [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry)), and on any panel that manually reimplemented this method.
     * 
     * 
     */
    SelectAll(): void;
    
    /**
     * [Client and Menu]
     * 
     * If called on a [TextEntry](https://wiki.facepunch.com/gmod/TextEntry), clicking the text entry for the first time will automatically select all of the text ready to be copied by the user.
     * 
     */
    SelectAllOnFocus(): void;
    
    /**
     * [Client and Menu]
     * 
     * Selects all the text in a panel object. Will not select non-text items; for this, use [Panel:SelectAll](https://wiki.facepunch.com/gmod/Panel:SelectAll).
     * 
     * @deprecated Duplicate of [Panel:SelectAll](https://wiki.facepunch.com/gmod/Panel:SelectAll).
     * 
     * @param resetCursorPos - Reset cursor pos?
     */
    SelectAllText(resetCursorPos: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Deselects all items in a panel object. For text-based objects, this will deselect all text.
     * 
     * **Note:**
     * >Only works on [RichText](https://wiki.facepunch.com/gmod/RichText) and [TextEntry](https://wiki.facepunch.com/gmod/TextEntry) and their derived panels by default (such as [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry)), and on any panel that manually reimplemented this method.
     * 
     * 
     */
    SelectNone(): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the achievement to be displayed by [AchievementIcon](https://wiki.facepunch.com/gmod/AchievementIcon).
     * @param id - Achievement number ID
     */
    SetAchievement(id: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Configures a [TextEntry](https://wiki.facepunch.com/gmod/TextEntry) to allow user to type characters that are not included in the US-ASCII (7-bit ASCII) character set.
     * 
     * Characters not included in US-ASCII are multi-byte characters in UTF-8. They can be accented characters, non-Latin characters and special characters.
     * @param allowed - Set to true in order not to restrict input characters.
     */
    SetAllowNonAsciiCharacters(allowed: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the alpha multiplier for the panel
     * @param alpha - The alpha value in the range of 0-255.
     */
    SetAlpha(alpha: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Enables or disables animations for the panel object by overriding the [PANEL:AnimationThink](https://wiki.facepunch.com/gmod/PANEL:AnimationThink) hook to nil and back.
     * @param enable - Whether to enable or disable animations.
     */
    SetAnimationEnabled(enable: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whenever the panel should be removed if the parent was removed.
     * @param autoDelete - Whenever to delete if the parent was removed or not.
     */
    SetAutoDelete(autoDelete: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the background color of a panel such as a [RichText](https://wiki.facepunch.com/gmod/RichText), [Label](https://wiki.facepunch.com/gmod/Label) or [DColorCube](https://wiki.facepunch.com/gmod/DColorCube).
     * 
     * For [DLabel](https://wiki.facepunch.com/gmod/DLabel) elements, you must use [Panel:SetPaintBackgroundEnabled](https://wiki.facepunch.com/gmod/Panel:SetPaintBackgroundEnabled)( true ) before applying the color.
     * 
     * This will not work on setup of the panel - you should use this function in a hook like [PANEL:ApplySchemeSettings](https://wiki.facepunch.com/gmod/PANEL:ApplySchemeSettings) or [PANEL:PerformLayout](https://wiki.facepunch.com/gmod/PANEL:PerformLayout).
     * 
     * **Note:**
     * >This doesn't apply to all VGUI elements and its function varies between them
     * 
     * @param r_or_color - The red channel of the color, or a [Color](https://wiki.facepunch.com/gmod/Color). If you pass the latter, the following three arguments are ignored.
     * @param g - The green channel of the color.
     * @param b - The blue channel of the color.
     * @param a - The alpha channel of the color.
     */
    SetBGColor(r_or_color: Color, g: number, b: number, a: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the background color of the panel.
     * @param r - The red channel of the color.
     * @param g - The green channel of the color.
     * @param b - The blue channel of the color.
     * @param a - The alpha channel of the color.
     */
    SetBGColorEx(r: number, g: number, b: number, a: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the position of the caret (or text cursor) in a text-based panel object.
     * @param offset - Caret position/offset from the start of text. A value of `0` places the caret before the first character.
     */
    SetCaretPos(offset: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the alignment of the contents.
     * 
     * **Note:**
     * >This function only works on [Label](https://wiki.facepunch.com/gmod/Label) panels and its derivatives.
     * 
     * @param alignment - The direction of the content, based on the number pad.
     * <key>1</key>: **bottom-left** <br/>
     * <key>2</key>: **bottom-center** <br/>
     * <key>3</key>: **bottom-right** <br/>
     * <key>4</key>: **middle-left** <br/>
     * <key>5</key>: **center** <br/>
     * <key>6</key>: **middle-right** <br/>
     * <key>7</key>: **top-left** <br/>
     * <key>8</key>: **top-center** <br/>
     * <key>9</key>: **top-right** <br/>
     * <image src="DLabel_SetContentAlignment.gif"/>
     */
    SetContentAlignment(alignment: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets this panel's convar. When the convar changes this panel will update automatically.
     * 
     * For developer implementation, see [Global.Derma_Install_Convar_Functions](https://wiki.facepunch.com/gmod/Global.Derma_Install_Convar_Functions).
     * 
     * **Warning:**
     * >This function does not exist on all panels
     * 
     * **Warning:**
     * >This function cannot interact with serverside convars unless you are host
     * 
     * **Note:**
     * >Blocked convars will not work with this, see [Blocked ConCommands](https://wiki.facepunch.com/gmod/Blocked_ConCommands)
     * 
     * @param convar - The console variable to check.
     */
    SetConVar(convar: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Stores a string in the named cookie using [Panel:GetCookieName](https://wiki.facepunch.com/gmod/Panel:GetCookieName) as prefix.
     * 
     * You can also retrieve and modify this cookie by using the [cookie](https://wiki.facepunch.com/gmod/cookie). Cookies are stored in this format:
     * 
     * ```
     * panelCookieName.cookieName
     * ```
     * 
     * **Warning:**
     * >The panel's cookie name MUST be set for this function to work. See [Panel:SetCookieName](https://wiki.facepunch.com/gmod/Panel:SetCookieName).
     * 
     * @param cookieName - The unique name used to retrieve the cookie later.
     * @param value - The value to store in the cookie. This can be retrieved later as a [string](https://wiki.facepunch.com/gmod/string) or [number](https://wiki.facepunch.com/gmod/number).
     */
    SetCookie(cookieName: string, value: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the panel's cookie name. Calls [PANEL:LoadCookies](https://wiki.facepunch.com/gmod/PANEL:LoadCookies) if defined.
     * @param name - The panel's cookie name. Used as prefix for [Panel:SetCookie](https://wiki.facepunch.com/gmod/Panel:SetCookie)
     */
    SetCookieName(name: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the appearance of the cursor. You can find a list of all available cursors with image previews [here](https://wiki.facepunch.com/gmod/Cursors).
     * @param cursor - The cursor to be set. Can be one of the following:
     * * [arrow](https://wiki.facepunch.com/gmod/Cursors#:~:text=arrow)
     * * [beam](https://wiki.facepunch.com/gmod/Cursors#:~:text=beam)
     * * [hourglass](https://wiki.facepunch.com/gmod/Cursors#:~:text=hourglass)
     * * [waitarrow](https://wiki.facepunch.com/gmod/Cursors#:~:text=waitarrow)
     * * [crosshair](https://wiki.facepunch.com/gmod/Cursors#:~:text=crosshair)
     * * [up](https://wiki.facepunch.com/gmod/Cursors#:~:text=up)
     * * [sizenwse](https://wiki.facepunch.com/gmod/Cursors#:~:text=sizenwse)
     * * [sizenesw](https://wiki.facepunch.com/gmod/Cursors#:~:text=sizenesw)
     * * [sizewe](https://wiki.facepunch.com/gmod/Cursors#:~:text=sizewe)
     * * [sizens](https://wiki.facepunch.com/gmod/Cursors#:~:text=sizens)
     * * [sizeall](https://wiki.facepunch.com/gmod/Cursors#:~:text=sizeall)
     * * [no](https://wiki.facepunch.com/gmod/Cursors#:~:text=no)
     * * [hand](https://wiki.facepunch.com/gmod/Cursors#:~:text=hand)
     * * [blank](https://wiki.facepunch.com/gmod/Cursors#:~:text=blank)
     * Set to anything else to set it to "none", the default fallback. Do note that a value of "none" does not, as one might assume, result in no cursor being drawn - hiding the cursor requires a value of "blank" instead.
     */
    SetCursor(cursor: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the drag parent.
     * 
     * Drag parent means that when we start to drag this panel, we'll really start dragging the defined parent.
     * @param parent - The panel to set as drag parent.
     */
    SetDragParent(parent: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the visibility of the language selection box when typing in non-English mode.
     * 
     * 		See [Panel:SetDrawLanguageIDAtLeft](https://wiki.facepunch.com/gmod/Panel:SetDrawLanguageIDAtLeft) for a function that changes the position of the language selection box.
     * @param visible - true to make it visible, false to hide it.
     */
    SetDrawLanguageID(visible: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets where to draw the language selection box.
     * 
     * See [Panel:SetDrawLanguageID](https://wiki.facepunch.com/gmod/Panel:SetDrawLanguageID) for a function that hides or shows the language selection box.
     * @param left - true = left, false = right
     */
    SetDrawLanguageIDAtLeft(left: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Makes the panel render in front of all others, including the spawn menu and main menu.
     * 
     * Priority is given based on the last call, so of two panels that call this method, the second will draw in front of the first.
     * 
     * **Warning:**
     * >This does not work when using [PANEL:SetPaintedManually](https://wiki.facepunch.com/gmod/PANEL:SetPaintedManually) or [PANEL:PaintAt](https://wiki.facepunch.com/gmod/PANEL:PaintAt).
     * 
     * **Note:**
     * >This only makes the panel **draw** above other panels. If there's another panel that would have otherwise covered it, users will not be able to interact with it.
     * 
     * Completely disregards [PANEL:ParentToHUD](https://wiki.facepunch.com/gmod/PANEL:ParentToHUD).
     * 
     * @param [drawOnTop = false] - Whether or not to draw the panel in front of all others.
     */
    SetDrawOnTop(drawOnTop = false): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the target area for dropping when an object is being dragged around this panel using the [dragndrop](https://wiki.facepunch.com/gmod/dragndrop). 
     * 
     * This draws a target box of the specified size and position, until [Panel:DragHoverEnd](https://wiki.facepunch.com/gmod/Panel:DragHoverEnd) is called. It uses [Panel:DrawDragHover](https://wiki.facepunch.com/gmod/Panel:DrawDragHover) to draw this area.
     * @param x - The x coordinate of the top-left corner of the drop area.
     * @param y - The y coordinate of the top-left corner of the drop area.
     * @param width - The width of the drop area.
     * @param height - The height of the drop area.
     */
    SetDropTarget(x: number, y: number, width: number, height: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the enabled state of a disable-able panel object, such as a [DButton](https://wiki.facepunch.com/gmod/DButton) or [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry).
     * 
     * See [Panel:IsEnabled](https://wiki.facepunch.com/gmod/Panel:IsEnabled) for a function that retrieves the "enabled" state of a panel.
     * @param enable - Whether to enable or disable the panel object.
     */
    SetEnabled(enable: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Adds a shadow falling to the bottom right corner of the panel's text.
     * 
     * **Note:**
     * >This works only on  panels that derive from [Label](https://wiki.facepunch.com/gmod/Label).
     * 
     * @param distance - The distance of the shadow from the panel.
     * @param Color - The color of the shadow. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     */
    SetExpensiveShadow(distance: number, Color: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the foreground color of a panel.
     * 
     * For a [Label](https://wiki.facepunch.com/gmod/Label) or [RichText](https://wiki.facepunch.com/gmod/RichText), this is the color of its text.
     * 
     * This function calls [Panel:SetFGColorEx](https://wiki.facepunch.com/gmod/Panel:SetFGColorEx) internally.
     * 
     * **Note:**
     * >This doesn't apply to all VGUI elements (such as [DLabel](https://wiki.facepunch.com/gmod/DLabel)) and its function varies between them
     * 
     * @param r_or_color - The red channel of the color, or a [Color](https://wiki.facepunch.com/gmod/Color). If you pass the latter, the following three arguments are ignored.
     * @param g - The green channel of the color.
     * @param b - The blue channel of the color.
     * @param a - The alpha channel of the color.
     */
    SetFGColor(r_or_color: Color, g: number, b: number, a: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the foreground color of the panel.
     * 
     * For labels, this is the color of their text.
     * @param r - The red channel of the color.
     * @param g - The green channel of the color.
     * @param b - The blue channel of the color.
     * @param a - The alpha channel of the color.
     */
    SetFGColorEx(r: number, g: number, b: number, a: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the panel that owns this FocusNavGroup to be the root in the focus traversal hierarchy. This function will only work on EditablePanel class panels and its derivatives.
     * @param state - 
     */
    SetFocusTopLevel(state: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the font used to render this panel's text. This works for [Label](https://wiki.facepunch.com/gmod/Label), [TextEntry](https://wiki.facepunch.com/gmod/TextEntry) and [RichText](https://wiki.facepunch.com/gmod/RichText), but it's a better idea to use their local `SetFont` ([DTextEntry:SetFont](https://wiki.facepunch.com/gmod/DTextEntry:SetFont), [DLabel:SetFont](https://wiki.facepunch.com/gmod/DLabel:SetFont)) methods when available.
     * 
     * To retrieve the font used by a panel, call [Panel:GetFont](https://wiki.facepunch.com/gmod/Panel:GetFont).
     * @param fontName - The name of the font.
     * See <page text="here">Default_Fonts</page> for a list of existing fonts.
     * Alternatively, use [surface.CreateFont](https://wiki.facepunch.com/gmod/surface.CreateFont) to create your own custom font.
     */
    SetFontInternal(fontName: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the height of the panel.
     * 
     * Calls [PANEL:OnSizeChanged](https://wiki.facepunch.com/gmod/PANEL:OnSizeChanged) and marks this panel for layout ([Panel:InvalidateLayout](https://wiki.facepunch.com/gmod/Panel:InvalidateLayout)).
     * 
     * See also [Panel:SetSize](https://wiki.facepunch.com/gmod/Panel:SetSize).
     * @param height - The height to be set.
     */
    SetHeight(height: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Allows you to set HTML code within a panel.
     * @param HTML_code - The code to set.
     */
    SetHTML(HTML_code: string): void;
    
    /**
     * [Client]
     * 
     * Allows or disallows the panel to receive keyboard focus and input. This is recursively applied to all children.
     * @param enable - Whether keyboard input should be enabled for this panel.
     */
    SetKeyboardInputEnabled(enable: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Enables or disables the keyboard input for the panel.
     * 
     * @deprecated Alias of
     * 
     * @param keyboardInput - Whether to enable or disable keyboard input.
     */
    SetKeyBoardInputEnabled(keyboardInput: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the height of a single line of a [RichText](https://wiki.facepunch.com/gmod/RichText) panel.
     * 
     */
    SetLineHeight(): number;
    
    /**
     * [Client and Menu]
     * 
     * Sets the maximum character count this panel should have.
     * 
     * This function will only work on [RichText](https://wiki.facepunch.com/gmod/RichText) and [TextEntry](https://wiki.facepunch.com/gmod/TextEntry) panels and their derivatives.
     * @param maxChar - The new maximum amount of characters this panel is allowed to contain.
     */
    SetMaximumCharCount(maxChar: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the minimum dimensions of the panel or object.
     * 
     * You can restrict either or both values.
     * 
     * Calling the function without arguments will remove the minimum size.
     * @param [minW = nil] - The minimum width of the object.
     * @param [minH = nil] - The minimum height of the object.
     */
    SetMinimumSize(minW?: number, minH?: number): void;
    
    /**
     * [Client]
     * 
     * Sets the model to be displayed by [SpawnIcon](https://wiki.facepunch.com/gmod/SpawnIcon).
     * 
     * **Note:**
     * >This must be called after setting size if you wish to use a different size spawnicon
     * 
     * @param ModelPath - The path of the model to set
     * @param [skin = 0] - The skin to set
     * @param [bodygroups = ] - The body groups to set. Each single-digit number in the string represents a separate bodygroup, **This argument must be 9 characters in total**.
     */
    SetModel(ModelPath: string, skin = 0, bodygroups?: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Enables or disables the mouse input for the panel.
     * 
     * **Note:**
     * >Panels parented to the context menu will not be clickable unlessis enabled or [Panel:MakePopup](https://wiki.facepunch.com/gmod/Panel:MakePopup) has been called. If you want the panel to have mouse input but you do not want to prevent players from moving, setto false immediately after calling [Panel:MakePopup](https://wiki.facepunch.com/gmod/Panel:MakePopup).
     * 
     * @param mouseInput - Whenever to enable or disable mouse input.
     */
    SetMouseInputEnabled(mouseInput: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Enables or disables the multi-line functionality of [TextEntry](https://wiki.facepunch.com/gmod/TextEntry) panel and its derivatives.
     * @param multiline - Whether to enable multiline or not.
     */
    SetMultiline(multiline: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the internal name of the panel. Can be retrieved with [Panel:GetName](https://wiki.facepunch.com/gmod/Panel:GetName).
     * @param name - The new name of the panel.
     */
    SetName(name: string): void;
    
    /**
     * [Menu]
     * 
     * Set to true to open links in an external browser. This only functions on the `x86-64` beta.
     * @param openExternally - 
     */
    SetOpenLinksExternally(openExternally: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whenever all the default background of the panel should be drawn or not.
     * @param paintBackground - Whenever to draw the background or not.
     */
    SetPaintBackgroundEnabled(paintBackground: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whenever all the default border of the panel should be drawn or not.
     * @param paintBorder - Whenever to draw the border or not.
     */
    SetPaintBorderEnabled(paintBorder: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Enables or disables painting of the panel manually with [Panel:PaintManual](https://wiki.facepunch.com/gmod/Panel:PaintManual).
     * @param paintedManually - True if the panel should be painted manually.
     */
    SetPaintedManually(paintedManually: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the parent of the panel.
     * 
     * **Note:**
     * >Panels parented to the context menu will not be clickable unless [Panel:SetMouseInputEnabled](https://wiki.facepunch.com/gmod/Panel:SetMouseInputEnabled) andare both true or [Panel:MakePopup](https://wiki.facepunch.com/gmod/Panel:MakePopup) has been called. If you want the panel to have mouse input but you do not want to prevent players from moving, setto false immediately after calling [Panel:MakePopup](https://wiki.facepunch.com/gmod/Panel:MakePopup).
     * 
     * @param parent - The new parent of the panel.
     */
    SetParent(parent: Panel): void;
    
    /**
     * [Client]
     * 
     * Used by [AvatarImage](https://wiki.facepunch.com/gmod/AvatarImage) to load an avatar for given player.
     * @param player - The player to use avatar of.
     * @param size - The size of the avatar to use. Acceptable sizes are 32, 64, 184.
     */
    SetPlayer(player: Player, size: number): void;
    
    /**
     * [Client and Menu]
     * 
     * If this panel object has been made a popup with [Panel:MakePopup](https://wiki.facepunch.com/gmod/Panel:MakePopup), this method will prevent it from drawing in front of other panels when it receives input focus.
     * @param stayAtBack - If `true`, the popup panel will not draw in front of others when it gets focus, for example when it is clicked.
     */
    SetPopupStayAtBack(stayAtBack: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the position of the panel's top left corner.
     * 
     * This will trigger [PANEL:PerformLayout](https://wiki.facepunch.com/gmod/PANEL:PerformLayout). You should avoid calling this function in [PANEL:PerformLayout](https://wiki.facepunch.com/gmod/PANEL:PerformLayout) to avoid infinite loops.
     * 
     * See also [Panel:SetX](https://wiki.facepunch.com/gmod/Panel:SetX) and [Panel:SetY](https://wiki.facepunch.com/gmod/Panel:SetY).
     * 
     * **Note:**
     * >If you wish to position and re-size panels without much guesswork and have them look good on different screen resolutions, you may find [Panel:Dock](https://wiki.facepunch.com/gmod/Panel:Dock) useful
     * 
     * @param posX - The x coordinate of the position.
     * @param posY - The y coordinate of the position.
     */
    SetPos(posX: number, posY: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whenever the panel should be rendered in the next screenshot.
     * @param renderInScreenshot - Whether to render in the screenshot or not.
     */
    SetRenderInScreenshots(renderInScreenshot: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether the panel object can be selected or not (like icons in the Spawn Menu, holding <key>Shift</key>). If enabled, this will affect the function of a [DButton](https://wiki.facepunch.com/gmod/DButton) whilst <key>Shift</key> is pressed. [Panel:SetSelected](https://wiki.facepunch.com/gmod/Panel:SetSelected) can be used to select/deselect the object.
     * @param selectable - Whether the panel object should be selectable or not.
     */
    SetSelectable(selectable: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the selected state of a selectable panel object. This functionality is set with [Panel:SetSelectable](https://wiki.facepunch.com/gmod/Panel:SetSelectable) and checked with [Panel:IsSelectable](https://wiki.facepunch.com/gmod/Panel:IsSelectable).
     * @param [selected = false] - Whether the object should be selected or deselected. [Panel:IsSelected](https://wiki.facepunch.com/gmod/Panel:IsSelected) can be used to determine the selected state of the object.
     */
    SetSelected(selected = false): void;
    
    /**
     * [Client and Menu]
     * 
     * Enables the panel object for selection (much like the spawn menu).
     * @param set - Whether to enable selection.
     */
    SetSelectionCanvas(set: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the size of the panel.
     * 
     * Calls [PANEL:OnSizeChanged](https://wiki.facepunch.com/gmod/PANEL:OnSizeChanged) and marks this panel for layout ([Panel:InvalidateLayout](https://wiki.facepunch.com/gmod/Panel:InvalidateLayout)).
     * 
     * See also [Panel:SetWidth](https://wiki.facepunch.com/gmod/Panel:SetWidth) and [Panel:SetHeight](https://wiki.facepunch.com/gmod/Panel:SetHeight).
     * 
     * **Note:**
     * >If you wish to position and re-size panels without much guesswork and have them look good on different screen resolutions, you may find [Panel:Dock](https://wiki.facepunch.com/gmod/Panel:Dock) useful
     * 
     * @param width - The width of the panel.
     * @param height - The height of the panel.
     */
    SetSize(width: number, height: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the derma skin that the panel object will use, and refreshes all panels with [derma.RefreshSkins](https://wiki.facepunch.com/gmod/derma.RefreshSkins).
     * @param skinName - The name of the skin to use. The default derma skin is `Default`.
     */
    SetSkin(skinName: string): void;
    
    /**
     * [Client]
     * 
     * Sets the `.png` image to be displayed on a  [SpawnIcon](https://wiki.facepunch.com/gmod/SpawnIcon) or the panel it is based on - [ModelImage](https://wiki.facepunch.com/gmod/ModelImage).
     * 
     * Only `.png` images can be used with this function.
     * @param icon - A path to the .png material, for example one of the [Silkicons](https://wiki.facepunch.com/gmod/Silkicons) shipped with the game.
     */
    SetSpawnIcon(icon: string): void;
    
    /**
     * [Client]
     * 
     * Used by [AvatarImage](https://wiki.facepunch.com/gmod/AvatarImage) panels to load an avatar by its 64-bit Steam ID (community ID).
     * @param steamid - The 64bit SteamID of the player to load avatar of
     * @param size - The size of the avatar to use. Acceptable sizes are 32, 64, 184.
     */
    SetSteamID(steamid: string, size: number): void;
    
    /**
     * [Client and Menu]
     * 
     * When TAB is pressed, the next selectable panel in the number sequence is selected.
     * @param position - 
     */
    SetTabPosition(position: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets height of a panel. An alias of [Panel:SetHeight](https://wiki.facepunch.com/gmod/Panel:SetHeight).
     * @param height - Desired height to set
     */
    SetTall(height: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Removes the panel after given time in seconds.
     * 
     * **Note:**
     * >This function will not work if [PANEL:AnimationThink](https://wiki.facepunch.com/gmod/PANEL:AnimationThink) is overridden, unless [Panel:AnimationThinkInternal](https://wiki.facepunch.com/gmod/Panel:AnimationThinkInternal) is called every frame.
     * 
     * @param delay - Delay in seconds after which the panel should be removed.
     */
    SetTerm(delay: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the text value of a panel object containing text, such as a [Label](https://wiki.facepunch.com/gmod/Label), [TextEntry](https://wiki.facepunch.com/gmod/TextEntry) or  [RichText](https://wiki.facepunch.com/gmod/RichText) and their derivatives, such as [DLabel](https://wiki.facepunch.com/gmod/DLabel), [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry) or [DButton](https://wiki.facepunch.com/gmod/DButton).
     * 
     * **Warning:**
     * >When used on a [Label](https://wiki.facepunch.com/gmod/Label) or its derivatives ( [DLabel](https://wiki.facepunch.com/gmod/DLabel) and [DButton](https://wiki.facepunch.com/gmod/DButton) ), it will automatically call [Panel:InvalidateLayout](https://wiki.facepunch.com/gmod/Panel:InvalidateLayout), meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.
     * 
     * @param text - The text value to set.
     */
    SetText(text: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the left and top text margins of a text-based panel object, such as a [DButton](https://wiki.facepunch.com/gmod/DButton) or [DLabel](https://wiki.facepunch.com/gmod/DLabel).
     * @param insetX - The left margin for the text, in pixels. This will only affect centered text if the margin is greater than its x-coordinate.
     * @param insetY - The top margin for the text, in pixels.
     */
    SetTextInset(insetX: number, insetY: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets text selection colors of a [RichText](https://wiki.facepunch.com/gmod/RichText) element.
     * @param textColor - The [Global.Color](https://wiki.facepunch.com/gmod/Global.Color) to set for selected text.
     * @param backgroundColor - The [Global.Color](https://wiki.facepunch.com/gmod/Global.Color) to set for selected text background.
     */
    SetTextSelectionColors(textColor: any, backgroundColor: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the height of a [RichText](https://wiki.facepunch.com/gmod/RichText) element to accommodate the text inside.
     * 
     * **Note:**
     * >This function internally relies on [Panel:GetNumLines](https://wiki.facepunch.com/gmod/Panel:GetNumLines), so it should be called at least a couple frames after modifying the text using [Panel:AppendText](https://wiki.facepunch.com/gmod/Panel:AppendText)
     * 
     * 
     */
    SetToFullHeight(): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the tooltip to be displayed when a player hovers over the panel object with their cursor.
     * @param str - The text to be displayed in the tooltip. Set false to disable it.
     */
    SetTooltip(str: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the tooltip delay. (time between hovering over the panel, and the tooltip showing up)
     * 
     * Can be retrieved with [Panel:GetTooltipDelay](https://wiki.facepunch.com/gmod/Panel:GetTooltipDelay).
     * @param tooltip - The tooltip delay to set.
     */
    SetTooltipDelay(tooltip: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the panel to be displayed as contents of a [DTooltip](https://wiki.facepunch.com/gmod/DTooltip) when a player hovers over the panel object with their cursor. See [Panel:SetTooltipPanelOverride](https://wiki.facepunch.com/gmod/Panel:SetTooltipPanelOverride) if you are looking to override [DTooltip](https://wiki.facepunch.com/gmod/DTooltip) itself.
     * 
     * **Warning:**
     * >Calling this from [PANEL:OnCursorEntered](https://wiki.facepunch.com/gmod/PANEL:OnCursorEntered) is too late! The tooltip will not be displayed or be updated.
     * 
     * 	Given panel or the previously set one will **NOT** be automatically removed.
     * 
     * **Note:**
     * >[Panel:SetTooltip](https://wiki.facepunch.com/gmod/Panel:SetTooltip) will override this functionality.
     * 
     * @param [tooltipPanel = nil] - The panel to use as the tooltip.
     */
    SetTooltipPanel(tooltipPanel?: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the panel class to be created instead of [DTooltip](https://wiki.facepunch.com/gmod/DTooltip) when the player hovers over this panel and a tooltip needs creating.
     * @param override - The panel class to override the default [DTooltip](https://wiki.facepunch.com/gmod/DTooltip). The new panel class must have the following methods:
     * * <page text="SetText">Panel:SetText</page> - If you are using [Panel:SetTooltip](https://wiki.facepunch.com/gmod/Panel:SetTooltip).
     * * <page text="SetContents">DTooltip:SetContents</page> - If you are using [Panel:SetTooltipPanel](https://wiki.facepunch.com/gmod/Panel:SetTooltipPanel).
     * * <page text="OpenForPanel">DTooltip:OpenForPanel</page> - A "hook" type function that gets called shortly after creation (and after the above 2) to open and position the tooltip. You can see this logic in `lua/includes/util/tooltips.lua`.
     */
    SetTooltipPanelOverride(override: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the underlined font for use by clickable text in a [RichText](https://wiki.facepunch.com/gmod/RichText). See also [Panel:InsertClickableTextStart](https://wiki.facepunch.com/gmod/Panel:InsertClickableTextStart)
     * 
     * This function will only work on [RichText](https://wiki.facepunch.com/gmod/RichText) panels.
     * @param fontName - The name of the font.
     * See <page text="here">Default_Fonts</page> for a list of existing fonts.
     * Alternatively, use [surface.CreateFont](https://wiki.facepunch.com/gmod/surface.CreateFont) to create your own custom font.
     */
    SetUnderlineFont(fontName: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the URL of a link-based panel such as [DLabelURL](https://wiki.facepunch.com/gmod/DLabelURL).
     * @param url - The URL to set. It **must** begin with either `http://` or `https://`.
     */
    SetURL(url: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the visibility of the vertical scrollbar.
     * 
     * Works for [RichText](https://wiki.facepunch.com/gmod/RichText) and [TextEntry](https://wiki.facepunch.com/gmod/TextEntry).
     * @param [display = false] - True to display the vertical text scroll bar, false to hide it.
     */
    SetVerticalScrollbarEnabled(display = false): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the "visibility" of the panel.
     * @param visible - The visibility of the panel.
     */
    SetVisible(visible: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets width of a panel. An alias of [Panel:SetWidth](https://wiki.facepunch.com/gmod/Panel:SetWidth).
     * @param width - Desired width to set
     */
    SetWide(width: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the width of the panel.
     * 
     * Calls [PANEL:OnSizeChanged](https://wiki.facepunch.com/gmod/PANEL:OnSizeChanged) and marks this panel for layout ([Panel:InvalidateLayout](https://wiki.facepunch.com/gmod/Panel:InvalidateLayout)).
     * 
     * See also [Panel:SetSize](https://wiki.facepunch.com/gmod/Panel:SetSize).
     * @param width - The new width of the panel.
     */
    SetWidth(width: number): void;
    
    /**
     * [Client and Menu]
     * 
     * This makes it so that when you're hovering over this panel you can "click" on the world. Your weapon aim (and its viewmodel) will follow the cursor. This is primarily used for the Sandbox context menu.
     * 
     * **Bug [#3467](https://github.com/Facepunch/garrysmod-issues/issues/3467):**
     * >This function doesn't scale with custom FOV specified by [GM:CalcView](https://wiki.facepunch.com/gmod/GM:CalcView) or [WEAPON:TranslateFOV](https://wiki.facepunch.com/gmod/WEAPON:TranslateFOV).
     * 
     * @param enable - Whether to enable or disable the feature for this panel.
     */
    SetWorldClicker(enable: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether text wrapping should be enabled or disabled on [Label](https://wiki.facepunch.com/gmod/Label) and [DLabel](https://wiki.facepunch.com/gmod/DLabel) panels.
     * 
     * Use [DLabel:SetAutoStretchVertical](https://wiki.facepunch.com/gmod/DLabel:SetAutoStretchVertical) to automatically correct vertical size; [Panel:SizeToContents](https://wiki.facepunch.com/gmod/Panel:SizeToContents) will not set the correct height.
     * @param wrap - `True` to enable text wrapping, `false` otherwise.
     */
    SetWrap(wrap: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the X position of the panel.
     * 
     * Uses [Panel:SetPos](https://wiki.facepunch.com/gmod/Panel:SetPos) internally.
     * @param x - The X coordinate of the position.
     */
    SetX(x: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the Y position of the panel.
     * 
     * Uses [Panel:SetPos](https://wiki.facepunch.com/gmod/Panel:SetPos) internally.
     * @param y - The Y coordinate of the position.
     */
    SetY(y: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the panels z position which determines the rendering order.
     * 
     * Panels with lower z positions appear behind panels with higher z positions.
     * 
     * This also controls in which order panels docked with [Panel:Dock](https://wiki.facepunch.com/gmod/Panel:Dock) appears.
     * @param zIndex - The z position of the panel. <br/>
     * Can't be lower than -32768 or higher than 32767.
     */
    SetZPos(zIndex: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Makes a panel visible.
     * 
     */
    Show(): void;
    
    /**
     * [Client and Menu]
     * 
     * Uses animation to resize the panel to the specified size.
     * @param [sizeW = 0] - The target width of the panel. Use -1 to retain the current width.
     * @param [sizeH = 0] - The target height of the panel. Use -1 to retain the current height.
     * @param time - The time to perform the animation within.
     * @param [delay = 0] - The delay before the animation starts.
     * @param [ease = -1] - Easing of the start and/or end speed of the animation. See [Panel:NewAnimation](https://wiki.facepunch.com/gmod/Panel:NewAnimation) for how this works.
     * @param callback - The function to be called once the animation finishes. Arguments are:
     * * [table](https://wiki.facepunch.com/gmod/table) animData - The [Structures/AnimationData](https://wiki.facepunch.com/gmod/Structures/AnimationData) that was used.
     * * [Panel](https://wiki.facepunch.com/gmod/Panel) pnl - The panel object that was resized.
     */
    SizeTo(sizeW = 0, sizeH = 0, time: number, delay = 0, ease = -1, callback: Function): void;
    
    /**
     * [Client and Menu]
     * 
     * Resizes the panel to fit the bounds of its children.
     * 
     * **Note:**
     * >Your panel must have its layout updated ([Panel:InvalidateLayout](https://wiki.facepunch.com/gmod/Panel:InvalidateLayout)) for this function to work properly.
     * 
     * **Note:**
     * >The sizeW and sizeH parameters are false by default. Therefore, calling this function with no arguments will result in a no-op.
     * 
     * @param [sizeW = false] - Resize with width of the panel.
     * @param [sizeH = false] - Resize the height of the panel.
     */
    SizeToChildren(sizeW = false, sizeH = false): void;
    
    /**
     * [Client and Menu]
     * 
     * Resizes the panel so that its width and height fit all of the content inside.
     * 
     * **Warning:**
     * >You must call this function **AFTER** setting text/font, adjusting child panels or otherwise altering the panel.
     * 
     * **Note:**
     * >Only works on [Label](https://wiki.facepunch.com/gmod/Label) derived panels such as [DLabel](https://wiki.facepunch.com/gmod/DLabel) by default, and on any panel that manually implemented the [Panel:SizeToContents](https://wiki.facepunch.com/gmod/Panel:SizeToContents) method, such as [DNumberWang](https://wiki.facepunch.com/gmod/DNumberWang) and [DImage](https://wiki.facepunch.com/gmod/DImage).
     * 
     * 
     */
    SizeToContents(): void;
    
    /**
     * [Client and Menu]
     * 
     * Resizes the panel object's width to accommodate all child objects/contents.
     * 
     * Only works on [Label](https://wiki.facepunch.com/gmod/Label) derived panels such as [DLabel](https://wiki.facepunch.com/gmod/DLabel) by default, and on any panel that manually implemented [Panel:GetContentSize](https://wiki.facepunch.com/gmod/Panel:GetContentSize) method.
     * 
     * **Note:**
     * >You must call this function **AFTER** setting text/font or adjusting child panels.
     * 
     * @param [addVal = 0] - The number of extra pixels to add to the width. Can be a negative number, to reduce the width.
     */
    SizeToContentsX(addVal = 0): void;
    
    /**
     * [Client and Menu]
     * 
     * Resizes the panel object's height to accommodate all child objects/contents.
     * 
     * Only works on [Label](https://wiki.facepunch.com/gmod/Label) derived panels such as [DLabel](https://wiki.facepunch.com/gmod/DLabel) by default, and on any panel that manually implemented [Panel:GetContentSize](https://wiki.facepunch.com/gmod/Panel:GetContentSize) method.
     * 
     * **Note:**
     * >You must call this function **AFTER** setting text/font or adjusting child panels.
     * 
     * @param [addVal = 0] - The number of extra pixels to add to the height.
     */
    SizeToContentsY(addVal = 0): void;
    
    /**
     * [Client and Menu]
     * 
     * Slides the panel in from above.
     * @param Length - Time to complete the animation.
     */
    SlideDown(Length: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Slides the panel out to the top.
     * @param Length - Time to complete the animation.
     */
    SlideUp(Length: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Begins a box selection, enables mouse capture for the panel object, and sets the start point of the selection box to the mouse cursor's position, relative to this object. For this to work, either the object or its parent must be enabled as a selection canvas. This is set using [Panel:SetSelectionCanvas](https://wiki.facepunch.com/gmod/Panel:SetSelectionCanvas).
     * 
     */
    StartBoxSelection(): void;
    
    /**
     * [Client and Menu]
     * 
     * Stops all panel animations by clearing its animation list. This also clears all delayed animations.
     * 
     */
    Stop(): void;
    
    /**
     * [Client and Menu]
     * 
     * Stops the loading of the [HTML](https://wiki.facepunch.com/gmod/HTML) panel's current page.
     * 
     */
    StopLoading(): void;
    
    /**
     * [Client and Menu]
     * 
     * Resizes the panel object's height so that its bottom is aligned with the top of the passed panel. An offset greater than zero will reduce the panel's height to leave a gap between it and the passed panel.
     * @param tgtPanel - The panel to align the bottom of this one with.
     * @param [offset = 0] - The gap to leave between this and the passed panel. Negative values will cause the panel's height to increase, forming an overlap.
     */
    StretchBottomTo(tgtPanel: Panel, offset = 0): void;
    
    /**
     * [Client and Menu]
     * 
     * Resizes the panel object's width so that its right edge is aligned with the left of the passed panel. An offset greater than zero will reduce the panel's width to leave a gap between it and the passed panel.
     * @param tgtPanel - The panel to align the right edge of this one with.
     * @param [offset = 0] - The gap to leave between this and the passed panel. Negative values will cause the panel's width to increase, forming an overlap.
     */
    StretchRightTo(tgtPanel: Panel, offset = 0): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the dimensions of the panel to fill its parent. It will only stretch in directions that aren't nil.
     * @param offsetLeft - The left offset to the parent.
     * @param offsetTop - The top offset to the parent.
     * @param offsetRight - The right offset to the parent.
     * @param offsetBottom - The bottom offset to the parent.
     */
    StretchToParent(offsetLeft: number, offsetTop: number, offsetRight: number, offsetBottom: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Toggles the selected state of a selectable panel object. This functionality is set with [Panel:SetSelectable](https://wiki.facepunch.com/gmod/Panel:SetSelectable) and checked with [Panel:IsSelectable](https://wiki.facepunch.com/gmod/Panel:IsSelectable). To check whether the object is selected or not, [Panel:IsSelected](https://wiki.facepunch.com/gmod/Panel:IsSelected) is used.
     * 
     */
    ToggleSelection(): void;
    
    /**
     * [Client and Menu]
     * 
     * Toggles the visibility of a panel and all its children.
     * 
     */
    ToggleVisible(): void;
    
    /**
     * [Client and Menu]
     * 
     * Restores the last saved state (caret position and the text inside) of a [TextEntry](https://wiki.facepunch.com/gmod/TextEntry). Should act identically to pressing CTRL+Z in a [TextEntry](https://wiki.facepunch.com/gmod/TextEntry).
     * 
     * See also [Panel:SaveUndoState](https://wiki.facepunch.com/gmod/Panel:SaveUndoState).
     * 
     */
    Undo(): void;
    
    /**
     * [Client and Menu]
     * 
     * Recursively deselects this panel object and all of its children. This will cascade to all child objects at every level below the parent.
     * 
     */
    UnselectAll(): void;
    
    /**
     * [Client and Menu]
     * 
     * Forcibly updates the panels' HTML Material, similar to when Paint is called on it.<br />This is only useful if the panel is not normally visible, i.e the panel exists purely for its HTML Material.
     * 
     * **Note:**
     * >Only works on with panels that have a HTML Material. See [Panel:GetHTMLMaterial](https://wiki.facepunch.com/gmod/Panel:GetHTMLMaterial) for more details.
     * 
     * **Note:**
     * >A good place to call this is in the [GM:PreRender](https://wiki.facepunch.com/gmod/GM:PreRender) hook
     * 
     * 
     */
    UpdateHTMLTexture(): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns if a given panel is valid or not.
     * 
     * @deprecated Use [Panel:IsValid](https://wiki.facepunch.com/gmod/Panel:IsValid) instead.
     * 
     * 
     */
    Valid(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Set to true by the [dragndrop](https://wiki.facepunch.com/gmod/dragndrop) system when the panel is being drawn for the drag'n'drop.
     * 
     */
    PaintingDragging(): boolean;

}

/**
 * Path object for a NextBot NPC and bots created by [player.CreateNextbot](https://wiki.facepunch.com/gmod/player.CreateNextbot). Returned by [Global.Path](https://wiki.facepunch.com/gmod/Global.Path).
 */
interface PathFollower {
    

    /**
     * [Server]
     * 
     * If you created your path with type "Chase" this functions should be used in place of [PathFollower:Update](https://wiki.facepunch.com/gmod/PathFollower:Update) to cause the bot to chase the specified entity.
     * @param bot - The bot to update along the path. This can also be a nextbot player ([player.CreateNextbot](https://wiki.facepunch.com/gmod/player.CreateNextbot))
     * @param ent - The entity we want to chase
     */
    Chase(bot: NextBot, ent: Entity): void;
    
    /**
     * [Server]
     * 
     * Compute shortest path from bot to 'goal' via A* algorithm.
     * @param from - The nextbot we're generating for.  This can also be a nextbot player ([player.CreateNextbot](https://wiki.facepunch.com/gmod/player.CreateNextbot)).
     * @param to - To point
     * @param [generator = nil] - A funtion that allows you to alter the path generation. See example below for the default function.
     */
    Compute(from: NextBot, to: Vector, generator?: Function): boolean;
    
    /**
     * [Server]
     * 
     * Draws the path. This is meant for debugging - and uses [debugoverlay](https://wiki.facepunch.com/gmod/debugoverlay).
     * 
     */
    Draw(): void;
    
    /**
     * [Server]
     * 
     * Returns the first segment of the path.
     * 
     */
    FirstSegment(): PathSegment;
    
    /**
     * [Server]
     * 
     * Returns the age since the path was built
     * 
     */
    GetAge(): number;
    
    /**
     * [Server]
     * 
     * Returns all of the segments of the given path.
     * 
     */
    GetAllSegments(): PathSegment;
    
    /**
     * [Server]
     * 
     * The closest position along the path to a position
     * @param position - The point we're querying for
     */
    GetClosestPosition(position: Vector): Vector;
    
    /**
     * [Server]
     * 
     * Returns the current goal data. Can return nil if the current goal is invalid, for example immediately after [PathFollower:Update](https://wiki.facepunch.com/gmod/PathFollower:Update).
     * 
     */
    GetCurrentGoal(): PathSegment;
    
    /**
     * [Server]
     * 
     * Returns the cursor data
     * 
     */
    GetCursorData(): any;
    
    /**
     * [Server]
     * 
     * Returns the current progress along the path
     * 
     */
    GetCursorPosition(): number;
    
    /**
     * [Server]
     * 
     * Returns the path end position
     * 
     */
    GetEnd(): Vector;
    
    /**
     * [Server]
     * 
     * Returns how close we can get to the goal to call it done.
     * 
     */
    GetGoalTolerance(): number;
    
    /**
     * [Server]
     * 
     * 
     */
    GetHindrance(): Entity;
    
    /**
     * [Server]
     * 
     * Returns the total length of the path
     * 
     */
    GetLength(): number;
    
    /**
     * [Server]
     * 
     * Returns the minimum range movement goal must be along path.
     * 
     */
    GetMinLookAheadDistance(): number;
    
    /**
     * [Server]
     * 
     * Returns the vector position of distance along path
     * @param distance - The distance along the path to query
     */
    GetPositionOnPath(distance: number): Vector;
    
    /**
     * [Server]
     * 
     * Returns the path start position
     * 
     */
    GetStart(): Vector;
    
    /**
     * [Server]
     * 
     * Invalidates the current path
     * 
     */
    Invalidate(): void;
    
    /**
     * [Server]
     * 
     * Returns true if the path is valid
     * 
     */
    IsValid(): boolean;
    
    /**
     * [Server]
     * 
     * Returns the last segment of the path.
     * 
     */
    LastSegment(): PathSegment;
    
    /**
     * [Server]
     * 
     * Moves the cursor by give distance.
     * 
     * For a function that sets the distance, see [PathFollower:MoveCursorTo](https://wiki.facepunch.com/gmod/PathFollower:MoveCursorTo).
     * @param distance - The distance to move the cursor (in relative world units)
     */
    MoveCursor(distance: number): void;
    
    /**
     * [Server]
     * 
     * Sets the cursor position to given distance.
     * 
     * For relative distance, see [PathFollower:MoveCursor](https://wiki.facepunch.com/gmod/PathFollower:MoveCursor).
     * @param distance - The distance to move the cursor (in world units)
     */
    MoveCursorTo(distance: number): void;
    
    /**
     * [Server]
     * 
     * Moves the cursor of the path to the closest position compared to given vector.
     * @param pos - 
     * @param [type = 0] - Seek type
     * 0 = SEEK_ENTIRE_PATH - Search the entire path length
     * 1 = SEEK_AHEAD - Search from current cursor position forward toward end of path
     * 2 = SEEK_BEHIND - Search from current cursor position backward toward path start
     * @param [alongLimit = 0] - 
     */
    MoveCursorToClosestPosition(pos: Vector, type = 0, alongLimit = 0): void;
    
    /**
     * [Server]
     * 
     * Moves the cursor to the end of the path
     * 
     */
    MoveCursorToEnd(): void;
    
    /**
     * [Server]
     * 
     * Moves the cursor to the end of the path
     * 
     */
    MoveCursorToStart(): void;
    
    /**
     * [Server]
     * 
     * Returns the next segment of the path.
     * 
     */
    NextSegment(): PathSegment;
    
    /**
     * [Server]
     * 
     * Returns the previous segment of the path.
     * 
     */
    PriorSegment(): PathSegment;
    
    /**
     * [Server]
     * 
     * Resets the age which is retrieved by [PathFollower:GetAge](https://wiki.facepunch.com/gmod/PathFollower:GetAge) to 0.
     * 
     */
    ResetAge(): void;
    
    /**
     * [Server]
     * 
     * How close we can get to the goal to call it done
     * @param distance - The distance we're setting it to
     */
    SetGoalTolerance(distance: number): void;
    
    /**
     * [Server]
     * 
     * Sets minimum range movement goal must be along path
     * @param mindist - The minimum look ahead distance
     */
    SetMinLookAheadDistance(mindist: number): void;
    
    /**
     * [Server]
     * 
     * Move the bot along the path.
     * @param bot - The bot to update along the path
     */
    Update(bot: NextBot): void;

}

/**
 * A PhysCollide holds collision data from VPhysics. These objects can be used to run (currently quite limited) collision tests, but do not represent actual physics objects.
 * 
 * Created by [Global.CreatePhysCollideBox](https://wiki.facepunch.com/gmod/Global.CreatePhysCollideBox) or [Global.CreatePhysCollidesFromModel](https://wiki.facepunch.com/gmod/Global.CreatePhysCollidesFromModel).
 */
interface PhysCollide {
    

    /**
     * [Shared]
     * 
     * Destroys the [PhysCollide](https://wiki.facepunch.com/gmod/PhysCollide) object.
     * 
     */
    Destroy(): void;
    
    /**
     * [Shared]
     * 
     * Checks whether this [PhysCollide](https://wiki.facepunch.com/gmod/PhysCollide) object is valid or not.
     * 
     * You should just use [Global.IsValid](https://wiki.facepunch.com/gmod/Global.IsValid) instead.
     * 
     */
    IsValid(): boolean;
    
    /**
     * [Shared]
     * 
     * Performs a trace against this PhysCollide with the given parameters. This can be used for both line traces and box traces.
     * @param origin - The origin for the PhysCollide during the trace
     * @param angles - The angles for the PhysCollide during the trace
     * @param rayStart - The start position of the trace
     * @param rayEnd - The end position of the trace
     * @param rayMins - The mins of the trace's bounds
     * @param rayMaxs - The maxs of the trace's bounds
     */
    TraceBox(origin: Vector, angles: Angle, rayStart: Vector, rayEnd: Vector, rayMins: Vector, rayMaxs: Vector): LuaMultiReturn<[Vector, Vector, number]>;

}

/**
 * This is the object returned by [Entity:GetPhysicsObject](https://wiki.facepunch.com/gmod/Entity:GetPhysicsObject), [Entity:GetPhysicsObjectNum](https://wiki.facepunch.com/gmod/Entity:GetPhysicsObjectNum) and [Vehicle:GetWheel](https://wiki.facepunch.com/gmod/Vehicle:GetWheel).
 * 
 * It represents a physics object.
 */
interface PhysObj {
    

    /**
     * [Shared]
     * 
     * Adds the specified [angular velocity](https://en.wikipedia.org/wiki/Angular_velocity) velocity to the current [PhysObj](https://wiki.facepunch.com/gmod/PhysObj).
     * @param angularVelocity - The additional velocity in `degrees/s`. (Local to the physics object.)
     * **Note:**
     * >Does nothing on frozen objects.
     * 
     */
    AddAngleVelocity(angularVelocity: Vector): void;
    
    /**
     * [Shared]
     * 
     * Adds one or more bit flags.
     * @param flags - Bitflag, see [Enums/FVPHYSICS](https://wiki.facepunch.com/gmod/Enums/FVPHYSICS).
     */
    AddGameFlag(flags: FVPHYSICS): void;
    
    /**
     * [Shared]
     * 
     * Adds the specified velocity to the current.
     * @param velocity - Additional velocity in `source_unit/s`. (World frame)
     * **Note:**
     * >Does nothing on frozen objects.
     * 
     */
    AddVelocity(velocity: Vector): void;
    
    /**
     * [Shared]
     * 
     * Rotates the object so that it's angles are aligned to the ones inputted.
     * @param from - 
     * @param to - 
     */
    AlignAngles(from: Angle, to: Angle): Angle;
    
    /**
     * [Shared]
     * 
     * Applies the specified impulse in the mass center of the physics object.
     * 
     * **Note:**
     * >This will not work on players, use [Entity:SetVelocity](https://wiki.facepunch.com/gmod/Entity:SetVelocity) instead.
     * 
     * @param impulse - The [impulse](https://en.wikipedia.org/wiki/Impulse_(physics)) to be applied in `kg*source_unit/s`. (The vector is in world frame)
     */
    ApplyForceCenter(impulse: Vector): void;
    
    /**
     * [Shared]
     * 
     * Applies the specified impulse on the physics object at the specified position.
     * @param impulse - The impulse to be applied in `kg*source_unit/s`. (World frame)
     * @param position - The position in world coordinates (`source units`) where the force is applied to the physics object.
     */
    ApplyForceOffset(impulse: Vector, position: Vector): void;
    
    /**
     * [Shared]
     * 
     * Applies the specified angular impulse to the physics object. See [PhysObj:CalculateForceOffset](https://wiki.facepunch.com/gmod/PhysObj:CalculateForceOffset)
     * @param angularImpulse - The angular impulse to be applied in `kg * m^2 * degrees / s`. (The vector is in world frame)
     * **Note:**
     * >The unit conversion between meters and source units in this case is `1 meter ≈ 39.37 source units (100/2.54 exactly)`
     * 
     */
    ApplyTorqueCenter(angularImpulse: Vector): void;
    
    /**
     * [Shared]
     * 
     * Calculates the linear and angular impulse on the object's center of mass for an offset impulse.<br/>The outputs can be used with [PhysObj:ApplyForceCenter](https://wiki.facepunch.com/gmod/PhysObj:ApplyForceCenter) and [PhysObj:ApplyTorqueCenter](https://wiki.facepunch.com/gmod/PhysObj:ApplyTorqueCenter), respectively. **Be careful to convert the angular impulse to world frame ([PhysObj:LocalToWorldVector](https://wiki.facepunch.com/gmod/PhysObj:LocalToWorldVector)) if you are going to use it with ApplyTorqueCenter.**
     * @param impulse - The impulse acting on the object in `kg*source_unit/s`. (World frame)
     * @param position - The location of the impulse in world coordinates (`source units`)
     */
    CalculateForceOffset(impulse: Vector, position: Vector): LuaMultiReturn<[Vector, Vector]>;
    
    /**
     * [Shared]
     * 
     * Calculates the linear and angular velocities on the center of mass for an offset impulse. The outputs can be directly passed to [PhysObj:AddVelocity](https://wiki.facepunch.com/gmod/PhysObj:AddVelocity) and [PhysObj:AddAngleVelocity](https://wiki.facepunch.com/gmod/PhysObj:AddAngleVelocity), respectively.
     * 
     * **Warning:**
     * >This will return zero length vectors if the physics object's motion is disabled. See [PhysObj:IsMotionEnabled](https://wiki.facepunch.com/gmod/PhysObj:IsMotionEnabled).
     * 
     * @param impulse - The impulse acting on the object in `kg*source_unit/s`. (World frame)
     * @param position - The location of the impulse in world coordinates (`source units`)
     */
    CalculateVelocityOffset(impulse: Vector, position: Vector): LuaMultiReturn<[Vector, Vector]>;
    
    /**
     * [Shared]
     * 
     * Removes one of more specified flags.
     * @param flags - Bitflag, see [Enums/FVPHYSICS](https://wiki.facepunch.com/gmod/Enums/FVPHYSICS).
     */
    ClearGameFlag(flags: FVPHYSICS): void;
    
    /**
     * [Shared]
     * 
     * Allows you to move a PhysObj to a point and angle in 3D space.
     * @param shadowparams - The parameters for the shadow. See example code to see how its used.
     */
    ComputeShadowControl(shadowparams: any): void;
    
    /**
     * [Shared]
     * 
     * Sets whether the physics object should collide with anything or not, including world.
     * 
     * **Warning:**
     * >This function currently has major problems with player collisions, and as such should be avoided at all costs.
     * 
     * A better alternative to this function would be using [Entity:SetCollisionGroup](https://wiki.facepunch.com/gmod/Entity:SetCollisionGroup)( COLLISION_GROUP_WORLD ).
     * 
     * @param enable - True to enable, false to disable.
     */
    EnableCollisions(enable: boolean): void;
    
    /**
     * [Shared]
     * 
     * Sets whenever the physics object should be affected by drag.
     * @param enable - True to enable, false to disable.
     */
    EnableDrag(enable: boolean): void;
    
    /**
     * [Shared]
     * 
     * Sets whether the PhysObject should be affected by gravity
     * @param enable - True to enable, false to disable.
     */
    EnableGravity(enable: boolean): void;
    
    /**
     * [Shared]
     * 
     * Sets whether the physobject should be able to move or not.
     * 
     * This is the exact method the Physics Gun uses to freeze props. If a motion-disabled physics object is grabbed with the physics gun, the object will be able to move again. To disallow this, use [GM:PhysgunPickup](https://wiki.facepunch.com/gmod/GM:PhysgunPickup).
     * @param enable - True to enable, false to disable.
     */
    EnableMotion(enable: boolean): void;
    
    /**
     * [Shared]
     * 
     * Returns the mins and max of the physics object.
     * 
     */
    GetAABB(): LuaMultiReturn<[Vector, Vector]>;
    
    /**
     * [Shared]
     * 
     * Returns the angles of the physics object in degrees.
     * 
     */
    GetAngles(): Angle;
    
    /**
     * [Shared]
     * 
     * Gets the angular velocity of the object in degrees per second as a local vector. You can use dot product to read the magnitude from a specific axis.
     * 
     */
    GetAngleVelocity(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the contents flag of the [PhysObj](https://wiki.facepunch.com/gmod/PhysObj).
     * 
     */
    GetContents(): CONTENTS;
    
    /**
     * [Shared]
     * 
     * Returns the linear and angular damping of the physics object.
     * 
     */
    GetDamping(): LuaMultiReturn<[number, number]>;
    
    /**
     * [Shared]
     * 
     * Returns the sum of the linear and rotational kinetic energies of the physics object.
     * 
     */
    GetEnergy(): number;
    
    /**
     * [Shared]
     * 
     * Returns the parent entity of the physics object.
     * 
     */
    GetEntity(): Entity;
    
    /**
     * [Server]
     * 
     * Returns the friction snapshot of this physics object. This is useful for determining if an object touching ground for example.
     * 
     */
    GetFrictionSnapshot(): any;
    
    /**
     * [Shared]
     * 
     * Returns the principal moments of inertia `(Ixx, Iyy, Izz)` of the physics object, in the local frame, with respect to the center of mass.
     * 
     */
    GetInertia(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns 1 divided by the angular inertia. See [PhysObj:GetInertia](https://wiki.facepunch.com/gmod/PhysObj:GetInertia)
     * 
     */
    GetInvInertia(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns 1 divided by the physics object's mass (in kilograms).
     * 
     */
    GetInvMass(): number;
    
    /**
     * [Shared]
     * 
     * Returns the mass of the physics object.
     * 
     */
    GetMass(): number;
    
    /**
     * [Shared]
     * 
     * Returns the center of mass of the physics object as a local vector.
     * 
     */
    GetMassCenter(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the physical material of the physics object.
     * 
     */
    GetMaterial(): string;
    
    /**
     * [Shared]
     * 
     * Returns the physics mesh of the object which is used for physobj-on-physobj collision.
     * 
     */
    GetMesh(): MeshVertex;
    
    /**
     * [Shared]
     * 
     * Returns all convex physics meshes of the object. See [Entity:PhysicsInitMultiConvex](https://wiki.facepunch.com/gmod/Entity:PhysicsInitMultiConvex) for more information.
     * 
     */
    GetMeshConvexes(): MeshVertex;
    
    /**
     * [Shared]
     * 
     * Returns the name of the physics object.
     * 
     */
    GetName(): string;
    
    /**
     * [Shared]
     * 
     * Returns the position of the physics object.
     * 
     */
    GetPos(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the position and angle of the physics object as a 3x4 matrix ([VMatrix](https://wiki.facepunch.com/gmod/VMatrix) is 4x4 so the fourth row goes unused). The first three columns store the angle as a [rotation matrix](https://en.wikipedia.org/wiki/Rotation_matrix), and the fourth column stores the position vector.
     * 
     */
    GetPositionMatrix(): VMatrix;
    
    /**
     * [Shared]
     * 
     * Returns the rotation damping of the physics object.
     * 
     */
    GetRotDamping(): number;
    
    /**
     * [Shared]
     * 
     * Returns the angles of the [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) shadow. See [PhysObj:UpdateShadow](https://wiki.facepunch.com/gmod/PhysObj:UpdateShadow).
     * 
     */
    GetShadowAngles(): Angle;
    
    /**
     * [Shared]
     * 
     * Returns the position of the [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) shadow. See [PhysObj:UpdateShadow](https://wiki.facepunch.com/gmod/PhysObj:UpdateShadow).
     * 
     */
    GetShadowPos(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the speed damping of the physics object.
     * 
     */
    GetSpeedDamping(): number;
    
    /**
     * [Server]
     * 
     * Returns the internal and external stress of the entity.
     * 
     */
    GetStress(): LuaMultiReturn<[number, number]>;
    
    /**
     * [Shared]
     * 
     * Returns the surface area of the physics object in source-units². Or nil if the PhysObj is a generated sphere or box.
     * 
     */
    GetSurfaceArea(): number;
    
    /**
     * [Shared]
     * 
     * Returns the absolute directional velocity of the physobject.
     * 
     */
    GetVelocity(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the world velocity of a point in world coordinates about the object. This is useful for objects rotating around their own axis/origin.
     * @param point - A point to test in world space coordinates
     */
    GetVelocityAtPoint(point: Vector): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the volume in source units³. Or nil if the PhysObj is a generated sphere or box.
     * 
     */
    GetVolume(): number;
    
    /**
     * [Shared]
     * 
     * Returns whenever the specified flag(s) is/are set.
     * @param flags - Bitflag, see [Enums/FVPHYSICS](https://wiki.facepunch.com/gmod/Enums/FVPHYSICS).
     */
    HasGameFlag(flags: FVPHYSICS): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether the physics object is "sleeping".
     * 
     * See [PhysObj:Sleep](https://wiki.facepunch.com/gmod/PhysObj:Sleep) for more information.
     * 
     */
    IsAsleep(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whenever the entity is able to collide or not.
     * 
     */
    IsCollisionEnabled(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whenever the entity is affected by drag.
     * 
     */
    IsDragEnabled(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whenever the entity is affected by gravity.
     * 
     */
    IsGravityEnabled(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns if the physics object can move itself (by velocity, acceleration)
     * 
     */
    IsMotionEnabled(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whenever the entity is able to move.
     * 
     */
    IsMoveable(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whenever the physics object is penetrating another physics object.
     * 
     * This is internally implemented as `PhysObj:HasGameFlag( FVPHYSICS_PENETRATING )` and thus is only updated for non-static physics objects.
     * 
     */
    IsPenetrating(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns if the physics object is valid/not NULL.
     * 
     */
    IsValid(): boolean;
    
    /**
     * [Shared]
     * 
     * Mapping a vector in local frame of the physics object to world frame.
     * 
     * **Note:**
     * >this function does translation and rotation, with translation done first.
     * 
     * @param LocalVec - A vector in the physics object's local frame
     */
    LocalToWorld(LocalVec: Vector): Vector;
    
    /**
     * [Shared]
     * 
     * Rotate a vector from the local frame of the physics object to world frame.
     * 
     * **Note:**
     * >This function only rotates the vector, without any translation operation.
     * 
     * @param LocalVec - A vector in the physics object's local frame
     */
    LocalToWorldVector(LocalVec: Vector): Vector;
    
    /**
     * [Shared]
     * 
     * Prints debug info about the state of the physics object to the console.
     * 
     */
    OutputDebugInfo(): void;
    
    /**
     * [Shared]
     * 
     * Call this when the collision filter conditions change due to this object's state (e.g. changing solid type or collision group)
     * 
     */
    RecheckCollisionFilter(): void;
    
    /**
     * [Shared]
     * 
     * A convinience function for [Angle:RotateAroundAxis](https://wiki.facepunch.com/gmod/Angle:RotateAroundAxis).
     * @param dir - Direction, around which we will rotate
     * @param ang - Amount of rotation, in degrees
     */
    RotateAroundAxis(dir: Vector, ang: number): Angle;
    
    /**
     * [Shared]
     * 
     * Sets the amount of [drag](https://en.wikipedia.org/wiki/Drag_(physics)) to apply to a physics object when attempting to rotate.
     * @param coefficient - [Drag coefficient](https://en.wikipedia.org/wiki/Drag_coefficient). The bigger this value is, the slower the angles will change.
     */
    SetAngleDragCoefficient(coefficient: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the angles of the physobject in degrees.
     * @param angles - The new angles of the physobject.
     * **Warning:**
     * >The new angle will not be applied on the parent entity while the physics object is asleep ([PhysObj:Sleep](https://wiki.facepunch.com/gmod/PhysObj:Sleep))
     * 
     */
    SetAngles(angles: Angle): void;
    
    /**
     * [Shared]
     * 
     * Sets the specified [angular velocity](https://en.wikipedia.org/wiki/Angular_velocity) on the [PhysObj](https://wiki.facepunch.com/gmod/PhysObj)
     * @param angularVelocity - The new velocity in `degrees/s`. (Local frame)
     */
    SetAngleVelocity(angularVelocity: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the specified instantaneous [angular velocity](https://en.wikipedia.org/wiki/Angular_velocity) on the [PhysObj](https://wiki.facepunch.com/gmod/PhysObj)
     * @param angularVelocity - The new velocity to set velocity.
     */
    SetAngleVelocityInstantaneous(angularVelocity: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the buoyancy ratio of the physics object. (How well it floats in water)
     * @param buoyancy - Buoyancy ratio, where 0 is not buoyant at all (like a rock), and 1 is very buoyant (like wood). You can set values larger than 1 for greater effect.
     */
    SetBuoyancyRatio(buoyancy: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the contents flag of the [PhysObj](https://wiki.facepunch.com/gmod/PhysObj).
     * @param contents - The [Enums/CONTENTS](https://wiki.facepunch.com/gmod/Enums/CONTENTS).
     */
    SetContents(contents: CONTENTS): void;
    
    /**
     * [Shared]
     * 
     * Sets the linear and angular damping of the physics object.
     * @param linearDamping - Linear damping.
     * @param angularDamping - Angular damping.
     */
    SetDamping(linearDamping: number, angularDamping: number): void;
    
    /**
     * [Shared]
     * 
     * Modifies how much drag (air resistance) affects the object.
     * @param drag - The drag coefficient
     * It can be positive or negative.
     */
    SetDragCoefficient(drag: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the angular inertia. See [PhysObj:GetInertia](https://wiki.facepunch.com/gmod/PhysObj:GetInertia).
     * 
     * **Note:**
     * >This does not affect linear inertia.
     * 
     * @param angularInertia - The angular inertia of the object.<br/>
     */
    SetInertia(angularInertia: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the mass of the physics object.
     * @param mass - The mass in kilograms, in range `[0, 50000]`
     */
    SetMass(mass: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the material of the physobject.
     * 
     * **Note:**
     * >Impact sounds will only change if this is called on client
     * 
     * @param materialName - The name of the phys material to use. From this list: [Valve Developer](https://developer.valvesoftware.com/wiki/Material_surface_properties)
     */
    SetMaterial(materialName: string): void;
    
    /**
     * [Shared]
     * 
     * Sets the position of the physobject.
     * @param position - The new position of the physobject in world coordinates. (`source units`).
     * **Warning:**
     * >The new position will not be applied on the parent entity while the physics object is asleep ([PhysObj:Sleep](https://wiki.facepunch.com/gmod/PhysObj:Sleep))
     * 
     * @param [teleport = false] - If `true`, temporarily disables collisions of the physics objects just before moving it, then enables collisions back again.
     */
    SetPos(position: Vector, teleport = false): void;
    
    /**
     * [Shared]
     * 
     * Sets the velocity of the physics object for the next iteration.
     * @param velocity - The new velocity of the physics object in `source_unit/s`. (World frame)
     */
    SetVelocity(velocity: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the velocity of the physics object.
     * @param velocity - The new velocity of the physics object.
     */
    SetVelocityInstantaneous(velocity: Vector): void;
    
    /**
     * [Shared]
     * 
     * Makes the physics object "sleep". The physics object will no longer be moving unless it is "woken up" by either a collision with another moving object, or by [PhysObj:Wake](https://wiki.facepunch.com/gmod/PhysObj:Wake). 
     * 
     * This is an optimization feature of the physics engine. Normally physics objects will automatically "sleep" when not moving for a short while, to save resources, but it can be used for other purposes, for example to temporarily suspend an object mid air.
     * 
     */
    Sleep(): void;
    
    /**
     * [Shared]
     * 
     * Unlike [PhysObj:SetPos](https://wiki.facepunch.com/gmod/PhysObj:SetPos) and [PhysObj:SetAngles](https://wiki.facepunch.com/gmod/PhysObj:SetAngles), this allows the movement of a physobj while leaving physics interactions intact.<br/>
     * This is used internally by the motion controller of the Gravity Gun , the +use pickup and the Physics Gun, and entities such as the crane.
     * 
     * **Note:**
     * >This is the ideal function to move a physics shadow created with [Entity:PhysicsInitShadow](https://wiki.facepunch.com/gmod/Entity:PhysicsInitShadow) or [Entity:MakePhysicsObjectAShadow](https://wiki.facepunch.com/gmod/Entity:MakePhysicsObjectAShadow).
     * 
     * @param targetPosition - The position we should move to.
     * @param targetAngles - The angle we should rotate towards.
     * @param frameTime - The frame time to use for this movement, can be generally filled with [Global.FrameTime](https://wiki.facepunch.com/gmod/Global.FrameTime) or [ENTITY:PhysicsSimulate](https://wiki.facepunch.com/gmod/ENTITY:PhysicsSimulate) with the deltaTime. 
     * Can be set to 0 when you need to update the physics object just once.
     */
    UpdateShadow(targetPosition: Vector, targetAngles: Angle, frameTime: number): void;
    
    /**
     * [Shared]
     * 
     * Wakes the physics object, so that it will continue to simulate physics/gravity.
     * 
     * See [PhysObj:Sleep](https://wiki.facepunch.com/gmod/PhysObj:Sleep) for more information.
     * 
     */
    Wake(): void;
    
    /**
     * [Shared]
     * 
     * Converts a vector to a relative to the physics object coordinate system.
     * @param vec - The vector in world space coordinates.
     */
    WorldToLocal(vec: Vector): Vector;
    
    /**
     * [Shared]
     * 
     * Rotate a vector from the world frame to the local frame of the physics object.
     * 
     * **Note:**
     * >This function only rotates the vector, without any translation operation.
     * 
     * @param WorldVec - A vector in the world frame
     */
    WorldToLocalVector(WorldVec: Vector): Vector;

}

/**
 * 
 */
interface pixelvis_handle_t {
    

    

}

/**
 * This is a list of all methods only available for players. It is also possible to call [Entity](https://wiki.facepunch.com/gmod/Entity) functions on the Player.
 */
interface Player extends Entity {
    

    /**
     * [Shared]
     * 
     * Returns the player's AccountID part of their full SteamID.
     * 
     * Since this does not include other vital parts of the SteamID such as "Account Type" and "Account Instance", it should be avoided, as AccountIDs are finite, and can theoretically be the same for multiple valid accounts.
     * 
     * See [Player:SteamID](https://wiki.facepunch.com/gmod/Player:SteamID) for the text representation of the full SteamID.
     * See [Player:SteamID64](https://wiki.facepunch.com/gmod/Player:SteamID64) for a 64bit representation of the full SteamID.
     * 
     * **Note:**
     * >In a `-multirun` environment, this will return `-1` for all "copies" of a player because they are not authenticated with Steam.
     * 
     * For bots this will return values starting with `0` for the first bot, `1` for the second bot and so on.
     * 
     * 
     */
    AccountID(): number;
    
    /**
     * [Shared]
     * 
     * Adds an entity to the player's clean up list.
     * @param type - Cleanup type
     * @param ent - Entity to add
     */
    AddCleanup(type: string, ent: Entity): void;
    
    /**
     * [Shared]
     * 
     * Adds an entity to the total count of entities of same type.
     * 
     * **Note:**
     * >See [GetCount](/gmod/Player:GetCount) for list of types
     * 
     * @param str - Entity type
     * @param ent - Entity
     */
    AddCount(str: string, ent: Entity): void;
    
    /**
     * [Server]
     * 
     * Add a certain amount to the player's death count
     * @param count - number of deaths to add
     */
    AddDeaths(count: number): void;
    
    /**
     * [Server]
     * 
     * Add a certain amount to the player's frag count (or kills count)
     * @param count - number of frags to add
     */
    AddFrags(count: number): void;
    
    /**
     * [Server]
     * 
     * Adds a entity to the player's list of frozen objects.
     * @param ent - Entity
     * @param physobj - Physics object belonging to ent
     */
    AddFrozenPhysicsObject(ent: Entity, physobj: PhysObj): void;
    
    /**
     * [Client]
     * 
     * Sets up the voting system for the player.
     * This is a really barebone system. By calling this a vote gets started, when the player presses 0-9 the callback function gets called along with the key the player pressed. Use the draw callback to draw the vote panel.
     * @param name - Name of the vote
     * @param timeout - Time until the vote expires
     * @param vote_callback - The function to be run when the player presses 0-9 while a vote is active.
     * @param draw_callback - Used to draw the vote panel.
     */
    AddPlayerOption(name: string, timeout: number, vote_callback: Function, draw_callback: Function): void;
    
    /**
     * [Shared]
     * 
     * Plays a sequence directly from a sequence number, similar to [Player:AnimRestartGesture](https://wiki.facepunch.com/gmod/Player:AnimRestartGesture). This function has the advantage to play sequences that haven't been bound to an existing [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT)
     * @param slot - Gesture slot using [Enums/GESTURE_SLOT](https://wiki.facepunch.com/gmod/Enums/GESTURE_SLOT)
     * @param sequenceId - The sequence ID to play, can be retrieved with [Entity:LookupSequence](https://wiki.facepunch.com/gmod/Entity:LookupSequence).
     * @param cycle - The cycle to start the animation at, ranges from 0 to 1.
     * @param [autokill = false] - If the animation should not loop. true = stops the animation, false = the animation keeps playing.
     */
    AddVCDSequenceToGestureSlot(slot: GESTURE_SLOT, sequenceId: number, cycle: number, autokill = false): void;
    
    /**
     * [Shared]
     * 
     * Checks if the player is alive.
     * 
     */
    Alive(): boolean;
    
    /**
     * [Shared]
     * 
     * Sets if the player can toggle their flashlight. Function exists on both the server and client but has no effect when ran on the client.
     * @param canFlashlight - True allows flashlight toggling
     */
    AllowFlashlight(canFlashlight: boolean): void;
    
    /**
     * [Server]
     * 
     * Lets the player spray their decal without delay
     * @param allow - Allow or disallow
     */
    AllowImmediateDecalPainting(allow: boolean): void;
    
    /**
     * [Shared]
     * 
     * Resets player gesture in selected slot.
     * @param slot - Slot to reset. See the [Enums/GESTURE_SLOT](https://wiki.facepunch.com/gmod/Enums/GESTURE_SLOT).
     */
    AnimResetGestureSlot(slot: GESTURE_SLOT): void;
    
    /**
     * [Shared]
     * 
     * Restart a gesture on a player, within a gesture slot.
     * 
     * **Warning:**
     * >This is not automatically networked. This function has to be called on the client to be seen by said client.
     * 
     * @param slot - Gesture slot using [Enums/GESTURE_SLOT](https://wiki.facepunch.com/gmod/Enums/GESTURE_SLOT)
     * @param activity - The activity ( see [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT) ) or sequence that should be played
     * @param [autokill = false] - Whether the animation should be automatically stopped. true = stops the animation, false = the animation keeps playing/looping
     */
    AnimRestartGesture(slot: GESTURE_SLOT, activity: ACT, autokill = false): void;
    
    /**
     * [Shared]
     * 
     * Restarts the main animation on the player, has the same effect as calling [Entity:SetCycle](https://wiki.facepunch.com/gmod/Entity:SetCycle)( 0 ).
     * 
     */
    AnimRestartMainSequence(): void;
    
    /**
     * [Shared]
     * 
     * Sets the sequence of the animation playing in the given gesture slot.
     * @param slot - The gesture slot. See [Enums/GESTURE_SLOT](https://wiki.facepunch.com/gmod/Enums/GESTURE_SLOT)
     * @param sequenceID - Sequence ID to set.
     */
    AnimSetGestureSequence(slot: GESTURE_SLOT, sequenceID: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the weight of the animation playing in the given gesture slot.
     * @param slot - The gesture slot. See [Enums/GESTURE_SLOT](https://wiki.facepunch.com/gmod/Enums/GESTURE_SLOT)
     * @param weight - The weight this slot should be set to. Value must be ranging from 0 to 1.
     */
    AnimSetGestureWeight(slot: GESTURE_SLOT, weight: number): void;
    
    /**
     * [Shared]
     * 
     * Returns the player's armor.
     * 
     */
    Armor(): number;
    
    /**
     * [Server]
     * 
     * Bans the player from the server for a certain amount of minutes.
     * @param minutes - Duration of the ban in minutes (0 is permanent)
     * @param [kick = false] - Whether to kick the player after banning them or not
     */
    Ban(minutes: number, kick = false): void;
    
    /**
     * [Shared]
     * 
     * Returns true if the player's flashlight hasn't been disabled by [Player:AllowFlashlight](https://wiki.facepunch.com/gmod/Player:AllowFlashlight).
     * 
     * **Note:**
     * >This is not synchronized between clients and server automatically!
     * 
     * 
     */
    CanUseFlashlight(): boolean;
    
    /**
     * [Shared]
     * 
     * Prints a string to the chatbox of the client.
     * 
     * **Warning:**
     * >Just like the [usermessage](https://wiki.facepunch.com/gmod/usermessage), this function is affected by the 255 byte limit!
     * 
     * @param message - String to be printed
     */
    ChatPrint(message: string): void;
    
    /**
     * [Shared]
     * 
     * Checks if the limit is hit or not. If it is, it will throw a notification saying so.
     * @param limitType - Limit type. In unmodified Sandbox possible values are:
     * * "props"
     * * "ragdolls"
     * * "vehicles"
     * * "effects"
     * * "balloons"
     * * "cameras"
     * * "npcs"
     * * "sents"
     * * "dynamite"
     * * "lamps"
     * * "lights"
     * * "wheels"
     * * "thrusters"
     * * "hoverballs"
     * * "buttons"
     * * "emitters"
     */
    CheckLimit(limitType: string): boolean;
    
    /**
     * [Shared]
     * 
     * Runs the concommand on the player. This does not work on bots. If used clientside, always runs the command on the local player.
     * 
     * If you wish to directly modify the movement input of bots, use [GM:StartCommand](https://wiki.facepunch.com/gmod/GM:StartCommand) instead.
     * 
     * **Note:**
     * >Some commands/convars are blocked from being ran/changed using this function, usually to prevent harm/annoyance to clients. For a list of blocked commands, see [Blocked ConCommands](https://wiki.facepunch.com/gmod/Blocked_ConCommands).
     * 
     * @param command - command to run
     */
    ConCommand(command: string): void;
    
    /**
     * [Server]
     * 
     * Creates the player's death ragdoll entity and deletes the old one.
     * 
     * This is normally used when a player dies, to create their death ragdoll.
     * 
     * The ragdoll will be created with the player's properties such as <page text="Position">Entity:GetPos</page>, <page text="Angles">Entity:GetAngles</page>, <page text="PlayerColor">Player:GetPlayerColor</page>, <page text="Velocity">Entity:GetVelocity</page> and <page text="Model">Entity:GetModel</page>.
     * 
     * You can retrieve the entity this creates with [Player:GetRagdollEntity](https://wiki.facepunch.com/gmod/Player:GetRagdollEntity).
     * 
     */
    CreateRagdoll(): void;
    
    /**
     * [Server]
     * 
     * Disables the default player's crosshair. Can be reenabled with [Player:CrosshairEnable](https://wiki.facepunch.com/gmod/Player:CrosshairEnable). This will affect [WEAPON:DoDrawCrosshair](https://wiki.facepunch.com/gmod/WEAPON:DoDrawCrosshair).
     * 
     */
    CrosshairDisable(): void;
    
    /**
     * [Server]
     * 
     * Enables the player's crosshair, if it was previously disabled via [Player:CrosshairDisable](https://wiki.facepunch.com/gmod/Player:CrosshairDisable).
     * 
     */
    CrosshairEnable(): void;
    
    /**
     * [Shared]
     * 
     * Returns whether the player is crouching or not (<page text="FL_DUCKING">Enums/FL</page> flag).
     * 
     */
    Crouching(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns the player's death count
     * 
     */
    Deaths(): number;
    
    /**
     * [Server]
     * 
     * Prints the players' name and position to the console.
     * 
     */
    DebugInfo(): void;
    
    /**
     * [Server]
     * 
     * Detonates all tripmines belonging to the player.
     * 
     */
    DetonateTripmines(): void;
    
    /**
     * [Server]
     * 
     * Disables world clicking for given player. See [Panel:SetWorldClicker](https://wiki.facepunch.com/gmod/Panel:SetWorldClicker) and [Player:IsWorldClickingDisabled](https://wiki.facepunch.com/gmod/Player:IsWorldClickingDisabled).
     * @param disable - Whether the world clicking should be disabled.
     */
    DisableWorldClicking(disable: boolean): void;
    
    /**
     * [Shared]
     * 
     * Sends a third person animation event to the player.
     * 
     * Calls [GM:DoAnimationEvent](https://wiki.facepunch.com/gmod/GM:DoAnimationEvent) with <page text="PLAYERANIMEVENT_CUSTOM_GESTURE">Enums/PLAYERANIMEVENT</page> as the event, data as the given data.
     * @param data - The data to send.
     */
    DoAnimationEvent(data: number): void;
    
    /**
     * [Shared]
     * 
     * Starts the player's attack animation. The attack animation is determined by the weapon's HoldType.
     * 
     * Similar to other animation event functions, calls [GM:DoAnimationEvent](https://wiki.facepunch.com/gmod/GM:DoAnimationEvent) with <page text="PLAYERANIMEVENT_ATTACK_PRIMARY">Enums/PLAYERANIMEVENT</page> as the event and no extra data.
     * 
     */
    DoAttackEvent(): void;
    
    /**
     * [Shared]
     * 
     * Sends a specified third person animation event to the player.
     * 
     * Calls [GM:DoAnimationEvent](https://wiki.facepunch.com/gmod/GM:DoAnimationEvent) with specified arguments.
     * @param event - The event to send. See [Enums/PLAYERANIMEVENT](https://wiki.facepunch.com/gmod/Enums/PLAYERANIMEVENT).
     * @param data - The data to send alongside the event.
     */
    DoCustomAnimEvent(event: PLAYERANIMEVENT, data: number): void;
    
    /**
     * [Shared]
     * 
     * Sends a third person reload animation event to the player.
     * 
     * Similar to other animation event functions, calls [GM:DoAnimationEvent](https://wiki.facepunch.com/gmod/GM:DoAnimationEvent) with <page text= "PLAYERANIMEVENT_RELOAD">Enums/PLAYERANIMEVENT</page> as the event and no extra data.
     * 
     */
    DoReloadEvent(): void;
    
    /**
     * [Shared]
     * 
     * Sends a third person secondary fire animation event to the player.
     * 
     * Similar to other animation event functions, calls [GM:DoAnimationEvent](https://wiki.facepunch.com/gmod/GM:DoAnimationEvent) with <page text="PLAYERANIMEVENT_ATTACK_SECONDARY">Enums/PLAYERANIMEVENT</page> as the event and no extra data.
     * 
     */
    DoSecondaryAttack(): void;
    
    /**
     * [Shared]
     * 
     * Show/Hide the player's weapon's viewmodel.
     * @param draw - Should draw
     * @param [vm = 0] - Which view model to show/hide, 0-2.
     */
    DrawViewModel(draw: boolean, vm = 0): void;
    
    /**
     * [Server]
     * 
     * Show/Hide the player's weapon's worldmodel.
     * @param draw - Should draw
     */
    DrawWorldModel(draw: boolean): void;
    
    /**
     * [Server]
     * 
     * Drops the players' weapon of a specific class.
     * @param class_ - The class to drop.
     * @param [target = nil] - If set, launches the weapon at given position. There is a limit to how far it is willing to throw the weapon. Overrides velocity argument.
     * @param [velocity = nil] - If set and previous argument is unset, launches the weapon with given velocity. If the velocity is higher than 400, it will be clamped to 400.
     */
    DropNamedWeapon(class_: string, target?: Vector, velocity?: Vector): void;
    
    /**
     * [Server]
     * 
     * Drops any object the player is currently holding with either gravitygun or +Use (E key)
     * 
     */
    DropObject(): void;
    
    /**
     * [Server]
     * 
     * Forces the player to drop the specified weapon
     * @param [weapon = nil] - Weapon to be dropped. If unset, will default to the currently equipped weapon.
     * @param [target = nil] - If set, launches the weapon at given position. There is a limit to how far it is willing to throw the weapon. Overrides velocity argument.
     * @param [velocity = nil] - If set and previous argument is unset, launches the weapon with given velocity. If the velocity is higher than 400, it will be clamped to 400.
     */
    DropWeapon(weapon?: Weapon, target?: Vector, velocity?: Vector): void;
    
    /**
     * [Server]
     * 
     * Enters the player into specified vehicle
     * @param vehicle - Vehicle the player will enter
     */
    EnterVehicle(vehicle: Vehicle): void;
    
    /**
     * [Server]
     * 
     * Equips the player with the HEV suit.
     * 
     * Allows the player to zoom, walk slowly, sprint, pickup armor batteries, use the health and armor stations and also shows the HUD.<br/>
     * The player also emits a flatline sound on death, which can be overridden with [GM:PlayerDeathSound](https://wiki.facepunch.com/gmod/GM:PlayerDeathSound).
     * 
     * The player is automatically equipped with the suit on spawn, if you wish to stop that, use [Player:RemoveSuit](https://wiki.facepunch.com/gmod/Player:RemoveSuit).
     * 
     */
    EquipSuit(): void;
    
    /**
     * [Server]
     * 
     * Makes the player exit the vehicle if they're in one.
     * 
     */
    ExitVehicle(): void;
    
    /**
     * [Server]
     * 
     * Enables/Disables the player's flashlight.[Player:CanUseFlashlight](https://wiki.facepunch.com/gmod/Player:CanUseFlashlight) must be true in order for the player's flashlight to be changed.
     * @param isOn - Turns the flashlight on/off
     */
    Flashlight(isOn: boolean): void;
    
    /**
     * [Shared]
     * 
     * Returns true if the player's flashlight is on.
     * 
     */
    FlashlightIsOn(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns the amount of frags a player has.
     * 
     * **Note:**
     * >The value will change depending on the player's kill or suicide: +1 for a kill, -1 for a suicide.
     * 
     * 
     */
    Frags(): number;
    
    /**
     * [Server]
     * 
     * Freeze the player. Frozen players cannot move, look around, or attack. Key bindings are still called. Similar to [Player:Lock](https://wiki.facepunch.com/gmod/Player:Lock) but the player can still take damage.
     * 
     * Adds or removes the <page text="FL_FROZEN">Enums/FL</page> flag from the player.
     * 
     * **Bug :**
     * >Frozen bots will still be able to look around.
     * 
     * @param [frozen = false] - Whether the player should be frozen.
     */
    Freeze(frozen = false): void;
    
    /**
     * [Shared]
     * 
     * Returns the player's active weapon.
     * 
     * If used on a [Global.LocalPlayer](https://wiki.facepunch.com/gmod/Global.LocalPlayer)() and the player is spectating another player with `OBS_MODE_IN_EYE`, the weapon returned will be of the spectated player.
     * 
     */
    GetActiveWeapon(): Weapon;
    
    /**
     * [Server]
     * 
     * Returns the player's current activity.
     * 
     */
    GetActivity(): ACT;
    
    /**
     * [Shared]
     * 
     * Returns the direction that the player is aiming.
     * 
     */
    GetAimVector(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns true if the players' model is allowed to rotate around the pitch and roll axis.
     * 
     */
    GetAllowFullRotation(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether the player is allowed to use their weapons in a vehicle or not.
     * 
     */
    GetAllowWeaponsInVehicle(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns a table of all ammo the player has.
     * 
     */
    GetAmmo(): any;
    
    /**
     * [Shared]
     * 
     * Gets the amount of ammo the player has.
     * @param ammotype - The ammunition type. Can be either [number](https://wiki.facepunch.com/gmod/number) ammo ID or [string](https://wiki.facepunch.com/gmod/string) ammo name.
     */
    GetAmmoCount(ammotype: any): number;
    
    /**
     * [Shared]
     * 
     * Gets if the player will be pushed out of nocollided players.
     * 
     */
    GetAvoidPlayers(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns true if the player is able to walk using the (default) alt key.
     * 
     */
    GetCanWalk(): boolean;
    
    /**
     * [Shared]
     * 
     * Determines whenever the player is allowed to use the zoom functionality.
     * 
     */
    GetCanZoom(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns the player's class id.
     * 
     */
    GetClassID(): number;
    
    /**
     * [Shared]
     * 
     * Gets total count of entities of same type.
     * 
     * Default types:
     * ```
     * balloons
     * buttons
     * cameras
     * dynamite
     * emitters
     * hoverballs
     * lamps
     * lights
     * props
     * ragdolls
     * thrusters
     * wheels
     * ```
     * @param type - Type to get entity count of.
     * @param [minus = 0] - If specified, it will reduce the counter by this value. Works only serverside.
     */
    GetCount(type: string, minus = 0): number;
    
    /**
     * [Shared]
     * 
     * Returns the crouched walk speed multiplier.
     * 
     * See also [Player:GetWalkSpeed](https://wiki.facepunch.com/gmod/Player:GetWalkSpeed) and [Player:SetCrouchedWalkSpeed](https://wiki.facepunch.com/gmod/Player:SetCrouchedWalkSpeed).
     * 
     */
    GetCrouchedWalkSpeed(): number;
    
    /**
     * [Shared]
     * 
     * Returns the last command which was sent by the specified player. This can only be called on the player which [Global.GetPredictionPlayer](https://wiki.facepunch.com/gmod/Global.GetPredictionPlayer)() returns.
     * 
     * **Bug [#3302](https://github.com/Facepunch/garrysmod-issues/issues/3302):**
     * >This will fail in [GM:StartCommand](https://wiki.facepunch.com/gmod/GM:StartCommand).
     * 
     * **Note:**
     * >When called clientside in singleplayer during [WEAPON:Think](https://wiki.facepunch.com/gmod/WEAPON:Think), it will return nothing as the hook is not technically predicted in that instance. See the note on the page.
     * 
     * 
     */
    GetCurrentCommand(): CUserCmd;
    
    /**
     * [Shared]
     * 
     * Gets the **actual** view offset which equals the difference between the players actual position and their view when standing.
     * 
     * Do not confuse with [Player:GetViewOffset](https://wiki.facepunch.com/gmod/Player:GetViewOffset) and [Player:GetViewOffsetDucked](https://wiki.facepunch.com/gmod/Player:GetViewOffsetDucked)
     * 
     */
    GetCurrentViewOffset(): Vector;
    
    /**
     * [Shared]
     * 
     * Gets the entity the player is currently driving via the [drive](https://wiki.facepunch.com/gmod/drive) library.
     * 
     */
    GetDrivingEntity(): Entity;
    
    /**
     * [Shared]
     * 
     * Returns driving mode of the player. See [Entity Driving](https://wiki.facepunch.com/gmod/Entity_Driving).
     * 
     */
    GetDrivingMode(): number;
    
    /**
     * [Shared]
     * 
     * Returns a player's duck speed (in seconds)
     * 
     */
    GetDuckSpeed(): number;
    
    /**
     * [Shared]
     * 
     * Returns the entity the player is currently using, like func_tank mounted turrets or +use prop pickups.
     * 
     */
    GetEntityInUse(): Entity;
    
    /**
     * [Shared]
     * 
     * Returns a table with information of what the player is looking at.
     * 
     * The results of this function are **cached** clientside every frame.
     * 
     * Uses [util.GetPlayerTrace](https://wiki.facepunch.com/gmod/util.GetPlayerTrace) internally and is therefore bound by its limits.
     * 
     * See also [Player:GetEyeTraceNoCursor](https://wiki.facepunch.com/gmod/Player:GetEyeTraceNoCursor).
     * 
     */
    GetEyeTrace(): TraceResult;
    
    /**
     * [Shared]
     * 
     * Returns the trace according to the players view direction, ignoring their mouse (holding <key>C</key> and moving the mouse in Sandbox).
     * 
     * The results of this function are **cached** clientside every frame.
     * 
     * Uses [util.GetPlayerTrace](https://wiki.facepunch.com/gmod/util.GetPlayerTrace) internally and is therefore bound by its limits.
     * 
     * See also [Player:GetEyeTrace](https://wiki.facepunch.com/gmod/Player:GetEyeTrace).
     * 
     */
    GetEyeTraceNoCursor(): TraceResult;
    
    /**
     * [Shared]
     * 
     * Returns the FOV of the player.
     * 
     */
    GetFOV(): number;
    
    /**
     * [Client]
     * 
     * Returns the steam "relationship" towards the player.
     * 
     */
    GetFriendStatus(): string;
    
    /**
     * [Shared]
     * 
     * Gets the hands entity of a player
     * 
     */
    GetHands(): Entity;
    
    /**
     * [Shared]
     * 
     * Returns the widget the player is hovering with their mouse.
     * 
     */
    GetHoveredWidget(): Entity;
    
    /**
     * [Shared]
     * 
     * Gets the bottom base and the top base size of the player's hull.
     * 
     */
    GetHull(): LuaMultiReturn<[Vector, Vector]>;
    
    /**
     * [Shared]
     * 
     * Gets the bottom base and the top base size of the player's crouch hull.
     * 
     */
    GetHullDuck(): LuaMultiReturn<[Vector, Vector]>;
    
    /**
     * [Shared]
     * 
     * Retrieves the value of a client-side [ConVar](https://wiki.facepunch.com/gmod/ConVar). The [ConVar](https://wiki.facepunch.com/gmod/ConVar) must have a <page text="FCVAR_USERINFO">Enums/FCVAR</page> flag for this to work.
     * 
     * **Warning:**
     * >The returned value is truncated to 31 bytes.
     * 
     * **Warning:**
     * >On client this function will return value of the local player, regardless of which player the function was called on!
     * 
     * @param cVarName - The name of the client-side [ConVar](https://wiki.facepunch.com/gmod/ConVar).
     */
    GetInfo(cVarName: string): string;
    
    /**
     * [Shared]
     * 
     * Retrieves the numeric value of a client-side convar, returns nil if value is not convertible to a number. The [ConVar](https://wiki.facepunch.com/gmod/ConVar) must have a <page text="FCVAR_USERINFO">Enums/FCVAR</page> flag for this to work.
     * @param cVarName - The name of the [ConVar](https://wiki.facepunch.com/gmod/ConVar) to query the value of
     * @param default_ - Default value if we failed to retrieve the number.
     */
    GetInfoNum(cVarName: string, default_: number): number;
    
    /**
     * [Shared]
     * 
     * Returns the jump power of the player
     * 
     */
    GetJumpPower(): number;
    
    /**
     * [Shared]
     * 
     * Returns the player's ladder climbing speed.
     * 
     * See [Player:GetWalkSpeed](https://wiki.facepunch.com/gmod/Player:GetWalkSpeed) for normal walking speed, [Player:GetRunSpeed](https://wiki.facepunch.com/gmod/Player:GetRunSpeed) for sprinting speed and [Player:GetSlowWalkSpeed](https://wiki.facepunch.com/gmod/Player:GetSlowWalkSpeed) for slow walking speed.
     * 
     */
    GetLadderClimbSpeed(): number;
    
    /**
     * [Shared]
     * 
     * Returns the timescale multiplier of the player movement.
     * 
     */
    GetLaggedMovementValue(): number;
    
    /**
     * [Shared]
     * 
     * Returns the maximum amount of armor the player should have. Default value is 100.
     * 
     */
    GetMaxArmor(): number;
    
    /**
     * [Shared]
     * 
     * Returns the player's maximum movement speed.
     * 
     * See also [Player:SetMaxSpeed](https://wiki.facepunch.com/gmod/Player:SetMaxSpeed), [Player:GetWalkSpeed](https://wiki.facepunch.com/gmod/Player:GetWalkSpeed) and [Player:GetRunSpeed](https://wiki.facepunch.com/gmod/Player:GetRunSpeed).
     * 
     */
    GetMaxSpeed(): number;
    
    /**
     * [Shared]
     * 
     * Returns the player's name, this is an alias of [Player:Nick](https://wiki.facepunch.com/gmod/Player:Nick).
     * 
     * **Note:**
     * >This function overrides [Entity:GetName](https://wiki.facepunch.com/gmod/Entity:GetName) (in the Lua metatable, not in c++), keep it in mind when dealing with [ents.FindByName](https://wiki.facepunch.com/gmod/ents.FindByName) or any engine function which requires the mapping name.
     * 
     * 
     */
    GetName(): string;
    
    /**
     * [Shared]
     * 
     * Returns whenever the player is set not to collide with their teammates.
     * 
     */
    GetNoCollideWithTeammates(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns the the observer mode of the player
     * 
     */
    GetObserverMode(): OBS_MODE;
    
    /**
     * [Shared]
     * 
     * Returns the entity the player is currently observing.
     * 
     * Set using [Player:SpectateEntity](https://wiki.facepunch.com/gmod/Player:SpectateEntity).
     * 
     */
    GetObserverTarget(): Entity;
    
    /**
     * [Shared]
     * 
     * Returns a **P**ersistent **Data** key-value pair from the SQL database. (`sv.db` when called on server, `cl.db` when called on client)
     * 
     * Internally uses the [sql](https://wiki.facepunch.com/gmod/sql) library. See [util.GetPData](https://wiki.facepunch.com/gmod/util.GetPData) for cases when the player is not currently on the server.
     * 
     * **Warning:**
     * >This function internally uses [Player:UniqueID](https://wiki.facepunch.com/gmod/Player:UniqueID), which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.
     * 
     * **Note:**
     * >PData is not networked from servers to clients!
     * 
     * @param key - Name of the PData key
     * @param [default_ = nil] - Default value if PData key doesn't exist.
     */
    GetPData(key: string, default_?: any): string;
    
    /**
     * [Shared]
     * 
     * Returns a player model's color. The part of the model that is colored is determined by the model itself, and is different for each model.
     * 
     */
    GetPlayerColor(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns a table containing player information.
     * 
     */
    GetPlayerInfo(): any;
    
    /**
     * [Server]
     * 
     * Returns the preferred carry angles of an object, if any are set.
     * 
     * Calls [GM:GetPreferredCarryAngles](https://wiki.facepunch.com/gmod/GM:GetPreferredCarryAngles) with the target entity and returns the carry angles.
     * @param carryEnt - Entity to retrieve the carry angles of.
     */
    GetPreferredCarryAngles(carryEnt: Entity): Angle;
    
    /**
     * [Shared]
     * 
     * Returns the widget entity the player is using.
     * 
     * Having a pressed widget stops the player from firing their weapon to allow input to be passed onto the widget.
     * 
     */
    GetPressedWidget(): Entity;
    
    /**
     * [Shared]
     * 
     * Returns the weapon the player previously had equipped.
     * 
     */
    GetPreviousWeapon(): Entity;
    
    /**
     * [Shared]
     * 
     * Returns players screen punch effect angle. See [Player:ViewPunch](https://wiki.facepunch.com/gmod/Player:ViewPunch) and [Player:SetViewPunchAngles](https://wiki.facepunch.com/gmod/Player:SetViewPunchAngles)
     * 
     * @deprecated You should use [Player:GetViewPunchAngles](https://wiki.facepunch.com/gmod/Player:GetViewPunchAngles) instead.
     * 
     * 
     */
    GetPunchAngle(): Angle;
    
    /**
     * [Shared]
     * 
     * Returns players death ragdoll. The ragdoll is created by [Player:CreateRagdoll](https://wiki.facepunch.com/gmod/Player:CreateRagdoll).
     * 
     * **Bug :**
     * >Calling [Entity:GetPos](https://wiki.facepunch.com/gmod/Entity:GetPos) server-side with this function then will return the position when [Player:CreateRagdoll](https://wiki.facepunch.com/gmod/Player:CreateRagdoll) was used.
     * 
     * 
     */
    GetRagdollEntity(): Entity;
    
    /**
     * [Shared]
     * 
     * Returns the render angles for the player.
     * 
     */
    GetRenderAngles(): Angle;
    
    /**
     * [Shared]
     * 
     * Returns the player's sprint speed.
     * 
     * See also [Player:SetRunSpeed](https://wiki.facepunch.com/gmod/Player:SetRunSpeed), [Player:GetWalkSpeed](https://wiki.facepunch.com/gmod/Player:GetWalkSpeed) and [Player:GetMaxSpeed](https://wiki.facepunch.com/gmod/Player:GetMaxSpeed).
     * 
     */
    GetRunSpeed(): number;
    
    /**
     * [Shared]
     * 
     * Returns the position of a Player's view
     * 
     * **Note:**
     * >This is the same as calling [Entity:EyePos](https://wiki.facepunch.com/gmod/Entity:EyePos) on the player.
     * 
     * 
     */
    GetShootPos(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the player's slow walking speed, which is activated via <key>+WALK</key> keybind.
     * 
     * See [Player:GetWalkSpeed](https://wiki.facepunch.com/gmod/Player:GetWalkSpeed) for normal walking speed, [Player:GetRunSpeed](https://wiki.facepunch.com/gmod/Player:GetRunSpeed) for sprinting speed and [Player:GetLadderClimbSpeed](https://wiki.facepunch.com/gmod/Player:GetLadderClimbSpeed) for ladder climb speed.
     * 
     */
    GetSlowWalkSpeed(): number;
    
    /**
     * [Shared]
     * 
     * Returns the maximum height player can step onto.
     * 
     */
    GetStepSize(): number;
    
    /**
     * [Shared]
     * 
     * Returns the player's HEV suit power.
     * 
     * **Bug [#3449](https://github.com/Facepunch/garrysmod-issues/issues/3449):**
     * >This will only work for the local player when used clientside.
     * 
     * 
     */
    GetSuitPower(): number;
    
    /**
     * [Server]
     * 
     * Returns the number of seconds that the player has been timing out for. You can check if a player is timing out with [Player:IsTimingOut](https://wiki.facepunch.com/gmod/Player:IsTimingOut).
     * 
     * **Note:**
     * >This function is relatively useless because it is tied to the value of the `sv_timeout` ConVar, which is irrelevant to the description above. [This is not considered as a bug](https://discord.com/channels/565105920414318602/567617926991970306/748970396224585738).
     * 
     * 
     */
    GetTimeoutSeconds(): number;
    
    /**
     * [Shared]
     * 
     * Returns <page text="TOOL">Structures/TOOL</page> table of players current tool, or of the one specified.
     * @param [mode = nil] - Classname of the tool to retrieve. ( Filename of the tool in gmod_tool/stools/ )
     */
    GetTool(mode?: string): any;
    
    /**
     * [Shared]
     * 
     * Returns a player's unduck speed (in seconds)
     * 
     */
    GetUnDuckSpeed(): number;
    
    /**
     * [Shared]
     * 
     * Returns the entity the player would use if they would press their `+use` keybind.
     * 
     * **Note:**
     * >Because entity physics objects usually do not exist on the client, the client's use entity will resolve to whatever the crosshair is placed on within a little less than 72 units of the player's eye position. This differs from the entity returned by the server, which has fully physical use checking. See [util.TraceHull](https://wiki.facepunch.com/gmod/util.TraceHull).
     * 
     * Issue tracker: [5027](https://github.com/Facepunch/garrysmod-issues/issues/5027)
     * 
     * 
     */
    GetUseEntity(): Entity;
    
    /**
     * [Shared]
     * 
     * Returns the player's user group. By default, player user groups are loaded from `garrysmod/settings/users.txt`.
     * 
     */
    GetUserGroup(): string;
    
    /**
     * [Shared]
     * 
     * Gets the vehicle the player is driving, returns NULL ENTITY if the player is not driving.
     * 
     */
    GetVehicle(): Vehicle;
    
    /**
     * [Shared]
     * 
     * Returns the entity the player is using to see from (such as the player itself, the camera, or another entity).
     * 
     * **Note:**
     * >This function will return a [NULL Entity] until [Player:SetViewEntity](https://wiki.facepunch.com/gmod/Player:SetViewEntity) has been used
     * 
     * 
     */
    GetViewEntity(): Entity;
    
    /**
     * [Shared]
     * 
     * Returns the player's view model entity by the index.
     * Each player has 3 view models by default, but only the first one is used.
     * 
     * To use the other viewmodels in your SWEP, see [Entity:SetWeaponModel](https://wiki.facepunch.com/gmod/Entity:SetWeaponModel).
     * 
     * **Note:**
     * >In the Client, other players' viewmodels are not available unless they are being spectated.
     * 
     * @param [index = 0] - optional index of the view model to return, can range from 0 to 2
     */
    GetViewModel(index = 0): Entity;
    
    /**
     * [Shared]
     * 
     * Returns the view offset of the player which equals the difference between the players actual position and their view.
     * 
     * See also [Player:GetViewOffsetDucked](https://wiki.facepunch.com/gmod/Player:GetViewOffsetDucked).
     * 
     */
    GetViewOffset(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the view offset of the player which equals the difference between the players actual position and their view when ducked.
     * 
     * See also [Player:GetViewOffset](https://wiki.facepunch.com/gmod/Player:GetViewOffset).
     * 
     */
    GetViewOffsetDucked(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns players screen punch effect angle.
     * 
     */
    GetViewPunchAngles(): Angle;
    
    /**
     * [Shared]
     * 
     * Returns client's view punch velocity. See [Player:ViewPunch](https://wiki.facepunch.com/gmod/Player:ViewPunch) and [Player:SetViewPunchVelocity](https://wiki.facepunch.com/gmod/Player:SetViewPunchVelocity)
     * 
     */
    GetViewPunchVelocity(): Angle;
    
    /**
     * [Client]
     * 
     * Returns the current voice volume scale for given player on client.
     * 
     */
    GetVoiceVolumeScale(): number;
    
    /**
     * [Shared]
     * 
     * Returns the player's normal walking speed. Not sprinting, not slow walking. (+walk)
     * 
     * See also [Player:SetWalkSpeed](https://wiki.facepunch.com/gmod/Player:SetWalkSpeed), [Player:GetMaxSpeed](https://wiki.facepunch.com/gmod/Player:GetMaxSpeed) and [Player:GetRunSpeed](https://wiki.facepunch.com/gmod/Player:GetRunSpeed).
     * 
     */
    GetWalkSpeed(): number;
    
    /**
     * [Shared]
     * 
     * Returns the weapon for the specified class
     * @param className - Class name of weapon
     */
    GetWeapon(className: string): Weapon;
    
    /**
     * [Shared]
     * 
     * Returns a player's weapon color. The part of the model that is colored is determined by the model itself, and is different for each model. The format is Vector(r,g,b), and each color should be between 0 and 1.
     * 
     */
    GetWeaponColor(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns a table of the player's weapons.
     * 
     * **Note:**
     * >This function returns a sequential table, meaning it should be looped with [Global.ipairs](https://wiki.facepunch.com/gmod/Global.ipairs) instead of [Global.pairs](https://wiki.facepunch.com/gmod/Global.pairs) for efficiency reasons.
     * 
     * 
     */
    GetWeapons(): any;
    
    /**
     * [Server]
     * 
     * Gives the player a weapon.
     * 
     * **Note:**
     * >While this function is meant for weapons/pickupables only, it is **not** restricted to weapons. Any entity can be spawned using this function, including NPCs and SENTs.
     * 
     * @param weaponClassName - Class name of weapon to give the player
     * @param [bNoAmmo = false] - Set to true to not give any ammo on weapon spawn. (Reserve ammo set by DefaultClip)
     */
    Give(weaponClassName: string, bNoAmmo = false): Weapon;
    
    /**
     * [Server]
     * 
     * Gives ammo to a player
     * @param amount - Amount of ammo
     * @param type - Type of ammo.
     * This is a string for named ammo types, and a number for ammo ID.
     * You can find a list of default ammo types <page text="here">Default_Ammo_Types</page>.
     * @param [hidePopup = false] - Hide display popup when giving the ammo
     */
    GiveAmmo(amount: number, type: any, hidePopup = false): number;
    
    /**
     * [Server]
     * 
     * Disables god mode on the player.
     * 
     */
    GodDisable(): void;
    
    /**
     * [Server]
     * 
     * Enables god mode on the player.
     * 
     */
    GodEnable(): void;
    
    /**
     * [Shared]
     * 
     * Returns whether the player has god mode or not, contolled by [Player:GodEnable](https://wiki.facepunch.com/gmod/Player:GodEnable) and [Player:GodDisable](https://wiki.facepunch.com/gmod/Player:GodDisable).
     * 
     */
    HasGodMode(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns if the player has the specified weapon
     * @param className - Class name of the weapon
     */
    HasWeapon(className: string): boolean;
    
    /**
     * [Shared]
     * 
     * Returns if the player is in a vehicle
     * 
     */
    InVehicle(): boolean;
    
    /**
     * [Server]
     * 
     * Returns the player's IP address and connection port in ip:port form
     * 
     * **Note:**
     * >Returns `Error!` for bots.
     * 
     * 
     */
    IPAddress(): string;
    
    /**
     * [Shared]
     * 
     * Returns whether the player is an admin or not. It will also return `true` if the player is [Player:IsSuperAdmin](https://wiki.facepunch.com/gmod/Player:IsSuperAdmin) by default.
     * 
     * Internally this is determined by [Player:IsUserGroup](https://wiki.facepunch.com/gmod/Player:IsUserGroup).
     * 
     */
    IsAdmin(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns if the player is an bot or not
     * 
     */
    IsBot(): boolean;
    
    /**
     * [Server]
     * 
     * Returns true from the point when the player is sending client info but not fully in the game until they disconnect.
     * 
     */
    IsConnected(): boolean;
    
    /**
     * [Shared]
     * 
     * Used to find out if a player is currently 'driving' an entity (by which we mean 'right click > drive' ).
     * 
     */
    IsDrivingEntity(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether the players movement is currently frozen, controlled by [Player:Freeze](https://wiki.facepunch.com/gmod/Player:Freeze).
     * 
     */
    IsFrozen(): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether the player identity was confirmed by the steam network.
     * 
     * See also [GM:PlayerAuthed](https://wiki.facepunch.com/gmod/GM:PlayerAuthed).
     * 
     */
    IsFullyAuthenticated(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns if a player is the host of the current session.
     * 
     */
    IsListenServerHost(): boolean;
    
    /**
     * [Client]
     * 
     * Returns whether or not the player is muted locally.
     * 
     */
    IsMuted(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns true if the player is playing a taunt.
     * 
     */
    IsPlayingTaunt(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whenever the player is heard by the local player clientside, or if the player is speaking serverside.
     * 
     */
    IsSpeaking(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether the player is currently sprinting or not, specifically if they are holding their sprint key and are allowed to sprint.
     * 
     * This will not check if the player is currently sprinting into a wall. (i.e. holding their sprint key but not moving)
     * 
     */
    IsSprinting(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whenever the player is equipped with the suit item.
     * 
     * **Bug [#3449](https://github.com/Facepunch/garrysmod-issues/issues/3449):**
     * >This will only work for the local player when used clientside.
     * 
     * 
     */
    IsSuitEquipped(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether the player is a super admin.
     * 
     * Internally this is determined by [Player:IsUserGroup](https://wiki.facepunch.com/gmod/Player:IsUserGroup). See also [Player:IsAdmin](https://wiki.facepunch.com/gmod/Player:IsAdmin).
     * 
     */
    IsSuperAdmin(): boolean;
    
    /**
     * [Server]
     * 
     * Returns `true` if the player is timing out (i.e. is losing connection), `false` otherwise.
     * 
     * A player is considered timing out when more than 4 seconds has elapsed since a network packet was received from given player.
     * 
     */
    IsTimingOut(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether the player is typing in their chat.
     * 
     * This may not work properly if the server uses a custom chatbox.
     * 
     */
    IsTyping(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns true/false if the player is in specified group or not. See [Player:GetUserGroup](https://wiki.facepunch.com/gmod/Player:GetUserGroup) for a way to get player's usergroup.
     * @param groupname - Group to check the player for.
     */
    IsUserGroup(groupname: string): boolean;
    
    /**
     * [Client]
     * 
     * Returns if the player can be heard by the local player.
     * 
     */
    IsVoiceAudible(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns if the player currently walking. (`+walk` keybind)
     * 
     */
    IsWalking(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether the player is using the world clicking feature, see [Panel:SetWorldClicker](https://wiki.facepunch.com/gmod/Panel:SetWorldClicker)
     * 
     */
    IsWorldClicking(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether the world clicking is disabled for given player or not. See [Player:DisableWorldClicking](https://wiki.facepunch.com/gmod/Player:DisableWorldClicking).
     * 
     */
    IsWorldClickingDisabled(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether a key is down. This is not networked to other players, meaning only the local client can see the keys they are pressing.
     * @param key - The key, see [Enums/IN](https://wiki.facepunch.com/gmod/Enums/IN)
     */
    KeyDown(key: IN): boolean;
    
    /**
     * [Shared]
     * 
     * Gets whether a key was down one tick ago.
     * @param key - The key, see [Enums/IN](https://wiki.facepunch.com/gmod/Enums/IN)
     */
    KeyDownLast(key: IN): boolean;
    
    /**
     * [Shared]
     * 
     * Gets whether a key was just pressed this tick.
     * @param key - Corresponds to an [Enums/IN](https://wiki.facepunch.com/gmod/Enums/IN)
     */
    KeyPressed(key: IN): boolean;
    
    /**
     * [Shared]
     * 
     * Gets whether a key was just released this tick.
     * @param key - The key, see [Enums/IN](https://wiki.facepunch.com/gmod/Enums/IN)
     */
    KeyReleased(key: IN): boolean;
    
    /**
     * [Server]
     * 
     * Kicks the player from the server.
     * 
     * **Note:**
     * >This can not be run before the player has fully joined in. Use [game.KickID](https://wiki.facepunch.com/gmod/game.KickID) for that.
     * 
     * @param [reason = No reason given] - Reason to show for disconnection.
     * **Warning:**
     * >This will be shortened to ~512 chars, though this includes the command itself and the player index so will realistically be more around ~498. It is recommended to avoid going near the limit to avoid truncation.
     * 
     */
    Kick(reason?: string): void;
    
    /**
     * [Server]
     * 
     * Kills a player and calls [GM:PlayerDeath](https://wiki.facepunch.com/gmod/GM:PlayerDeath).
     * 
     */
    Kill(): void;
    
    /**
     * [Server]
     * 
     * Kills a player without notifying the rest of the server.
     * 
     * This will call [GM:PlayerSilentDeath](https://wiki.facepunch.com/gmod/GM:PlayerSilentDeath) instead of [GM:PlayerDeath](https://wiki.facepunch.com/gmod/GM:PlayerDeath).
     * 
     */
    KillSilent(): void;
    
    /**
     * [Shared]
     * 
     * This allows the server to mitigate the lag of the player by moving back all the entities that can be lag compensated to the time the player attacked with his weapon.
     * 
     * This technique is most commonly used on things that hit other entities instantaneously, such as traces.
     * 
     * **Warning:**
     * >This function NEEDS to be disabled after you're done with it or it will break the movement of the entities affected!
     * 
     * **Bug [#3683](https://github.com/Facepunch/garrysmod-issues/issues/3683):**
     * >Lag compensation does not support pose parameters.
     * 
     * **Note:**
     * >[Entity:FireBullets](https://wiki.facepunch.com/gmod/Entity:FireBullets) calls this function internally.
     * 
     * @param lagCompensation - The state of the lag compensation, true to enable and false to disable.
     */
    LagCompensation(lagCompensation: boolean): void;
    
    /**
     * [Server]
     * 
     * Returns the hitgroup where the player was last hit.
     * 
     */
    LastHitGroup(): HITGROUP;
    
    /**
     * [Shared]
     * 
     * Shows "limit hit" notification in sandbox.
     * 
     * **Note:**
     * >This function is only available in Sandbox and its derivatives.
     * 
     * @param type - Type of hit limit.
     */
    LimitHit(type: string): void;
    
    /**
     * [Shared]
     * 
     * Returns the direction a player is looking as a entity/local-oriented angle.
     * 
     * Unlike [Entity:EyeAngles](https://wiki.facepunch.com/gmod/Entity:EyeAngles), this function does not include angles of the Player's [Entity:GetParent](https://wiki.facepunch.com/gmod/Entity:GetParent).
     * 
     */
    LocalEyeAngles(): Angle;
    
    /**
     * [Server]
     * 
     * Stops a player from using any inputs, such as moving, turning, or attacking. Key binds are still called. Similar to [Player:Freeze](https://wiki.facepunch.com/gmod/Player:Freeze) but the player takes no damage.
     * 
     * Adds the <page text="FL_FROZEN">Enums/FL</page> and <page text="FL_GODMODE">Enums/FL</page> flags to the player.
     * 
     * **Bug :**
     * >Frozen bots will still be able to look around.
     * 
     * 
     */
    Lock(): void;
    
    /**
     * [Shared]
     * 
     * Returns the position of a Kinect bone.
     * @param bone - Bone to get the position of. Must be from 0 to 19.
     */
    MotionSensorPos(bone: number): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the players name. Identical to [Player:Nick](https://wiki.facepunch.com/gmod/Player:Nick) and [Player:GetName](https://wiki.facepunch.com/gmod/Player:GetName).
     * 
     */
    Name(): string;
    
    /**
     * [Shared]
     * 
     * Returns the player's nickname.
     * 
     */
    Nick(): string;
    
    /**
     * [Server]
     * 
     * Returns the 64-bit SteamID aka CommunityID of the Steam Account that owns the Garry's Mod license this player is using. This is useful for detecting players using Steam Family Sharing.
     * 
     * If player is not using Steam Family Sharing, this will return the player's actual SteamID64().
     * 
     * **Note:**
     * >This data will only be available after the player has fully authenticated with Steam. See [Player:IsFullyAuthenticated](https://wiki.facepunch.com/gmod/Player:IsFullyAuthenticated).
     * 
     * 
     */
    OwnerSteamID64(): string;
    
    /**
     * [Shared]
     * 
     * Returns the packet loss of the client. It is not networked so it only returns 0 when run clientside.
     * 
     */
    PacketLoss(): number;
    
    /**
     * [Shared]
     * 
     * Unfreezes the props player is looking at. This is essentially the same as pressing reload with the physics gun, including double press for unfreeze all.
     * 
     */
    PhysgunUnfreeze(): number;
    
    /**
     * [Server]
     * 
     * This makes the player hold ( same as pressing <key>E</key> on a small prop ) the provided entity.
     * 
     * **Note:**
     * >Don't get this confused with picking up items like ammo or health kits
     * 
     * **Note:**
     * >This picks up the passed entity regardless of its mass or distance from the player
     * 
     * @param entity - Entity to pick up.
     */
    PickupObject(entity: Entity): void;
    
    /**
     * [Server]
     * 
     * Forces the player to pickup an existing weapon entity. The player will not pick up the weapon if they already own a weapon of given type, or if the player could not normally have this weapon in their inventory.
     * 
     * This function **will** bypass [GM:PlayerCanPickupWeapon](https://wiki.facepunch.com/gmod/GM:PlayerCanPickupWeapon).
     * @param wep - The weapon to try to pick up.
     * @param [ammoOnly = false] - If set to true, the player will only attempt to pick up the ammo from the weapon. The weapon will not be picked up even if the player doesn't have a weapon of this type, and the weapon will be removed if the player picks up any ammo from it.
     */
    PickupWeapon(wep: Weapon, ammoOnly = false): boolean;
    
    /**
     * [Shared]
     * 
     * Returns the player's ping to server.
     * 
     */
    Ping(): number;
    
    /**
     * [Server]
     * 
     * Plays the correct step sound according to what the player is staying on.
     * @param volume - Volume for the sound, in range from 0 to 1
     */
    PlayStepSound(volume: number): void;
    
    /**
     * [Shared]
     * 
     * Displays a message either in their chat, console, or center of the screen. See also [Global.PrintMessage](https://wiki.facepunch.com/gmod/Global.PrintMessage).
     * 
     * **Note:**
     * >When called serverside, this uses the archaic user message system (the [umsg](https://wiki.facepunch.com/gmod/umsg)) and hence is limited to ≈250 characters.
     * 
     * `HUD_PRINTCENTER` will not work when this is called clientside.
     * 
     * @param type - Which type of message should be sent to the player ([Enums/HUD](https://wiki.facepunch.com/gmod/Enums/HUD)).
     * @param message - Message to be sent to the player.
     */
    PrintMessage(type: HUD, message: string): void;
    
    /**
     * [Server]
     * 
     * Removes all ammo from a certain player
     * 
     */
    RemoveAllAmmo(): void;
    
    /**
     * [Server]
     * 
     * Removes all weapons and ammo from the player.
     * 
     */
    RemoveAllItems(): void;
    
    /**
     * [Shared]
     * 
     * Removes the amount of the specified ammo from the player.
     * @param ammoCount - The amount of ammunition to remove.
     * @param ammoName - The name of the ammunition to remove from. This can also be a [number](https://wiki.facepunch.com/gmod/number) ammoID.
     */
    RemoveAmmo(ammoCount: number, ammoName: string): void;
    
    /**
     * [Shared]
     * 
     * Removes a **P**ersistent **Data** key-value pair from the SQL database. (`sv.db` when called on server, `cl.db` when called on client)
     * 
     * Internally uses the [sql](https://wiki.facepunch.com/gmod/sql) library. See [util.RemovePData](https://wiki.facepunch.com/gmod/util.RemovePData) for cases when the player is not currently on the server.
     * 
     * **Warning:**
     * >This function internally uses [Player:UniqueID](https://wiki.facepunch.com/gmod/Player:UniqueID), which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.
     * 
     * @param key - Key to remove
     */
    RemovePData(key: string): boolean;
    
    /**
     * [Server]
     * 
     * Strips the player's suit item.
     * 
     */
    RemoveSuit(): void;
    
    /**
     * [Shared]
     * 
     * Resets both normal and duck hulls to their default values.
     * 
     */
    ResetHull(): void;
    
    /**
     * [Server]
     * 
     * Forces the player to say whatever the first argument is. Works on bots too.
     * 
     * **Note:**
     * >This function ignores the default chat message cooldown
     * 
     * @param text - The text to force the player to say.
     * @param [teamOnly = false] - Whether to send this message to our own team only.
     */
    Say(text: string, teamOnly = false): void;
    
    /**
     * [Shared]
     * 
     * Fades the screen
     * @param flags - Fade flags defined with [Enums/SCREENFADE](https://wiki.facepunch.com/gmod/Enums/SCREENFADE).
     * @param [clr = color_white] - The color of the screenfade
     * @param fadeTime - Fade(in/out) effect transition time ( From no fade to full fade and vice versa ).
     * This is limited to 7 bits integer part and 9 bits fractional part.
     * @param fadeHold - Fade effect hold time.
     * This is limited to 7 bits integer part and 9 bits fractional part.
     */
    ScreenFade(flags: SCREENFADE, clr?: number, fadeTime: number, fadeHold: number): void;
    
    /**
     * [Server]
     * 
     * Sets the active weapon of the player by its class name.
     * 
     * **Warning:**
     * >This will switch the weapon out of prediction, causing delay on the client and [WEAPON:Deploy](https://wiki.facepunch.com/gmod/WEAPON:Deploy) and [WEAPON:Holster](https://wiki.facepunch.com/gmod/WEAPON:Holster) to be called out of prediction. Try using [CUserCmd:SelectWeapon](https://wiki.facepunch.com/gmod/CUserCmd:SelectWeapon) or [input.SelectWeapon](https://wiki.facepunch.com/gmod/input.SelectWeapon), instead.
     * 
     * **Note:**
     * >This will trigger the weapon switch event and associated animations. To switch weapons silently, use [Player:SetActiveWeapon](https://wiki.facepunch.com/gmod/Player:SetActiveWeapon).
     * 
     * @param className - The class name of the weapon to switch to.
     * If the player doesn't have the specified weapon, nothing will happen. You can use [Player:Give](https://wiki.facepunch.com/gmod/Player:Give) to give the weapon first.
     */
    SelectWeapon(className: string): void;
    
    /**
     * [Server]
     * 
     * Sends a hint to a player.
     * 
     * **Note:**
     * >This function is only available in Sandbox and its derivatives. Since this adds `#Hint_` to the beginning of each message, you should only use it with default hint messages, or those cached with [language.Add](https://wiki.facepunch.com/gmod/language.Add). For hints with custom text, look at [notification.AddLegacy](https://wiki.facepunch.com/gmod/notification.AddLegacy).
     * 
     * @param name - Name/class/index of the hint. You can find a list of hint names for this function <page text="here">List_of_Hint_Classes</page>.
     * @param delay - Delay in seconds before showing the hint
     */
    SendHint(name: string, delay: number): void;
    
    /**
     * [Server]
     * 
     * Executes a simple Lua string on the player.
     * 
     * **Note:**
     * >If you need to use this function more than once consider using [net](https://wiki.facepunch.com/gmod/net) library. Send net message and make the entire code you want to execute in [net.Receive](https://wiki.facepunch.com/gmod/net.Receive) on client.
     * 
     * **Note:**
     * >The string is limited to 254 bytes. Consider using thefor more advanced server-client interaction.
     * 
     * @param script - The script to execute.
     */
    SendLua(script: string): void;
    
    /**
     * [Server]
     * 
     * Sets the player's active weapon. You should use [CUserCmd:SelectWeapon](https://wiki.facepunch.com/gmod/CUserCmd:SelectWeapon) or [Player:SelectWeapon](https://wiki.facepunch.com/gmod/Player:SelectWeapon), instead in most cases.
     * 
     * This function will not trigger the weapon switch events or associated equip animations. It will bypass 
     *  [GM:PlayerSwitchWeapon](https://wiki.facepunch.com/gmod/GM:PlayerSwitchWeapon) and the currently active weapon's [WEAPON:Holster](https://wiki.facepunch.com/gmod/WEAPON:Holster) return value.
     * @param weapon - The weapon to equip.
     */
    SetActiveWeapon(weapon: Weapon): void;
    
    /**
     * [Server]
     * 
     * Sets the player's activity.
     * @param act - The new activity to set. See [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT).
     */
    SetActivity(act: ACT): void;
    
    /**
     * [Shared]
     * 
     * Set if the players' model is allowed to rotate around the pitch and roll axis.
     * @param Allowed - Allowed to rotate
     */
    SetAllowFullRotation(Allowed: boolean): void;
    
    /**
     * [Server]
     * 
     * Allows player to use their weapons in a vehicle. You need to call this before entering a vehicle.
     * 
     * **Bug [#1277](https://github.com/Facepunch/garrysmod-issues/issues/1277):**
     * >Shooting in a vehicle fires two bullets.
     * 
     * @param allow - Show we allow player to use their weapons in a vehicle or not.
     */
    SetAllowWeaponsInVehicle(allow: boolean): void;
    
    /**
     * [Shared]
     * 
     * Sets the amount of the specified ammo for the player.
     * @param ammoCount - The amount of ammunition to set.
     * @param ammoType - The ammunition type. Can be either [number](https://wiki.facepunch.com/gmod/number) ammo ID or [string](https://wiki.facepunch.com/gmod/string) ammo name.
     */
    SetAmmo(ammoCount: number, ammoType: any): void;
    
    /**
     * [Server]
     * 
     * Sets the player armor to the argument.
     * @param Amount - The amount that the player armor is going to be set to.
     */
    SetArmor(Amount: number): void;
    
    /**
     * [Shared]
     * 
     * Pushes the player away from another player whenever it's inside the other players bounding box.
     * @param avoidPlayers - Avoid or not avoid.
     */
    SetAvoidPlayers(avoidPlayers: boolean): void;
    
    /**
     * [Shared]
     * 
     * Set if the player should be allowed to walk using the (default) alt key.
     * @param abletowalk - True allows the player to walk.
     */
    SetCanWalk(abletowalk: boolean): void;
    
    /**
     * [Shared]
     * 
     * Sets whether the player can use the HL2 suit zoom ("+zoom" bind) or not.
     * @param canZoom - Whether to make the player able or unable to zoom.
     */
    SetCanZoom(canZoom: boolean): void;
    
    /**
     * [Shared]
     * 
     * Sets the player's class id.
     * @param classID - The class id the player is being set with.
     */
    SetClassID(classID: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the crouched walk speed multiplier.
     * 
     * Doesn't work for values above 1.
     * 
     * See also [Player:SetWalkSpeed](https://wiki.facepunch.com/gmod/Player:SetWalkSpeed) and [Player:GetCrouchedWalkSpeed](https://wiki.facepunch.com/gmod/Player:GetCrouchedWalkSpeed).
     * @param speed - The walk speed multiplier that crouch speed should be.
     */
    SetCrouchedWalkSpeed(speed: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the **actual** view offset which equals the difference between the players actual position and their view when standing.
     * 
     * Do not confuse with [Player:SetViewOffset](https://wiki.facepunch.com/gmod/Player:SetViewOffset) and [Player:SetViewOffsetDucked](https://wiki.facepunch.com/gmod/Player:SetViewOffsetDucked)
     * @param viewOffset - The new view offset.
     */
    SetCurrentViewOffset(viewOffset: Vector): void;
    
    /**
     * [Server]
     * 
     * Sets a player's death count
     * @param deathcount - Number of deaths (positive or negative)
     */
    SetDeaths(deathcount: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the driving entity and driving mode.
     * 
     * Use [drive.PlayerStartDriving](https://wiki.facepunch.com/gmod/drive.PlayerStartDriving) instead, see [Entity Driving](https://wiki.facepunch.com/gmod/Entity_Driving).
     * @param [drivingEntity = NULL] - The entity the player should drive.
     * @param drivingMode - The driving mode index.
     */
    SetDrivingEntity(drivingEntity?: Entity, drivingMode: number): void;
    
    /**
     * [Shared]
     * 
     * Applies the specified sound filter to the player.
     * @param soundFilter - The index of the sound filter to apply.
     * Pick from the [list of DSP's](https://developer.valvesoftware.com/wiki/Dsp_presets).
     * @param fastReset - If set to true the sound filter will be removed faster.
     * **Note:**
     * >**This only works clientside**. If used serverside, a message will be displayed (`SetPlayerDSP: fastReset only valid from client`) in the server console.
     * 
     */
    SetDSP(soundFilter: number, fastReset: boolean): void;
    
    /**
     * [Shared]
     * 
     * Sets how quickly a player ducks.
     * 
     * **Bug [#2722](https://github.com/Facepunch/garrysmod-issues/issues/2722):**
     * >This will not work for values &amp;gt;= 1.
     * 
     * @param duckSpeed - How quickly the player will duck.
     */
    SetDuckSpeed(duckSpeed: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the local angle of the player's view (may rotate body too if angular difference is large)
     * @param angle - Angle to set the view to
     */
    SetEyeAngles(angle: Angle): void;
    
    /**
     * [Shared]
     * 
     * Set a player's FOV (Field Of View) over a certain amount of time.
     * @param fov - the angle of perception (FOV). Set to 0 to return to default user FOV. ( Which is ranging from 75 to 90, depending on user settings )
     * @param [time = 0] - the time it takes to transition to the FOV expressed in a floating point.
     * @param [requester = self] - The requester or "owner" of the zoom event. Only this entity will be able to change the player's FOV until it is set back to 0.
     */
    SetFOV(fov: number, time = 0, requester?: Entity): void;
    
    /**
     * [Server]
     * 
     * Sets a player's frags (kills)
     * @param fragcount - Number of frags (positive or negative)
     */
    SetFrags(fragcount: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the hands entity of a player.
     * 
     * The hands entity is an entity introduced in Garry's Mod 13 and it's used to show the player's hands attached to the viewmodel.
     * This is similar to the approach used in L4D and CS:GO, for more information on how to implement this system in your gamemode visit [Using Viewmodel Hands](https://wiki.facepunch.com/gmod/Using_Viewmodel_Hands).
     * @param hands - The hands entity to set
     */
    SetHands(hands: Entity): void;
    
    /**
     * [Shared]
     * 
     * Sets the widget that is currently hovered by the player's mouse.
     * @param [widget = NULL] - The widget entity that the player is hovering.
     */
    SetHoveredWidget(widget?: Entity): void;
    
    /**
     * [Shared]
     * 
     * Sets the mins and maxs of the AABB of the players collision.
     * 
     * See [Player:SetHullDuck](https://wiki.facepunch.com/gmod/Player:SetHullDuck) for the hull while crouching/ducking.
     * @param hullMins - The min coordinates of the hull.
     * @param hullMaxs - The max coordinates of the hull.
     */
    SetHull(hullMins: Vector, hullMaxs: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the mins and maxs of the AABB of the players collision when ducked.
     * 
     * See [Player:SetHull](https://wiki.facepunch.com/gmod/Player:SetHull) for setting the hull while standing.
     * @param hullMins - The min coordinates of the hull.
     * @param hullMaxs - The max coordinates of the hull.
     */
    SetHullDuck(hullMins: Vector, hullMaxs: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the jump power, eg. the velocity that will be applied to the player when they jump.
     * @param jumpPower - The new jump velocity.
     */
    SetJumpPower(jumpPower: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the player's ladder climbing speed.
     * 
     * See [Player:SetWalkSpeed](https://wiki.facepunch.com/gmod/Player:SetWalkSpeed) for normal walking speed, [Player:SetRunSpeed](https://wiki.facepunch.com/gmod/Player:SetRunSpeed) for sprinting speed and [Player:SetSlowWalkSpeed](https://wiki.facepunch.com/gmod/Player:SetSlowWalkSpeed) for slow walking speed.
     * @param speed - The ladder climbing speed.
     */
    SetLadderClimbSpeed(speed: number): void;
    
    /**
     * [Server]
     * 
     * Slows down the player movement simulation by the timescale, this is used internally in the HL2 weapon stripping sequence.
     * 
     * It achieves such behavior by multiplying the [Global.FrameTime](https://wiki.facepunch.com/gmod/Global.FrameTime) by the specified timescale at the start of the movement simulation and then restoring it afterwards.
     * 
     * **Note:**
     * >This is reset to 1 on spawn.
     * 
     * There is no weapon counterpart to this, you'll have to hardcode the multiplier in the weapon or call [Weapon:SetNextPrimaryFire](https://wiki.facepunch.com/gmod/Weapon:SetNextPrimaryFire) / [Weapon:SetNextSecondaryFire](https://wiki.facepunch.com/gmod/Weapon:SetNextSecondaryFire) manually from a.
     * 
     * @param timescale - The timescale multiplier.
     */
    SetLaggedMovementValue(timescale: number): void;
    
    /**
     * [Server]
     * 
     * Sets the hitgroup where the player was last hit.
     * @param hitgroup - The hitgroup to set as the "last hit", see [Enums/HITGROUP](https://wiki.facepunch.com/gmod/Enums/HITGROUP).
     */
    SetLastHitGroup(hitgroup: HITGROUP): void;
    
    /**
     * [Server]
     * 
     * Sets the maximum amount of armor the player should have. This affects default built-in armor pickups, but not [Player:SetArmor](https://wiki.facepunch.com/gmod/Player:SetArmor).
     * @param maxarmor - The new max armor value.
     */
    SetMaxArmor(maxarmor: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the maximum speed which the player can move at.
     * 
     * **Note:**
     * >This is called automatically by the engine. If you wish to limit player speed without setting their run/sprint speeds, see [CMoveData:SetMaxClientSpeed](https://wiki.facepunch.com/gmod/CMoveData:SetMaxClientSpeed).
     * 
     * @param walkSpeed - The maximum speed.
     */
    SetMaxSpeed(walkSpeed: number): void;
    
    /**
     * [Client]
     * 
     * Sets if the player should be muted locally.
     * @param mute - Mute or unmute.
     */
    SetMuted(mute: boolean): void;
    
    /**
     * [Shared]
     * 
     * Sets whenever the player should not collide with their teammates, based on their [Player:Team](https://wiki.facepunch.com/gmod/Player:Team).
     * 
     * **Note:**
     * >This will only work for teams with ID 1 to 4 due to internal Engine limitations.
     * 
     * **Note:**
     * >This causes traces withto pass through players.
     * 
     * @param shouldNotCollide - `true` to disable, `false` to enable collision.
     */
    SetNoCollideWithTeammates(shouldNotCollide: boolean): void;
    
    /**
     * [Server]
     * 
     * Sets the players visibility towards NPCs.
     * 
     * Internally this toggles the <page text="FL_NOTARGET">Enums/FL</page> flag, which you can manually test for using [Entity:IsFlagSet](https://wiki.facepunch.com/gmod/Entity:IsFlagSet)
     * @param visibility - The visibility.
     */
    SetNoTarget(visibility: boolean): void;
    
    /**
     * [Shared]
     * 
     * Sets the players observer mode. You must start the spectating first with [Player:Spectate](https://wiki.facepunch.com/gmod/Player:Spectate).
     * @param mode - Spectator mode using [Enums/OBS_MODE](https://wiki.facepunch.com/gmod/Enums/OBS_MODE).
     */
    SetObserverMode(mode: OBS_MODE): void;
    
    /**
     * [Shared]
     * 
     * Writes a **P**ersistent **Data** key-value pair to the SQL database. (`sv.db` when called on server, `cl.db` when called on client)
     * 
     * Internally uses the [sql](https://wiki.facepunch.com/gmod/sql) library. See [util.SetPData](https://wiki.facepunch.com/gmod/util.SetPData) for cases when the player is not currently on the server.
     * 
     * **Note:**
     * >This function internally uses [Player:SteamID64](https://wiki.facepunch.com/gmod/Player:SteamID64), it previously utilized [Player:UniqueID](https://wiki.facepunch.com/gmod/Player:UniqueID) which can cause collisions (two or more players sharing the same PData entry). [Player:SetPData](https://wiki.facepunch.com/gmod/Player:SetPData) now replaces all instances of [Player:UniqueID](https://wiki.facepunch.com/gmod/Player:UniqueID) with [Player:SteamID64](https://wiki.facepunch.com/gmod/Player:SteamID64) when running [Player:SetPData](https://wiki.facepunch.com/gmod/Player:SetPData)
     * 
     * **Note:**
     * >PData is not networked from servers to clients!
     * 
     * @param key - Name of the PData key
     * @param value - Value to write to the key (**must** be an SQL valid data type, such as a string or integer)
     */
    SetPData(key: string, value: any): boolean;
    
    /**
     * [Shared]
     * 
     * Sets the player model's color. The part of the model that is colored is determined by the model itself, and is different for each model.
     * @param Color - This is the color to be set. The format is Vector(r, g, b), and each color should be between 0 and 1.
     */
    SetPlayerColor(Color: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the widget that is currently in use by the player's mouse.
     * 
     * Having a pressed widget stops the player from firing their weapon to allow input to be passed onto the widget.
     * @param [pressedWidget = NULL] - The widget the player is currently using.
     */
    SetPressedWidget(pressedWidget?: Entity): void;
    
    /**
     * [Shared]
     * 
     * Sets the render angles of a player. Value set by this function is reset to player's angles ([Entity:GetAngles](https://wiki.facepunch.com/gmod/Entity:GetAngles)) right after [GM:UpdateAnimation](https://wiki.facepunch.com/gmod/GM:UpdateAnimation).
     * @param ang - The new render angles to set
     */
    SetRenderAngles(ang: Angle): void;
    
    /**
     * [Shared]
     * 
     * Sets the player's sprint speed.
     * 
     * See also [Player:GetRunSpeed](https://wiki.facepunch.com/gmod/Player:GetRunSpeed), [Player:SetWalkSpeed](https://wiki.facepunch.com/gmod/Player:SetWalkSpeed) and [Player:SetMaxSpeed](https://wiki.facepunch.com/gmod/Player:SetMaxSpeed).
     * 
     * **Note:**
     * >player_default class run speed is: `600`
     * 
     * @param runSpeed - The new sprint speed when `sv_friction` is below `10`. Higher `sv_friction` values will result in slower speed.
     * Has to be `7` or above or the player **won't** be able to move.
     */
    SetRunSpeed(runSpeed: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the player's slow walking speed, which is activated via <key>+WALK</key> keybind.
     * 
     * See [Player:SetWalkSpeed](https://wiki.facepunch.com/gmod/Player:SetWalkSpeed) for normal walking speed, [Player:SetRunSpeed](https://wiki.facepunch.com/gmod/Player:SetRunSpeed) for sprinting speed and [Player:SetLadderClimbSpeed](https://wiki.facepunch.com/gmod/Player:SetLadderClimbSpeed) for ladder climb speed.
     * @param speed - The new slow walking speed.
     */
    SetSlowWalkSpeed(speed: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the maximum height a player can step onto without jumping.
     * @param stepHeight - The new maximum height the player can step onto without jumping
     */
    SetStepSize(stepHeight: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the player's HEV suit power.
     * 
     * **Bug [#3449](https://github.com/Facepunch/garrysmod-issues/issues/3449):**
     * >This will only work for the local player when used clientside.
     * 
     * @param power - The new suit power.
     */
    SetSuitPower(power: number): void;
    
    /**
     * [Shared]
     * 
     * Sets whenever to suppress the pickup notification for the player.
     * @param doSuppress - Whenever to suppress the notice or not.
     */
    SetSuppressPickupNotices(doSuppress: boolean): void;
    
    /**
     * [Server]
     * 
     * Sets the player to the chosen team.
     * @param Team - The team that the player is being set to.
     */
    SetTeam(Team: number): void;
    
    /**
     * [Shared]
     * 
     * Sets how quickly a player un-ducks
     * @param UnDuckSpeed - How quickly the player will un-duck
     */
    SetUnDuckSpeed(UnDuckSpeed: number): void;
    
    /**
     * [Server]
     * 
     * Sets up the players view model hands. Calls [GM:PlayerSetHandsModel](https://wiki.facepunch.com/gmod/GM:PlayerSetHandsModel) to set the model of the hands.
     * @param ent - If the player is spectating an entity, this should be the entity the player is spectating, so we can use its hands model instead.
     */
    SetupHands(ent: Entity): void;
    
    /**
     * [Server]
     * 
     * Sets the usergroup of the player.
     * @param groupName - The user group of the player.
     */
    SetUserGroup(groupName: string): void;
    
    /**
     * [Server]
     * 
     * Attaches the players view to the position and angles of the specified entity.
     * @param viewEntity - The entity to attach the player view to.
     */
    SetViewEntity(viewEntity: Entity): void;
    
    /**
     * [Shared]
     * 
     * Sets the **desired** view offset which equals the difference between the players actual position and their view when standing.
     * 
     * If you want to set **actual** view offset, use [Player:SetCurrentViewOffset](https://wiki.facepunch.com/gmod/Player:SetCurrentViewOffset)
     * 
     * See also [Player:SetViewOffsetDucked](https://wiki.facepunch.com/gmod/Player:SetViewOffsetDucked) for **desired** view offset when crouching.
     * @param viewOffset - The new desired view offset when standing.
     */
    SetViewOffset(viewOffset: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the **desired** view offset which equals the difference between the players actual position and their view when crouching.
     * 
     * If you want to set **actual** view offset, use [Player:SetCurrentViewOffset](https://wiki.facepunch.com/gmod/Player:SetCurrentViewOffset)
     * 
     * See also [Player:SetViewOffset](https://wiki.facepunch.com/gmod/Player:SetViewOffset) for **desired** view offset when standing.
     * @param viewOffset - The new desired view offset when crouching.
     */
    SetViewOffsetDucked(viewOffset: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets client's view punch angle, but not the velocity. See [Player:ViewPunch](https://wiki.facepunch.com/gmod/Player:ViewPunch)
     * @param punchAngle - The angle to set.
     */
    SetViewPunchAngles(punchAngle: Angle): void;
    
    /**
     * [Shared]
     * 
     * Sets client's view punch velocity. See [Player:ViewPunch](https://wiki.facepunch.com/gmod/Player:ViewPunch) and [Player:SetViewPunchAngles](https://wiki.facepunch.com/gmod/Player:SetViewPunchAngles)
     * @param punchVel - The angle velocity to set.
     */
    SetViewPunchVelocity(punchVel: Angle): void;
    
    /**
     * [Client]
     * 
     * Sets the voice volume scale for given player on client. This value will persist from server to server, but will be reset when the game is shut down.
     * 
     * **Note:**
     * >This doesn't work on bots, their scale will always be `1`.
     * 
     * @param __unnamedArg - The voice volume scale, where `0` is 0% and `1` is 100%.
     */
    SetVoiceVolumeScale(__unnamedArg: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the player's normal walking speed. Not sprinting, not slow walking <key>+walk</key>.
     * 
     * See also [Player:SetSlowWalkSpeed](https://wiki.facepunch.com/gmod/Player:SetSlowWalkSpeed), [Player:GetWalkSpeed](https://wiki.facepunch.com/gmod/Player:GetWalkSpeed), [Player:SetCrouchedWalkSpeed](https://wiki.facepunch.com/gmod/Player:SetCrouchedWalkSpeed), [Player:SetMaxSpeed](https://wiki.facepunch.com/gmod/Player:SetMaxSpeed) and [Player:SetRunSpeed](https://wiki.facepunch.com/gmod/Player:SetRunSpeed).
     * 
     * **Bug [#2030](https://github.com/Facepunch/garrysmod-issues/issues/2030):**
     * >Using a speed of `0` can lead to prediction errors.
     * 
     * **Note:**
     * >`player_default` class walk speed is: `400`.
     * 
     * @param walkSpeed - The new walk speed when `sv_friction` is below `10`. Higher `sv_friction` values will result in slower speed.
     * Has to be `7` or above or the player **won't** be able to move.
     */
    SetWalkSpeed(walkSpeed: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the player weapon's color. The part of the model that is colored is determined by the model itself, and is different for each model.
     * @param Color - This is the color to be set. The format is Vector(r,g,b), and each color should be between 0 and 1.
     */
    SetWeaponColor(Color: Vector): void;
    
    /**
     * [Client]
     * 
     * Returns whether the player's player model will be drawn at the time the function is called.
     * 
     */
    ShouldDrawLocalPlayer(): boolean;
    
    /**
     * [Server]
     * 
     * Sets whether the player's current weapon should drop on death.
     * 
     * **Note:**
     * >This is reset on spawn to the's **DropWeaponOnDie** field by [player_manager.OnPlayerSpawn](https://wiki.facepunch.com/gmod/player_manager.OnPlayerSpawn).
     * 
     * @param drop - Whether to drop the player's current weapon or not
     */
    ShouldDropWeapon(drop: boolean): void;
    
    /**
     * [Client]
     * 
     * Opens the player steam profile page in the steam overlay browser.
     * 
     */
    ShowProfile(): void;
    
    /**
     * [Server]
     * 
     * Signals the entity that it was dropped by the gravity gun.
     * @param ent - Entity that was dropped.
     */
    SimulateGravGunDrop(ent: Entity): void;
    
    /**
     * [Server]
     * 
     * Signals the entity that it was picked up by the gravity gun. This call is only required if you want to simulate the situation of picking up objects.
     * @param ent - The entity picked up
     * @param [lightning = false] - Whether or not to show lightning effects around the entity
     */
    SimulateGravGunPickup(ent: Entity, lightning = false): void;
    
    /**
     * [Server]
     * 
     * Starts spectate mode for given player. This will also affect the players movetype in some cases.
     * @param mode - Spectate mode, see [Enums/OBS_MODE](https://wiki.facepunch.com/gmod/Enums/OBS_MODE).
     */
    Spectate(mode: OBS_MODE): void;
    
    /**
     * [Server]
     * 
     * Makes the player spectate the entity.
     * 
     * To get the applied spectated entity, use [Player:GetObserverTarget](https://wiki.facepunch.com/gmod/Player:GetObserverTarget).
     * @param entity - Entity to spectate.
     */
    SpectateEntity(entity: Entity): void;
    
    /**
     * [Server]
     * 
     * Makes a player spray their decal.
     * @param sprayOrigin - The location to spray from
     * @param sprayEndPos - The location to spray to
     */
    SprayDecal(sprayOrigin: Vector, sprayEndPos: Vector): void;
    
    /**
     * [Server]
     * 
     * Disables the sprint on the player.
     * 
     */
    SprintDisable(): void;
    
    /**
     * [Server]
     * 
     * Enables the sprint on the player.
     * 
     */
    SprintEnable(): void;
    
    /**
     * [Shared]
     * 
     * Doesn't appear to do anything.
     * 
     * @deprecated This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.
     * 
     * 
     */
    StartSprinting(): void;
    
    /**
     * [Shared]
     * 
     * When used in a [GM:SetupMove](https://wiki.facepunch.com/gmod/GM:SetupMove) hook, this function will force the player to walk, as well as preventing the player from sprinting.
     * 
     * @deprecated This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.
     * 
     * 
     */
    StartWalking(): void;
    
    /**
     * [Shared]
     * 
     * Returns the player's SteamID.
     * 
     * See [Player:AccountID](https://wiki.facepunch.com/gmod/Player:AccountID) for a shorter version of the SteamID and [Player:SteamID64](https://wiki.facepunch.com/gmod/Player:SteamID64) for the full SteamID.
     * 
     * It is recommended to use [Player:SteamID64](https://wiki.facepunch.com/gmod/Player:SteamID64) over the other SteamID formats whenever possible.
     * 
     * **Note:**
     * >In a `-multirun` environment, this will return `STEAM_0:0:0` (serverside) or `NULL` (clientside) for all "copies" of a player because they are not authenticated with Steam.
     * 
     * For Bots this will return `BOT`.
     * 
     * 
     */
    SteamID(): string;
    
    /**
     * [Shared]
     * 
     * Returns the player's full **64-bit SteamID**, also known as **CommunityID**. Information on how data is packed into this value can be found [here](https://developer.valvesoftware.com/wiki/SteamID).
     * 
     * See [Player:AccountID](https://wiki.facepunch.com/gmod/Player:AccountID) for a function that returns only the Account ID part of the SteamID and [Player:SteamID](https://wiki.facepunch.com/gmod/Player:SteamID) for the text version of the SteamID.
     * 
     * **Note:**
     * >In a `-multirun` environment, this will return `"0"` for all "copies" of a player because they are not authenticated with Steam.
     * 
     * For bots, this will return `90071996842377216` (equivalent to `STEAM_0:0:0`) for the first bot to join.
     * 
     * For each additional bot, the number increases by 1. So the next bot will be `90071996842377217` (`STEAM_0:1:0`) then `90071996842377218` (`STEAM_0:0:1`) and so on.
     * 
     * 
     */
    SteamID64(): string;
    
    /**
     * [Shared]
     * 
     * When used in a [GM:SetupMove](https://wiki.facepunch.com/gmod/GM:SetupMove) hook, this function will prevent the player from sprinting.
     * 
     * When +walk is engaged, the player will still be able to sprint to half speed (normal run speed) as opposed to full sprint speed without this function.
     * 
     * @deprecated This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.
     * 
     * 
     */
    StopSprinting(): void;
    
    /**
     * [Shared]
     * 
     * When used in a [GM:SetupMove](https://wiki.facepunch.com/gmod/GM:SetupMove) hook, this function behaves unexpectedly by preventing the player from sprinting similar to [Player:StopSprinting](https://wiki.facepunch.com/gmod/Player:StopSprinting).
     * 
     * @deprecated This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.
     * 
     * 
     */
    StopWalking(): void;
    
    /**
     * [Server]
     * 
     * Turns off the zoom mode of the player. (+zoom console command)
     * 
     * Basically equivalent of entering "-zoom" into player's console.
     * 
     */
    StopZooming(): void;
    
    /**
     * [Server]
     * 
     * Removes all ammo from the player.
     * 
     * @deprecated Alias of [Player:RemoveAllAmmo](https://wiki.facepunch.com/gmod/Player:RemoveAllAmmo)
     * 
     * 
     */
    StripAmmo(): void;
    
    /**
     * [Server]
     * 
     * Removes the specified weapon class from a certain player
     * 
     * **Note:**
     * >this function will call the [Entity:OnRemove](https://wiki.facepunch.com/gmod/Entity:OnRemove) but if you try use [Entity:GetOwner](https://wiki.facepunch.com/gmod/Entity:GetOwner) it will return nil
     * 
     * @param weapon - The weapon class to remove
     */
    StripWeapon(weapon: string): void;
    
    /**
     * [Server]
     * 
     * Removes all weapons from a certain player
     * 
     */
    StripWeapons(): void;
    
    /**
     * [Server]
     * 
     * Prevents a hint from showing up.
     * 
     * **Note:**
     * >This function is only available in Sandbox and its derivatives
     * 
     * @param name - Hint name/class/index to prevent from showing up. You can find a list of hint names for this function <page text="here">List_of_Hint_Classes</page>.
     */
    SuppressHint(name: string): void;
    
    /**
     * [Server]
     * 
     * Attempts to switch the player weapon to the one specified in the "cl_defaultweapon" convar, if the player does not own the specified weapon nothing will happen.
     * 
     * If you want to switch to a specific weapon, use: [Player:SetActiveWeapon](https://wiki.facepunch.com/gmod/Player:SetActiveWeapon)
     * 
     */
    SwitchToDefaultWeapon(): void;
    
    /**
     * [Shared]
     * 
     * Returns the player's team ID.
     * 
     * Returns 0 clientside when the game is not fully loaded.
     * 
     */
    Team(): TEAM;
    
    /**
     * [Server]
     * 
     * Returns the time in seconds since the player connected.
     * 
     * **Note:**
     * >Bots will always return value 0.
     * 
     * 
     */
    TimeConnected(): number;
    
    /**
     * [Server]
     * 
     * Performs a trace hull and applies damage to the entities hit, returns the first entity hit.
     * 
     * **Warning:**
     * >Hitting the victim entity with this function in [ENTITY:OnTakeDamage](https://wiki.facepunch.com/gmod/ENTITY:OnTakeDamage) can cause infinite loops.
     * 
     * @param startPos - The start position of the hull trace.
     * @param endPos - The end position of the hull trace.
     * @param mins - The minimum coordinates of the hull.
     * @param maxs - The maximum coordinates of the hull.
     * @param damage - The damage to be applied.
     * @param damageFlags - Bitflag specifying the damage type, see [Enums/DMG](https://wiki.facepunch.com/gmod/Enums/DMG).
     * @param damageForce - The force to be applied to the hit object.
     * @param damageAllNPCs - Whether to apply damage to all hit NPCs or not.
     */
    TraceHullAttack(startPos: Vector, endPos: Vector, mins: Vector, maxs: Vector, damage: number, damageFlags: DMG, damageForce: number, damageAllNPCs: boolean): Entity;
    
    /**
     * [Shared]
     * 
     * Translates [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT) according to the holdtype of players currently held weapon.
     * @param act - The initial [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT)
     */
    TranslateWeaponActivity(act: ACT): ACT;
    
    /**
     * [Shared]
     * 
     * Unfreezes all objects the player has frozen with their Physics Gun. Same as double pressing R while holding Physics Gun.
     * 
     */
    UnfreezePhysicsObjects(): void;
    
    /**
     * [Shared]
     * 
     * @deprecated **This function has collisions,** where more than one player can have the same UniqueID. It is **highly** recommended to use [Player:SteamID64](https://wiki.facepunch.com/gmod/Player:SteamID64) or [Player:SteamID](https://wiki.facepunch.com/gmod/Player:SteamID) instead, which are guaranteed to be unique to each player.
     * 
     * **Note:**
     * >In Singleplayer, this function will always return 1.
     * 
     * 
     */
    UniqueID(): number;
    
    /**
     * [Shared]
     * 
     * @deprecated This is based on [Player:UniqueID](https://wiki.facepunch.com/gmod/Player:UniqueID) which is deprecated and vulnerable to collisions.
     * 
     * **Note:**
     * >This table is not synchronized (networked) between client and server.
     * 
     * @param key - Unique table key.
     */
    UniqueIDTable(key: any): any;
    
    /**
     * [Server]
     * 
     * Unlocks the player movement if locked previously.
     * <br/>
     * Will disable godmode for the player if locked previously.
     * 
     */
    UnLock(): void;
    
    /**
     * [Server]
     * 
     * Stops the player from spectating another entity.
     * 
     */
    UnSpectate(): void;
    
    /**
     * [Shared]
     * 
     * Returns the player's ID.
     * You can use [Global.Player](https://wiki.facepunch.com/gmod/Global.Player)() to get the player by their ID.
     * 
     */
    UserID(): number;
    
    /**
     * [Shared]
     * 
     * Simulates a push on the client's screen. This **adds** view punch velocity, and does not touch the current view punch angle, for which you can use [Player:SetViewPunchAngles](https://wiki.facepunch.com/gmod/Player:SetViewPunchAngles).
     * @param PunchAngle - The angle in which to push the player's screen.
     */
    ViewPunch(PunchAngle: Angle): void;
    
    /**
     * [Shared]
     * 
     * Resets the player's view punch (and the view punch velocity, read more at [Player:ViewPunch](https://wiki.facepunch.com/gmod/Player:ViewPunch)) effect back to normal.
     * @param [tolerance = 0] - Reset all ViewPunch below this threshold.
     */
    ViewPunchReset(tolerance = 0): void;
    
    /**
     * [Client]
     * 
     * Returns the players voice volume, how loud the player's voice communication currently is, as a normal number. Doesn't work on local player unless the voice_loopback convar is set to 1.
     * 
     */
    VoiceVolume(): number;

}

/**
 * A client side projected texture, created by [Global.ProjectedTexture](https://wiki.facepunch.com/gmod/Global.ProjectedTexture).
 */
interface ProjectedTexture {
    

    /**
     * [Client]
     * 
     * Returns the angle of the ProjectedTexture, which were previously set by [ProjectedTexture:SetAngles](https://wiki.facepunch.com/gmod/ProjectedTexture:SetAngles)
     * 
     */
    GetAngles(): Angle;
    
    /**
     * [Client]
     * 
     * Returns the brightness of the ProjectedTexture, which was previously set by [ProjectedTexture:SetBrightness](https://wiki.facepunch.com/gmod/ProjectedTexture:SetBrightness)
     * 
     */
    GetBrightness(): number;
    
    /**
     * [Client]
     * 
     * Returns the color of the ProjectedTexture, which was previously set by [ProjectedTexture:SetColor](https://wiki.facepunch.com/gmod/ProjectedTexture:SetColor).
     * 
     * **Bug [#2407](https://github.com/Facepunch/garrysmod-issues/issues/2407):**
     * >The returned color will not have the color metatable.
     * 
     * 
     */
    GetColor(): Color;
    
    /**
     * [Client]
     * 
     * Returns the constant attenuation of the projected texture, which can also be set by [ProjectedTexture:SetConstantAttenuation](https://wiki.facepunch.com/gmod/ProjectedTexture:SetConstantAttenuation).
     * 
     */
    GetConstantAttenuation(): number;
    
    /**
     * [Client]
     * 
     * Returns whether shadows are enabled for this ProjectedTexture, which was previously set by [ProjectedTexture:SetEnableShadows](https://wiki.facepunch.com/gmod/ProjectedTexture:SetEnableShadows)
     * 
     */
    GetEnableShadows(): boolean;
    
    /**
     * [Client]
     * 
     * Returns the projection distance of the ProjectedTexture, which was previously set by [ProjectedTexture:SetFarZ](https://wiki.facepunch.com/gmod/ProjectedTexture:SetFarZ)
     * 
     */
    GetFarZ(): number;
    
    /**
     * [Client]
     * 
     * Returns the horizontal FOV of the ProjectedTexture, which was previously set by [ProjectedTexture:SetHorizontalFOV](https://wiki.facepunch.com/gmod/ProjectedTexture:SetHorizontalFOV) or [ProjectedTexture:SetFOV](https://wiki.facepunch.com/gmod/ProjectedTexture:SetFOV)
     * 
     */
    GetHorizontalFOV(): number;
    
    /**
     * [Client]
     * 
     * Returns whenever or not the Texture should light up world geometry.
     * 
     */
    GetLightWorld(): boolean;
    
    /**
     * [Client]
     * 
     * Returns the linear attenuation of the projected texture, which can also be set by [ProjectedTexture:SetLinearAttenuation](https://wiki.facepunch.com/gmod/ProjectedTexture:SetLinearAttenuation).
     * 
     */
    GetLinearAttenuation(): number;
    
    /**
     * [Client]
     * 
     * Returns the NearZ value of the ProjectedTexture, which was previously set by [ProjectedTexture:SetNearZ](https://wiki.facepunch.com/gmod/ProjectedTexture:SetNearZ)
     * 
     */
    GetNearZ(): number;
    
    /**
     * [Client]
     * 
     * Returns the current orthographic settings of the Projected Texture. To set these values, use [ProjectedTexture:SetOrthographic](https://wiki.facepunch.com/gmod/ProjectedTexture:SetOrthographic).
     * 
     */
    GetOrthographic(): LuaMultiReturn<[boolean, number, number, number, number]>;
    
    /**
     * [Client]
     * 
     * Returns the position of the ProjectedTexture, which was previously set by [ProjectedTexture:SetPos](https://wiki.facepunch.com/gmod/ProjectedTexture:SetPos)
     * 
     */
    GetPos(): Vector;
    
    /**
     * [Client]
     * 
     * Returns the quadratic attenuation of the projected texture, which can also be set by [ProjectedTexture:SetQuadraticAttenuation](https://wiki.facepunch.com/gmod/ProjectedTexture:SetQuadraticAttenuation).
     * 
     */
    GetQuadraticAttenuation(): number;
    
    /**
     * [Client]
     * 
     * Returns the shadow depth bias of the projected texture.
     * 
     * Set by [ProjectedTexture:SetShadowDepthBias](https://wiki.facepunch.com/gmod/ProjectedTexture:SetShadowDepthBias).
     * 
     */
    GetShadowDepthBias(): number;
    
    /**
     * [Client]
     * 
     * Returns the shadow "filter size" of the projected texture. `0` is fully pixelated, higher values will blur the shadow more.
     * 
     * Set by [ProjectedTexture:SetShadowFilter](https://wiki.facepunch.com/gmod/ProjectedTexture:SetShadowFilter).
     * 
     */
    GetShadowFilter(): number;
    
    /**
     * [Client]
     * 
     * Returns the shadow depth slope scale bias of the projected texture.
     * 
     * Set by [ProjectedTexture:SetShadowSlopeScaleDepthBias](https://wiki.facepunch.com/gmod/ProjectedTexture:SetShadowSlopeScaleDepthBias).
     * 
     */
    GetShadowSlopeScaleDepthBias(): number;
    
    /**
     * [Client]
     * 
     * Returns the target entity of this projected texture.
     * 
     */
    GetTargetEntity(): Entity;
    
    /**
     * [Client]
     * 
     * Returns the texture of the ProjectedTexture, which was previously set by [ProjectedTexture:SetTexture](https://wiki.facepunch.com/gmod/ProjectedTexture:SetTexture)
     * 
     */
    GetTexture(): ITexture;
    
    /**
     * [Client]
     * 
     * Returns the texture frame of the ProjectedTexture, which was previously set by [ProjectedTexture:SetTextureFrame](https://wiki.facepunch.com/gmod/ProjectedTexture:SetTextureFrame)
     * 
     */
    GetTextureFrame(): number;
    
    /**
     * [Client]
     * 
     * Returns the vertical FOV of the ProjectedTexture, which was previously set by [ProjectedTexture:SetVerticalFOV](https://wiki.facepunch.com/gmod/ProjectedTexture:SetVerticalFOV) or [ProjectedTexture:SetFOV](https://wiki.facepunch.com/gmod/ProjectedTexture:SetFOV)
     * 
     */
    GetVerticalFOV(): number;
    
    /**
     * [Client]
     * 
     * Returns true if the projected texture is valid (i.e. has not been removed), false otherwise.
     * 
     * Instead of calling this directly it's a good idea to call [Global.IsValid](https://wiki.facepunch.com/gmod/Global.IsValid) in case the variable is nil.
     * 
     * ```
     * IsValid( ptexture )
     * ```
     * 
     * This not only checks whether the projected texture is valid - but also checks whether it's nil.
     * 
     */
    IsValid(): boolean;
    
    /**
     * [Client]
     * 
     * Removes the projected texture. After calling this, [ProjectedTexture:IsValid](https://wiki.facepunch.com/gmod/ProjectedTexture:IsValid) will return false, and any hooks with the projected texture as the identifier will be automatically deleted.
     * 
     */
    Remove(): void;
    
    /**
     * [Client]
     * 
     * Sets the angles (direction) of the projected texture.
     * 
     * You must call [ProjectedTexture:Update](https://wiki.facepunch.com/gmod/ProjectedTexture:Update) after using this function for it to take effect.
     * @param angle - 
     */
    SetAngles(angle: Angle): void;
    
    /**
     * [Client]
     * 
     * Sets the brightness of the projected texture.
     * 
     * You must call [ProjectedTexture:Update](https://wiki.facepunch.com/gmod/ProjectedTexture:Update) after using this function for it to take effect.
     * @param brightness - The brightness to give the projected texture.
     */
    SetBrightness(brightness: number): void;
    
    /**
     * [Client]
     * 
     * Sets the color of the projected texture.
     * 
     * You must call [ProjectedTexture:Update](https://wiki.facepunch.com/gmod/ProjectedTexture:Update) after using this function for it to take effect.
     * @param color - Must be a [Color](https://wiki.facepunch.com/gmod/Color).
     * Unlike other projected textures, this color can only go up to 255.
     */
    SetColor(color: Color): void;
    
    /**
     * [Client]
     * 
     * Sets the constant attenuation of the projected texture.
     * 
     * See also [ProjectedTexture:SetLinearAttenuation](https://wiki.facepunch.com/gmod/ProjectedTexture:SetLinearAttenuation) and [ProjectedTexture:SetQuadraticAttenuation](https://wiki.facepunch.com/gmod/ProjectedTexture:SetQuadraticAttenuation).
     * 
     * You must call [ProjectedTexture:Update](https://wiki.facepunch.com/gmod/ProjectedTexture:Update) after using this function for it to take effect.
     * @param constAtten - 
     */
    SetConstantAttenuation(constAtten: number): void;
    
    /**
     * [Client]
     * 
     * Enable or disable shadows cast from the projected texture.
     * 
     * You must call [ProjectedTexture:Update](https://wiki.facepunch.com/gmod/ProjectedTexture:Update) after using this function for it to take effect.
     * 
     * **Note:**
     * >As with all types of projected textures (including the player's flashlight and env_projectedtexture), there can only be 8 projected textures with shadows enabled in total.This limit can be increased with the launch parameter `-numshadowtextures LIMIT` where `LIMIT` is the new limit.Naturally, many projected lights with shadows enabled will drastically decrease framerate.
     * 
     * @param newState - 
     */
    SetEnableShadows(newState: boolean): void;
    
    /**
     * [Client]
     * 
     * Sets the distance at which the projected texture ends.
     * 
     * You must call [ProjectedTexture:Update](https://wiki.facepunch.com/gmod/ProjectedTexture:Update) after using this function for it to take effect.
     * @param farZ - 
     */
    SetFarZ(farZ: number): void;
    
    /**
     * [Client]
     * 
     * Sets the angle of projection.
     * 
     * You must call [ProjectedTexture:Update](https://wiki.facepunch.com/gmod/ProjectedTexture:Update) after using this function for it to take effect.
     * @param fov - Must be higher than 0 and lower than 180
     */
    SetFOV(fov: number): void;
    
    /**
     * [Client]
     * 
     * Sets the horizontal angle of projection without affecting the vertical angle.
     * 
     * You must call [ProjectedTexture:Update](https://wiki.facepunch.com/gmod/ProjectedTexture:Update) after using this function for it to take effect.
     * @param hFOV - The new horizontal Field Of View for the projected texture. Must be in range between 0 and 180.
     */
    SetHorizontalFOV(hFOV: number): void;
    
    /**
     * [Client]
     * 
     * Set whenever or not the Texture should light up world geometry.
     * @param lightworld - Set it to `true` if the Texture should light up world geometry.
     */
    SetLightWorld(lightworld: boolean): void;
    
    /**
     * [Client]
     * 
     * Sets the linear attenuation of the projected texture.
     * 
     * See also [ProjectedTexture:SetConstantAttenuation](https://wiki.facepunch.com/gmod/ProjectedTexture:SetConstantAttenuation) and [ProjectedTexture:SetQuadraticAttenuation](https://wiki.facepunch.com/gmod/ProjectedTexture:SetQuadraticAttenuation).
     * 
     * The default value of linear attenuation when the projected texture is created is 100. (others are 0, as you are not supposed to mix them)
     * 
     * You must call [ProjectedTexture:Update](https://wiki.facepunch.com/gmod/ProjectedTexture:Update) after using this function for it to take effect.
     * @param linearAtten - 
     */
    SetLinearAttenuation(linearAtten: number): void;
    
    /**
     * [Client]
     * 
     * Sets the distance at which the projected texture begins its projection.
     * 
     * You must call [ProjectedTexture:Update](https://wiki.facepunch.com/gmod/ProjectedTexture:Update) after using this function for it to take effect.
     * 
     * **Note:**
     * >Setting this to 0 will disable the projected texture completely! This may be useful if you want to disable a projected texture without actually removing it
     * 
     * **Note:**
     * >This seems to affect the rendering of shadows - a higher Near Z value will have shadows begin to render closer to their casting object. Comparing a low Near Z value (like 1) with a normal one (12) or high one (1000) is the easiest way to understand this artifact
     * 
     * @param nearZ - 
     */
    SetNearZ(nearZ: number): void;
    
    /**
     * [Client]
     * 
     * Changes the current projected texture between orthographic and perspective projection.
     * 
     * You must call [ProjectedTexture:Update](https://wiki.facepunch.com/gmod/ProjectedTexture:Update) after using this function for it to take effect.
     * 
     * Shadows dont work. (For non static props and for most map brushes)
     * @param orthographic - When false, all other arguments are ignored and the texture is reset to perspective projection.
     * @param left - The amount of units left from the projected texture's origin to project.
     * @param top - The amount of units upwards from the projected texture's origin to project.
     * @param right - The amount of units right from the projected texture's origin to project.
     * @param bottom - The amount of units downwards from the projected texture's origin to project.
     */
    SetOrthographic(orthographic: boolean, left: number, top: number, right: number, bottom: number): void;
    
    /**
     * [Client]
     * 
     * Move the Projected Texture to the specified position.
     * 
     * You must call [ProjectedTexture:Update](https://wiki.facepunch.com/gmod/ProjectedTexture:Update) after using this function for it to take effect.
     * @param position - 
     */
    SetPos(position: Vector): void;
    
    /**
     * [Client]
     * 
     * Sets the quadratic attenuation of the projected texture.
     * 
     * See also [ProjectedTexture:SetLinearAttenuation](https://wiki.facepunch.com/gmod/ProjectedTexture:SetLinearAttenuation) and [ProjectedTexture:SetConstantAttenuation](https://wiki.facepunch.com/gmod/ProjectedTexture:SetConstantAttenuation).
     * 
     * You must call [ProjectedTexture:Update](https://wiki.facepunch.com/gmod/ProjectedTexture:Update) after using this function for it to take effect.
     * @param quadAtten - 
     */
    SetQuadraticAttenuation(quadAtten: number): void;
    
    /**
     * [Client]
     * 
     * Sets the shadow depth bias of the projected texture.
     * 
     * The initial value is `0.0001`. Normal projected textures obey the value of the `mat_depthbias_shadowmap` [ConVar](https://wiki.facepunch.com/gmod/ConVar).
     * 
     * <validate>You must call [ProjectedTexture:Update](https://wiki.facepunch.com/gmod/ProjectedTexture:Update) after using this function for it to take effect.</validate>
     * @param bias - The shadow depth bias to set.
     */
    SetShadowDepthBias(bias: number): void;
    
    /**
     * [Client]
     * 
     * Sets the shadow "filter size" of the projected texture. `0` is fully pixelated, higher values will blur the shadow more. The initial value is the value of `r_projectedtexture_filter` [ConVar](https://wiki.facepunch.com/gmod/ConVar).
     * 
     * <validate>You must call [ProjectedTexture:Update](https://wiki.facepunch.com/gmod/ProjectedTexture:Update) after using this function for it to take effect.</validate>
     * @param filter - The shadow filter size to set.
     */
    SetShadowFilter(filter: number): void;
    
    /**
     * [Client]
     * 
     * Sets the shadow depth slope scale bias of the projected texture.
     * 
     * The initial value is `2`. Normal projected textures obey the value of the `mat_slopescaledepthbias_shadowmap` [ConVar](https://wiki.facepunch.com/gmod/ConVar).
     * 
     * <validate>You must call [ProjectedTexture:Update](https://wiki.facepunch.com/gmod/ProjectedTexture:Update) after using this function for it to take effect.</validate>
     * @param bias - The shadow depth slope scale bias to set.
     */
    SetShadowSlopeScaleDepthBias(bias: number): void;
    
    /**
     * [Client]
     * 
     * Sets the target entity for this projected texture, meaning it will only be lighting the given entity and the world.
     * 
     * <validate>You must call [ProjectedTexture:Update](https://wiki.facepunch.com/gmod/ProjectedTexture:Update) after using this function for it to take effect.</validate>
     * @param [target = NULL] - The target entity, or `NULL` to reset.
     */
    SetTargetEntity(target?: Entity): void;
    
    /**
     * [Client]
     * 
     * Sets the texture to be projected.
     * 
     * You must call [ProjectedTexture:Update](https://wiki.facepunch.com/gmod/ProjectedTexture:Update) after using this function for it to take effect.
     * @param texture - The name of the texture. Can also be an [ITexture](https://wiki.facepunch.com/gmod/ITexture).
     */
    SetTexture(texture: string): void;
    
    /**
     * [Client]
     * 
     * For animated textures, this will choose which frame in the animation will be projected.
     * 
     * You must call [ProjectedTexture:Update](https://wiki.facepunch.com/gmod/ProjectedTexture:Update) after using this function for it to take effect.
     * @param frame - The frame index to use.
     */
    SetTextureFrame(frame: number): void;
    
    /**
     * [Client]
     * 
     * Sets the vertical angle of projection without affecting the horizontal angle.
     * 
     * You must call [ProjectedTexture:Update](https://wiki.facepunch.com/gmod/ProjectedTexture:Update) after using this function for it to take effect.
     * @param vFOV - The new vertical Field Of View for the projected texture. Must be in range between 0 and 180.
     */
    SetVerticalFOV(vFOV: number): void;
    
    /**
     * [Client]
     * 
     * Updates the Projected Light and applies all previously set parameters.
     * 
     * The best place to call this function is in [GM:PreDrawOpaqueRenderables](https://wiki.facepunch.com/gmod/GM:PreDrawOpaqueRenderables).
     * 
     */
    Update(): void;

}

/**
 * The object returned by [ai_schedule.New](https://wiki.facepunch.com/gmod/ai_schedule.New).
 */
interface Schedule {
    

    /**
     * [Server]
     * 
     * Adds a task to the schedule. See also [Schedule:AddTaskEx](https://wiki.facepunch.com/gmod/Schedule:AddTaskEx) if you wish to customize task start and run function names.
     * 
     * See also [ENTITY:StartSchedule](https://wiki.facepunch.com/gmod/ENTITY:StartSchedule), [NPC:StartEngineTask](https://wiki.facepunch.com/gmod/NPC:StartEngineTask), and [NPC:RunEngineTask](https://wiki.facepunch.com/gmod/NPC:RunEngineTask).
     * @param taskname - Custom task name
     * @param taskdata - Task data to be passed into the NPC's functions
     */
    AddTask(taskname: string, taskdata: any): void;
    
    /**
     * [Server]
     * 
     * Adds a task to the schedule with completely custom function names.
     * 
     * See also [Schedule:AddTask](https://wiki.facepunch.com/gmod/Schedule:AddTask).
     * @param start - The full name of a function on the entity's table to be ran when the task is started.
     * @param run - The full name of a function on the entity's table to be ran when the task is continuously running.
     * @param data - Task data to be passed into the NPC's functions
     */
    AddTaskEx(start: string, run: string, data: number): void;
    
    /**
     * [Server]
     * 
     * Adds an engine task to the schedule.
     * @param taskname - Task name, see [ai_task.h](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502)
     * @param taskdata - Task data, can be a float.
     */
    EngTask(taskname: string, taskdata: number): void;
    
    /**
     * [Server]
     * 
     * Returns the task at the given index.
     * @param num - Task index.
     */
    GetTask(num: number): void;
    
    /**
     * [Server]
     * 
     * Initialises the Schedule. Called by [ai_schedule.New](https://wiki.facepunch.com/gmod/ai_schedule.New) when the Schedule is created.
     * @param debugName - The name passed from [ai_schedule.New](https://wiki.facepunch.com/gmod/ai_schedule.New).
     */
    Init(debugName: string): void;
    
    /**
     * [Server]
     * 
     * Returns the number of tasks in the schedule.
     * 
     */
    NumTasks(): number;

}

/**
 * An object returned by [util.Stack](https://wiki.facepunch.com/gmod/util.Stack).
 * 
 * Like a Lua table, a Stack is a container. It follows the principle of LIFO (last in, first out).
 * 
 * The Stack works like a stack of papers: the first page you put down (push) will be the last one you remove (pop). That also means that the last page you put down, will be the first to be removed.
 */
interface Stack {
    

    /**
     * [Shared and Menu]
     * 
     * Pop an item from the stack
     * @param [amount = 1] - Amount of items you want to pop.
     */
    Pop(amount = 1): number;
    
    /**
     * [Shared and Menu]
     * 
     * Pop an item from the stack
     * @param [amount = 1] - Amount of items you want to pop.
     */
    PopMulti(amount = 1): any;
    
    /**
     * [Shared and Menu]
     * 
     * Push an item onto the stack
     * @param object - The item you want to push
     */
    Push(object: any): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the size of the stack
     * 
     */
    Size(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Get the item at the top of the stack
     * 
     */
    Top(): any;

}

/**
 * A brush surface object returned by [Entity:GetBrushSurfaces](https://wiki.facepunch.com/gmod/Entity:GetBrushSurfaces).
 * 
 * Brush surfaces are a part of what makes up the map geometry aside from displacements. Any primitive brush model, including most breakable windows, can be represented by this object.
 * 
 * **Note:**
 * >This object internally uses the `SurfaceHandle_t` class, which is an alias for `msurface2_t*`.
 * 
 */
interface SurfaceInfo {
    

    /**
     * [Shared]
     * 
     * Returns the brush surface's material.
     * 
     */
    GetMaterial(): IMaterial;
    
    /**
     * [Shared]
     * 
     * Returns a list of vertices the brush surface is built from.
     * 
     */
    GetVertices(): any;
    
    /**
     * [Shared]
     * 
     * Checks if the brush surface is a nodraw surface, meaning it will not be drawn by the engine.
     * 
     * **Note:**
     * >This internally checks the SURFDRAW_NODRAW flag.
     * 
     * 
     */
    IsNoDraw(): boolean;
    
    /**
     * [Shared]
     * 
     * Checks if the brush surface is displaying the skybox.
     * 
     * **Note:**
     * >This internally checks the SURFDRAW_SKY flag.
     * 
     * 
     */
    IsSky(): boolean;
    
    /**
     * [Shared]
     * 
     * Checks if the brush surface is water.
     * 
     * **Note:**
     * >This internally checks the SURFDRAW_WATER flag.
     * 
     * 
     */
    IsWater(): boolean;

}

/**
 * A single AI task. Returned by [ai_task.New](https://wiki.facepunch.com/gmod/ai_task.New).
 */
interface Task {
    

    /**
     * [Server]
     * 
     * Initialises the AI task. Called by [ai_task.New](https://wiki.facepunch.com/gmod/ai_task.New).
     * 
     */
    Init(): void;
    
    /**
     * [Server]
     * 
     * Initialises the AI task as an engine task.
     * @param taskname - The name of the task.
     * @param taskdata - 
     */
    InitEngine(taskname: string, taskdata: number): void;
    
    /**
     * [Server]
     * 
     * Initialises the AI task as NPC method-based.
     * @param startname - The name of the NPC method to call on task start.
     * @param runname - The name of the NPC method to call on task run.
     * @param taskdata - 
     */
    InitFunctionName(startname: string, runname: string, taskdata: number): void;
    
    /**
     * [Server]
     * 
     * Determines if the task is an engine task (`TYPE_ENGINE`, 1).
     * 
     */
    IsEngineType(): void;
    
    /**
     * [Server]
     * 
     * Determines if the task is an NPC method-based task (`TYPE_FNAME`, 2).
     * 
     */
    IsFNameType(): void;
    
    /**
     * [Server]
     * 
     * Runs the AI task.
     * @param target - The NPC to run the task on.
     */
    Run(target: NPC): void;
    
    /**
     * [Server]
     * 
     * Runs the AI task as an NPC method. This requires the task to be of type `TYPE_FNAME`.
     * @param target - The NPC to run the task on.
     */
    Run_FName(target: NPC): void;
    
    /**
     * [Server]
     * 
     * Starts the AI task.
     * @param target - The NPC to start the task on.
     */
    Start(target: NPC): void;
    
    /**
     * [Server]
     * 
     * Starts the AI task as an NPC method.
     * @param target - The NPC to start the task on.
     */
    Start_FName(target: NPC): void;

}

/**
 * A list of functions available inside a Sandbox Toolgun tool.
 * 
 * You can find the hooks <page text="here">TOOL_Hooks</page>, and members <page text="here">Structures/TOOL</page>.
 */
interface Tool {
    

    /**
     * [Shared]
     * 
     * Returns whether the tool is allowed to be used or not. This function ignores the [SANDBOX:CanTool](https://wiki.facepunch.com/gmod/SANDBOX:CanTool) hook.
     * 
     * By default this will always return true clientside and uses `TOOL.AllowedCVar`which is a [ConVar](https://wiki.facepunch.com/gmod/ConVar) object pointing to  `toolmode_allow_*toolname*` convar on the server.
     * 
     */
    Allowed(): boolean;
    
    /**
     * [Shared]
     * 
     * Builds a list of all ConVars set via the ClientConVar variable on the [Structures/TOOL](https://wiki.facepunch.com/gmod/Structures/TOOL) and their default values. This is used for the preset system.
     * 
     */
    BuildConVarList(): any;
    
    /**
     * [Shared]
     * 
     * **.**
     * 
     * Checks all added objects to see if they're still valid, if not, clears the list of objects.
     * 
     */
    CheckObjects(): void;
    
    /**
     * [Shared]
     * 
     * Clears all objects previously set with [Tool:SetObject](https://wiki.facepunch.com/gmod/Tool:SetObject).
     * 
     */
    ClearObjects(): void;
    
    /**
     * [Shared]
     * 
     * **.**
     * Initializes the tool object
     * 
     */
    Create(): Tool;
    
    /**
     * [Shared]
     * 
     * **.**
     * 
     * Creates clientside ConVars based on the ClientConVar table specified in the tool structure. Also creates the 'toolmode_allow_X' ConVar.
     * 
     */
    CreateConVars(): void;
    
    /**
     * [Shared]
     * 
     * Retrieves a physics bone number previously stored using [Tool:SetObject](https://wiki.facepunch.com/gmod/Tool:SetObject).
     * @param id - The id of the object which was set in [Tool:SetObject](https://wiki.facepunch.com/gmod/Tool:SetObject).
     */
    GetBone(id: number): number;
    
    /**
     * [Shared]
     * 
     * Attempts to grab a clientside tool [ConVar](https://wiki.facepunch.com/gmod/ConVar) value as a [boolean](https://wiki.facepunch.com/gmod/boolean).
     * @param name - Name of the [ConVar](https://wiki.facepunch.com/gmod/ConVar) to retrieve. The function will automatically add the `mytoolfilename_` part to it.
     * @param [default_ = false] - The default value to return in case the lookup fails.
     */
    GetClientBool(name: string, default_ = false): number;
    
    /**
     * [Shared]
     * 
     * Attempts to grab a clientside tool [ConVar](https://wiki.facepunch.com/gmod/ConVar) as a [string](https://wiki.facepunch.com/gmod/string).
     * @param name - Name of the convar to retrieve. The function will automatically add the `mytoolfilename_` part to it.
     */
    GetClientInfo(name: string): string;
    
    /**
     * [Shared]
     * 
     * Attempts to grab a clientside tool [ConVar](https://wiki.facepunch.com/gmod/ConVar)'s value as a [number](https://wiki.facepunch.com/gmod/number).
     * @param name - Name of the convar to retrieve. The function will automatically add the `mytoolfilename_` part to it.
     * @param [default_ = 0] - The default value to return in case the lookup fails.
     */
    GetClientNumber(name: string, default_ = 0): number;
    
    /**
     * [Shared]
     * 
     * Retrieves an Entity previously stored using [Tool:SetObject](https://wiki.facepunch.com/gmod/Tool:SetObject).
     * @param id - The id of the object which was set in [Tool:SetObject](https://wiki.facepunch.com/gmod/Tool:SetObject).
     */
    GetEnt(id: number): Entity;
    
    /**
     * [Shared]
     * 
     * Returns a language key based on this tool's name and the current stage it is on.
     * 
     */
    GetHelpText(): string;
    
    /**
     * [Shared]
     * 
     * Retrieves an local vector previously stored using [Tool:SetObject](https://wiki.facepunch.com/gmod/Tool:SetObject).
     * See also [Tool:GetPos](https://wiki.facepunch.com/gmod/Tool:GetPos).
     * @param id - The id of the object which was set in [Tool:SetObject](https://wiki.facepunch.com/gmod/Tool:SetObject).
     */
    GetLocalPos(id: number): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the name of the current tool mode.
     * 
     */
    GetMode(): string;
    
    /**
     * [Shared]
     * 
     * Retrieves an normal vector previously stored using [Tool:SetObject](https://wiki.facepunch.com/gmod/Tool:SetObject).
     * @param id - The id of the object which was set in [Tool:SetObject](https://wiki.facepunch.com/gmod/Tool:SetObject).
     */
    GetNormal(id: number): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the current operation of the tool set by [Tool:SetOperation](https://wiki.facepunch.com/gmod/Tool:SetOperation).
     * 
     */
    GetOperation(): number;
    
    /**
     * [Shared]
     * 
     * Returns the owner of this tool.
     * 
     */
    GetOwner(): Entity;
    
    /**
     * [Shared]
     * 
     * Retrieves an [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) previously stored using [Tool:SetObject](https://wiki.facepunch.com/gmod/Tool:SetObject).
     * See also [Tool:GetEnt](https://wiki.facepunch.com/gmod/Tool:GetEnt).
     * @param id - The id of the object which was set in [Tool:SetObject](https://wiki.facepunch.com/gmod/Tool:SetObject).
     */
    GetPhys(id: number): PhysObj;
    
    /**
     * [Shared]
     * 
     * Retrieves an vector previously stored using [Tool:SetObject](https://wiki.facepunch.com/gmod/Tool:SetObject). See also [Tool:GetLocalPos](https://wiki.facepunch.com/gmod/Tool:GetLocalPos).
     * @param id - The id of the object which was set in [Tool:SetObject](https://wiki.facepunch.com/gmod/Tool:SetObject).
     */
    GetPos(id: number): Vector;
    
    /**
     * [Shared]
     * 
     * Attempts to grab a serverside tool [ConVar](https://wiki.facepunch.com/gmod/ConVar).
     * This will not do anything on client, despite the function being defined shared.
     * @param name - Name of the convar to retrieve. The function will automatically add the "mytoolfilename_" part to it.
     */
    GetServerInfo(name: string): string;
    
    /**
     * [Shared]
     * 
     * Returns the current stage of the tool set by [Tool:SetStage](https://wiki.facepunch.com/gmod/Tool:SetStage).
     * 
     */
    GetStage(): number;
    
    /**
     * [Shared]
     * 
     * Initializes the ghost entity with the given model. Removes any old ghost entity if called multiple times.
     * 
     * The ghost is a regular prop_physics entity in singleplayer games, and a clientside prop in multiplayer games.
     * @param model - The model of the new ghost entity
     * @param pos - Position to initialize the ghost entity at, usually not needed since this is updated in [Tool:UpdateGhostEntity](https://wiki.facepunch.com/gmod/Tool:UpdateGhostEntity).
     * @param angle - Angle to initialize the ghost entity at, usually not needed since this is updated in [Tool:UpdateGhostEntity](https://wiki.facepunch.com/gmod/Tool:UpdateGhostEntity).
     */
    MakeGhostEntity(model: string, pos: Vector, angle: Angle): void;
    
    /**
     * [Shared]
     * 
     * Returns the amount of stored objects ( [Entity](https://wiki.facepunch.com/gmod/Entity)s ) the tool has.
     * <validate>Are TOOLs limited to 4 entities?</validate>
     * 
     */
    NumObjects(): number;
    
    /**
     * [Client]
     * 
     * Automatically forces the tool's control panel to be rebuilt.
     * @param extra_args - Any arguments given to this function will be added to [TOOL.BuildCPanel](https://wiki.facepunch.com/gmod/TOOL.BuildCPanel)'s arguments.
     */
    RebuildControlPanel(...extra_args: any[]): void;
    
    /**
     * [Shared]
     * 
     * Removes any ghost entity created for this tool.
     * 
     */
    ReleaseGhostEntity(): void;
    
    /**
     * [Shared]
     * 
     * Stores an [Entity](https://wiki.facepunch.com/gmod/Entity) for later use in the tool.
     * 
     * The stored values can be retrieved by [Tool:GetEnt](https://wiki.facepunch.com/gmod/Tool:GetEnt), [Tool:GetPos](https://wiki.facepunch.com/gmod/Tool:GetPos), [Tool:GetLocalPos](https://wiki.facepunch.com/gmod/Tool:GetLocalPos), [Tool:GetPhys](https://wiki.facepunch.com/gmod/Tool:GetPhys), [Tool:GetBone](https://wiki.facepunch.com/gmod/Tool:GetBone) and [Tool:GetNormal](https://wiki.facepunch.com/gmod/Tool:GetNormal)
     * @param id - The id of the object to store.
     * @param ent - The entity to store.
     * @param pos - The position to store.
     * **Note:**
     * >this position is in **global space** and is internally converted to **local space** relative to the object, so when you retrieve it later it will be corrected to the object's new position
     * 
     * @param phys - The physics object to store.
     * @param bone - The hit bone to store.
     * @param normal - The hit normal to store.
     */
    SetObject(id: number, ent: Entity, pos: Vector, phys: PhysObj, bone: number, normal: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the current operation of the tool. Does nothing clientside. See also [Tool:SetStage](https://wiki.facepunch.com/gmod/Tool:SetStage).
     * 
     * Operations and stages work as follows:
     * * Operation 1
     * * * Stage 1
     * * * Stage 2
     * * * Stage 3
     * * Operation 2
     * * * Stage 1
     * * * Stage 2
     * * * Stage ...
     * @param operation - The new operation ID to set.
     */
    SetOperation(operation: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the current stage of the tool. Does nothing clientside.
     * 
     * See also [Tool:SetOperation](https://wiki.facepunch.com/gmod/Tool:SetOperation).
     * @param stage - The new stage to set.
     */
    SetStage(stage: number): void;
    
    /**
     * [Shared]
     * 
     * Initializes the ghost entity based on the supplied entity.
     * @param ent - The entity to copy ghost parameters off
     */
    StartGhostEntity(ent: Entity): void;
    
    /**
     * [Shared]
     * 
     * **y**
     * 
     * Sets the tool's stage to how many stored objects the tool has.
     * 
     */
    UpdateData(): void;
    
    /**
     * [Shared]
     * 
     * Updates the position and orientation of the ghost entity based on where the toolgun owner is looking along with data from object with id 1 set by [Tool:SetObject](https://wiki.facepunch.com/gmod/Tool:SetObject).
     * 
     * This should be called in the tool's [TOOL:Think](https://wiki.facepunch.com/gmod/TOOL:Think) hook.
     * 
     * This command is only used for tools that move props, such as easy weld, axis and motor. If you want to update a ghost like the thruster tool does it for example, check its [source code](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/gamemodes/sandbox/entities/weapons/gmod_tool/stools/thruster.lua#L179).
     * 
     */
    UpdateGhostEntity(): void;

}

/**
 * List of all possible functions to manipulate vectors.
 * 
 * Created by [Global.Vector](https://wiki.facepunch.com/gmod/Global.Vector).
 * 
 *  Type   | Name           | Description                    
 *  ------ | -------------- | ------------------------------ 
 *  [number](https://wiki.facepunch.com/gmod/number) | `x` or `1` | The X component of the vector. 
 *  [number](https://wiki.facepunch.com/gmod/number) | `y` or `2` | The Y component of the vector. 
 *  [number](https://wiki.facepunch.com/gmod/number) | `z` or `3` | The Z component of the vector.
 * 
 * Metamethod | Second Operand | Description
 * ---------- | -------------- | -----------
 * `__add` | [Vector](https://wiki.facepunch.com/gmod/Vector) | Returns new [Vector](https://wiki.facepunch.com/gmod/Vector) with the result of addition.
 * `__div` | [number](https://wiki.facepunch.com/gmod/number) or [Vector](https://wiki.facepunch.com/gmod/Vector) | Returns new [Vector](https://wiki.facepunch.com/gmod/Vector) with the result of division.
 * `__eq` | [any](https://wiki.facepunch.com/gmod/any) | Compares 2 operands, if they both are [Vector](https://wiki.facepunch.com/gmod/Vector), compares each individual component.
 * `__index` | [number](https://wiki.facepunch.com/gmod/number) or [string](https://wiki.facepunch.com/gmod/string) | Gets the component of the [Vector](https://wiki.facepunch.com/gmod/Vector). Returns a [number](https://wiki.facepunch.com/gmod/number).
 * `__mul` | [number](https://wiki.facepunch.com/gmod/number) or [Vector](https://wiki.facepunch.com/gmod/Vector)| Returns new [Vector](https://wiki.facepunch.com/gmod/Vector) with the result of multiplication.
 * `__newindex` | [number](https://wiki.facepunch.com/gmod/number) or [string](https://wiki.facepunch.com/gmod/string) | Sets the component of the [Vector](https://wiki.facepunch.com/gmod/Vector). Accepts [number](https://wiki.facepunch.com/gmod/number) and [string](https://wiki.facepunch.com/gmod/string).
 * `__sub` | [Vector](https://wiki.facepunch.com/gmod/Vector) | Returns new [Vector](https://wiki.facepunch.com/gmod/Vector) with the result of subtraction.
 * `__tostring` | | Returns `x y z`.
 * `__unm` | | Returns new [Vector](https://wiki.facepunch.com/gmod/Vector) with the result of negation.
 */
interface Vector {
    /**
     * The X component of the vector.
     */
    x: number,
    
    /**
     * The Y component of the vector.
     */
    y: number,
    
    /**
     * The Z component of the vector.
     */
    z: number,
    
    /**
     * The X component of the vector.
     */
    1: number,
    
    /**
     * The Y component of the vector.
     */
    2: number,
    
    /**
     * The Z component of the vector.
     */
    3: number,
    
    /**
     * Returns new Vector with the result of addition.
     */
    addOp: LuaAdditionMethod<Vector, Vector>,
    
    /**
     * Returns new Vector with the result of subtraction.
     */
    subOp: LuaSubtractionMethod<Vector, Vector>,
    
    /**
     * Returns new Vector with the result of multiplication.
     */
    mulOp: LuaMultiplicationMethod<number | Vector, Vector>,
    
    /**
     * Returns new Vector with the result of division.
     */
    divOp: LuaDivisionMethod<number, Vector>,
    
    /**
     * Returns new Vector with the result of negation.
     */
    unmOp: LuaNegationMethod<Vector>,

    /**
     * [Shared and Menu]
     * 
     * Adds the values of the argument vector to the original vector. This function is the same as vector1 + vector2 without creating a new vector object, skipping object construction and garbage collection.
     * @param vector - The vector to add.
     */
    Add(vector: Vector): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns an angle representing the normal of the vector.
     * 
     */
    Angle(): Angle;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the angle of this vector (normalized), but instead of assuming that up is [Global.Vector](https://wiki.facepunch.com/gmod/Global.Vector)( 0, 0, 1 ) (Like [Vector:Angle](https://wiki.facepunch.com/gmod/Vector:Angle) does) you can specify which direction is 'up' for the angle.
     * @param up - The up direction vector
     */
    AngleEx(up: Vector): Angle;
    
    /**
     * [Shared and Menu]
     * 
     * Calculates the cross product of this vector and the passed one.
     * 
     * The cross product of two vectors is a 3-dimensional vector with a direction perpendicular (at right angles) to both of them (according to the [right-hand rule](https://en.wikipedia.org/wiki/Right-hand_rule)), and magnitude equal to the area of parallelogram they span. This is defined as the product of the magnitudes, the sine of the angle between them, and unit (normal) vector `n` defined by the right-hand rule:
     * :**a** &times; **b** = &#124;**a**&#124; &#124;**b**&#124; sin(&theta;) **n&#770;**
     * where **a** and **b** are vectors, and **n&#770;** is a unit vector (magnitude of 1) perpendicular to both.
     * @param otherVector - Vector to calculate the cross product with.
     */
    Cross(otherVector: Vector): Vector;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the Euclidean distance between the vector and the other vector.
     * 
     * **Note:**
     * >This function is more expensive than [Vector:DistToSqr](https://wiki.facepunch.com/gmod/Vector:DistToSqr). However, please see the notes for [Vector:DistToSqr](https://wiki.facepunch.com/gmod/Vector:DistToSqr) before using it as squared distances are not the same as euclidean distances.
     * 
     * @param otherVector - The vector to get the distance to.
     */
    Distance(otherVector: Vector): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the Euclidean distance between the vector and the other vector in 2D space. The Z axis is ignored.
     * 
     * **Note:**
     * >This function is more expensive than [Vector:Distance2DSqr](https://wiki.facepunch.com/gmod/Vector:Distance2DSqr). However, please see the notes for [Vector:Distance2DSqr](https://wiki.facepunch.com/gmod/Vector:Distance2DSqr) before using it as squared distances are not the same as Euclidean distances.
     * 
     * @param otherVector - The vector to get the distance to.
     */
    Distance2D(otherVector: Vector): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the squared distance between 2 vectors in 2D space, ignoring the Z axis. This is faster than [Vector:Distance2D](https://wiki.facepunch.com/gmod/Vector:Distance2D) as calculating the square root is an expensive process.
     * 
     * **Note:**
     * >Squared distances should not be summed. If you need to sum distances, use [Vector:Distance2D](https://wiki.facepunch.com/gmod/Vector:Distance2D).
     * 
     * When performing a distance check, ensure the distance being checked against is squared.
     * 
     * @param otherVec - The vector to calculate the distance to.
     */
    Distance2DSqr(otherVec: Vector): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the squared distance of 2 vectors, this is faster than [Vector:Distance](https://wiki.facepunch.com/gmod/Vector:Distance) as calculating the square root is an expensive process.
     * 
     * **Note:**
     * >Squared distances should not be summed. If you need to sum distances, use [Vector:Distance](https://wiki.facepunch.com/gmod/Vector:Distance).
     * 
     * When performing a distance check, ensure the distance being checked against is squared. See example code below.
     * 
     * @param otherVec - The vector to calculate the distance to.
     */
    DistToSqr(otherVec: Vector): number;
    
    /**
     * [Shared and Menu]
     * 
     * Divide the vector by the given number, that means x, y and z are divided by that value. This will change the value of the original vector, see example 2 for division without changing the value.
     * @param divisor - The value to divide the vector with.
     */
    Div(divisor: number): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the [dot product](https://en.wikipedia.org/wiki/Dot_product#Geometric_definition)  of this vector and the passed one.
     * 
     * The dot product of two vectors is the product of their magnitudes (lengths), and the cosine of the angle between them:<br/><br/>
     * **a · b** = |**a**| |**b**| cos(θ) <br/><br/>
     * where **a** and **b** are vectors.<br/><br/>
     * See [Vector:Length](https://wiki.facepunch.com/gmod/Vector:Length) for obtaining magnitudes.
     * 
     * A dot product returns just the cosine of the angle if both vectors are normalized, and zero if the vectors are at right angles to each other.
     * @param otherVector - The vector to calculate the dot product with
     */
    Dot(otherVector: Vector): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the dot product of the two vectors.
     * 
     * @deprecated This is an alias of [Vector:Dot](https://wiki.facepunch.com/gmod/Vector:Dot). Use that instead.
     * 
     * @param Vector - The other vector.
     */
    DotProduct(Vector: Vector): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the negative version of this vector, i.e. a vector with every component to the negative value of itself.
     * 
     * See also [Vector:Negate](https://wiki.facepunch.com/gmod/Vector:Negate).
     * 
     */
    GetNegated(): Vector;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a normalized version of the vector. This is a alias of [Vector:GetNormalized](https://wiki.facepunch.com/gmod/Vector:GetNormalized).
     * 
     * @deprecated Use [Vector:GetNormalized](https://wiki.facepunch.com/gmod/Vector:GetNormalized) instead.
     * 
     * 
     */
    GetNormal(): Vector;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a normalized version of the vector. Normalized means vector with same direction but with length of 1.
     * 
     * This does not affect the vector you call it on; to do this, use [Vector:Normalize](https://wiki.facepunch.com/gmod/Vector:Normalize).
     * 
     */
    GetNormalized(): Vector;
    
    /**
     * [Shared and Menu]
     * 
     * Returns if the vector is equal to another vector with the given tolerance.
     * @param compare - The vector to compare to.
     * @param tolerance - The tolerance range.
     */
    IsEqualTol(compare: Vector, tolerance: number): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Checks whenever all fields of the vector are 0.
     * 
     */
    IsZero(): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the [Euclidean length](https://en.wikipedia.org/wiki/Euclidean_vector#Length) of the vector: &radic;(x&sup2; + y&sup2; + z&sup2;).
     * 
     * **Warning:**
     * >This is a relatively expensive process since it uses the square root. It is recommended that you use [Vector:LengthSqr](https://wiki.facepunch.com/gmod/Vector:LengthSqr) whenever possible.
     * 
     * 
     */
    Length(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the length of the vector in two dimensions, without the Z axis.
     * 
     * **Warning:**
     * >This is a relatively expensive process since it uses the square root. It is recommended that you use [Vector:Length2DSqr](https://wiki.facepunch.com/gmod/Vector:Length2DSqr) whenever possible.
     * 
     * 
     */
    Length2D(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the squared length of the vectors x and y value, x&sup2; + y&sup2;.
     * 
     * This is faster than [Vector:Length2D](https://wiki.facepunch.com/gmod/Vector:Length2D) as calculating the square root is an expensive process.
     * 
     */
    Length2DSqr(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the squared length of the vector, x&sup2; + y&sup2; + z&sup2;.
     * 
     * This is faster than [Vector:Length](https://wiki.facepunch.com/gmod/Vector:Length) as calculating the square root is an expensive process.
     * 
     */
    LengthSqr(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Scales the vector by the given [number](https://wiki.facepunch.com/gmod/number) (that means x, y and z are multiplied by that value), a [Vector](https://wiki.facepunch.com/gmod/Vector) (X, Y, and Z of each vector are multiplied) or a [VMatrix](https://wiki.facepunch.com/gmod/VMatrix) (Transforms the vector by the matrix's rotation/translation).
     * @param multiplier - The value to scale the vector with.
     */
    Mul(multiplier: number): void;
    
    /**
     * [Shared and Menu]
     * 
     * Negates this vector, i.e. sets every component to the negative value of itself. Same as `Vector( -vec.x, -vec.y, -vec.z )`
     * 
     */
    Negate(): void;
    
    /**
     * [Shared and Menu]
     * 
     * Normalizes the given vector. This changes the vector you call it on, if you want to return a normalized copy without affecting the original, use [Vector:GetNormalized](https://wiki.facepunch.com/gmod/Vector:GetNormalized).
     * 
     */
    Normalize(): void;
    
    /**
     * [Shared and Menu]
     * 
     * Randomizes each element of this Vector object.
     * @param [min = -1] - The minimum value for each component.
     * @param [max = 1] - The maximum value for each component.
     */
    Random(min = -1, max = 1): void;
    
    /**
     * [Shared and Menu]
     * 
     * Rotates a vector by the given angle.
     * Doesn't return anything, but rather changes the original vector.
     * @param rotation - The angle to rotate the vector by.
     */
    Rotate(rotation: Angle): void;
    
    /**
     * [Shared and Menu]
     * 
     * Copies the values from the second vector to the first vector.
     * @param vector - The vector to copy from.
     */
    Set(vector: Vector): void;
    
    /**
     * [Shared and Menu]
     * 
     * Sets the x, y, and z of the vector.
     * @param x - The x component
     * @param y - The y component
     * @param z - The z component
     */
    SetUnpacked(x: number, y: number, z: number): void;
    
    /**
     * [Shared and Menu]
     * 
     * Substracts the values of the second vector from the orignal vector, this function can be used to avoid garbage collection.
     * @param vector - The other vector.
     */
    Sub(vector: Vector): void;
    
    /**
     * [Shared]
     * 
     * Translates the [Vector](https://wiki.facepunch.com/gmod/Vector) (values ranging from 0 to 1) into a [Color](https://wiki.facepunch.com/gmod/Color). This will also range the values from 0 - 1 to 0 - 255.
     * 
     * x * 255 -> r<br/>
     * y * 255 -> g<br/>
     * z * 255 -> b
     * 
     * This is the opposite of [Color:ToVector](https://wiki.facepunch.com/gmod/Color:ToVector)
     * 
     */
    ToColor(): Color;
    
    /**
     * [Client]
     * 
     * Returns where on the screen the specified position vector would appear. A related function is [gui.ScreenToVector](https://wiki.facepunch.com/gmod/gui.ScreenToVector), which converts a 2D coordinate to a 3D direction.
     * 
     * **Bug [#462](https://github.com/Facepunch/garrysmod-issues/issues/462):**
     * >Errors in a render hook can make this value incorrect until the player restarts their game.
     * 
     * **Bug [#1404](https://github.com/Facepunch/garrysmod-issues/issues/1404):**
     * >[cam.Start3D](https://wiki.facepunch.com/gmod/cam.Start3D) or 3D context [cam.Start](https://wiki.facepunch.com/gmod/cam.Start) with non-default parameters incorrectly sets the reference FOV for this function, causing incorrect return values. This can be fixed by creating and ending a default 3D context ([cam.Start3D](https://wiki.facepunch.com/gmod/cam.Start3D) with no arguments).
     * 
     * **Note:**
     * >Should be called from a 3D rendering environment or after [cam.Start3D](https://wiki.facepunch.com/gmod/cam.Start3D) or it may not work correctly.
     * 
     * 
     */
    ToScreen(): ToScreenData;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the vector as a table with three elements.
     * 
     */
    ToTable(): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the x, y, and z of the vector.
     * 
     */
    Unpack(): LuaMultiReturn<[number, number, number]>;
    
    /**
     * [Shared and Menu]
     * 
     * Returns whenever the given vector is in a box created by the 2 other vectors.
     * 
     * <upload src="22674/8d9276d7e6dd0af.png" size="6279" name="image.png" />
     * @param boxStart - The first vector.
     * @param boxEnd - The second vector.
     */
    WithinAABox(boxStart: Vector, boxEnd: Vector): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Sets x, y and z to 0.
     * 
     */
    Zero(): void;

}

/**
 * This is a list of all methods only available for vehicles. It is also possible to call [Entity](https://wiki.facepunch.com/gmod/Entity) functions on vehicles.
 */
interface Vehicle extends Entity {
    

    /**
     * [Server]
     * 
     * Returns the remaining boosting time left.
     * 
     */
    BoostTimeLeft(): number;
    
    /**
     * [Server]
     * 
     * Tries to find an Exit Point for leaving vehicle, if one is unobstructed in the direction given.
     * @param yaw - Yaw/roll from vehicle angle to check for exit
     * @param distance - Distance from origin to drop player
     */
    CheckExitPoint(yaw: number, distance: number): Vector;
    
    /**
     * [Server]
     * 
     * Sets whether the engine is enabled or disabled, i.e. can be started or not.
     * @param enable - Enable or disable the engine
     */
    EnableEngine(enable: boolean): void;
    
    /**
     * [Client]
     * 
     * Returns information about the ammo of the vehicle
     * 
     */
    GetAmmo(): LuaMultiReturn<[number, number, number]>;
    
    /**
     * [Shared]
     * 
     * Returns third person camera distance.
     * 
     */
    GetCameraDistance(): number;
    
    /**
     * [Shared]
     * 
     * Gets the driver of the vehicle, returns `NULL` if no driver is present.
     * 
     */
    GetDriver(): Entity;
    
    /**
     * [Server]
     * 
     * Returns the current speed of the vehicle in Half-Life Hammer Units (in/s). Same as [Entity:GetVelocity](https://wiki.facepunch.com/gmod/Entity:GetVelocity) + [Vector:Length](https://wiki.facepunch.com/gmod/Vector:Length).
     * 
     */
    GetHLSpeed(): number;
    
    /**
     * [Server]
     * 
     * Returns the max speed of the vehicle in MPH.
     * 
     */
    GetMaxSpeed(): number;
    
    /**
     * [Server]
     * 
     * Returns some info about the vehicle.
     * 
     */
    GetOperatingParams(): OperatingParams;
    
    /**
     * [Shared]
     * 
     * Gets the passenger of the vehicle, returns NULL if no drivers is present.
     * @param passenger - The index of the passenger
     */
    GetPassenger(passenger: number): Entity;
    
    /**
     * [Server]
     * 
     * Returns the seat position and angle of a given passenger seat.
     * @param role - The passenger role. ( 1 is the driver )
     */
    GetPassengerSeatPoint(role: number): LuaMultiReturn<[Vector, Angle]>;
    
    /**
     * [Server]
     * 
     * Returns the current RPM of the vehicle. This value is fake and doesn't actually affect the vehicle movement.
     * 
     */
    GetRPM(): number;
    
    /**
     * [Server]
     * 
     * Returns the current speed of the vehicle in MPH.
     * 
     */
    GetSpeed(): number;
    
    /**
     * [Server]
     * 
     * Returns the current steering of the vehicle.
     * 
     */
    GetSteering(): number;
    
    /**
     * [Server]
     * 
     * Returns the maximum steering degree of the vehicle
     * 
     */
    GetSteeringDegrees(): number;
    
    /**
     * [Shared]
     * 
     * Returns if vehicle has thirdperson mode enabled or not.
     * 
     */
    GetThirdPersonMode(): boolean;
    
    /**
     * [Server]
     * 
     * Returns the current throttle of the vehicle.
     * 
     */
    GetThrottle(): number;
    
    /**
     * [Shared]
     * 
     * Returns the vehicle class name. This is only useful for Sandbox spawned vehicles or any vehicle that properly sets the vehicle class with [Vehicle:SetVehicleClass](https://wiki.facepunch.com/gmod/Vehicle:SetVehicleClass).
     * 
     */
    GetVehicleClass(): string;
    
    /**
     * [Server]
     * 
     * Returns the vehicle parameters of given vehicle.
     * 
     */
    GetVehicleParams(): VehicleParams;
    
    /**
     * [Shared]
     * 
     * Returns the view position and forward angle of a given passenger seat.
     * @param [role = 0] - The passenger role. 0 is the driver. This parameter seems to be ignored by the game engine and is therefore optional.
     */
    GetVehicleViewPosition(role = 0): LuaMultiReturn<[Vector, Angle, number]>;
    
    /**
     * [Server]
     * 
     * Returns the [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) of given wheel.
     * @param wheel - The wheel to retrieve
     */
    GetWheel(wheel: number): PhysObj;
    
    /**
     * [Server]
     * 
     * Returns the base wheel height.
     * @param wheel - The wheel to get the base wheel height of.
     */
    GetWheelBaseHeight(wheel: number): number;
    
    /**
     * [Server]
     * 
     * Returns the wheel contact point.
     * @param wheel - The wheel to check
     */
    GetWheelContactPoint(wheel: number): LuaMultiReturn<[Vector, number, boolean]>;
    
    /**
     * [Server]
     * 
     * Returns the wheel count of the vehicle
     * 
     */
    GetWheelCount(): number;
    
    /**
     * [Server]
     * 
     * Returns the total wheel height.
     * @param wheel - The wheel to get the base wheel height of.
     */
    GetWheelTotalHeight(wheel: number): number;
    
    /**
     * [Server]
     * 
     * Returns whether this vehicle has boost at all.
     * 
     */
    HasBoost(): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether this vehicle has a brake pedal. See [Vehicle:SetHasBrakePedal](https://wiki.facepunch.com/gmod/Vehicle:SetHasBrakePedal).
     * 
     */
    HasBrakePedal(): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether this vehicle is currently boosting or not.
     * 
     */
    IsBoosting(): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether the engine is enabled or not, i.e. whether it can be started.
     * 
     */
    IsEngineEnabled(): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether the engine is started or not.
     * 
     */
    IsEngineStarted(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns true if the vehicle object is a valid or not. This will return `false` when [Vehicle](https://wiki.facepunch.com/gmod/Vehicle) functions are not usable on the vehicle.
     * 
     */
    IsValidVehicle(): boolean;
    
    /**
     * [Server]
     * 
     * Returns whether this vehicle's engine is underwater or not. ( Internally the attachment point "engine" or "vehicle_engine" is checked )
     * 
     */
    IsVehicleBodyInWater(): boolean;
    
    /**
     * [Server]
     * 
     * Releases the vehicle's handbrake (Jeep) so it can roll without any passengers.
     * 
     * This will be overwritten if the vehicle has a driver. Same as [Vehicle:SetHandbrake](https://wiki.facepunch.com/gmod/Vehicle:SetHandbrake)( false )
     * 
     */
    ReleaseHandbrake(): void;
    
    /**
     * [Server]
     * 
     * Sets the boost. It is possible that this function does not work while the vehicle has a valid driver in it.
     * @param boost - The new boost value
     */
    SetBoost(boost: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the third person camera distance of the vehicle.
     * @param distance - Camera distance to set to
     */
    SetCameraDistance(distance: number): void;
    
    /**
     * [Server]
     * 
     * Turns on or off the Jeep handbrake so it can roll without a driver inside.
     * 
     * Does nothing while the vehicle has a driver in it.
     * @param handbrake - true to turn on, false to turn off.
     */
    SetHandbrake(handbrake: boolean): void;
    
    /**
     * [Server]
     * 
     * Sets whether this vehicle has a brake pedal.
     * @param brakePedal - Whether this vehicle has a brake pedal
     */
    SetHasBrakePedal(brakePedal: boolean): void;
    
    /**
     * [Server]
     * 
     * Sets maximum reverse throttle
     * @param maxRevThrottle - The new maximum throttle. This number must be negative.
     */
    SetMaxReverseThrottle(maxRevThrottle: number): void;
    
    /**
     * [Server]
     * 
     * Sets maximum forward throttle
     * @param maxThrottle - The new maximum throttle.
     */
    SetMaxThrottle(maxThrottle: number): void;
    
    /**
     * [Server]
     * 
     * Sets spring length of given wheel
     * @param wheel - The wheel to change spring length of
     * @param length - The new spring length
     */
    SetSpringLength(wheel: number, length: number): void;
    
    /**
     * [Server]
     * 
     * Sets the steering of the vehicle.
     * <validate>The correct range, 0 to 1 or -1 to 1</validate>
     * @param front - Angle of the front wheels (-1 to 1)
     * @param rear - Angle of the rear wheels (-1 to 1)
     */
    SetSteering(front: number, rear: number): void;
    
    /**
     * [Server]
     * 
     * Sets the maximum steering degrees of the vehicle
     * @param steeringDegrees - The new maximum steering degree
     */
    SetSteeringDegrees(steeringDegrees: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the third person mode state.
     * @param enable - Enable or disable the third person mode for this vehicle
     */
    SetThirdPersonMode(enable: boolean): void;
    
    /**
     * [Server]
     * 
     * Sets the throttle of the vehicle. It is possible that this function does not work with a valid driver in it.
     * @param throttle - The new throttle.
     */
    SetThrottle(throttle: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the vehicle class name.
     * @param class_ - The vehicle class name to set
     */
    SetVehicleClass(class_: string): void;
    
    /**
     * [Server]
     * 
     * Sets whether the entry or exit camera animation should be played or not.
     * @param bOn - Whether the entry or exit camera animation should be played or not.
     */
    SetVehicleEntryAnim(bOn: boolean): void;
    
    /**
     * [Server]
     * 
     * Sets the vehicle parameters for given vehicle.
     * 
     * **Note:**
     * >Not all variables from the [Structures/VehicleParams](https://wiki.facepunch.com/gmod/Structures/VehicleParams) can be set.
     * 
     * @param params - The new new vehicle parameters. See [Structures/VehicleParams](https://wiki.facepunch.com/gmod/Structures/VehicleParams).
     */
    SetVehicleParams(params: VehicleParams): void;
    
    /**
     * [Server]
     * 
     * Sets friction of given wheel.  This function may be broken.
     * @param wheel - The wheel to change the friction of
     * @param friction - The new friction to set
     */
    SetWheelFriction(wheel: number, friction: number): void;
    
    /**
     * [Server]
     * 
     * Starts or stops the engine.
     * @param start - True to start, false to stop.
     */
    StartEngine(start: boolean): void;

}

/**
 * A 4x4 matrix.
 * 
 * This page lists all possible functions to manipulate matrices.
 * 
 * This object can be created by [Global.Matrix](https://wiki.facepunch.com/gmod/Global.Matrix).
 * 
 * Metamethod | Second Operand | Description
 * ---------- | -------------- | -----------
 * `__add` | [VMatrix](https://wiki.facepunch.com/gmod/VMatrix) | Returns new [VMatrix](https://wiki.facepunch.com/gmod/VMatrix) with the result of addition.
 * `__eq` | [any](https://wiki.facepunch.com/gmod/any) | Compares 2 operands, if they both are [VMatrix](https://wiki.facepunch.com/gmod/VMatrix), compares each individual component.
 * `__mul` | [VMatrix](https://wiki.facepunch.com/gmod/VMatrix) or [Vector](https://wiki.facepunch.com/gmod/Vector) | Returns new [VMatrix](https://wiki.facepunch.com/gmod/VMatrix) or [Vector](https://wiki.facepunch.com/gmod/Vector) with the result of multiplication.
 * `__sub` | [VMatrix](https://wiki.facepunch.com/gmod/VMatrix) | Returns new [VMatrix](https://wiki.facepunch.com/gmod/VMatrix) with the result of subtraction.
 * `__tostring` |  | Returns a [string](https://wiki.facepunch.com/gmod/string) in format `[%f,\t%f,\t%f,\t%f]\n[%f,\t%f,\t%f,\t%f]\n[%f,\t%f,\t%f,\t%f]\n[%f,\t%f,\t%f,\t%f]`.
 */
interface VMatrix {
    /**
     * Returns new VMatrix with the result of addition.
     */
    addOp: LuaAdditionMethod<VMatrix, VMatrix>,
    
    /**
     * Returns new VMatrix with the result of subtraction.
     */
    subOp: LuaSubtractionMethod<VMatrix, VMatrix>,
    
    /**
     * Returns new VMatrix with the result of multiplication.
     */
    mulOp: LuaMultiplicationMethod<VMatrix | Vector, VMatrix>,

    /**
     * [Shared]
     * 
     * Adds given matrix to this matrix.
     * @param input - The input matrix to add.
     */
    Add(input: VMatrix): void;
    
    /**
     * [Shared]
     * 
     * Returns the absolute rotation of the matrix.
     * 
     */
    GetAngles(): Angle;
    
    /**
     * [Shared]
     * 
     * Returns a specific field in the matrix.
     * @param row - Row of the field whose value is to be retrieved, from 1 to 4
     * @param column - Column of the field whose value is to be retrieved, from 1 to 4
     */
    GetField(row: number, column: number): number;
    
    /**
     * [Shared]
     * 
     * Gets the forward direction of the matrix.
     * 
     * ie. The first column of the matrix, excluding the w coordinate.
     * 
     */
    GetForward(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns an inverted matrix without modifying the original matrix.
     * 
     * Inverting the matrix will fail if its [determinant](https://en.wikipedia.org/wiki/Determinant) is 0 or close to 0. (ie. its "scale" in any direction is 0.)
     * 
     * See also [VMatrix:GetInverseTR](https://wiki.facepunch.com/gmod/VMatrix:GetInverseTR).
     * 
     */
    GetInverse(): VMatrix;
    
    /**
     * [Shared]
     * 
     * Returns an inverted matrix without modifying the original matrix. This function will not fail, but only works correctly on matrices that contain only translation and/or rotation.
     * 
     * Using this function on a matrix with modified scale may return an incorrect inverted matrix.
     * 
     * To get the inverse of a matrix that contains other modifications, see [VMatrix:GetInverse](https://wiki.facepunch.com/gmod/VMatrix:GetInverse).
     * 
     */
    GetInverseTR(): VMatrix;
    
    /**
     * [Shared]
     * 
     * Gets the right direction of the matrix.
     * 
     * ie. The second column of the matrix, negated, excluding the w coordinate.
     * 
     */
    GetRight(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the absolute scale of the matrix.
     * 
     */
    GetScale(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the absolute translation of the matrix.
     * 
     */
    GetTranslation(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the transpose (each row becomes a column) of this matrix.
     * 
     */
    GetTransposed(): VMatrix;
    
    /**
     * [Shared]
     * 
     * Gets the up direction of the matrix.
     * 
     * ie. The third column of the matrix, excluding the w coordinate.
     * 
     */
    GetUp(): Vector;
    
    /**
     * [Shared]
     * 
     * Initializes the matrix as Identity matrix.
     * 
     */
    Identity(): void;
    
    /**
     * [Shared]
     * 
     * Inverts the matrix.
     * 
     * Inverting the matrix will fail if its [determinant](https://en.wikipedia.org/wiki/Determinant) is 0 or close to 0. (ie. its "scale" in any direction is 0.)
     * 
     * If the matrix cannot be inverted, it does not get modified.
     * 
     * See also [VMatrix:InvertTR](https://wiki.facepunch.com/gmod/VMatrix:InvertTR).
     * 
     */
    Invert(): boolean;
    
    /**
     * [Shared]
     * 
     * Inverts the matrix. This function will not fail, but only works correctly on matrices that contain only translation and/or rotation.
     * 
     * Using this function on a matrix with modified scale may return an incorrect inverted matrix.
     * 
     * To invert a matrix that contains other modifications, see [VMatrix:Invert](https://wiki.facepunch.com/gmod/VMatrix:Invert).
     * 
     */
    InvertTR(): void;
    
    /**
     * [Shared]
     * 
     * Returns whether the matrix is equal to Identity matrix or not.
     * 
     */
    IsIdentity(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether the matrix is a rotation matrix or not.
     * 
     * Technically it checks if the forward, right and up vectors are orthogonal and normalized.
     * 
     */
    IsRotationMatrix(): boolean;
    
    /**
     * [Shared]
     * 
     * Checks whenever all fields of the matrix are 0, aka if this is a [null matrix](https://en.wikipedia.org/wiki/Zero_matrix).
     * 
     */
    IsZero(): boolean;
    
    /**
     * [Shared]
     * 
     * Multiplies this matrix by given matrix.
     * @param input - The input matrix to multiply by.
     */
    Mul(input: VMatrix): void;
    
    /**
     * [Shared]
     * 
     * Rotates the matrix by the given angle.
     * 
     * Postmultiplies the matrix by a rotation matrix (A = AR).
     * @param rotation - Rotation.
     */
    Rotate(rotation: Angle): void;
    
    /**
     * [Shared]
     * 
     * Scales the matrix by the given vector.
     * 
     * Postmultiplies the matrix by a scaling matrix (A = AS).
     * @param scale - Vector to scale with matrix with.
     */
    Scale(scale: Vector): void;
    
    /**
     * [Shared]
     * 
     * Scales the absolute translation with the given value.
     * @param scale - Value to scale the translation with.
     */
    ScaleTranslation(scale: number): void;
    
    /**
     * [Shared]
     * 
     * Copies values from the given matrix object.
     * @param src - The matrix to copy values from.
     */
    Set(src: VMatrix): void;
    
    /**
     * [Shared]
     * 
     * Sets the absolute rotation of the matrix.
     * @param angle - New angles.
     */
    SetAngles(angle: Angle): void;
    
    /**
     * [Shared]
     * 
     * Sets a specific field in the matrix.
     * @param row - Row of the field to be set, from 1 to 4
     * @param column - Column of the field to be set, from 1 to 4
     * @param value - The value to set in that field
     */
    SetField(row: number, column: number, value: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the forward direction of the matrix.
     * 
     * ie. The first column of the matrix, excluding the w coordinate.
     * @param forward - The forward direction of the matrix.
     */
    SetForward(forward: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the right direction of the matrix.
     * 
     * ie. The second column of the matrix, negated, excluding the w coordinate.
     * @param forward - The right direction of the matrix.
     */
    SetRight(forward: Vector): void;
    
    /**
     * [Shared]
     * 
     * Modifies the scale of the matrix while preserving the rotation and translation.
     * @param scale - The scale to set.
     */
    SetScale(scale: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the absolute translation of the matrix.
     * @param translation - New translation.
     */
    SetTranslation(translation: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets each component of the matrix.
     * @param e11 - 
     * @param e12 - 
     * @param e13 - 
     * @param e14 - 
     * @param e21 - 
     * @param e22 - 
     * @param e23 - 
     * @param e24 - 
     * @param e31 - 
     * @param e32 - 
     * @param e33 - 
     * @param e34 - 
     * @param e41 - 
     * @param e42 - 
     * @param e43 - 
     * @param e44 - 
     */
    SetUnpacked(e11: number, e12: number, e13: number, e14: number, e21: number, e22: number, e23: number, e24: number, e31: number, e32: number, e33: number, e34: number, e41: number, e42: number, e43: number, e44: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the up direction of the matrix.
     * 
     * ie. The third column of the matrix, excluding the w coordinate.
     * @param forward - The up direction of the matrix.
     */
    SetUp(forward: Vector): void;
    
    /**
     * [Shared]
     * 
     * Subtracts given matrix from this matrix.
     * @param input - The input matrix to subtract.
     */
    Sub(input: VMatrix): void;
    
    /**
     * [Shared]
     * 
     * Converts the matrix to a 4x4 table. See [Global.Matrix](https://wiki.facepunch.com/gmod/Global.Matrix) function.
     * 
     */
    ToTable(): any;
    
    /**
     * [Shared]
     * 
     * Translates the matrix by the given vector aka. adds the vector to the translation.
     * 
     * Postmultiplies the matrix by a translation matrix (A = AT).
     * @param translation - Vector to translate the matrix by.
     */
    Translate(translation: Vector): void;
    
    /**
     * [Shared]
     * 
     * Returns each component of the matrix, expanding rows before columns.
     * 
     */
    Unpack(): LuaMultiReturn<[number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number]>;
    
    /**
     * [Shared]
     * 
     * Sets all components of the matrix to 0, also known as a [null matrix](https://en.wikipedia.org/wiki/Zero_matrix).
     * 
     * This function is more efficient than setting each element manually.
     * 
     */
    Zero(): void;

}

/**
 * This is a list of all methods only available for weapons. It is also possible to call [Entity](https://wiki.facepunch.com/gmod/Entity) functions on weapons.
 * 
 * **Note:**
 * >A list of available methods has been expanded in your navigation bar.
 * 
 */
interface Weapon extends Entity {
    

    /**
     * [Shared]
     * 
     * Returns whether the weapon allows to being switched from when a better ( [Weapon:GetWeight](https://wiki.facepunch.com/gmod/Weapon:GetWeight) ) weapon is being picked up.
     * 
     */
    AllowsAutoSwitchFrom(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether the weapon allows to being switched to when a better ( [Weapon:GetWeight](https://wiki.facepunch.com/gmod/Weapon:GetWeight) ) weapon is being picked up.
     * 
     */
    AllowsAutoSwitchTo(): boolean;
    
    /**
     * [Shared]
     * 
     * Calls a SWEP function on client.
     * 
     * **Warning:**
     * >This uses the [usermessage](https://wiki.facepunch.com/gmod/usermessage) internally, because of that, the combined length of the arguments of this function may not exceed 254 bytes/characters or the function will cease to function!
     * 
     * @param functionName - Name of function to call. If you want to call SWEP:MyFunc() on client, you type in "MyFunc"
     * @param [arguments = ] - Arguments for the function, separated by spaces.
     * **Note:**
     * >Only the second argument is passed as argument and must be a string
     * 
     */
    CallOnClient(functionName: string, arguments?: string): void;
    
    /**
     * [Shared]
     * 
     * Returns how much primary ammo is in the magazine.
     * 
     * **Note:**
     * >This is not shared between clients and will instead return the maximum primary clip size.
     * 
     * 
     */
    Clip1(): number;
    
    /**
     * [Shared]
     * 
     * Returns how much secondary ammo is in the magazine.
     * 
     * **Note:**
     * >This is not shared between clients and will instead return the maximum secondary clip size.
     * 
     * 
     */
    Clip2(): number;
    
    /**
     * [Shared]
     * 
     * Forces the weapon to reload while playing given animation.
     * 
     * **Note:**
     * >This will stop the [Weapon:Think](https://wiki.facepunch.com/gmod/Weapon:Think) function from getting called while the weapon is reloading!
     * 
     * @param act - Sequence to use as reload animation. Uses the [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT).
     */
    DefaultReload(act: ACT): boolean;
    
    /**
     * [Shared]
     * 
     * Returns the sequence enumeration number that the weapon is playing.
     * 
     * **Bug [#2543](https://github.com/Facepunch/garrysmod-issues/issues/2543):**
     * >This can return inconsistent results between the server and client.
     * 
     * 
     */
    GetActivity(): ACT;
    
    /**
     * [Shared]
     * 
     * Returns the weapon deploy speed, as set by [Weapon:SetDeploySpeed](https://wiki.facepunch.com/gmod/Weapon:SetDeploySpeed). If not previously set, the value will be polled from the `sv_defaultdeployspeed` [ConVar](https://wiki.facepunch.com/gmod/ConVar).
     * 
     */
    GetDeploySpeed(): number;
    
    /**
     * [Shared]
     * 
     * Returns the hold type of the weapon.
     * 
     */
    GetHoldType(): string;
    
    /**
     * [Shared]
     * 
     * Returns maximum primary clip size
     * 
     */
    GetMaxClip1(): number;
    
    /**
     * [Shared]
     * 
     * Returns maximum secondary clip size
     * 
     */
    GetMaxClip2(): number;
    
    /**
     * [Shared]
     * 
     * Gets the next time the weapon can primary fire. ( Can call [WEAPON:PrimaryAttack](https://wiki.facepunch.com/gmod/WEAPON:PrimaryAttack) )
     * 
     */
    GetNextPrimaryFire(): number;
    
    /**
     * [Shared]
     * 
     * Gets the next time the weapon can secondary fire. ( Can call [WEAPON:SecondaryAttack](https://wiki.facepunch.com/gmod/WEAPON:SecondaryAttack) )
     * 
     */
    GetNextSecondaryFire(): number;
    
    /**
     * [Shared]
     * 
     * Gets the primary ammo type of the given weapon.
     * 
     */
    GetPrimaryAmmoType(): number;
    
    /**
     * [Shared]
     * 
     * Returns the non-internal name of the weapon, that should be for displaying.
     * 
     * **Note:**
     * >If that returns an untranslated message (#HL2_XX), use [language.GetPhrase](https://wiki.facepunch.com/gmod/language.GetPhrase) to see the "nice" name.
     * 
     * **Note:**
     * >If SWEP.PrintName is not set in the Weapon or the Weapon Base then "&amp;lt;MISSING SWEP PRINT NAME&amp;gt;" will be returned.
     * 
     * 
     */
    GetPrintName(): string;
    
    /**
     * [Shared]
     * 
     * Gets the ammo type of the given weapons secondary fire.
     * 
     */
    GetSecondaryAmmoType(): number;
    
    /**
     * [Shared]
     * 
     * Returns the slot of the weapon.
     * 
     * **Note:**
     * >The slot numbers start from 0.
     * 
     * 
     */
    GetSlot(): number;
    
    /**
     * [Shared]
     * 
     * Returns slot position of the weapon
     * 
     */
    GetSlotPos(): number;
    
    /**
     * [Shared]
     * 
     * Returns the view model of the weapon.
     * 
     */
    GetWeaponViewModel(): string;
    
    /**
     * [Shared]
     * 
     * Returns the world model of the weapon.
     * 
     */
    GetWeaponWorldModel(): string;
    
    /**
     * [Shared]
     * 
     * Returns the "weight" of the weapon, which is used when deciding which [Weapon](https://wiki.facepunch.com/gmod/Weapon) is better by the engine.
     * 
     */
    GetWeight(): number;
    
    /**
     * [Shared]
     * 
     * Returns whether the weapon has ammo left or not. It will return false when there's no ammo left in the magazine **and** when there's no reserve ammo left.
     * 
     * **Note:**
     * >This will return true for weapons like crowbar, gravity gun, etc.
     * 
     * 
     */
    HasAmmo(): boolean;
    
    /**
     * [Client]
     * 
     * Returns whenever the weapon is carried by the local player.
     * 
     */
    IsCarriedByLocalPlayer(): boolean;
    
    /**
     * [Shared]
     * 
     * Checks if the weapon is a SWEP or a built-in weapon.
     * 
     */
    IsScripted(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether the weapon is visible. The term visibility is not exactly what gets checked here, first it checks if the owner is a player, then checks if the active view model has EF_NODRAW flag NOT set.
     * 
     */
    IsWeaponVisible(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns the time since this weapon last fired a bullet with [Entity:FireBullets](https://wiki.facepunch.com/gmod/Entity:FireBullets) in seconds. It is not networked.
     * 
     */
    LastShootTime(): number;
    
    /**
     * [Shared]
     * 
     * Forces weapon to play activity/animation.
     * @param act - Activity to play. See the [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT) (specifically ACT_VM_).
     */
    SendWeaponAnim(act: ACT): void;
    
    /**
     * [Shared]
     * 
     * Sets the activity the weapon is playing.
     * 
     * See also [Weapon:GetActivity](https://wiki.facepunch.com/gmod/Weapon:GetActivity).
     * @param act - The new activity to set, see [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT).
     */
    SetActivity(act: ACT): void;
    
    /**
     * [Shared]
     * 
     * Lets you change the number of bullets in the given weapons primary clip.
     * @param ammo - The amount of bullets the clip should contain
     */
    SetClip1(ammo: number): void;
    
    /**
     * [Shared]
     * 
     * Lets you change the number of bullets in the given weapons secondary clip.
     * @param ammo - The amount of bullets the clip should contain
     */
    SetClip2(ammo: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the weapon deploy speed. This value needs to match on client and server.
     * @param speed - The value to set deploy speed to. Values less than `1` will slow down the animations. Minimum value is `0.1`.
     */
    SetDeploySpeed(speed: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the hold type of the weapon. This function also calls [WEAPON:SetWeaponHoldType](https://wiki.facepunch.com/gmod/WEAPON:SetWeaponHoldType) and properly networks it to all clients.
     * 
     * **Bug :**
     * >Using this function on weapons held by bots will not network holdtype changes to clients if the world model is set to an empty string (SWEP.WorldModel = "").
     * 
     * **Note:**
     * >This only works on scripted weapons.
     * 
     * @param name - Name of the hold type. You can find all default hold types <page text="here">Hold_Types</page>
     */
    SetHoldType(name: string): void;
    
    /**
     * [Shared]
     * 
     * Sets the time since this weapon last fired in seconds. Used in conjunction with [Weapon:LastShootTime](https://wiki.facepunch.com/gmod/Weapon:LastShootTime)
     * @param [time = CurTime()] - The time in seconds when the last time the weapon was fired.
     */
    SetLastShootTime(time?: number): void;
    
    /**
     * [Shared]
     * 
     * Sets when the weapon can fire again. Time should be based on [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime).
     * 
     * **Bug [#3786](https://github.com/Facepunch/garrysmod-issues/issues/3786):**
     * >This will fire extra bullets if the time is set to less than [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime).
     * 
     * **Note:**
     * >The standard HL2 Pistol (`weapon_pistol`) bypasses this function due to an [internal implementation](https://github.com/ValveSoftware/source-sdk-2013/blob/master/mp/src/game/server/hl2/weapon_pistol.cpp#L313-L317).
     * 
     * @param time - Time when player should be able to use primary fire again
     */
    SetNextPrimaryFire(time: number): void;
    
    /**
     * [Shared]
     * 
     * Sets when the weapon can alt-fire again. Time should be based on [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime).
     * @param time - Time when player should be able to use secondary fire again
     */
    SetNextSecondaryFire(time: number): void;

}

/**
 * Used to show an icon for any of the [Garry's Mod Steam achievements](http://steamcommunity.com/stats/GarrysMod/achievements).
 * 
 * 		If the viewer has not unlocked the achievement on Steam, the icon will be grayed out.
 */
interface AchievementIcon extends Panel {
    

    

}

/**
 * Used to show a player's Steam avatar. You are recommended but not limited to pick one of the following sizes: 16, 32, 64, 84, 128, 184.
 */
interface AvatarImage extends Panel {
    

    

}

/**
 * Base panel for elements using the [Awesomium](http://www.awesomium.com) UI engine.
 * 
 * **Note:**
 * >On the `x86-64` beta this panel isn't actually Awesomium, its the same as `HTML` (`HtmlPanel`)
 * 
 */
interface Awesomium extends Panel {
    

    

}

/**
 * Creates a button that players can click on.
 * 
 * @deprecated Only exists for backwards compatibility with [Panel:SetActionFunction](https://wiki.facepunch.com/gmod/Panel:SetActionFunction). Use [DButton](https://wiki.facepunch.com/gmod/DButton) instead.
 * 
 */
interface Button extends DButton {
    

    

}

/**
 * **.**
 * 		Engine checkbox
 */
interface CheckButton {
    

    

}

/**
 * The ContentHeader is used internally by the Spawnmenu and only use this if you know 
 * 		what you're doing because you can break a few things with it.
 */
interface ContentHeader extends DLabelEditable {
    

    /**
     * [Client]
     * 
     * Creates a [Global.DermaMenu](https://wiki.facepunch.com/gmod/Global.DermaMenu) and adds a delete option before opening the menu
     * @param style - 
     * @param [hookname = PopulateContent] - A Populate Hook like PopulateEntities
     */
    OpenMenu(style: string, hookname?: string): void;

}

/**
 * The spawn icon used for SWEPs and other SENTs, commonly featured as part of the spawn menu. 
 * 		Do note that at least one of your ContentIcon's parents must either be an [EditablePanel](https://wiki.facepunch.com/gmod/EditablePanel) or derived from it 
 * 		(like a [DFrame](https://wiki.facepunch.com/gmod/DFrame), for example), else it won't be able to focus and thus be unclickable.
 * 
 * 		This control only exists in Sandbox derived gamemodes.
 */
interface ContentIcon extends Omit<DButton, "SetMaterial"> {
    

    /**
     * [Client]
     * 
     * Returns the color set by [ContentIcon:SetColor](https://wiki.facepunch.com/gmod/ContentIcon:SetColor)
     * 
     */
    GetColor(): Color;
    
    /**
     * [Client]
     * 
     * Returns the content type used to save and restore the content icon in a spawnlist.
     * 
     */
    GetContentType(): string;
    
    /**
     * [Client]
     * 
     * Returns a table of weapon classes for the content icon with "NPC" content type to be randomly chosen from when user tries to spawn the NPC.
     * 
     */
    GetNPCWeapon(): any;
    
    /**
     * [Client]
     * 
     * Returns the internal "name" for the content icon, usually a class name for an entity.
     * 
     */
    GetSpawnName(): string;
    
    /**
     * [Client]
     * 
     * A hook for override, by default does nothing. Called when user right clicks on the content icon, you are supposed to open a [Global.DermaMenu](https://wiki.facepunch.com/gmod/Global.DermaMenu) here with additional options.
     * 
     */
    OpenMenu(): void;
    
    /**
     * [Client]
     * 
     * Sets whether the content item is admin only. This makes the icon to display a admin icon in the top left corner of the icon.
     * @param adminOnly - Whether this content should be admin only or not
     */
    SetAdminOnly(adminOnly: boolean): void;
    
    /**
     * [Client]
     * 
     * Sets the color for the content icon. Currently is not used by the content icon panel.
     * @param clr - The color to set. See [Color](https://wiki.facepunch.com/gmod/Color)
     */
    SetColor(clr: Color): void;
    
    /**
     * [Client]
     * 
     * Sets the content type used to save and restore the content icon in a spawnlist.
     * @param type - The content type, for example "entity" or "weapon"
     */
    SetContentType(type: string): void;
    
    /**
     * [Client]
     * 
     * Sets the material to be displayed as the content icon.
     * @param path - Path to the icon to use.
     */
    SetMaterial(path: string): void;
    
    /**
     * [Client]
     * 
     * Sets the tool tip and the "nice" name to be displayed by the content icon.
     * @param name - "Nice" name to display.
     */
    SetName(name: string): void;
    
    /**
     * [Client]
     * 
     * Sets a table of weapon classes for the content icon with "NPC" content type to be randomly chosen from when user tries to spawn the NPC.
     * @param weapons - A table of weapon classes to be chosen from when user tries to spawn the NPC.
     */
    SetNPCWeapon(weapons: any): void;
    
    /**
     * [Client]
     * 
     * Sets the internal "name" for the content icon, usually a class name for an entity.
     * @param name - Internal "name" to be used when user left clicks the icon.
     */
    SetSpawnName(name: string): void;

}

/**
 * The ContentSidebar is internally used by the spawnmenu and manages things like the Spawnmenu Toolbar.
 * 		It internally uses a DTree which is accessible with ContentSidebar .Tree.
 * 		When [ContentSidebar:EnableModify](https://wiki.facepunch.com/gmod/ContentSidebar:EnableModify) has been called ContentSidebar.Toolbox will return a [ContentSidebarToolbox](https://wiki.facepunch.com/gmod/ContentSidebarToolbox)
 */
interface ContentSidebar extends DPanel {
    

    /**
     * [Client]
     * 
     * Creates a Save Notification which will be shown when [SANDBOX:SpawnlistContentChanged](https://wiki.facepunch.com/gmod/SANDBOX:SpawnlistContentChanged) has been called.
     * @param style - 
     * @param [hookname = PopulateContent] - A Populate Hook like PopulateEntities
     */
    CreateSaveNotification(style: string, hookname?: string): void;
    
    /**
     * [Client]
     * 
     * Internally calls [ContentSidebar:EnableSearch](https://wiki.facepunch.com/gmod/ContentSidebar:EnableSearch), [ContentSidebar:CreateSaveNotification](https://wiki.facepunch.com/gmod/ContentSidebar:CreateSaveNotification) and creates a ContentSidebarToolbox which is accessible under ContentSidebar.Toolbox. Call the Hook [SANDBOX:OpenToolbox](https://wiki.facepunch.com/gmod/SANDBOX:OpenToolbox) to open the created Toolbox
     * 
     */
    EnableModify(): void;
    
    /**
     * [Client]
     * 
     * Creates a search bar which will be displayed over the Nodes.
     * @param style - 
     * @param [hookname = PopulateContent] - A Populate Hook like PopulateEntities
     */
    EnableSearch(style: string, hookname?: string): void;

}

/**
 * The ContentSidebarToolbox is internally used by the [ContentSidebar](https://wiki.facepunch.com/gmod/ContentSidebar) and is used to change the icon of a category.
 * It internally consists of a [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry), [DPanel](https://wiki.facepunch.com/gmod/DPanel), [DImageButton](https://wiki.facepunch.com/gmod/DImageButton), [Panel](https://wiki.facepunch.com/gmod/Panel), [ContentHeader](https://wiki.facepunch.com/gmod/ContentHeader) and a [DIconBrowser](https://wiki.facepunch.com/gmod/DIconBrowser)
 */
interface ContentSidebarToolbox extends DDrawer {
    

    

}

/**
 * A base for all context menu panels ( The ones used for tool options in sandbox )
 */
interface ContextBase extends Panel {
    

    /**
     * [Client]
     * 
     * Called by spawnmenu functions (when creating a context menu) to fill this control with data.
     * @param contextData - A two-membered table:
     * * [string](https://wiki.facepunch.com/gmod/string) convar - The console variable to use. Calls [ContextBase:SetConVar](https://wiki.facepunch.com/gmod/ContextBase:SetConVar).
     * * [string](https://wiki.facepunch.com/gmod/string) label - The text to display inside the control's label.
     */
    ControlValues(contextData: any): void;
    
    /**
     * [Client]
     * 
     * Returns the [ConVar](https://wiki.facepunch.com/gmod/ConVar) for the panel to change/handle, set by [ContextBase:SetConVar](https://wiki.facepunch.com/gmod/ContextBase:SetConVar)
     * 
     */
    ConVar(): string;
    
    /**
     * [Client]
     * 
     * Sets the [ConVar](https://wiki.facepunch.com/gmod/ConVar) for the panel to change/handle.
     * @param cvar - The [ConVar](https://wiki.facepunch.com/gmod/ConVar) for the panel to change.
     */
    SetConVar(cvar: string): void;
    
    /**
     * [Client]
     * 
     * You should override this function and use it to check whether your convar value changed.
     * 
     */
    TestForChanges(): void;

}

/**
 * Used by the context menu in sandbox.
 */
interface ControlPanel extends DForm {
    

    /**
     * [Client]
     * 
     * Adds a control to the control panel.
     * 
     * @deprecated It is recommended to use [DForm](https://wiki.facepunch.com/gmod/DForm)'s members instead.
     * 
     * @param type - The control type to add. The complete list is:
     * * header
     * * textbox
     * * label
     * * checkbox/toggle
     * * slider
     * * propselect
     * * matselect
     * * ropematerial
     * * button
     * * numpad
     * * color
     * * combobox
     * * listbox
     * * materialgallery
     * @param controlinfo - Each control takes their own table structure. You may search "AddControl" on GitHub for examples.
     * Here is a full list of each type and the table members it requires:
     * * header
     * 	* description
     * * textbox:
     * 	* label (def: "Untitled")
     * 	* command
     * * label:
     * 	* text
     * * checkbox, toggle (same thing):
     * 	* label (def: "Untitled")
     * 	* command
     * 	* help (boolean, if true assumes label is a language string (`#tool.toolname.stuff`) and adds `.help` at the end)
     * * slider: ([DForm:NumSlider](https://wiki.facepunch.com/gmod/DForm:NumSlider))
     * 	* type (optional string, if equals `float` then 2 digits after the decimal will be used, otherwise 0)
     * 	* label (def: `Untitled`)
     * 	* command
     * 	* min (def: `0`)
     * 	* max (def: `100`)
     * 	* help (boolean, see above)
     * * propselect:
     * 	* (data goes directly to PropSelect's :ControlValues(data))
     * * matselect:
     * 	* (data goes directly to MatSelect's :ControlValues(data))
     * * ropematerial:
     * 	* convar (notice: NOT called command this time!)
     * * button:
     * 	* label / text (if label is missing will use text. Def: `No Label`)
     * 	* command
     * * numpad:
     * 	* command
     * 	* command2
     * 	* label
     * 	* label2
     * * color:
     * 	* label
     * 	* red (convar)
     * 	* green (convar)
     * 	* blue (convar)
     * 	* alpha (convar)
     * * combobox:
     * 	* menubutton (if doesn't equal "1", becomes a listbox)
     * 	* folder
     * 	* options (optional, ha)
     * 	* cvars (optional)
     * * listbox:
     * 	* height (if set, becomes [DListView](https://wiki.facepunch.com/gmod/DListView), otherwise is [CtrlListBox](https://wiki.facepunch.com/gmod/CtrlListBox))
     * 	* label (def: `unknown`)
     * 	* options (optional)
     * * materialgallery:
     * 	* width (def: `32`)
     * 	* height (def: `32`)
     * 	* rows (def: `4`)
     * 	* convar
     * 	* options
     */
    AddControl(type: string, controlinfo: any): Panel;
    
    /**
     * [Client]
     * 
     * Adds an item by calling [DForm:AddItem](https://wiki.facepunch.com/gmod/DForm:AddItem).
     * @param panel - Panel to add as an item to the control panel.
     */
    AddPanel(panel: Panel): void;
    
    /**
     * [Client]
     * 
     * Alias of [Panel:Clear](https://wiki.facepunch.com/gmod/Panel:Clear).
     * 
     */
    ClearControls(): void;
    
    /**
     * [Client]
     * 
     * Creates a [CtrlColor](https://wiki.facepunch.com/gmod/CtrlColor) (a color picker) panel and adds it as an <page text="item">ControlPanel:AddPanel</page>.
     * @param label - The label for this color picker.
     * @param convarR - Name of the [convar](https://wiki.facepunch.com/gmod/convar) that will store the R component of the selected color.
     * @param convarG - Name of the [convar](https://wiki.facepunch.com/gmod/convar) that will store the G component of the selected color.
     * @param convarB - Name of the [convar](https://wiki.facepunch.com/gmod/convar) that will store the B component of the selected color.
     * @param convarA - Name of the [convar](https://wiki.facepunch.com/gmod/convar) that will store the A component of the selected color.
     */
    ColorPicker(label: string, convarR: string, convarG: string, convarB: string, convarA: string): Panel;
    
    /**
     * [Client]
     * 
     * Sets control values of the control panel.
     * @param data - A two-membered table:
     * * [boolean](https://wiki.facepunch.com/gmod/boolean) closed - Sets if the control panel should be unexpanded.
     * * [string](https://wiki.facepunch.com/gmod/string) label - The text to display inside the control's label.
     */
    ControlValues(data: any): void;
    
    /**
     * [Client]
     * 
     * Calls the given function with this panel as the only argument. Used by the spawnmenu to populate the control panel.
     * @param func - A function that takes one argument:
     * * [ControlPanel](https://wiki.facepunch.com/gmod/ControlPanel) panelToPopulate
     */
    FillViaFunction(func: Function): void;
    
    /**
     * [Client]
     * 
     * Returns this control panel.
     * 
     */
    GetEmbeddedPanel(): ControlPanel;
    
    /**
     * [Client]
     * 
     * Creates a [CtrlNumPad](https://wiki.facepunch.com/gmod/CtrlNumPad) (a Sandbox key binder) panel and adds it as an <page text="item">ControlPanel:AddPanel</page>.
     * @param label1 - The label for the left key binder.
     * @param convar1 - The name of the [convar](https://wiki.facepunch.com/gmod/convar) that will store the key code for player selected key of the left key binder.
     * @param [label2 = nil] - If set and `convar2` is set, the label for the right key binder.
     * @param [convar2 = nil] - If set and `label2` is set, the name of the [convar](https://wiki.facepunch.com/gmod/convar) that will store the key code for player selected key of the right key binder.
     */
    KeyBinder(label1: string, convar1: string, label2?: string, convar2?: string): Panel;
    
    /**
     * [Client]
     * 
     * Creates a [MatSelect](https://wiki.facepunch.com/gmod/MatSelect) panel and adds it as an <page text="item">ControlPanel:AddPanel</page>.
     * @param convar - Calls [MatSelect](https://wiki.facepunch.com/gmod/MatSelect):<page text="SetConVar">ContextBase:SetConVar</page> with this value.
     * @param [options = nil] - If specified, calls [MatSelect:AddMaterial](https://wiki.facepunch.com/gmod/MatSelect:AddMaterial)(key, value) for each table entry. If the table key is a number, the function will instead be called with the value as both arguments.
     * @param [autostretch = nil] - If specified, calls [MatSelect:SetAutoHeight](https://wiki.facepunch.com/gmod/MatSelect:SetAutoHeight) with this value.
     * @param [width = nil] - If specified, calls [MatSelect:SetItemWidth](https://wiki.facepunch.com/gmod/MatSelect:SetItemWidth) with this value.
     * @param [height = nil] - If specified, calls [MatSelect:SetItemHeight](https://wiki.facepunch.com/gmod/MatSelect:SetItemHeight) with this value.
     */
    MatSelect(convar: string, options?: any, autostretch?: boolean, width?: number, height?: number): MatSelect;
    
    /**
     * [Client]
     * 
     * Creates a [ControlPresets](https://wiki.facepunch.com/gmod/ControlPresets) panel and adds it as an <page text="item">ControlPanel:AddPanel</page>.
     * @param group - The <page text="preset">presets</page> group. Must be unique.
     * @param cvarList - A table of [convar](https://wiki.facepunch.com/gmod/convar) names as keys and their defaults as the values. Typically the output of [Tool:BuildConVarList](https://wiki.facepunch.com/gmod/Tool:BuildConVarList).
     */
    ToolPresets(group: string, cvarList: any): Panel;

}

/**
 * A preset manager, found at the top of almost every default tool's C-menu.
 * 
 * 		This control only exists in Sandbox derived gamemodes.
 */
interface ControlPresets extends Panel {
    

    /**
     * [Client]
     * 
     * Adds a convar to be managed by this control.
     * @param convar - The convar to add.
     */
    AddConVar(convar: string): void;
    
    /**
     * [Client]
     * 
     * Get a list of all Console Variables being managed by this panel.
     * 
     */
    GetConVars(): any;
    
    /**
     * [Client]
     * 
     * Set the name label text.
     * @param name - The text to put in the label
     */
    SetLabel(name: string): void;

}

/**
 * A [DComboBox](https://wiki.facepunch.com/gmod/DComboBox) based dropdown menu with build in easy [ConVar](https://wiki.facepunch.com/gmod/ConVar) support.
 * 
 * This control only exists in Sandbox derived gamemodes.
 */
interface CtrlListBox extends DComboBox {
    

    

}

/**
 * A derivative of the DModelPanel in which the user may modify the perspective of the model with their mouse and keyboard by clicking and dragging.
 * 
 * The keyboard keys <key>W</key> <key>S</key> <key>A</key> <key>D</key> <key>Up</key> <key>Down</key> <key>Left</key> <key>Right</key> <key>Space</key> and <key>Ctrl</key> can be used when the right mouse is held down, with <key>Shift</key> acting as a speed multiplier. When the left mouse is used, the Shift key holds the current `y` angle steady.
 * 
 * This is used by [IconEditor](https://wiki.facepunch.com/gmod/IconEditor) for modifying spawn icons.
 */
interface DAdjustableModelPanel extends DModelPanel {
    

    /**
     * [Client]
     * 
     * Used by the panel to perform mouse capture operations when adjusting the model.
     * 
     */
    CaptureMouse(): void;
    
    /**
     * [Client]
     * 
     * Used to adjust the perspective in the model panel via the keyboard, when the right mouse button is used.
     * 
     */
    FirstPersonControls(): void;
    
    /**
     * [Client]
     * 
     * Gets whether mouse and keyboard-based adjustment of the perspective has been enabled. See [DAdjustableModelPanel:SetFirstPerson](https://wiki.facepunch.com/gmod/DAdjustableModelPanel:SetFirstPerson) for more information.
     * 
     */
    GetFirstPerson(): boolean;
    
    /**
     * [Client]
     * 
     * Enables mouse and keyboard-based adjustment of the perspective.
     * 
     * This is set to `true` automatically each time mouse capture is enabled, and hence doesn't serve as a usable setting, other than to disable this functionality after the [PANEL:OnMousePressed](https://wiki.facepunch.com/gmod/PANEL:OnMousePressed) event.
     * @param enable - Whether to enable/disable first person controls. See [DAdjustableModelPanel:FirstPersonControls](https://wiki.facepunch.com/gmod/DAdjustableModelPanel:FirstPersonControls).
     */
    SetFirstPerson(enable: boolean): void;

}

/**
 * A bar to select the opacity (alpha level) of a color.
 */
interface DAlphaBar extends DPanel {
    

    /**
     * [Client and Menu]
     * 
     * Returns the base color of the alpha bar. This is the color for which the alpha channel is being modified.
     * 
     */
    GetBarColor(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns the alpha value of the alpha bar.
     * 
     */
    GetValue(): number;
    
    /**
     * [Client and Menu]
     * 
     * Called when user changes the desired alpha value with the control.
     * @param alpha - The new alpha value
     */
    OnChange(alpha: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the base color of the alpha bar. This is the color for which the alpha channel is being modified.
     * @param clr - The new [Color](https://wiki.facepunch.com/gmod/Color) to set. See [Global.Color](https://wiki.facepunch.com/gmod/Global.Color).
     */
    SetBarColor(clr: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the alpha value or the alpha bar.
     * @param alpha - The new alpha value to set
     */
    SetValue(alpha: number): void;

}

/**
 * Input which can bind a command to a key. Used for binding inputs and outputs of TOOLs.
 */
interface DBinder extends DButton {
    

    /**
     * [Client]
     * 
     * Gets the code of the key currently bound by the DBinder. Same as [DBinder:GetValue](https://wiki.facepunch.com/gmod/DBinder:GetValue).
     * 
     */
    GetSelectedNumber(): KEY;
    
    /**
     * [Client]
     * 
     * Gets the code of the key currently bound by the DBinder. Same as [DBinder:GetSelectedNumber](https://wiki.facepunch.com/gmod/DBinder:GetSelectedNumber).
     * 
     */
    GetValue(): KEY;
    
    /**
     * [Client]
     * 
     * Called when the player selects a new bind.
     * @param iNum - The new bound key. See [input.GetKeyName](https://wiki.facepunch.com/gmod/input.GetKeyName).
     */
    OnChange(iNum: number): void;
    
    /**
     * [Client]
     * 
     * Sets the current key bound by the [DBinder](https://wiki.facepunch.com/gmod/DBinder), and updates the button's text as well as the [ConVar](https://wiki.facepunch.com/gmod/ConVar).
     * @param keyCode - The key code of the key to bind. See [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY).
     */
    SetSelectedNumber(keyCode: KEY): void;
    
    /**
     * [Client]
     * 
     * Alias of [DBinder:SetSelectedNumber](https://wiki.facepunch.com/gmod/DBinder:SetSelectedNumber).
     * @param keyCode - The key code of the key to bind. See [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY).
     */
    SetValue(keyCode: KEY): void;
    
    /**
     * [Client]
     * 
     * Used to set the text of the DBinder to the current key binding, or `NONE`.
     * 
     */
    UpdateText(): void;

}

/**
 * A transparent gray speech bubble panel made up of a rounded box and point coming from the bottom.
 */
interface DBubbleContainer extends DPanel {
    

    /**
     * [Client]
     * 
     * Sets the speech bubble position and size along with the dialog point position.
     * @param x - The x position of the dialog point. If this is set to a value greater than half of the set width, the entire bubble container will be moved in addition to the dialog point.
     * @param y - The y position of the bubble container. Has no effect unless set to a value greater than the set height + 64 pixels.
     * @param w - The width of the bubble container.
     * @param h - The height of the bubble container.
     */
    OpenForPos(x: number, y: number, w: number, h: number): void;

}

/**
 * A standard Derma button.
 * 
 * By default, a [DButton](https://wiki.facepunch.com/gmod/DButton) is 22px tall.
 */
interface DButton extends DLabel {
    

    /**
     * [Client and Menu]
     * 
     * Called when the button is left clicked (on key release) by the player.
     * 
     * This will be called after [DButton:IsDown](https://wiki.facepunch.com/gmod/DButton:IsDown).
     * 
     * See also [DButton:DoRightClick](https://wiki.facepunch.com/gmod/DButton:DoRightClick).
     * 
     */
    DoClick(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when the button is right clicked (on key release) by the player.
     * 
     * See also [DButton:DoClick](https://wiki.facepunch.com/gmod/DButton:DoClick).
     * 
     */
    DoRightClick(): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns value set by [DButton:SetDrawBorder](https://wiki.facepunch.com/gmod/DButton:SetDrawBorder). See that page for more info.
     * 
     */
    GetDrawBorder(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns true if the DButton is currently depressed (a user is clicking on it).
     * 
     */
    IsDown(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Sets a console command to be called when the button is clicked.
     * 
     * This overrides the button's `DoClick` method.
     * @param command - The console command to be called.
     * @param args - The arguments for the command.
     */
    SetConsoleCommand(command: string, args: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not the DButton is disabled.
     * 
     * When disabled, the button is `greyed out` and cannot be clicked.
     * 
     * @deprecated Use [Panel:SetEnabled](https://wiki.facepunch.com/gmod/Panel:SetEnabled) instead.
     * 
     * @param disable - When true Enable the button, when false Disable the button.
     */
    SetDisabled(disable: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Does absolutely nothing at all. Default value is automatically set to true.
     * @param draw - Does nothing.
     */
    SetDrawBorder(draw: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets an image to be displayed as the button's background. Alias of [DButton:SetImage](https://wiki.facepunch.com/gmod/DButton:SetImage)
     * @param [img = nil] - The image file to use, relative to `/materials`. If this is nil, the image background is removed.
     */
    SetIcon(img?: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets an image to be displayed as the button's background.
     * 
     * See [DButton:SetMaterial](https://wiki.facepunch.com/gmod/DButton:SetMaterial) for equivalent function that uses [IMaterial](https://wiki.facepunch.com/gmod/IMaterial) instead.
     * 
     * Also see: [DImageButton](https://wiki.facepunch.com/gmod/DImageButton)
     * @param [img = nil] - The image file to use, relative to `/materials`. If this is nil, the image background is removed.
     */
    SetImage(img?: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets an image to be displayed as the button's background.
     * 
     * See [DButton:SetImage](https://wiki.facepunch.com/gmod/DButton:SetImage) for equivalent function that uses file paths instead. Also see [DImageButton](https://wiki.facepunch.com/gmod/DImageButton).
     * @param [img = nil] - The material to use. If this is nil, the image background is removed.
     */
    SetMaterial(img?: IMaterial): void;
    
    /**
     * [Client and Menu]
     * 
     * A hook called from within [DLabel](https://wiki.facepunch.com/gmod/DLabel)'s [PANEL:ApplySchemeSettings](https://wiki.facepunch.com/gmod/PANEL:ApplySchemeSettings) to determine the color of the text on display.
     * @param skin - A table supposed to contain the color values listed above.
     */
    UpdateColours(skin: any): void;

}

/**
 * Used by [DCollapsibleCategory](https://wiki.facepunch.com/gmod/DCollapsibleCategory)
 */
interface DCategoryHeader extends DButton {
    

    

}

/**
 * A host for multiple [DCollapsibleCategory](https://wiki.facepunch.com/gmod/DCollapsibleCategory) panels. 
 * 		As the name suggests, each one of them can be collapsed or expanded on demand by the user.
 */
interface DCategoryList extends Omit<DScrollPanel, "Add"> {
    

    /**
     * [Client and Menu]
     * 
     * Adds a [DCollapsibleCategory](https://wiki.facepunch.com/gmod/DCollapsibleCategory) to the list.
     * @param categoryName - The name of the category to add.
     */
    Add(categoryName: string): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Adds an element to the list.
     * @param element - VGUI element to add to the list.
     */
    AddItem(element: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Calls [Panel:UnselectAll](https://wiki.facepunch.com/gmod/Panel:UnselectAll) on all child elements, if they have it.
     * 
     */
    UnselectAll(): void;

}

/**
 * The DCheckBox is a checkbox. It allows you to get a boolean value from the user (true/false - yes/no)
 */
interface DCheckBox extends DButton {
    

    /**
     * [Client and Menu]
     * 
     * Gets the checked state of the checkbox.
     * 
     */
    GetChecked(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the state of the checkbox is being edited. This means whether the user is currently clicking (mouse-down) on the checkbox, and applies to both the left and right mouse buttons.
     * 
     */
    IsEditing(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Called when the "checked" state is changed.
     * @param bVal - Whether the CheckBox is checked or not.
     */
    OnChange(bVal: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the checked state of the checkbox. Does not call the checkbox's [DCheckBox:OnChange](https://wiki.facepunch.com/gmod/DCheckBox:OnChange) and [Panel:ConVarChanged](https://wiki.facepunch.com/gmod/Panel:ConVarChanged) methods, unlike [DCheckBox:SetValue](https://wiki.facepunch.com/gmod/DCheckBox:SetValue).
     * @param checked - Whether the box should be checked or not.
     */
    SetChecked(checked: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the checked state of the checkbox, and calls the checkbox's [DCheckBox:OnChange](https://wiki.facepunch.com/gmod/DCheckBox:OnChange) and [Panel:ConVarChanged](https://wiki.facepunch.com/gmod/Panel:ConVarChanged) methods.
     * @param checked - Whether the box should be checked or not.
     */
    SetValue(checked: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Toggles the checked state of the checkbox, and calls the checkbox's [DCheckBox:OnChange](https://wiki.facepunch.com/gmod/DCheckBox:OnChange) and [Panel:ConVarChanged](https://wiki.facepunch.com/gmod/Panel:ConVarChanged) methods. This is called by [DCheckBox:DoClick](https://wiki.facepunch.com/gmod/DCheckBox:DoClick).
     * 
     */
    Toggle(): void;

}

/**
 * The **DCheckBoxLabel** is a [DCheckBox](https://wiki.facepunch.com/gmod/DCheckBox) with a [DLabel](https://wiki.facepunch.com/gmod/DLabel) next to it. 
 * 		It allows you to get a boolean value from the user (true/false - yes/no)
 */
interface DCheckBoxLabel extends DPanel {
    

    /**
     * [Client and Menu]
     * 
     * Gets the checked state of the checkbox. This calls the checkbox's [DCheckBox:GetChecked](https://wiki.facepunch.com/gmod/DCheckBox:GetChecked) function.
     * 
     */
    GetChecked(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Gets the indentation of the element on the X axis.
     * 
     */
    GetIndent(): number;
    
    /**
     * [Client and Menu]
     * 
     * Called when the "checked" state is changed.
     * @param bVal - Whether the checkbox is checked or unchecked.
     */
    OnChange(bVal: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the color of the [DCheckBoxLabel](https://wiki.facepunch.com/gmod/DCheckBoxLabel)'s text to the bright text color defined in the skin.
     * 
     * @deprecated You really should be using [DCheckBoxLabel:SetTextColor](https://wiki.facepunch.com/gmod/DCheckBoxLabel:SetTextColor) instead
     * 
     * @param bright - true makes the text bright.
     */
    SetBright(bright: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the checked state of the checkbox. Does not call [DCheckBoxLabel:OnChange](https://wiki.facepunch.com/gmod/DCheckBoxLabel:OnChange) or [Panel:ConVarChanged](https://wiki.facepunch.com/gmod/Panel:ConVarChanged), unlike [DCheckBoxLabel:SetValue](https://wiki.facepunch.com/gmod/DCheckBoxLabel:SetValue).
     * @param checked - Whether the box should be checked or not.
     */
    SetChecked(checked: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the console variable to be set when the checked state of the [DCheckBoxLabel](https://wiki.facepunch.com/gmod/DCheckBoxLabel) changes.
     * @param convar - The name of the convar to set
     */
    SetConVar(convar: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the text of the [DCheckBoxLabel](https://wiki.facepunch.com/gmod/DCheckBoxLabel) to be dark colored.
     * 
     * @deprecated You really should be using [DCheckBoxLabel:SetTextColor](https://wiki.facepunch.com/gmod/DCheckBoxLabel:SetTextColor) instread
     * 
     * @param darkify - True to be dark, false to be default
     */
    SetDark(darkify: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the font of the text part of the [DCheckBoxLabel](https://wiki.facepunch.com/gmod/DCheckBoxLabel).
     * @param font - Font name
     */
    SetFont(font: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the indentation of the element on the X axis.
     * @param ident - How much in pixels to move the content to the right
     */
    SetIndent(ident: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the text color for the [DCheckBoxLabel](https://wiki.facepunch.com/gmod/DCheckBoxLabel).
     * @param color - The text color. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     */
    SetTextColor(color: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the checked state of the checkbox, and calls [DCheckBoxLabel:OnChange](https://wiki.facepunch.com/gmod/DCheckBoxLabel:OnChange) and the checkbox's [Panel:ConVarChanged](https://wiki.facepunch.com/gmod/Panel:ConVarChanged) methods.
     * @param checked - Whether the box should be checked or not (1 or 0 can also be used).
     */
    SetValue(checked: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Toggles the checked state of the [DCheckBoxLabel](https://wiki.facepunch.com/gmod/DCheckBoxLabel).
     * 
     */
    Toggle(): void;

}

/**
 * The collapsible category allows you to create numerous sections of controls, and have the ability to contract/expand them.
 * 
 * 		Consider using [DCategoryList](https://wiki.facepunch.com/gmod/DCategoryList) if you plan on using more than 1 of these.
 */
interface DCollapsibleCategory extends Omit<Panel, "Add"> {
    

    /**
     * [Client and Menu]
     * 
     * Adds a new text button to the collapsible category, like the tool menu in Spawnmenu.
     * @param name - The name of the button
     */
    Add(name: string): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Internal function that handles the open/close animations.
     * @param anim - 
     * @param delta - 
     * @param data - 
     */
    AnimSlide(anim: any, delta: number, data: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Forces the category to open or collapse
     * @param expand - True to open, false to collapse
     */
    DoExpansion(expand: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the expand/collapse animation time set by [DCollapsibleCategory:SetAnimTime](https://wiki.facepunch.com/gmod/DCollapsibleCategory:SetAnimTime).
     * 
     */
    GetAnimTime(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not the panel background is being drawn. Alias of [DCollapsibleCategory:GetPaintBackground](https://wiki.facepunch.com/gmod/DCollapsibleCategory:GetPaintBackground).
     * 
     * @deprecated You should use [DCollapsibleCategory:GetPaintBackground](https://wiki.facepunch.com/gmod/DCollapsibleCategory:GetPaintBackground) instead.
     * 
     * 
     */
    GetDrawBackground(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the DCollapsibleCategory is expanded or not.
     * 
     */
    GetExpanded(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the header height of the [DCollapsibleCategory](https://wiki.facepunch.com/gmod/DCollapsibleCategory).
     * 
     * See also [DCollapsibleCategory:SetHeaderHeight](https://wiki.facepunch.com/gmod/DCollapsibleCategory:SetHeaderHeight).
     * 
     */
    GetHeaderHeight(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns whatever is set by [DCollapsibleCategory:SetList](https://wiki.facepunch.com/gmod/DCollapsibleCategory:SetList).
     * 
     */
    GetList(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Doesn't actually do anything.
     * 
     * Returns the number set by [DCollapsibleCategory:SetPadding](https://wiki.facepunch.com/gmod/DCollapsibleCategory:SetPadding).
     * 
     */
    GetPadding(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not the background should be painted.
     * 
     */
    GetPaintBackground(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whatever was set by [DCollapsibleCategory:SetStartHeight](https://wiki.facepunch.com/gmod/DCollapsibleCategory:SetStartHeight)
     * 
     */
    GetStartHeight(): number;
    
    /**
     * [Client and Menu]
     * 
     * Called by [DCollapsibleCategory:Toggle](https://wiki.facepunch.com/gmod/DCollapsibleCategory:Toggle). This function does nothing by itself, as you're supposed to overwrite it.
     * @param expanded - If it was expanded or not
     */
    OnToggle(expanded: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the time in seconds it takes to expand the DCollapsibleCategory
     * @param time - The time in seconds it takes to expand
     */
    SetAnimTime(time: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the contents of the DCollapsibleCategory.
     * @param pnl - The panel, containing the contents for the DCollapsibleCategory, mostly an DScrollPanel
     */
    SetContents(pnl: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not to draw the panel background. Alias of [DCollapsibleCategory:SetPaintBackground](https://wiki.facepunch.com/gmod/DCollapsibleCategory:SetPaintBackground).
     * 
     * @deprecated You should use [DCollapsibleCategory:SetPaintBackground](https://wiki.facepunch.com/gmod/DCollapsibleCategory:SetPaintBackground) instead.
     * 
     * @param draw - True to show the panel's background, false to hide it.
     */
    SetDrawBackground(draw: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether the [DCollapsibleCategory](https://wiki.facepunch.com/gmod/DCollapsibleCategory) is expanded or not upon opening the container.
     * 
     * You should use [DCollapsibleCategory:Toggle](https://wiki.facepunch.com/gmod/DCollapsibleCategory:Toggle) or [DCollapsibleCategory:DoExpansion](https://wiki.facepunch.com/gmod/DCollapsibleCategory:DoExpansion) instead.
     * @param [expanded = true] - Whether it shall be expanded or not by default
     */
    SetExpanded(expanded = true): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the header height of the [DCollapsibleCategory](https://wiki.facepunch.com/gmod/DCollapsibleCategory).
     * 
     * See also [DCollapsibleCategory:GetHeaderHeight](https://wiki.facepunch.com/gmod/DCollapsibleCategory:GetHeaderHeight).
     * @param height - The new height to set. Default height is 20.
     */
    SetHeaderHeight(height: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the name of the DCollapsibleCategory.
     * @param label - The label/name of the DCollapsibleCategory.
     */
    SetLabel(label: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets a panel to call [Panel:UnselectAll](https://wiki.facepunch.com/gmod/Panel:UnselectAll) on, instead of calling it on itself.
     * 
     * @deprecated Unused in the base game. What is this for?
     * 
     * @param pnl - 
     */
    SetList(pnl: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Doesn't actually do anything.
     * @param padding - 
     */
    SetPadding(padding: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not the background should be painted.
     * @param paint - 
     */
    SetPaintBackground(paint: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Does nothing.
     * @param height - 
     */
    SetStartHeight(height: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Toggles the expanded state of the [DCollapsibleCategory](https://wiki.facepunch.com/gmod/DCollapsibleCategory).
     * 
     * See [DCollapsibleCategory:GetExpanded](https://wiki.facepunch.com/gmod/DCollapsibleCategory:GetExpanded) for a function to retrieve the expanded state.
     * 
     */
    Toggle(): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally to update the "AltLine" property on all "child" panels.
     * 
     */
    UpdateAltLines(): void;

}

/**
 * Colorful buttons. Used internally by [DColorPalette](https://wiki.facepunch.com/gmod/DColorPalette).
 */
interface DColorButton extends Omit<DLabel, "SetColor"> {
    

    /**
     * [Client and Menu]
     * 
     * Returns the color of the button
     * 
     */
    GetColor(): Color;
    
    /**
     * [Client and Menu]
     * 
     * Returns value set by [DColorButton:SetDrawBorder](https://wiki.facepunch.com/gmod/DColorButton:SetDrawBorder). See that page for more info.
     * 
     */
    GetDrawBorder(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the unique ID set by [DColorButton:SetID](https://wiki.facepunch.com/gmod/DColorButton:SetID).
     * 
     * Used internally by [DColorPalette](https://wiki.facepunch.com/gmod/DColorPalette)
     * 
     */
    GetID(): number;
    
    /**
     * [Client and Menu]
     * 
     * Alias of [Panel:IsSelected](https://wiki.facepunch.com/gmod/Panel:IsSelected).
     * 
     */
    GetSelected(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the [DColorButton](https://wiki.facepunch.com/gmod/DColorButton) is currently being pressed (the user is holding it down).
     * 
     */
    IsDown(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Sets the color of the [DColorButton](https://wiki.facepunch.com/gmod/DColorButton).
     * @param color - A [Color](https://wiki.facepunch.com/gmod/Color) to set the color as
     * @param [noTooltip = false] - If true, the tooltip will not be reset to display the selected color.
     */
    SetColor(color: Color, noTooltip = false): void;
    
    /**
     * [Client and Menu]
     * 
     * Does absolutely nothing at all. Default value is automatically set to true.
     * @param draw - Does nothing.
     */
    SetDrawBorder(draw: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally by [DColorPalette](https://wiki.facepunch.com/gmod/DColorPalette) to detect which button is which.
     * @param id - A unique ID to give this button
     */
    SetID(id: number): void;

}

/**
 * The **DColorCombo** allows the user to choose color, without alpha, 
 * 		using [DColorMixer](https://wiki.facepunch.com/gmod/DColorMixer) or [DColorPalette](https://wiki.facepunch.com/gmod/DColorPalette) in a tabbed view.
 */
interface DColorCombo extends DPropertySheet {
    

    /**
     * [Client]
     * 
     * Called internally to create panels necessary for this panel to work.
     * 
     */
    BuildControls(): void;
    
    /**
     * [Client]
     * 
     * Returns the color of the [DColorCombo](https://wiki.facepunch.com/gmod/DColorCombo).
     * 
     */
    GetColor(): Color;
    
    /**
     * [Client]
     * 
     * Returns true if the panel is currently being edited
     * 
     * More of a internal method, it technically should only ever work (i.e. return true) inside [DColorCombo:OnValueChanged](https://wiki.facepunch.com/gmod/DColorCombo:OnValueChanged).
     * 
     */
    IsEditing(): boolean;
    
    /**
     * [Client]
     * 
     * Called when the value (color) of this panel was changed.
     * @param newcol - 
     */
    OnValueChanged(newcol: any): void;
    
    /**
     * [Client]
     * 
     * Sets the color of this panel.
     * @param clr - A [Color](https://wiki.facepunch.com/gmod/Color).
     */
    SetColor(clr: Color): void;

}

/**
 * The DColorCube allows a user to select saturation and value but not hue. Uses HSV colors
 */
interface DColorCube extends DSlider {
    

    /**
     * [Client and Menu]
     * 
     * Returns the base Color set by [DColorCube:SetBaseRGB](https://wiki.facepunch.com/gmod/DColorCube:SetBaseRGB).
     * 
     */
    GetBaseRGB(): Color;
    
    /**
     * [Client and Menu]
     * 
     * Returns the value set by [DColorCube:SetHue](https://wiki.facepunch.com/gmod/DColorCube:SetHue).
     * 
     */
    GetHue(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the color cube's current set color.
     * 
     */
    GetRGB(): Color;
    
    /**
     * [Client and Menu]
     * 
     * Function which is called when the color cube slider is moved (through user input). Meant to be overridden.
     * @param color - The new color, uses [Color](https://wiki.facepunch.com/gmod/Color).
     */
    OnUserChanged(color: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the base color and the color used to draw the color cube panel itself.
     * 
     * **Note:**
     * >Calling this when using a color that isn't 100% saturated and valued ([Global.HSVToColor](https://wiki.facepunch.com/gmod/Global.HSVToColor) with saturation and value set to 1) causes the color cube to look inaccurate compared to the color that's returned by methods like [DColorCube:GetRGB](https://wiki.facepunch.com/gmod/DColorCube:GetRGB) and [DColorCube:OnUserChanged](https://wiki.facepunch.com/gmod/DColorCube:OnUserChanged). You should use [DColorCube:SetColor](https://wiki.facepunch.com/gmod/DColorCube:SetColor) instead
     * 
     * @param color - The base color to set, uses [Color](https://wiki.facepunch.com/gmod/Color).
     */
    SetBaseRGB(color: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the base color of the color cube and updates the slider position.
     * @param color - The color to set, uses [Color](https://wiki.facepunch.com/gmod/Color).
     */
    SetColor(color: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * Appears to do nothing and unused.
     * @param hue - 
     */
    SetHue(hue: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally to set the real "output" color of the panel.
     * @param clr - A [Color](https://wiki.facepunch.com/gmod/Color)
     */
    SetRGB(clr: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * Updates the color cube RGB based on the given x and y position and returns its arguments. Similar to [DColorCube:UpdateColor](https://wiki.facepunch.com/gmod/DColorCube:UpdateColor).
     * @param x - The x position to sample color from/the percentage of saturation to remove from the color (ranges from 0.0 to 1.0).
     * @param y - The y position to sample color from/the percentage of brightness or value to remove from the color (ranges from 0.0 to 1.0).
     */
    TranslateValues(x: number, y: number): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Updates the color cube RGB based on the given x and y position. Similar to [DColorCube:TranslateValues](https://wiki.facepunch.com/gmod/DColorCube:TranslateValues).
     * @param [x = nil] - The x position to set color to/the percentage of saturation to remove from the color (ranges from 0.0 to 1.0).
     * @param [y = nil] - The y position to set color to/the percentage of brightness or value to remove from the color (ranges from 0.0 to 1.0).
     */
    UpdateColor(x?: number, y?: number): void;

}

/**
 * A standard Derma color mixer
 */
interface DColorMixer extends DPanel {
    

    /**
     * [Client and Menu]
     * 
     * 
     */
    ConVarThink(): void;
    
    /**
     * [Client and Menu]
     * 
     * @param cvar - 
     */
    DoConVarThink(cvar: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Return true if alpha bar is shown, false if not.
     * 
     */
    GetAlphaBar(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the current selected color.
     * 
     */
    GetColor(): Color;
    
    /**
     * [Client and Menu]
     * 
     * Returns the [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the alpha channel of the color.
     * 
     * See also:
     * * [DColorMixer:GetConVarR](https://wiki.facepunch.com/gmod/DColorMixer:GetConVarR) - For the red channel
     * * [DColorMixer:GetConVarG](https://wiki.facepunch.com/gmod/DColorMixer:GetConVarG) - For the green channel
     * * [DColorMixer:GetConVarB](https://wiki.facepunch.com/gmod/DColorMixer:GetConVarB) - For the blue channel
     * 
     */
    GetConVarA(): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns the [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the blue channel of the color.
     * 
     * See also:
     * * [DColorMixer:GetConVarR](https://wiki.facepunch.com/gmod/DColorMixer:GetConVarR) - For the red channel
     * * [DColorMixer:GetConVarG](https://wiki.facepunch.com/gmod/DColorMixer:GetConVarG) - For the green channel
     * * [DColorMixer:GetConVarA](https://wiki.facepunch.com/gmod/DColorMixer:GetConVarA) - For the alpha channel
     * 
     */
    GetConVarB(): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns the [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the green channel of the color.
     * 
     * See also:
     * * [DColorMixer:GetConVarR](https://wiki.facepunch.com/gmod/DColorMixer:GetConVarR) - For the red channel
     * * [DColorMixer:GetConVarB](https://wiki.facepunch.com/gmod/DColorMixer:GetConVarB) - For the blue channel
     * * [DColorMixer:GetConVarA](https://wiki.facepunch.com/gmod/DColorMixer:GetConVarA) - For the alpha channel
     * 
     */
    GetConVarG(): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns the [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the red channel of the color.
     * 
     * See also:
     * * [DColorMixer:GetConVarG](https://wiki.facepunch.com/gmod/DColorMixer:GetConVarG) - For the green channel
     * * [DColorMixer:GetConVarB](https://wiki.facepunch.com/gmod/DColorMixer:GetConVarB) - For the blue channel
     * * [DColorMixer:GetConVarA](https://wiki.facepunch.com/gmod/DColorMixer:GetConVarA) - For the alpha channel
     * 
     */
    GetConVarR(): string;
    
    /**
     * [Client and Menu]
     * 
     * Return true if palette is shown, false if not.
     * 
     */
    GetPalette(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the color as a normalized [Vector](https://wiki.facepunch.com/gmod/Vector).
     * 
     */
    GetVector(): Vector;
    
    /**
     * [Client and Menu]
     * 
     * Return true if the wangs are shown, false if not.
     * 
     */
    GetWangs(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Show/Hide the alpha bar in DColorMixer
     * @param show - Show / Hide the alpha bar
     */
    SetAlphaBar(show: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the base color of the [DColorCube](https://wiki.facepunch.com/gmod/DColorCube) part of the [DColorMixer](https://wiki.facepunch.com/gmod/DColorMixer).
     * 
     * See also [DColorCube:SetBaseRGB](https://wiki.facepunch.com/gmod/DColorCube:SetBaseRGB)
     * @param clr - [Color](https://wiki.facepunch.com/gmod/Color)
     */
    SetBaseColor(clr: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the color of the [DColorMixer](https://wiki.facepunch.com/gmod/DColorMixer)
     * @param color - The color to set. See [Global.Color](https://wiki.facepunch.com/gmod/Global.Color)
     */
    SetColor(color: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the alpha channel of the color.
     * 
     * See also:
     * * [DColorMixer:SetConVarR](https://wiki.facepunch.com/gmod/DColorMixer:SetConVarR) - For the red channel
     * * [DColorMixer:SetConVarG](https://wiki.facepunch.com/gmod/DColorMixer:SetConVarG) - For the green channel
     * * [DColorMixer:SetConVarB](https://wiki.facepunch.com/gmod/DColorMixer:SetConVarB) - For the blue channel
     * @param convar - The [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the alpha channel of the color
     */
    SetConVarA(convar: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the blue channel of the color.
     * 
     * See also:
     * * [DColorMixer:SetConVarR](https://wiki.facepunch.com/gmod/DColorMixer:SetConVarR) - For the red channel
     * * [DColorMixer:SetConVarG](https://wiki.facepunch.com/gmod/DColorMixer:SetConVarG) - For the green channel
     * * [DColorMixer:SetConVarA](https://wiki.facepunch.com/gmod/DColorMixer:SetConVarA) - For the alpha channel
     * @param convar - The [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the blue channel of the color
     */
    SetConVarB(convar: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the green channel of the color.
     * 
     * See also:
     * * [DColorMixer:SetConVarR](https://wiki.facepunch.com/gmod/DColorMixer:SetConVarR) - For the red channel
     * * [DColorMixer:SetConVarB](https://wiki.facepunch.com/gmod/DColorMixer:SetConVarB) - For the blue channel
     * * [DColorMixer:SetConVarA](https://wiki.facepunch.com/gmod/DColorMixer:SetConVarA) - For the alpha channel
     * @param convar - The [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the green channel of the color
     */
    SetConVarG(convar: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the red channel of the color.
     * 
     * See also:
     * * [DColorMixer:SetConVarG](https://wiki.facepunch.com/gmod/DColorMixer:SetConVarG) - For the green channel
     * * [DColorMixer:SetConVarB](https://wiki.facepunch.com/gmod/DColorMixer:SetConVarB) - For the blue channel
     * * [DColorMixer:SetConVarA](https://wiki.facepunch.com/gmod/DColorMixer:SetConVarA) - For the alpha channel
     * @param convar - The [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the red channel of the color
     */
    SetConVarR(convar: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the label's text to show.
     * @param [text = nil] - Set to non empty string to show the label and its text.
     * Give it an empty string or nothing and the label will be hidden.
     */
    SetLabel(text?: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Show or hide the palette panel
     * @param enabled - Show or hide the palette panel?
     */
    SetPalette(enabled: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the color of [DColorMixer](https://wiki.facepunch.com/gmod/DColorMixer) from a [Vector](https://wiki.facepunch.com/gmod/Vector). Alpha is not included.
     * @param vec - The color to set. It is expected that the vector will have values be from 0 to 1. (i.e. be normalized)
     */
    SetVector(vec: Vector): void;
    
    /**
     * [Client and Menu]
     * 
     * Show / Hide the colors indicators in DColorMixer
     * @param show - Show / Hide the colors indicators
     */
    SetWangs(show: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Does nothing.
     * 
     */
    TranslateValues(): void;
    
    /**
     * [Client and Menu]
     * 
     * Use [DColorMixer:SetColor](https://wiki.facepunch.com/gmod/DColorMixer:SetColor) instead!
     * @param clr - 
     */
    UpdateColor(clr: any): void;
    
    /**
     * [Client and Menu]
     * 
     * @param cvar - The [ConVar](https://wiki.facepunch.com/gmod/ConVar) name
     * @param part - The color part to set the cvar to. "r", "g", "b" or "a".
     * @param clr - The [Color](https://wiki.facepunch.com/gmod/Color)
     */
    UpdateConVar(cvar: string, part: string, clr: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * @param clr - The [Color](https://wiki.facepunch.com/gmod/Color)
     */
    UpdateConVars(clr: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when the player changes the color of the [DColorMixer](https://wiki.facepunch.com/gmod/DColorMixer).
     * 
     * **Bug :**
     * >The returned color will not have the color metatable.
     * 
     * @param col - The new color. See [Color](https://wiki.facepunch.com/gmod/Color)
     */
    ValueChanged(col: Color): void;

}

/**
 * The **DColorPalette** allows the player to select a color from a list of given colors.  
 * 		This panel supports saving across sessions via the panel cookie system.  
 * 		Use [Panel:SetCookieName](https://wiki.facepunch.com/gmod/Panel:SetCookieName) to change "save files".
 */
interface DColorPalette extends DIconLayout {
    

    /**
     * [Client and Menu]
     * 
     * Basically the same functionality as [DColorPalette:OnValueChanged](https://wiki.facepunch.com/gmod/DColorPalette:OnValueChanged), you should use that instead!
     * @param clr - The new color via the [Color](https://wiki.facepunch.com/gmod/Color)
     * @param btn - The [DColorButton](https://wiki.facepunch.com/gmod/DColorButton) that was pressed.
     */
    DoClick(clr: Color, btn: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the size of each palette button. Set by [DColorPalette:SetButtonSize](https://wiki.facepunch.com/gmod/DColorPalette:SetButtonSize).
     * 
     */
    GetButtonSize(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the alpha channel of the color.
     * 
     * See also:
     * * [DColorPalette:GetConVarR](https://wiki.facepunch.com/gmod/DColorPalette:GetConVarR) - For the red channel
     * * [DColorPalette:GetConVarG](https://wiki.facepunch.com/gmod/DColorPalette:GetConVarG) - For the green channel
     * * [DColorPalette:GetConVarB](https://wiki.facepunch.com/gmod/DColorPalette:GetConVarB) - For the blue channel
     * 
     */
    GetConVarA(): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns the [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the blue channel of the color.
     * 
     * See also:
     * * [DColorPalette:GetConVarR](https://wiki.facepunch.com/gmod/DColorPalette:GetConVarR) - For the red channel
     * * [DColorPalette:GetConVarG](https://wiki.facepunch.com/gmod/DColorPalette:GetConVarG) - For the green channel
     * * [DColorPalette:GetConVarA](https://wiki.facepunch.com/gmod/DColorPalette:GetConVarA) - For the alpha channel
     * 
     */
    GetConVarB(): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns the [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the green channel of the color.
     * 
     * See also:
     * * [DColorPalette:GetConVarR](https://wiki.facepunch.com/gmod/DColorPalette:GetConVarR) - For the red channel
     * * [DColorPalette:GetConVarB](https://wiki.facepunch.com/gmod/DColorPalette:GetConVarB) - For the blue channel
     * * [DColorPalette:GetConVarA](https://wiki.facepunch.com/gmod/DColorPalette:GetConVarA) - For the alpha channel
     * 
     */
    GetConVarG(): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns the [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the red channel of the color.
     * 
     * See also:
     * * [DColorPalette:GetConVarG](https://wiki.facepunch.com/gmod/DColorPalette:GetConVarG) - For the green channel
     * * [DColorPalette:GetConVarB](https://wiki.facepunch.com/gmod/DColorPalette:GetConVarB) - For the blue channel
     * * [DColorPalette:GetConVarA](https://wiki.facepunch.com/gmod/DColorPalette:GetConVarA) - For the alpha channel
     * 
     */
    GetConVarR(): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns the number of rows of the palette, provided 6 colors fill each row. This value is equal to the number of colors in the DColorPalette divided by 6.
     * 
     */
    GetNumRows(): number;
    
    /**
     * [Client and Menu]
     * 
     * Used internally to make sure changes on one palette affect other palettes with same name.
     * 
     */
    NetworkColorChange(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when a palette button has been pressed
     * @param pnl - The [DColorButton](https://wiki.facepunch.com/gmod/DColorButton) that was pressed.
     */
    OnRightClickButton(pnl: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when the color is changed after clicking a new value.
     * @param newcol - The new color of the [DColorPalette](https://wiki.facepunch.com/gmod/DColorPalette)
     */
    OnValueChanged(newcol: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Resets this entire color palette to a default preset one, without saving.
     * 
     * See [DColorPalette:ResetSavedColors](https://wiki.facepunch.com/gmod/DColorPalette:ResetSavedColors) for version that also saves the changes.
     * 
     */
    Reset(): void;
    
    /**
     * [Client and Menu]
     * 
     * Resets this entire color palette to a default preset one and saves the changes.
     * 
     * See [DColorPalette:Reset](https://wiki.facepunch.com/gmod/DColorPalette:Reset) for version that does not save the changes.
     * 
     */
    ResetSavedColors(): void;
    
    /**
     * [Client and Menu]
     * 
     * Saves the color of given button across sessions.  
     * The color is saved as a panel cookie, see [Panel:SetCookie](https://wiki.facepunch.com/gmod/Panel:SetCookie) and [Panel:SetCookieName](https://wiki.facepunch.com/gmod/Panel:SetCookieName).  
     * It is expected that the amount of colors per palette ([Panel:SetCookieName](https://wiki.facepunch.com/gmod/Panel:SetCookieName)) is the same every time.
     * @param btn - The button to save the color of. Used to get the ID of the button.
     * @param clr - The color to save to this button's index
     */
    SaveColor(btn: Panel, clr: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the size of each palette button.
     * 
     * This is best kept to such a number, where this equation would return a whole number:<br/>
     * `WidthOfColorPalette / ButtonSize= WholeNumber`
     * 
     * If not, there will be ugly whitespace on the right side of the panel.
     * @param size - Sets the new size
     */
    SetButtonSize(size: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Currently does nothing. Intended to "select" the color.
     * @param clr - 
     */
    SetColor(clr: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Clears the palette and adds new buttons with given colors.
     * @param tab - A number indexed table where each value is a [Color](https://wiki.facepunch.com/gmod/Color)
     */
    SetColorButtons(tab: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the alpha channel of the color.
     * 
     * See also:
     * * [DColorPalette:SetConVarR](https://wiki.facepunch.com/gmod/DColorPalette:SetConVarR) - For the red channel
     * * [DColorPalette:SetConVarG](https://wiki.facepunch.com/gmod/DColorPalette:SetConVarG) - For the green channel
     * * [DColorPalette:SetConVarB](https://wiki.facepunch.com/gmod/DColorPalette:SetConVarB) - For the blue channel
     * @param convar - The [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the alpha channel of the color
     */
    SetConVarA(convar: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the blue channel of the color.
     * 
     * See also:
     * * [DColorPalette:SetConVarR](https://wiki.facepunch.com/gmod/DColorPalette:SetConVarR) - For the red channel
     * * [DColorPalette:SetConVarG](https://wiki.facepunch.com/gmod/DColorPalette:SetConVarG) - For the green channel
     * * [DColorPalette:SetConVarA](https://wiki.facepunch.com/gmod/DColorPalette:SetConVarA) - For the alpha channel
     * @param convar - The [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the blue channel of the color
     */
    SetConVarB(convar: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the green channel of the color.
     * 
     * See also:
     * * [DColorPalette:SetConVarR](https://wiki.facepunch.com/gmod/DColorPalette:SetConVarR) - For the red channel
     * * [DColorPalette:SetConVarB](https://wiki.facepunch.com/gmod/DColorPalette:SetConVarB) - For the blue channel
     * * [DColorPalette:SetConVarA](https://wiki.facepunch.com/gmod/DColorPalette:SetConVarA) - For the alpha channel
     * @param convar - The [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the green channel of the color
     */
    SetConVarG(convar: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the red channel of the color.
     * 
     * See also:
     * * [DColorPalette:SetConVarG](https://wiki.facepunch.com/gmod/DColorPalette:SetConVarG) - For the green channel
     * * [DColorPalette:SetConVarB](https://wiki.facepunch.com/gmod/DColorPalette:SetConVarB) - For the blue channel
     * * [DColorPalette:SetConVarA](https://wiki.facepunch.com/gmod/DColorPalette:SetConVarA) - For the alpha channel
     * @param convar - The [ConVar](https://wiki.facepunch.com/gmod/ConVar) name for the red channel of the color
     */
    SetConVarR(convar: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Roughly sets the number of colors that can be picked by the user. If the DColorPalette is exactly 6 rows tall, this function will set the number of colors shown per row in the palette.
     * 
     * **Note:**
     * >[DColorPalette:Reset](https://wiki.facepunch.com/gmod/DColorPalette:Reset) or [DColorPalette:ResetSavedColors](https://wiki.facepunch.com/gmod/DColorPalette:ResetSavedColors) must be called after this function to apply changes.
     * 
     * @param rows - Scale for the range of colors that the user can pick. Default is 8.
     */
    SetNumRows(rows: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Internal helper function for [DColorPalette:UpdateConVars](https://wiki.facepunch.com/gmod/DColorPalette:UpdateConVars).
     * @param name - The name of the console variable to set
     * @param key - The key of the 3rd argument to set the convar to
     * Possible values: "r", "g", "b", "a"
     * @param clr - The [Color](https://wiki.facepunch.com/gmod/Color) to retrieve the info from.
     */
    UpdateConVar(name: string, key: string, clr: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * Updates all the console variables set by [DColorPalette:SetConVarR](https://wiki.facepunch.com/gmod/DColorPalette:SetConVarR) and so on with given color.
     * 
     * Called internally when a palette color is clicked.
     * @param clr - A [Color](https://wiki.facepunch.com/gmod/Color)
     */
    UpdateConVars(clr: Color): void;

}

/**
 * Similar to [DPropertySheet](https://wiki.facepunch.com/gmod/DPropertySheet), but with tabs on the left.
 */
interface DColumnSheet extends Panel {
    

    /**
     * [Client and Menu]
     * 
     * Adds a new column/tab.
     * @param name - Name of the column/tab
     * @param pnl - Panel to be used as contents of the tab. This normally would be a [DPanel](https://wiki.facepunch.com/gmod/DPanel)
     * @param [icon = nil] - Icon for the tab. This will ideally be a <page text="silkicon">Silkicons</page>, but any material name can be used.
     */
    AddSheet(name: string, pnl: Panel, icon?: string): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns the active button of this [DColumnSheet](https://wiki.facepunch.com/gmod/DColumnSheet).
     * 
     */
    GetActiveButton(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Makes a button an active button for this [DColumnSheet](https://wiki.facepunch.com/gmod/DColumnSheet).
     * @param active - The button to make active button
     */
    SetActiveButton(active: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Makes the tabs/buttons show only the image and no text.
     * 
     */
    UseButtonOnlyStyle(): void;

}

/**
 * A field with multiple selectable values.
 */
interface DComboBox extends DButton {
    

    /**
     * [Client and Menu]
     * 
     * Adds a choice to the combo box.
     * @param value - The text show to the user.
     * @param [data = nil] - The data accompanying this string. If left empty, the value argument is used instead.
     * Can be accessed with the second argument of [DComboBox:GetSelected](https://wiki.facepunch.com/gmod/DComboBox:GetSelected), [DComboBox:GetOptionData](https://wiki.facepunch.com/gmod/DComboBox:GetOptionData) and as an argument of [DComboBox:OnSelect](https://wiki.facepunch.com/gmod/DComboBox:OnSelect).
     * @param [select = false] - Should this be the default selected text show to the user or not.
     * @param [icon = nil] - Adds an icon for this choice.
     */
    AddChoice(value: string, data?: any, select = false, icon?: string): number;
    
    /**
     * [Client and Menu]
     * 
     * Adds a spacer below the currently last item in the drop down. Recommended to use with [DComboBox:SetSortItems](https://wiki.facepunch.com/gmod/DComboBox:SetSortItems) set to `false`.
     * 
     */
    AddSpacer(): void;
    
    /**
     * [Client and Menu]
     * 
     * Ran every frame to update the value of this panel to the value of the associated convar. See [Panel:SetConvar](https://wiki.facepunch.com/gmod/Panel:SetConvar).
     * 
     */
    CheckConVarChanges(): void;
    
    /**
     * [Client and Menu]
     * 
     * Selects a combo box option by its index and changes the text displayed at the top of the combo box.
     * @param value - The text to display at the top of the combo box.
     * @param index - The option index.
     */
    ChooseOption(value: string, index: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Selects an option within a combo box based on its table index.
     * @param index - Selects the option with given index.
     */
    ChooseOptionID(index: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Clears the combo box's text value, choices, and data values.
     * 
     */
    Clear(): void;
    
    /**
     * [Client and Menu]
     * 
     * Closes the combo box menu. Called when the combo box is clicked while open.
     * 
     */
    CloseMenu(): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns an option's data based on the given index.
     * @param index - The option index.
     */
    GetOptionData(index: number): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns an option's text based on the given index.
     * @param index - The option index.
     */
    GetOptionText(index: number): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns an option's text based on the given data.
     * @param data - The data to look up the name of.
     * If given a [number](https://wiki.facepunch.com/gmod/number) and no matching data was found, the function will test given data against each [Global.tonumber](https://wiki.facepunch.com/gmod/Global.tonumber)'d data entry.
     */
    GetOptionTextByData(data: string): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns the currently selected option's text and data
     * 
     */
    GetSelected(): LuaMultiReturn<[string, any]>;
    
    /**
     * [Client and Menu]
     * 
     * Returns the index (ID) of the currently selected option.
     * 
     */
    GetSelectedID(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns an whether the items in the dropdown will be alphabetically sorted or not.
     * 
     * See [DComboBox:SetSortItems](https://wiki.facepunch.com/gmod/DComboBox:SetSortItems).
     * 
     */
    GetSortItems(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not the combo box's menu is opened.
     * 
     */
    IsMenuOpen(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Called when the player opens the dropdown menu.
     * @param menu - The [DMenu](https://wiki.facepunch.com/gmod/DMenu) menu panel.
     */
    OnMenuOpened(menu: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when an option in the combo box is selected. This function does nothing by itself, you're supposed to overwrite it.
     * @param index - The index of the option for use with other [DComboBox](https://wiki.facepunch.com/gmod/DComboBox) functions.
     * @param value - The name of the option.
     * @param data - The data assigned to the option.
     */
    OnSelect(index: number, value: string, data: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Opens the combo box drop down menu. Called when the combo box is clicked.
     * 
     */
    OpenMenu(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when the player opens the dropdown menu.
     * @param index - The index of the option to remove.
     */
    RemoveChoice(index: number): LuaMultiReturn<[string, any]>;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not the items should be sorted alphabetically in the dropdown menu of the [DComboBox](https://wiki.facepunch.com/gmod/DComboBox). If set to false, items will appear in the order they were added by [DComboBox:AddChoice](https://wiki.facepunch.com/gmod/DComboBox:AddChoice) calls.
     * 
     * This is enabled by default.
     * @param sort - true to enable, false to disable
     */
    SetSortItems(sort: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the text shown in the combo box when the menu is not collapsed.
     * @param value - The text in the DComboBox.
     */
    SetValue(value: string): void;

}

/**
 * A VGUI base panel providing drag/drop functionality. Used by [DIconLayout](https://wiki.facepunch.com/gmod/DIconLayout), [DListLayout](https://wiki.facepunch.com/gmod/DListLayout) and [DTileLayout](https://wiki.facepunch.com/gmod/DTileLayout).
 */
interface DDragBase extends DPanel {
    

    /**
     * [Client and Menu]
     * 
     * Internal function used in [DDragBase:MakeDroppable](https://wiki.facepunch.com/gmod/DDragBase:MakeDroppable)
     * @param drops - 
     * @param bDoDrop - 
     * @param command - 
     * @param y - 
     * @param x - 
     */
    DropAction_Copy(drops: any, bDoDrop: boolean, command: string, y: number, x: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Internal function used in [DDragBase:DropAction_Copy](https://wiki.facepunch.com/gmod/DDragBase:DropAction_Copy)
     * @param drops - 
     * @param bDoDrop - 
     * @param command - 
     * @param y - 
     * @param x - 
     */
    DropAction_Normal(drops: any, bDoDrop: boolean, command: string, y: number, x: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Internal function used in [DDragBase:DropAction_Normal](https://wiki.facepunch.com/gmod/DDragBase:DropAction_Normal)
     * @param drops - 
     * @param bDoDrop - 
     * @param command - 
     * @param y - 
     * @param x - 
     */
    DropAction_Simple(drops: any, bDoDrop: boolean, command: string, y: number, x: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the drag'n'drop group this panel belongs to. See [DDragBase:MakeDroppable](https://wiki.facepunch.com/gmod/DDragBase:MakeDroppable).
     * 
     */
    GetDnD(): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether this panel is read only or not for drag'n'drop purposes.
     * 
     */
    GetReadOnly(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Whether this panel uses live drag'n'drop previews.
     * 
     */
    GetUseLiveDrag(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Makes the panel a receiver for any droppable panel with the same DnD name. Internally calls [Panel:Receiver](https://wiki.facepunch.com/gmod/Panel:Receiver).
     * 
     * See [Drag and Drop for VGUI](https://wiki.facepunch.com/gmod/Drag_and_Drop_for_VGUI).
     * @param name - The unique name for the receiver slot. Only droppable panels with the same DnD name as this can be dropped on the panel.
     * @param allowCopy - Whether or not to allow droppable panels to be copied when the <key>Ctrl</key> key is held down.
     */
    MakeDroppable(name: string, allowCopy: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when anything is dropped on or rearranged within the [DDragBase](https://wiki.facepunch.com/gmod/DDragBase).
     * 
     */
    OnModified(): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally by [DDragBase:MakeDroppable](https://wiki.facepunch.com/gmod/DDragBase:MakeDroppable).
     * @param name - Name of the DnD family.
     */
    SetDnD(name: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Determines where you can drop stuff.
     * "4" for left
     * "5" for center
     * "6" for right
     * "8" for top
     * "2" for bottom
     * @param [pos = 5] - Where you're allowed to drop things.
     */
    SetDropPos(pos = 5): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether this panel is read only or not for drag'n'drop purposes. If set to `true`, you can only copy from this panel, and cannot modify its contents.
     * @param name - Whether this panel should be read only or not.
     */
    SetReadOnly(name: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Whether to use live drag'n'drop previews.
     * @param newState - 
     */
    SetUseLiveDrag(newState: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Internal function used in [DDragBase:DropAction_Normal](https://wiki.facepunch.com/gmod/DDragBase:DropAction_Normal)
     * @param drop - 
     * @param pnl - 
     */
    UpdateDropTarget(drop: number, pnl: Panel): void;

}

/**
 * A simple Derma Drawer
 */
interface DDrawer extends Panel {
    

    /**
     * [Client and Menu]
     * 
     * Closes the [DDrawer](https://wiki.facepunch.com/gmod/DDrawer).
     * 
     */
    Close(): void;
    
    /**
     * [Client and Menu]
     * 
     * Return the Open Size of DDrawer.
     * 
     */
    GetOpenSize(): number;
    
    /**
     * [Client and Menu]
     * 
     * Return the Open Time of DDrawer.
     * 
     */
    GetOpenTime(): number;
    
    /**
     * [Client and Menu]
     * 
     * Opens the [DDrawer](https://wiki.facepunch.com/gmod/DDrawer).
     * 
     */
    Open(): void;
    
    /**
     * [Client and Menu]
     * 
     * Set the height of DDrawer
     * @param Value - Height of DDrawer. Default is `100`.
     */
    SetOpenSize(Value: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Set the time (in seconds) for DDrawer to open.
     * @param value - Length in seconds. Default is 0.3
     */
    SetOpenTime(value: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Toggles the [DDrawer](https://wiki.facepunch.com/gmod/DDrawer).
     * 
     */
    Toggle(): void;

}

/**
 * **	**
 * 
 * 		A panel used by the [Editable Entities](https://wiki.facepunch.com/gmod/Editable_Entities) system.
 */
interface DEntityProperties extends DProperties {
    

    /**
     * [Client]
     * 
     * Called internally by [DEntityProperties:RebuildControls](https://wiki.facepunch.com/gmod/DEntityProperties:RebuildControls).
     * @param varname - 
     * @param editdata - 
     */
    EditVariable(varname: string, editdata: any): void;
    
    /**
     * [Client]
     * 
     * Called internally when an entity being edited became invalid.
     * 
     * You should use [DEntityProperties:OnEntityLost](https://wiki.facepunch.com/gmod/DEntityProperties:OnEntityLost) instead.
     * 
     */
    EntityLost(): void;
    
    /**
     * [Client]
     * 
     * Called when we were editing an entity and then it became invalid (probably removed)
     * 
     */
    OnEntityLost(): void;
    
    /**
     * [Client]
     * 
     * Called internally by [DEntityProperties:SetEntity](https://wiki.facepunch.com/gmod/DEntityProperties:SetEntity) to rebuild the controls.
     * 
     */
    RebuildControls(): void;
    
    /**
     * [Client]
     * 
     * Sets the entity to be edited by this panel. The entity must support the [Editable Entities](https://wiki.facepunch.com/gmod/Editable_Entities) system or nothing will happen.
     * @param ent - The entity to edit
     */
    SetEntity(ent: Entity): void;

}

/**
 * The little "+" button used by [DProperties](https://wiki.facepunch.com/gmod/DProperties) and [DTree_Node](https://wiki.facepunch.com/gmod/DTree_Node).
 */
interface DExpandButton extends DButton {
    

    /**
     * [Client and Menu]
     * 
     * Returns whether this DExpandButton is expanded or not.
     * 
     */
    GetExpanded(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether this DExpandButton should be expanded or not. Only changes appearance.
     * @param expanded - True to expand ( visually will show a "-" )
     */
    SetExpanded(expanded: boolean): void;

}

/**
 * A tree and list-based file browser.
 * 
 * 		It allows filtering by folder (directory) name and file extension, and can display models as [SpawnIcon](https://wiki.facepunch.com/gmod/SpawnIcon)s.
 */
interface DFileBrowser extends DPanel {
    

    /**
     * [Client]
     * 
     * Clears the file tree and list, and resets all values.
     * 
     */
    Clear(): void;
    
    /**
     * [Client]
     * 
     * Returns the root directory/folder of the file tree.
     * 
     */
    GetBaseFolder(): string;
    
    /**
     * [Client]
     * 
     * Returns the current directory/folder being displayed.
     * 
     */
    GetCurrentFolder(): string;
    
    /**
     * [Client]
     * 
     * Returns the current file type filter on the file list.
     * 
     */
    GetFileTypes(): string;
    
    /**
     * [Client]
     * 
     * Returns the [DTree Node](https://wiki.facepunch.com/gmod/DTree_Node) that the file tree stems from.
     * 
     * This is a child of the root node of the [DTree](https://wiki.facepunch.com/gmod/DTree).
     * 
     */
    GetFolderNode(): Panel;
    
    /**
     * [Client]
     * 
     * Returns whether or not the model viewer mode is enabled. In this mode, files are displayed as [SpawnIcon](https://wiki.facepunch.com/gmod/SpawnIcon)s instead of a list.
     * 
     */
    GetModels(): boolean;
    
    /**
     * [Client]
     * 
     * Returns the name being used for the file tree.
     * 
     */
    GetName(): string;
    
    /**
     * [Client]
     * 
     * Returns whether or not the file tree is open.
     * 
     */
    GetOpen(): boolean;
    
    /**
     * [Client]
     * 
     * Returns the access path of the file tree. This is `GAME` unless changed with [DFileBrowser:SetPath](https://wiki.facepunch.com/gmod/DFileBrowser:SetPath).
     * 
     * See [file.Read](https://wiki.facepunch.com/gmod/file.Read) for how paths work.
     * 
     */
    GetPath(): string;
    
    /**
     * [Client]
     * 
     * Returns the current search filter on the file tree.
     * 
     */
    GetSearch(): string;
    
    /**
     * [Client]
     * 
     * Called when a file is double-clicked.
     * 
     * **Note:**
     * >Double-clicking a file or icon will trigger **both** this and [DFileBrowser:OnSelect](https://wiki.facepunch.com/gmod/DFileBrowser:OnSelect).
     * 
     * @param selectedPanel - The panel that was double-clicked to select this file.<br/><br/>This will either be a [DListView_Line](https://wiki.facepunch.com/gmod/DListView_Line) or [SpawnIcon](https://wiki.facepunch.com/gmod/SpawnIcon) depending on whether the model viewer mode is enabled. See [DFileBrowser:SetModels](https://wiki.facepunch.com/gmod/DFileBrowser:SetModels).
     * @param filePath - The path to the file that was double-clicked.
     */
    OnDoubleClick(selectedPanel: Panel, filePath: string): void;
    
    /**
     * [Client]
     * 
     * Called when a file is right-clicked.
     * 
     * **Note:**
     * >When not in model viewer mode, [DFileBrowser:OnSelect](https://wiki.facepunch.com/gmod/DFileBrowser:OnSelect) will also be called if the file is not already selected.
     * 
     * @param filePath - The path to the file that was right-clicked.
     * @param selectedPanel - The panel that was right-clicked to select this file.
     * This will either be a [DListView_Line](https://wiki.facepunch.com/gmod/DListView_Line) or [SpawnIcon](https://wiki.facepunch.com/gmod/SpawnIcon) depending on whether the model viewer mode is enabled. <br/>See [DFileBrowser:SetModels](https://wiki.facepunch.com/gmod/DFileBrowser:SetModels).
     */
    OnRightClick(filePath: string, selectedPanel: Panel): void;
    
    /**
     * [Client]
     * 
     * Called when a file is selected.
     * @param selectedPanel - The panel that was clicked to select this file.<br/><br/>This will either be a [DListView_Line](https://wiki.facepunch.com/gmod/DListView_Line) or [SpawnIcon](https://wiki.facepunch.com/gmod/SpawnIcon) depending on whether the model viewer mode is enabled. See [DFileBrowser:SetModels](https://wiki.facepunch.com/gmod/DFileBrowser:SetModels).
     * @param filePath - The path to the file that was selected.
     */
    OnSelect(selectedPanel: Panel, filePath: string): void;
    
    /**
     * [Client]
     * 
     * Sets the root directory/folder of the file tree.
     * 
     * This needs to be set for the file tree to be displayed.
     * @param baseDir - The path to the folder to use as the root.
     */
    SetBaseFolder(baseDir: string): void;
    
    /**
     * [Client]
     * 
     * Sets the directory/folder from which to display the file list.
     * @param currentDir - The directory to display files from.
     */
    SetCurrentFolder(currentDir: string): void;
    
    /**
     * [Client]
     * 
     * Sets the file type filter for the file list.
     * 
     * This accepts the same file extension wildcards as [file.Find](https://wiki.facepunch.com/gmod/file.Find).
     * @param [fileTypes = *.*] - A list of file types to display, separated by spaces e.g.
     * ```
     * "*.lua *.txt *.mdl"
     * ```
     */
    SetFileTypes(fileTypes?: string): void;
    
    /**
     * [Client]
     * 
     * Enables or disables the model viewer mode. In this mode, files are displayed as [SpawnIcon](https://wiki.facepunch.com/gmod/SpawnIcon)s instead of a list.
     * 
     * **Note:**
     * >This should only be used for `.mdl` files; the spawn icons will display error models for others. See [DFileBrowser:SetFileTypes](https://wiki.facepunch.com/gmod/DFileBrowser:SetFileTypes)
     * 
     * @param [showModels = false] - Whether or not to display files using [SpawnIcon](https://wiki.facepunch.com/gmod/SpawnIcon)s.
     */
    SetModels(showModels = false): void;
    
    /**
     * [Client]
     * 
     * Sets the name to use for the file tree.
     * @param [treeName = &grave;baseFolder&grave;] - The name for the root of the file tree. Passing no value causes this to be the base folder name. See [DFileBrowser:SetBaseFolder](https://wiki.facepunch.com/gmod/DFileBrowser:SetBaseFolder).
     */
    SetName(treeName?: string): void;
    
    /**
     * [Client]
     * 
     * Opens or closes the file tree.
     * @param [open = false] - `true` to open the tree, `false` to close it.
     * @param [useAnim = false] - If `true`, the [DTree](https://wiki.facepunch.com/gmod/DTree)'s open/close animation is used.
     */
    SetOpen(open = false, useAnim = false): void;
    
    /**
     * [Client]
     * 
     * Sets the access path for the file tree. This is set to `GAME` by default.
     * 
     * See [file.Read](https://wiki.facepunch.com/gmod/file.Read) for how paths work.
     * @param path - The access path i.e. "GAME", "LUA", "DATA" etc.
     */
    SetPath(path: string): void;
    
    /**
     * [Client]
     * 
     * Sets the search filter for the file tree.
     * 
     * This accepts the same wildcards as [file.Find](https://wiki.facepunch.com/gmod/file.Find).
     * @param [filter = *] - The filter to use on the file tree.
     */
    SetSearch(filter?: string): void;
    
    /**
     * [Client]
     * 
     * Called to set up the [DTree](https://wiki.facepunch.com/gmod/DTree) and file viewer when a base path has been set.
     * 
     * Calls [DFileBrowser:SetupTree](https://wiki.facepunch.com/gmod/DFileBrowser:SetupTree) and [DFileBrowser:SetupFiles](https://wiki.facepunch.com/gmod/DFileBrowser:SetupFiles).
     * 
     */
    Setup(): boolean;
    
    /**
     * [Client]
     * 
     * Called to set up the [DListView](https://wiki.facepunch.com/gmod/DListView) or [DIconBrowser](https://wiki.facepunch.com/gmod/DIconBrowser) by [DFileBrowser:Setup](https://wiki.facepunch.com/gmod/DFileBrowser:Setup).
     * 
     * The icon browser is used when in models mode. See [DFileBrowser:SetModels](https://wiki.facepunch.com/gmod/DFileBrowser:SetModels).
     * 
     */
    SetupFiles(): boolean;
    
    /**
     * [Client]
     * 
     * Called to set up the [DTree](https://wiki.facepunch.com/gmod/DTree) by [DFileBrowser:Setup](https://wiki.facepunch.com/gmod/DFileBrowser:Setup).
     * 
     */
    SetupTree(): boolean;
    
    /**
     * [Client]
     * 
     * Builds the file or icon list for the current directory.
     * 
     * You should use [DFileBrowser:SetCurrentFolder](https://wiki.facepunch.com/gmod/DFileBrowser:SetCurrentFolder) to change the directory.
     * @param currentDir - The directory to populate the list from.
     */
    ShowFolder(currentDir: string): void;
    
    /**
     * [Client]
     * 
     * Sorts the file list.
     * 
     * **Note:**
     * >This is only functional when not using the model viewer. See [DFileBrowser:SetModels](https://wiki.facepunch.com/gmod/DFileBrowser:SetModels)
     * 
     * @param [descending = false] - The sort order. `true` for descending (z-a), `false` for ascending (a-z).
     */
    SortFiles(descending = false): void;

}

/**
 * An easy form with functions to quickly add form elements
 */
interface DForm extends DCollapsibleCategory {
    

    /**
     * [Client and Menu]
     * 
     * Adds one or two items to the DForm.
     * If this method is called with only one argument, it is added to the bottom of the form. If two arguments are passed, they are placed side-by-side at the bottom of the form.
     * 
     * Internally, this function is used by the various DForm functions to, for example, add labels to the left of buttons.
     * @param left - Left-hand element to add to the DForm.
     * @param [right = nil] - Right-hand element to add to the DForm.
     */
    AddItem(left: Panel, right?: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Adds a [DButton](https://wiki.facepunch.com/gmod/DButton) onto the [DForm](https://wiki.facepunch.com/gmod/DForm)
     * @param text - The text on the button
     * @param concommand - The concommand to run when the button is clicked
     * @param args - The arguments to pass on to the concommand when the button is clicked
     */
    Button(text: string, concommand: string, ...args: any[]): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Adds a [DCheckBoxLabel](https://wiki.facepunch.com/gmod/DCheckBoxLabel) onto the [DForm](https://wiki.facepunch.com/gmod/DForm).
     * 
     * **Note:**
     * >This will run [DCheckBoxLabel:OnChange](https://wiki.facepunch.com/gmod/DCheckBoxLabel:OnChange) when being added. This is caused by [Panel:SetConVar](https://wiki.facepunch.com/gmod/Panel:SetConVar) being used when this function is used. To avoid this, use [DForm:AddItem](https://wiki.facepunch.com/gmod/DForm:AddItem) with a [DCheckBoxLabel](https://wiki.facepunch.com/gmod/DCheckBoxLabel).
     * 
     * @param label - The label to be set next to the check box
     * @param convar - The console variable to change when this is changed
     */
    CheckBox(label: string, convar: string): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Adds a [DComboBox](https://wiki.facepunch.com/gmod/DComboBox) onto the [DForm](https://wiki.facepunch.com/gmod/DForm)
     * @param title - Text to the left of the combo box
     * @param convar - Console variable to change when the user selects something from the dropdown.
     */
    ComboBox(title: string, convar: string): LuaMultiReturn<[Panel, Panel]>;
    
    /**
     * [Client and Menu]
     * 
     * Adds a [DLabel](https://wiki.facepunch.com/gmod/DLabel) onto the [DForm](https://wiki.facepunch.com/gmod/DForm). Unlike [DForm:Help](https://wiki.facepunch.com/gmod/DForm:Help), this is indented and is colored blue, depending on the derma skin.
     * @param help - The help message to be displayed.
     */
    ControlHelp(help: string): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Does nothing.
     * 
     */
    GetAutoSize(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Does nothing.
     * 
     */
    GetSpacing(): number;
    
    /**
     * [Client and Menu]
     * 
     * Adds a [DLabel](https://wiki.facepunch.com/gmod/DLabel) onto the [DForm](https://wiki.facepunch.com/gmod/DForm) as a helper
     * @param help - The help message to be displayed
     */
    Help(help: string): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Adds a [DListBox](https://wiki.facepunch.com/gmod/DListBox) onto the [DForm](https://wiki.facepunch.com/gmod/DForm)
     * 
     * @deprecated Use [DListView](https://wiki.facepunch.com/gmod/DListView) with [DForm:AddItem](https://wiki.facepunch.com/gmod/DForm:AddItem) instead.
     * 
     * @param label - The label to set on the DListBox
     */
    ListBox(label: string): LuaMultiReturn<[Panel, Panel]>;
    
    /**
     * [Client and Menu]
     * 
     * Adds a [DNumberWang](https://wiki.facepunch.com/gmod/DNumberWang) onto the [DForm](https://wiki.facepunch.com/gmod/DForm)
     * @param label - The label to be placed next to the DNumberWang
     * @param convar - The console variable to change when the slider is changed
     * @param min - The minimum value of the slider
     * @param max - The maximum value of the slider
     * @param [decimals = nil] - The number of decimals to allow in the slider (Optional)
     */
    NumberWang(label: string, convar: string, min: number, max: number, decimals?: number): LuaMultiReturn<[Panel, Panel]>;
    
    /**
     * [Client and Menu]
     * 
     * Adds a [DNumSlider](https://wiki.facepunch.com/gmod/DNumSlider) onto the [DForm](https://wiki.facepunch.com/gmod/DForm)
     * @param label - The label of the DNumSlider
     * @param convar - The console variable to change when the slider is changed
     * @param min - The minimum value of the slider
     * @param max - The maximum value of the slider
     * @param [decimals = nil] - The number of decimals to allow on the slider. (Optional)
     */
    NumSlider(label: string, convar: string, min: number, max: number, decimals?: number): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Creates a [DPanelSelect](https://wiki.facepunch.com/gmod/DPanelSelect) and docks it to the top of the DForm.
     * 
     * @deprecated This is derived from the deprecated [DPanelSelect](https://wiki.facepunch.com/gmod/DPanelSelect).
     * 
     * 
     */
    PanelSelect(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Creates a [PropSelect](https://wiki.facepunch.com/gmod/PropSelect) panel and docks it to the top of the DForm.
     * @param label - The label to display above the prop select.
     * @param convar - The convar to set the selected model to.
     * @param models - A table of models to display for selection. Supports 2 formats:
     * 1) Key is the model and value are the [convar](https://wiki.facepunch.com/gmod/convar)s to set when that model is selected in format `convar=value`
     * 2) An table of tables where each table must have the following keys:
     * * [string](https://wiki.facepunch.com/gmod/string) model - The model.
     * * [number](https://wiki.facepunch.com/gmod/number) skin - Model's skin. Defaults to 0
     * * [string](https://wiki.facepunch.com/gmod/string) tooltip - Displayed when user hovers over the model. Defaults to the model path.
     * * The key of the table is the value of the convar.
     * @param [height = 2] - The height of the prop select panel, in 64px icon increments.
     */
    PropSelect(label: string, convar: string, models: any, height = 2): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Does nothing.
     * 
     */
    Rebuild(): void;
    
    /**
     * [Client and Menu]
     * 
     * Does nothing.
     * @param __unnamedArg - 
     */
    SetAutoSize(__unnamedArg: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the title (header) name of the DForm. This is `Label` until set.
     * @param name - The new header name.
     */
    SetName(name: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Does nothing.
     * @param __unnamedArg - 
     */
    SetSpacing(__unnamedArg: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Adds a [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry) to a [DForm](https://wiki.facepunch.com/gmod/DForm)
     * @param label - The label to be next to the text entry
     * @param convar - The console variable to be changed when the text entry is changed
     */
    TextEntry(label: string, convar: string): LuaMultiReturn<[Panel, Panel]>;

}

/**
 * The DFrame is the moma of basically all VGUI elements. 98% of the time you will parent your element to this.
 */
interface DFrame extends EditablePanel {
    

    /**
     * [Client and Menu]
     * 
     * Centers the frame relative to the whole screen and invalidates its layout. This overrides [Panel:Center](https://wiki.facepunch.com/gmod/Panel:Center).
     * 
     */
    Center(): void;
    
    /**
     * [Client and Menu]
     * 
     * Hides or removes the DFrame, and calls [DFrame:OnClose](https://wiki.facepunch.com/gmod/DFrame:OnClose).
     * 
     * To set whether the frame is hidden or removed, use [DFrame:SetDeleteOnClose](https://wiki.facepunch.com/gmod/DFrame:SetDeleteOnClose).
     * 
     */
    Close(): void;
    
    /**
     * [Client and Menu]
     * 
     * Gets whether the background behind the frame is being blurred.
     * 
     */
    GetBackgroundBlur(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Determines whether or not the DFrame will be removed when it is closed. This is set with [DFrame:SetDeleteOnClose](https://wiki.facepunch.com/gmod/DFrame:SetDeleteOnClose).
     * 
     */
    GetDeleteOnClose(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Gets whether or not the frame is draggable by the user.
     * 
     */
    GetDraggable(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Gets whether or not the frame is part of a derma menu. This is set with [DFrame:SetIsMenu](https://wiki.facepunch.com/gmod/DFrame:SetIsMenu).
     * 
     */
    GetIsMenu(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Gets the minimum height the DFrame can be resized to by the user.
     * 
     * You must call [DFrame:SetSizable](https://wiki.facepunch.com/gmod/DFrame:SetSizable) before the user can resize the frame.
     * 
     */
    GetMinHeight(): number;
    
    /**
     * [Client and Menu]
     * 
     * Gets the minimum width the DFrame can be resized to by the user.
     * 
     * You must call [DFrame:SetSizable](https://wiki.facepunch.com/gmod/DFrame:SetSizable) before the user can resize the frame.
     * 
     */
    GetMinWidth(): number;
    
    /**
     * [Client and Menu]
     * 
     * Gets whether or not the shadow effect bordering the DFrame is being drawn.
     * 
     */
    GetPaintShadow(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Gets whether or not the DFrame is restricted to the boundaries of the screen resolution.
     * 
     */
    GetScreenLock(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Gets whether or not the DFrame can be resized by the user.
     * 
     * This is achieved by clicking and dragging in the bottom right corner of the frame.
     * 
     */
    GetSizable(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the title of the frame.
     * 
     */
    GetTitle(): string;
    
    /**
     * [Client and Menu]
     * 
     * Determines if the frame or one of its children has the screen focus.
     * 
     */
    IsActive(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Called when the DFrame is closed with [DFrame:Close](https://wiki.facepunch.com/gmod/DFrame:Close). This applies when the `close` button in the DFrame's control box is clicked.
     * 
     * This function does nothing and is safe to override.
     * 
     * This is **not** called when the DFrame is removed with [Panel:Remove](https://wiki.facepunch.com/gmod/Panel:Remove), see [PANEL:OnRemove](https://wiki.facepunch.com/gmod/PANEL:OnRemove) for that.
     * 
     */
    OnClose(): void;
    
    /**
     * [Client and Menu]
     * 
     * Indicate that the background elements won't be usable.
     * @param blur - Whether or not to block mouse on background panels or not.
     */
    SetBackgroundBlur(blur: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Determines whether or not the DFrame is removed when it is closed with [DFrame:Close](https://wiki.facepunch.com/gmod/DFrame:Close).
     * @param shouldDelete - Whether or not to delete the frame on close. This is `true` by default.
     */
    SetDeleteOnClose(shouldDelete: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether the frame should be draggable by the user. The DFrame can only be dragged from its title bar.
     * @param draggable - Whether to be draggable or not.
     */
    SetDraggable(draggable: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Adds or removes an icon on the left of the [DFrame](https://wiki.facepunch.com/gmod/DFrame)'s title.
     * @param path - Set to nil to remove the icon.
     * Otherwise, set to file path to create the icon.
     */
    SetIcon(path: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether the frame is part of a derma menu or not.
     * 
     * If this is set to `true`, [Global.CloseDermaMenus](https://wiki.facepunch.com/gmod/Global.CloseDermaMenus) will not be called when the frame is clicked, and thus any open menus will remain open.
     * @param isMenu - Whether or not this frame is a menu component.
     */
    SetIsMenu(isMenu: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the minimum height the DFrame can be resized to by the user.
     * 
     * This only applies to users attempting to resize the frame; [Panel:SetTall](https://wiki.facepunch.com/gmod/Panel:SetTall) and similar methods will not be affected. You must call [DFrame:SetSizable](https://wiki.facepunch.com/gmod/DFrame:SetSizable) before the user can resize the frame.
     * @param minH - The minimum height the user can resize the frame to.
     */
    SetMinHeight(minH: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the minimum width the DFrame can be resized to by the user.
     * 
     * This only applies to users attempting to resize the frame; [Panel:SetWide](https://wiki.facepunch.com/gmod/Panel:SetWide) and similar methods will not be affected. You must call [DFrame:SetSizable](https://wiki.facepunch.com/gmod/DFrame:SetSizable) before the user can resize the frame.
     * @param minW - The minimum width the user can resize the frame to.
     */
    SetMinWidth(minW: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not the shadow effect bordering the DFrame should be drawn.
     * @param shouldPaint - Whether or not to draw the shadow. This is `true` by default.
     */
    SetPaintShadow(shouldPaint: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether the DFrame is restricted to the boundaries of the screen resolution.
     * @param lock - If `true`, the frame cannot be dragged outside of the screen bounds
     */
    SetScreenLock(lock: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not the [DFrame](https://wiki.facepunch.com/gmod/DFrame) can be resized by the user.
     * 
     * This is achieved by clicking and dragging in the bottom right corner of the frame.
     * 
     * You can set the minimum size using [DFrame:SetMinWidth](https://wiki.facepunch.com/gmod/DFrame:SetMinWidth) and [DFrame:SetMinHeight](https://wiki.facepunch.com/gmod/DFrame:SetMinHeight).
     * @param sizeable - Whether the frame should be resizeable or not.
     */
    SetSizable(sizeable: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the title of the frame.
     * @param title - New title of the frame.
     */
    SetTitle(title: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Determines whether the DFrame's control box (close, minimise and maximise buttons) is displayed.
     * @param show - `false` hides the control box; this is `true` by default.
     */
    ShowCloseButton(show: boolean): void;

}

/**
 * A really simple grid layout panel.
 * 
 * **Note:**
 * >This panel will set its size automatically based on set column count. 
 * 		This makes it play badly with [Panel:Dock](https://wiki.facepunch.com/gmod/Panel:Dock) and cause a [PANEL:PerformLayout](https://wiki.facepunch.com/gmod/PANEL:PerformLayout) call every frame.
 * 
 */
interface DGrid extends Panel {
    

    /**
     * [Client and Menu]
     * 
     * Adds a new item to the grid.
     * @param item - The item to add. It will be forced visible and parented to the [DGrid](https://wiki.facepunch.com/gmod/DGrid).
     */
    AddItem(item: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the number of columns of this [DGrid](https://wiki.facepunch.com/gmod/DGrid). Set by [DGrid:SetCols](https://wiki.facepunch.com/gmod/DGrid:SetCols).
     * 
     */
    GetCols(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the width of each column of the [DGrid](https://wiki.facepunch.com/gmod/DGrid), which is set by [DGrid:SetColWide](https://wiki.facepunch.com/gmod/DGrid:SetColWide).
     * 
     */
    GetColWide(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns a list of panels in the grid.
     * 
     */
    GetItems(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns the height of each row of the [DGrid](https://wiki.facepunch.com/gmod/DGrid), which is set by [DGrid:SetRowHeight](https://wiki.facepunch.com/gmod/DGrid:SetRowHeight).
     * 
     */
    GetRowHeight(): number;
    
    /**
     * [Client and Menu]
     * 
     * Removes given panel from the [DGrid:GetItems](https://wiki.facepunch.com/gmod/DGrid:GetItems).
     * @param item - Item to remove from the grid
     * @param [bDontDelete = false] - If set to true, the actual panel will not be removed via [Panel:Remove](https://wiki.facepunch.com/gmod/Panel:Remove).
     */
    RemoveItem(item: Panel, bDontDelete = false): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the number of columns this panel should have.
     * 
     * The [DGrid](https://wiki.facepunch.com/gmod/DGrid) will resize its width to match this value.
     * @param cols - The desired number of columns
     */
    SetCols(cols: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the width of each column.
     * 
     * The cell panels (grid items) will not be resized or centered.
     * @param colWidth - The width of each column.
     */
    SetColWide(colWidth: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the height of each row. 
     * 
     * The cell panels (grid items) will not be resized or centered.
     * @param rowHeight - The height of each row
     */
    SetRowHeight(rowHeight: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sorts the items in the grid. Does not visually update the grid, use [Panel:InvalidateLayout](https://wiki.facepunch.com/gmod/Panel:InvalidateLayout) for that.
     * @param key - A key in the panel from [DGrid:GetItems](https://wiki.facepunch.com/gmod/DGrid:GetItems). The key's value must be numeric.
     * @param [desc = true] - True for descending order, false for ascending.
     */
    SortByMember(key: string, desc = true): void;

}

/**
 * Creates an invisible vertical divider between two GUI elements.
 */
interface DHorizontalDivider extends DPanel {
    

    /**
     * [Client]
     * 
     * Returns the width of the horizontal divider bar, set by [DHorizontalDivider:SetDividerWidth](https://wiki.facepunch.com/gmod/DHorizontalDivider:SetDividerWidth).
     * 
     */
    GetDividerWidth(): number;
    
    /**
     * [Client]
     * 
     * Returns whether or not the player is currently dragging the middle divider bar.
     * 
     */
    GetDragging(): boolean;
    
    /**
     * [Client]
     * 
     * Returns the local X coordinate of where the player started dragging the thing
     * 
     */
    GetHoldPos(): number;
    
    /**
     * [Client]
     * 
     * Returns the left side content of the [DHorizontalDivider](https://wiki.facepunch.com/gmod/DHorizontalDivider)
     * 
     */
    GetLeft(): Panel;
    
    /**
     * [Client]
     * 
     * Returns the minimum width of the left side, set by [DHorizontalDivider:SetLeftMin](https://wiki.facepunch.com/gmod/DHorizontalDivider:SetLeftMin).
     * 
     */
    GetLeftMin(): number;
    
    /**
     * [Client]
     * 
     * Returns the current width of the left side, set by [DHorizontalDivider:SetLeftWidth](https://wiki.facepunch.com/gmod/DHorizontalDivider:SetLeftWidth) or by the user.
     * 
     */
    GetLeftWidth(): number;
    
    /**
     * [Client]
     * 
     * Returns the middle content, set by [DHorizontalDivider:SetMiddle](https://wiki.facepunch.com/gmod/DHorizontalDivider:SetMiddle).
     * 
     */
    GetMiddle(): Panel;
    
    /**
     * [Client]
     * 
     * Returns the right side content
     * 
     */
    GetRight(): Panel;
    
    /**
     * [Client]
     * 
     * Returns the minimum width of the right side, set by [DHorizontalDivider:SetRightMin](https://wiki.facepunch.com/gmod/DHorizontalDivider:SetRightMin).
     * 
     */
    GetRightMin(): number;
    
    /**
     * [Client]
     * 
     * Sets the width of the horizontal divider bar.
     * @param width - The width of the horizontal divider bar.
     */
    SetDividerWidth(width: number): void;
    
    /**
     * [Client]
     * 
     * Sets whether the player is dragging the divider or not
     * @param dragonot - 
     */
    SetDragging(dragonot: boolean): void;
    
    /**
     * [Client]
     * 
     * Sets the local X coordinate of where the player started dragging the thing
     * @param x - 
     */
    SetHoldPos(x: number): void;
    
    /**
     * [Client]
     * 
     * Sets the left side content of the [DHorizontalDivider](https://wiki.facepunch.com/gmod/DHorizontalDivider).
     * @param pnl - The panel to set as the left side
     */
    SetLeft(pnl: Panel): void;
    
    /**
     * [Client]
     * 
     * Sets the minimum width of the left side
     * @param minWidth - The minimum width of the left side
     */
    SetLeftMin(minWidth: number): void;
    
    /**
     * [Client]
     * 
     * Sets the current/starting width of the left side.
     * 
     * The width of the right side is automatically calculated by subtracting this from the total width of the [DHorizontalDivider](https://wiki.facepunch.com/gmod/DHorizontalDivider).
     * @param width - The current/starting width of the left side
     */
    SetLeftWidth(width: number): void;
    
    /**
     * [Client]
     * 
     * Sets the middle content, over the draggable divider bar panel.
     * @param middle - The middle content
     */
    SetMiddle(middle: Panel): void;
    
    /**
     * [Client]
     * 
     * Sets the right side content
     * @param pnl - The right side content
     */
    SetRight(pnl: Panel): void;
    
    /**
     * [Client]
     * 
     * Sets the minimum width of the right side
     * @param minWidth - The minimum width of the right side
     */
    SetRightMin(minWidth: number): void;
    
    /**
     * [Client]
     * 
     * <validate>TODO Document me</validate>
     * 
     */
    StartGrab(): void;

}

/**
 * A very basic horizontal scrollable panel, similar to [DScrollPanel](https://wiki.facepunch.com/gmod/DScrollPanel).
 * 
 * 		Used internally in [DPropertySheet](https://wiki.facepunch.com/gmod/DPropertySheet).
 */
interface DHorizontalScroller extends Panel {
    

    /**
     * [Client and Menu]
     * 
     * Adds a panel to the [DHorizontalScroller](https://wiki.facepunch.com/gmod/DHorizontalScroller).
     * @param pnl - The panel to add. It will be automatically parented.
     */
    AddPanel(pnl: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the internal canvas panel where the content of [DHorizontalScroller](https://wiki.facepunch.com/gmod/DHorizontalScroller) are placed on.
     * 
     */
    GetCanvas(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Returns the overlap set by [DHorizontalScroller:GetOverlap](https://wiki.facepunch.com/gmod/DHorizontalScroller:GetOverlap).
     * 
     */
    GetOverlap(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether this panel should show drop targets.
     * 
     */
    GetShowDropTargets(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Same as [DDragBase:MakeDroppable](https://wiki.facepunch.com/gmod/DDragBase:MakeDroppable).
     * TODO: Transclude or whatever to here?
     * @param name - 
     */
    MakeDroppable(name: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when the panel is scrolled.
     * 
     */
    OnDragModified(): void;
    
    /**
     * [Client and Menu]
     * 
     * Scrolls the [DHorizontalScroller](https://wiki.facepunch.com/gmod/DHorizontalScroller) to given child panel.
     * @param target - The target child panel. Must be a child of [DHorizontalScroller:GetCanvas](https://wiki.facepunch.com/gmod/DHorizontalScroller:GetCanvas)
     */
    ScrollToChild(target: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Controls the spacing between elements of the horizontal scroller.
     * @param overlap - Overlap in pixels. Positive numbers will make elements `overlap` each other, negative will add spacing.
     */
    SetOverlap(overlap: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the scroll amount, automatically clamping the value.
     * @param scroll - The new scroll amount
     */
    SetScroll(scroll: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether this panel should show drop targets.
     * @param newState - 
     */
    SetShowDropTargets(newState: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Same as [DDragBase:SetUseLiveDrag](https://wiki.facepunch.com/gmod/DDragBase:SetUseLiveDrag)
     * @param newState - 
     */
    SetUseLiveDrag(newState: boolean): void;

}

/**
 * A generic horizontal scrollbar. See the vertical alternative [here](DVScrollBar).
 * 
 * The scrollbar notably contains `DHScrollBar.btnLeft`, `DHScrollBar.btnRight`, and `DHScrollBar.btnGrip` which are the left button, right button, and grip respectively. Editing the paint functions of these allows custom scrollbar styling, although it is a better idea to use [Derma Skins](Derma_Skin_Creation).
 */
interface DHScrollBar extends Panel {
    

    /**
     * [Client and Menu]
     * 
     * Adds specified amount of scroll in pixels.
     * @param add - How much to scroll rightwards. Can be negative for leftwards scroll
     */
    AddScroll(add: number): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Smoothly scrolls to given level.
     * @param scroll - The scroll level to animate to. In pixels from the left ( from 0 )
     * @param length - Length of the animation in seconds
     * @param [delay = 0] - Delay of the animation in seconds
     * @param [ease = -1] - See [Panel:NewAnimation](https://wiki.facepunch.com/gmod/Panel:NewAnimation) for explanation.
     */
    AnimateTo(scroll: number, length: number, delay = 0, ease = -1): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the scale of the scroll bar based on the difference in size between the visible "window" into the canvas that is being scrolled. Should be used after [DHScrollBar:SetUp](https://wiki.facepunch.com/gmod/DHScrollBar:SetUp).
     * 
     */
    BarScale(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not the manual left/right scroll buttons are visible or not. Set by [DHScrollBar:SetHideButtons](https://wiki.facepunch.com/gmod/DHScrollBar:SetHideButtons).
     * 
     */
    GetHideButtons(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the negative of [DHScrollBar:GetScroll](https://wiki.facepunch.com/gmod/DHScrollBar:GetScroll).
     * 
     */
    GetOffset(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the amount of scroll level from the left in pixels.
     * 
     */
    GetScroll(): number;
    
    /**
     * [Client and Menu]
     * 
     * Called from within [DScrollBarGrip](https://wiki.facepunch.com/gmod/DScrollBarGrip)
     * 
     */
    Grip(): void;
    
    /**
     * [Client and Menu]
     * 
     * Allows hiding the left and right buttons for better visual stylisation.
     * @param hide - True to hide
     */
    SetHideButtons(hide: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the scroll level in pixels.
     * @param scroll - The new scroll value.
     */
    SetScroll(scroll: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets up the scrollbar for use.
     * 
     * The scrollbar will automatically disable itself if the total width of the canvas is lower than the width of the panel that holds the canvas during this function call.
     * @param barSize - The size of the panel that holds the canvas, basically size of "1 page".
     * @param canvasSize - The total size of the canvas, this typically is the bigger number.
     */
    SetUp(barSize: number, canvasSize: number): void;

}

/**
 * The DHTML control wraps the internal Awesomium framework, supports calling Javascript functions from Lua, 
 * 		as well as running Lua from within the HTML. Running Lua code is disabled by default.
 */
interface DHTML extends Awesomium {
    

    /**
     * [Client and Menu]
     * 
     * Defines a Javascript function that when called will call a Lua callback.
     * 
     * **Note:**
     * >Must be called after the HTML document has fully loaded.
     * 
     * @param library - Library name of the JS function you are defining.
     * @param name - Name of the JS function you are defining.
     * @param callback - Function called when the JS function is called. Arguments passed to the JS function will be passed here.
     */
    AddFunction(library: string, name: string, callback: Function): void;
    
    /**
     * [Client and Menu]
     * 
     * Runs/Executes a string as JavaScript code in a panel.
     * 
     * **Note:**
     * >This function does **NOT** evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).Because a return value is nil/no value (a.k.a. void).If you wish to pass/return values from JS to Lua, you may want to use [DHTML:AddFunction](https://wiki.facepunch.com/gmod/DHTML:AddFunction) function to accomplish that job.
     * 
     * **Note:**
     * >This function is an alias of [DHTML:QueueJavascript](https://wiki.facepunch.com/gmod/DHTML:QueueJavascript) ([source](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/lua/vgui/dhtml.lua#L62)).
     * 
     * @param js - Specify JavaScript code to be executed.
     */
    Call(js: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when the page inside the [DHTML](https://wiki.facepunch.com/gmod/DHTML) window runs the `console.log` javascript function. On the x86-64 beta, it's called for all built-in `console.*` javascript functions.
     * 
     * If [DHTML:SetAllowLua](https://wiki.facepunch.com/gmod/DHTML:SetAllowLua) is set to `true` and the message begins with `RUNLUA:`, the text following `RUNLUA:` will be executed as code within the Lua environment (this is how Lua is called from DHTML windows).
     * @param msg - The message to be logged (or Lua code to be executed; see above).
     */
    ConsoleMessage(msg: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns if the loaded page can run Lua code, set by [DHTML:SetAllowLua](https://wiki.facepunch.com/gmod/DHTML:SetAllowLua)
     * 
     */
    GetAllowLua(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the value set by [DHTML:SetScrollbars](https://wiki.facepunch.com/gmod/DHTML:SetScrollbars).
     * 
     * @deprecated Broken. Use the CSS `overflow` rule instead.
     * 
     * 
     */
    GetScrollbars(): boolean;
    
    /**
     * [Client]
     * 
     * Called when this panel begins loading a page.
     * @param url - The URL of the current page.
     */
    OnBeginLoadingDocument(url: string): void;
    
    /**
     * [Client]
     * 
     * Called by the engine when a callback function is called.
     * @param library - Library name of the JS function that was called.
     * @param name - Name of the JS function that was called.
     * @param arguments - Table containing all arguments passed to the JS function.
     */
    OnCallback(library: string, name: string, arguments: any): boolean;
    
    /**
     * [Client]
     * 
     * Called by HTML panels when the target URL of the frame has changed, this happens when you hover over a link.
     * @param url - New target URL.
     */
    OnChangeTargetURL(url: string): void;
    
    /**
     * [Client]
     * 
     * Called by HTML panels when the title of the loaded page has been changed.
     * @param newTitle - The new title of the page.
     */
    OnChangeTitle(newTitle: string): void;
    
    /**
     * [Client]
     * 
     * Called by HTML panels when the page attempts to open a new child view (such as a popup or new tab).
     * @param sourceURL - The URL of the page requesting to create a child.
     * @param targetURL - The URL of the requested child.
     * @param isPopup - True if the requested view is a popup.
     */
    OnChildViewCreated(sourceURL: string, targetURL: string, isPopup: boolean): void;
    
    /**
     * [Client]
     * 
     * Called by HTML panels when the panel's DOM has been set up. You can run JavaScript in here.
     * @param url - The URL of the current page.
     */
    OnDocumentReady(url: string): void;
    
    /**
     * [Client]
     * 
     * Called when this panel successfully loads a page.
     * @param url - The URL of the current page.
     */
    OnFinishLoadingDocument(url: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Runs/Executes a string as JavaScript code in a panel.
     * 
     * **Note:**
     * >This function does **NOT** evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).Because a return value is nil/no value (a.k.a. void).If you wish to pass/return values from JS to Lua, you may want to use [DHTML:AddFunction](https://wiki.facepunch.com/gmod/DHTML:AddFunction) function to accomplish that job.
     * 
     * **Note:**
     * >If [Panel:IsVisible](https://wiki.facepunch.com/gmod/Panel:IsVisible) is `false`, [PANEL:Think](https://wiki.facepunch.com/gmod/PANEL:Think) will **NOT** run, meaning the Javascript Queue will not be processed.Consider overriding [PANEL:Paint](https://wiki.facepunch.com/gmod/PANEL:Paint) to stop the panel from drawing instead.
     * 
     * @param js - Specify JavaScript code to be executed.
     */
    QueueJavascript(js: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Determines whether the loaded page can run Lua code or not. See [DHTML](https://wiki.facepunch.com/gmod/DHTML) for how to run Lua from a DHTML window.
     * @param [allow = false] - Whether or not to allow Lua.
     */
    SetAllowLua(allow = false): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets if the loaded window should display scrollbars when the webpage is larger than the viewing window. This is similar to the CSS `overflow` rule.
     * 
     * @deprecated Broken. Use the CSS `overflow` rule instead.
     * 
     * @param show - True if scrollbars should be visible.
     */
    SetScrollbars(show: boolean): void;

}

/**
 * An element providing navigation controls for a [DHTML](https://wiki.facepunch.com/gmod/DHTML) window.
 */
interface DHTMLControls extends Omit<Panel, "SetHTML"> {
    

    /**
     * [Client and Menu]
     * 
     * 
     */
    FinishedLoading(): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the color of the navigation buttons.
     * @param clr - A [Color](https://wiki.facepunch.com/gmod/Color)
     */
    SetButtonColor(clr: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the [DHTML](https://wiki.facepunch.com/gmod/DHTML) element to control with these [DHTMLControls](https://wiki.facepunch.com/gmod/DHTMLControls).
     * @param dhtml - The HTML panel
     */
    SetHTML(dhtml: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * 
     */
    StartedLoading(): void;
    
    /**
     * [Client and Menu]
     * 
     * Basically adds an URL to the history.
     * @param url - 
     */
    UpdateHistory(url: string): void;
    
    /**
     * [Client and Menu]
     * 
     * 
     */
    UpdateNavButtonStatus(): void;

}

/**
 * Simply a [DIconLayout](https://wiki.facepunch.com/gmod/DIconLayout) which automatically displays all of the <page text="Silkicons">silkicons</page>. 
 * 		Used as a way to get the user to select an icon.
 */
interface DIconBrowser extends DScrollPanel {
    

    /**
     * [Client and Menu]
     * 
     * Automatically called to fill the browser with icons. Will not work if [DIconBrowser:SetManual](https://wiki.facepunch.com/gmod/DIconBrowser:SetManual) is set to true.
     * 
     */
    Fill(): void;
    
    /**
     * [Client and Menu]
     * 
     * A simple unused search feature, hides all icons that do not contain given text in their file path.
     * @param text - The text to search for
     */
    FilterByText(text: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not the browser should fill itself with icons.
     * 
     */
    GetManual(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the currently selected icon's file path.
     * 
     */
    GetSelectedIcon(): string;
    
    /**
     * [Client and Menu]
     * 
     * Called when the selected icon was changed. Use [DIconBrowser:GetSelectedIcon](https://wiki.facepunch.com/gmod/DIconBrowser:GetSelectedIcon) to get the selected icon's filepath.
     * 
     */
    OnChange(): void;
    
    /**
     * [Client and Menu]
     * 
     * Use [DIconBrowser:OnChange](https://wiki.facepunch.com/gmod/DIconBrowser:OnChange) instead
     * 
     */
    OnChangeInternal(): void;
    
    /**
     * [Client and Menu]
     * 
     * Scrolls the browser to the selected icon
     * 
     */
    ScrollToSelected(): void;
    
    /**
     * [Client and Menu]
     * 
     * Selects an icon from file path
     * @param icon - The file path of the icon to select. Do not include the "materials/" part.
     */
    SelectIcon(icon: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not the browser should automatically fill itself with icons.
     * @param manual - 
     */
    SetManual(manual: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Set the currently selected file path. Do not use. Use [DIconBrowser:SelectIcon](https://wiki.facepunch.com/gmod/DIconBrowser:SelectIcon) instead.
     * @param str - 
     */
    SetSelectedIcon(str: string): void;

}

/**
 * DIconLayout is what replaced [DPanelList](https://wiki.facepunch.com/gmod/DPanelList) in Garry's Mod 13. 
 * 		DPanelList still exists in GMod but is deprecated and does not support the new GWEN skin.
 * 
 * 		[DIconLayout](https://wiki.facepunch.com/gmod/DIconLayout) is used to make a list of panels. 
 * 		Unlike DPanelList, DIconLayout does not automatically add a scroll bar - the example below shows you how you can do this.
 */
interface DIconLayout extends DDragBase {
    

    /**
     * [Client and Menu]
     * 
     * Creates a replica of the DIconLayout it is called on.
     * 
     */
    Copy(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Copies the contents (Child elements) of another [DIconLayout](https://wiki.facepunch.com/gmod/DIconLayout) to itself.
     * @param from - [DIconLayout](https://wiki.facepunch.com/gmod/DIconLayout) to copy from.
     */
    CopyContents(from: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the size of the border.
     * 
     */
    GetBorder(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the direction that it will be layed out, using the DOCK enumerations.
     * 
     */
    GetLayoutDir(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the distance between two 'icons' on the X axis.
     * 
     */
    GetSpaceX(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns distance between two "Icons" on the Y axis.
     * 
     */
    GetSpaceY(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the icon layout will stretch its height to fit all the children.
     * 
     * See also [DIconLayout:GetStretchWidth](https://wiki.facepunch.com/gmod/DIconLayout:GetStretchWidth)
     * 
     */
    GetStretchHeight(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the icon layout will stretch its width to fit all the children.
     * 
     * See also [DIconLayout:GetStretchHeight](https://wiki.facepunch.com/gmod/DIconLayout:GetStretchHeight)
     * 
     */
    GetStretchWidth(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Resets layout vars before calling [Panel:InvalidateLayout](https://wiki.facepunch.com/gmod/Panel:InvalidateLayout). This is called when children are added or removed, and must be called when the spacing, border or layout direction is changed.
     * 
     */
    Layout(): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally to layout the child elements if the [DIconLayout:SetLayoutDir](https://wiki.facepunch.com/gmod/DIconLayout:SetLayoutDir) is set to LEFT (See [Enums/DOCK](https://wiki.facepunch.com/gmod/Enums/DOCK)).
     * 
     */
    LayoutIcons_LEFT(): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally to layout the child elements if the [DIconLayout:SetLayoutDir](https://wiki.facepunch.com/gmod/DIconLayout:SetLayoutDir) is set to TOP (See [Enums/DOCK](https://wiki.facepunch.com/gmod/Enums/DOCK)).
     * 
     */
    LayoutIcons_TOP(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when the panel is modified.
     * 
     */
    OnModified(): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the internal border (padding) within the DIconLayout. This will not change its size, only the positioning of children. You must call [DIconLayout:Layout](https://wiki.facepunch.com/gmod/DIconLayout:Layout) in order for the changes to take effect.
     * @param width - The border (padding) inside the DIconLayout.
     */
    SetBorder(width: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the direction that it will be layed out, using the [Enums/DOCK](https://wiki.facepunch.com/gmod/Enums/DOCK).
     * 
     * Currently only TOP and LEFT are supported.
     * @param direction - [Enums/DOCK](https://wiki.facepunch.com/gmod/Enums/DOCK)
     */
    SetLayoutDir(direction: DOCK): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the horizontal (x) spacing between children within the DIconLayout. You must call [DIconLayout:Layout](https://wiki.facepunch.com/gmod/DIconLayout:Layout) in order for the changes to take effect.
     * @param xSpacing - The width of the gap between child objects.
     */
    SetSpaceX(xSpacing: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the vertical (y) spacing between children within the DIconLayout. You must call [DIconLayout:Layout](https://wiki.facepunch.com/gmod/DIconLayout:Layout) in order for the changes to take effect.
     * @param ySpacing - The vertical gap between rows in the DIconLayout.
     */
    SetSpaceY(ySpacing: number): void;
    
    /**
     * [Client and Menu]
     * 
     * If set to true, the icon layout will stretch its height to fit all the children.
     * 
     * See also [DIconLayout:SetStretchWidth](https://wiki.facepunch.com/gmod/DIconLayout:SetStretchWidth)
     * @param do_stretch - 
     */
    SetStretchHeight(do_stretch: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * If set to true, the icon layout will stretch its width to fit all the children.
     * 
     * See also [DIconLayout:SetStretchHeight](https://wiki.facepunch.com/gmod/DIconLayout:SetStretchHeight)
     * @param stretchW - 
     */
    SetStretchWidth(stretchW: boolean): void;

}

/**
 * [DImage](https://wiki.facepunch.com/gmod/DImage) is an advanced, more robust version of the [Material](https://wiki.facepunch.com/gmod/Material) panel.
 * 
 * 		See [DImageButton](https://wiki.facepunch.com/gmod/DImageButton) for a click-able version of this panel.
 */
interface DImage extends Omit<DPanel, "PaintAt"> {
    

    /**
     * [Client and Menu]
     * 
     * Actually loads the [IMaterial](https://wiki.facepunch.com/gmod/IMaterial) to render it. Called from [DImage:LoadMaterial](https://wiki.facepunch.com/gmod/DImage:LoadMaterial).
     * 
     */
    DoLoadMaterial(): void;
    
    /**
     * [Client and Menu]
     * 
     * "Fixes" the current material of the [DImage](https://wiki.facepunch.com/gmod/DImage) if it has VertexLit shader by creating a new one with the same name and a prefix of "_DImage" and automatically calling [DImage:SetMaterial](https://wiki.facepunch.com/gmod/DImage:SetMaterial) with the new material.
     * 
     * This fixes the problem where using materials using shaders that expect lighting information causing "weird" flickering when displayed in 2D/Unlit environment.
     * 
     */
    FixVertexLitMaterial(): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the texture path set by [DImage:SetFailsafeMatName](https://wiki.facepunch.com/gmod/DImage:SetFailsafeMatName).
     * 
     */
    GetFailsafeMatName(): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns the image loaded in the image panel.
     * 
     */
    GetImage(): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns the color override of the image panel.
     * 
     */
    GetImageColor(): Color;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the [DImage](https://wiki.facepunch.com/gmod/DImage) should keep the aspect ratio of its image when being resized.
     * 
     * See [DImage:SetKeepAspect](https://wiki.facepunch.com/gmod/DImage:SetKeepAspect) for more info on how it works.
     * 
     */
    GetKeepAspect(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the current [Global.Material](https://wiki.facepunch.com/gmod/Global.Material) of the [DImage](https://wiki.facepunch.com/gmod/DImage).
     * 
     */
    GetMaterial(): IMaterial;
    
    /**
     * [Client and Menu]
     * 
     * Returns the texture path set by [DImage:SetMatName](https://wiki.facepunch.com/gmod/DImage:SetMatName).
     * 
     */
    GetMatName(): string;
    
    /**
     * [Client and Menu]
     * 
     * Initializes the loading process of the material to render if it is not loaded yet.
     * 
     * You do not need to call this function. It is done for you automatically.
     * 
     */
    LoadMaterial(): void;
    
    /**
     * [Client and Menu]
     * 
     * Paints a ghost copy of the DImage panel at the given position and dimensions. This function overrides [Panel:PaintAt](https://wiki.facepunch.com/gmod/Panel:PaintAt).
     * @param posX - The x coordinate to draw the panel from.
     * @param posY - The y coordinate to draw the panel from.
     * @param width - The width of the panel image to be drawn.
     * @param height - The height of the panel image to be drawn.
     */
    PaintAt(posX: number, posY: number, width: number, height: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the backup material to be loaded when the image is first rendered. Used by [DImage:SetOnViewMaterial](https://wiki.facepunch.com/gmod/DImage:SetOnViewMaterial).
     * @param backupMat - 
     */
    SetFailsafeMatName(backupMat: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the image to load into the frame. If the first image can't be loaded and `strBackup` is set, that image will be loaded instead.
     * 
     * This eventually calls [DImage:SetMaterial](https://wiki.facepunch.com/gmod/DImage:SetMaterial).
     * @param strImage - The path of the image to load. When no file extension is supplied the VMT file extension is used.
     * @param [strBackup = nil] - The path of the backup image.
     */
    SetImage(strImage: string, strBackup?: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the image's color override.
     * @param col - The color override of the image. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     */
    SetImageColor(col: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether the [DImage](https://wiki.facepunch.com/gmod/DImage) should keep the aspect ratio of its image when being resized.
     * 
     * Note that this will not try to fit the image inside the button, but instead it will fill the button with the image.
     * @param keep - true to keep the aspect ratio, false not to
     */
    SetKeepAspect(keep: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets a [Global.Material](https://wiki.facepunch.com/gmod/Global.Material) directly as an image.
     * @param mat - The material to set
     */
    SetMaterial(mat: IMaterial): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the material to be loaded when the image is first rendered. Used by [DImage:SetOnViewMaterial](https://wiki.facepunch.com/gmod/DImage:SetOnViewMaterial).
     * @param mat - 
     */
    SetMatName(mat: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Similar to [DImage:SetImage](https://wiki.facepunch.com/gmod/DImage:SetImage), but will only do the expensive part of actually loading the textures/material if the material is about to be rendered/viewed.
     * 
     * Useful for cases like [DIconBrowser](https://wiki.facepunch.com/gmod/DIconBrowser), where there are hundreds of small icons in 1 panel in a list that do not need all to be loaded at the same time.
     * @param mat - 
     * @param backupMat - 
     */
    SetOnViewMaterial(mat: string, backupMat: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns true if the image is **not** yet loaded.
     * 
     */
    Unloaded(): boolean;

}

/**
 * An image button.
 * 
 * 		This panel inherits all methods of [DButton](https://wiki.facepunch.com/gmod/DButton), such as [DLabel:DoClick](https://wiki.facepunch.com/gmod/DLabel:DoClick).
 */
interface DImageButton extends Omit<DButton, "SetImage"> {
    

    /**
     * [Client and Menu]
     * 
     * Used internally to briefly scale the image when clicked.
     * 
     */
    DepressImage(): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether [DImageButton:DepressImage](https://wiki.facepunch.com/gmod/DImageButton:DepressImage) is functional or not.
     * 
     */
    GetDepressImage(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the "image" of the [DImageButton](https://wiki.facepunch.com/gmod/DImageButton). Equivalent of [DImage:GetImage](https://wiki.facepunch.com/gmod/DImage:GetImage).
     * 
     */
    GetImage(): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the image inside the button should be stretched to fit it or not
     * 
     * See [DImageButton:SetStretchToFit](https://wiki.facepunch.com/gmod/DImageButton:SetStretchToFit)
     * 
     */
    GetStretchToFit(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Sets the color of the image. Equivalent of [DImage:SetImageColor](https://wiki.facepunch.com/gmod/DImage:SetImageColor)
     * @param color - The [Global.Color](https://wiki.facepunch.com/gmod/Global.Color) to set
     */
    SetColor(color: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Controls whether [DImageButton:DepressImage](https://wiki.facepunch.com/gmod/DImageButton:DepressImage) is functional or not.
     * @param enable - `true` to enable image depressing when clicked.
     */
    SetDepressImage(enable: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Alias of [DImageButton:SetImage](https://wiki.facepunch.com/gmod/DImageButton:SetImage).
     * 
     */
    SetIcon(): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the "image" of the [DImageButton](https://wiki.facepunch.com/gmod/DImageButton). Equivalent of [DImage:SetImage](https://wiki.facepunch.com/gmod/DImage:SetImage).
     * @param strImage - The path of the image to load. When no file extension is supplied the VMT file extension is used.
     * @param strBackup - The path of the backup image.
     */
    SetImage(strImage: string, strBackup: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Hides or shows the image of the image button. Internally this calls [Panel:SetVisible](https://wiki.facepunch.com/gmod/Panel:SetVisible) on the internal [DImage](https://wiki.facepunch.com/gmod/DImage).
     * @param visible - Set true to make it visible ( default ), or false to hide the image
     */
    SetImageVisible(visible: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether the [DImageButton](https://wiki.facepunch.com/gmod/DImageButton) should keep the aspect ratio of its image. Equivalent of [DImage:SetKeepAspect](https://wiki.facepunch.com/gmod/DImage:SetKeepAspect).
     * 
     * Note that this will not try to fit the image inside the button, but instead it will fill the button with the image.
     * @param keep - true to keep the aspect ratio, false not to
     */
    SetKeepAspect(keep: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets a [Global.Material](https://wiki.facepunch.com/gmod/Global.Material) directly as an image. Equivalent of [DImage:SetMaterial](https://wiki.facepunch.com/gmod/DImage:SetMaterial).
     * @param mat - The material to set
     */
    SetMaterial(mat: IMaterial): void;
    
    /**
     * [Client and Menu]
     * 
     * See [DImage:SetOnViewMaterial](https://wiki.facepunch.com/gmod/DImage:SetOnViewMaterial)
     * @param mat - 
     * @param backup - 
     */
    SetOnViewMaterial(mat: string, backup: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether the image inside the [DImageButton](https://wiki.facepunch.com/gmod/DImageButton) should be stretched to fill the entire size of the button, without preserving aspect ratio.
     * 
     * If set to false, the image will not be resized at all.
     * @param stretch - True to stretch, false to not to stretch
     */
    SetStretchToFit(stretch: boolean): void;

}

/**
 * Uses the [killicon](https://wiki.facepunch.com/gmod/killicon) to persistently draw a killicon.
 */
interface DKillIcon extends Panel {
    

    /**
     * [Client]
     * 
     * Gets the killicon being shown.
     * 
     */
    GetName(): string;
    
    /**
     * [Client]
     * 
     * Sets the killicon to be displayed. You should call [Panel:SizeToContents](https://wiki.facepunch.com/gmod/Panel:SizeToContents) following this.
     * 
     * Killicons can be added with [killicon.Add](https://wiki.facepunch.com/gmod/killicon.Add) and [killicon.AddFont](https://wiki.facepunch.com/gmod/killicon.AddFont).
     * @param iconName - The name of the killicon to be displayed.
     */
    SetName(iconName: string): void;

}

/**
 * A standard Derma text label. A lot of this panels functionality is a base for button elements, such as [DButton](https://wiki.facepunch.com/gmod/DButton)
 */
interface DLabel extends Label {
    

    /**
     * [Client and Menu]
     * 
     * Called when the label is left clicked (on key release) by the player.
     * 
     * This will be called after [DLabel:OnDepressed](https://wiki.facepunch.com/gmod/DLabel:OnDepressed) and [DLabel:OnReleased](https://wiki.facepunch.com/gmod/DLabel:OnReleased).
     * 
     * This can be overridden; by default, it calls [DLabel:Toggle](https://wiki.facepunch.com/gmod/DLabel:Toggle).
     * 
     * See also [DLabel:DoRightClick](https://wiki.facepunch.com/gmod/DLabel:DoRightClick), [DLabel:DoMiddleClick](https://wiki.facepunch.com/gmod/DLabel:DoMiddleClick) and [DLabel:DoDoubleClick](https://wiki.facepunch.com/gmod/DLabel:DoDoubleClick).
     * 
     */
    DoClick(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called just before [DLabel:DoClick](https://wiki.facepunch.com/gmod/DLabel:DoClick).
     * 
     * In [DLabel](https://wiki.facepunch.com/gmod/DLabel) does nothing and is safe to override. Used by [DMenuOption](https://wiki.facepunch.com/gmod/DMenuOption) and [DCollapsibleCategory](https://wiki.facepunch.com/gmod/DCollapsibleCategory)'s tabs.
     * 
     */
    DoClickInternal(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when the label is double clicked by the player with left clicks.
     * 
     * [DLabel:SetDoubleClickingEnabled](https://wiki.facepunch.com/gmod/DLabel:SetDoubleClickingEnabled) must be set to true for this hook to work, which it is by default.
     * 
     * This will be called after [DLabel:OnDepressed](https://wiki.facepunch.com/gmod/DLabel:OnDepressed) and [DLabel:OnReleased](https://wiki.facepunch.com/gmod/DLabel:OnReleased) and [DLabel:DoClick](https://wiki.facepunch.com/gmod/DLabel:DoClick).
     * 
     * See also [DLabel:DoRightClick](https://wiki.facepunch.com/gmod/DLabel:DoRightClick) and [DLabel:DoMiddleClick](https://wiki.facepunch.com/gmod/DLabel:DoMiddleClick).
     * 
     */
    DoDoubleClick(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called just before [DLabel:DoDoubleClick](https://wiki.facepunch.com/gmod/DLabel:DoDoubleClick). In [DLabel](https://wiki.facepunch.com/gmod/DLabel) does nothing and is safe to override.
     * 
     */
    DoDoubleClickInternal(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when the label is middle mouse (Mouse wheel, also known as mouse 3) clicked (on key release) by the player.
     * 
     * This will be called after [DLabel:OnDepressed](https://wiki.facepunch.com/gmod/DLabel:OnDepressed) and [DLabel:OnReleased](https://wiki.facepunch.com/gmod/DLabel:OnReleased).
     * 
     * See also [DLabel:DoClick](https://wiki.facepunch.com/gmod/DLabel:DoClick), [DLabel:DoRightClick](https://wiki.facepunch.com/gmod/DLabel:DoRightClick) and [DLabel:DoDoubleClick](https://wiki.facepunch.com/gmod/DLabel:DoDoubleClick).
     * 
     */
    DoMiddleClick(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when the label is right clicked (on key release) by the player.
     * 
     * This will be called after [DLabel:OnDepressed](https://wiki.facepunch.com/gmod/DLabel:OnDepressed) and [DLabel:OnReleased](https://wiki.facepunch.com/gmod/DLabel:OnReleased).
     * 
     * See also [DLabel:DoClick](https://wiki.facepunch.com/gmod/DLabel:DoClick), [DLabel:DoMiddleClick](https://wiki.facepunch.com/gmod/DLabel:DoMiddleClick) and [DLabel:DoDoubleClick](https://wiki.facepunch.com/gmod/DLabel:DoDoubleClick).
     * 
     */
    DoRightClick(): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the label stretches vertically or not.
     * 
     * Set by [DLabel:SetAutoStretchVertical](https://wiki.facepunch.com/gmod/DLabel:SetAutoStretchVertical).
     * 
     */
    GetAutoStretchVertical(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the [DLabel](https://wiki.facepunch.com/gmod/DLabel) should set its text color to the current skin's bright text color.
     * 
     * See [DLabel:SetBright](https://wiki.facepunch.com/gmod/DLabel:SetBright).
     * 
     */
    GetBright(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the actual color of the text.
     * 
     * See also [DLabel:GetTextColor](https://wiki.facepunch.com/gmod/DLabel:GetTextColor) and [DLabel:GetTextStyleColor](https://wiki.facepunch.com/gmod/DLabel:GetTextStyleColor).
     * 
     */
    GetColor(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the [DLabel](https://wiki.facepunch.com/gmod/DLabel) should set its text color to the current skin's dark text color.
     * 
     * See [DLabel:SetDark](https://wiki.facepunch.com/gmod/DLabel:SetDark).
     * 
     */
    GetDark(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Gets the disabled state of the [DLabel](https://wiki.facepunch.com/gmod/DLabel). This is set with [DLabel:SetDisabled](https://wiki.facepunch.com/gmod/DLabel:SetDisabled).
     * 
     * @deprecated Use [Panel:IsEnabled](https://wiki.facepunch.com/gmod/Panel:IsEnabled) instead.
     * 
     * 
     */
    GetDisabled(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not double clicking will call [DLabel:DoDoubleClick](https://wiki.facepunch.com/gmod/DLabel:DoDoubleClick).
     * 
     * See [DLabel:SetDoubleClickingEnabled](https://wiki.facepunch.com/gmod/DLabel:SetDoubleClickingEnabled).
     * 
     */
    GetDoubleClickingEnabled(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not the panel background is being drawn. Alias of [DLabel:GetPaintBackground](https://wiki.facepunch.com/gmod/DLabel:GetPaintBackground).
     * 
     * @deprecated You should use [DLabel:GetPaintBackground](https://wiki.facepunch.com/gmod/DLabel:GetPaintBackground) instead.
     * 
     * 
     */
    GetDrawBackground(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the current font of the DLabel. This is set with [DLabel:SetFont](https://wiki.facepunch.com/gmod/DLabel:SetFont).
     * 
     */
    GetFont(): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the [DLabel](https://wiki.facepunch.com/gmod/DLabel) should set its text color to the current skin's highlighted text color.
     * 
     * See [DLabel:SetHighlight](https://wiki.facepunch.com/gmod/DLabel:SetHighlight).
     * 
     */
    GetHighlight(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Used internally by [DComboBox](https://wiki.facepunch.com/gmod/DComboBox).
     * 
     * Returns whether the frame is part of a derma menu or not.
     * 
     * If this is `true`, [Global.CloseDermaMenus](https://wiki.facepunch.com/gmod/Global.CloseDermaMenus) will not be called when the frame is clicked, and thus any open menus will remain open.
     * 
     */
    GetIsMenu(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the toggle functionality is enabled for a label. Set with [DLabel:SetIsToggle](https://wiki.facepunch.com/gmod/DLabel:SetIsToggle).
     * 
     */
    GetIsToggle(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not the background should be painted.
     * 
     */
    GetPaintBackground(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the "override" text color, set by [DLabel:SetTextColor](https://wiki.facepunch.com/gmod/DLabel:SetTextColor).
     * 
     */
    GetTextColor(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns the "internal" or fallback color of the text.
     * 
     * See also [DLabel:GetTextColor](https://wiki.facepunch.com/gmod/DLabel:GetTextColor) and [DLabel:SetTextStyleColor](https://wiki.facepunch.com/gmod/DLabel:SetTextStyleColor).
     * 
     */
    GetTextStyleColor(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns the current toggle state of the label. This can be set with [DLabel:SetToggle](https://wiki.facepunch.com/gmod/DLabel:SetToggle) and toggled with [DLabel:Toggle](https://wiki.facepunch.com/gmod/DLabel:Toggle).
     * 
     * In order to use toggle functionality, you must first call [DLabel:SetIsToggle](https://wiki.facepunch.com/gmod/DLabel:SetIsToggle) with `true`, as it is disabled by default.
     * 
     */
    GetToggle(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Called when the player presses the label with any mouse button.
     * 
     * This works as an alternative to [PANEL:OnMousePressed](https://wiki.facepunch.com/gmod/PANEL:OnMousePressed) as that hook is used heavily by [DLabel](https://wiki.facepunch.com/gmod/DLabel) and overriding it will break functionality.
     * 
     * See also [DLabel:DoClick](https://wiki.facepunch.com/gmod/DLabel:DoClick), [DLabel:DoMiddleClick](https://wiki.facepunch.com/gmod/DLabel:DoMiddleClick), [DLabel:DoRightClick](https://wiki.facepunch.com/gmod/DLabel:DoRightClick), [DLabel:OnReleased](https://wiki.facepunch.com/gmod/DLabel:OnReleased) and [DLabel:DoDoubleClick](https://wiki.facepunch.com/gmod/DLabel:DoDoubleClick).
     * 
     */
    OnDepressed(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when the player releases any mouse button on the label. This is always called after [DLabel:OnDepressed](https://wiki.facepunch.com/gmod/DLabel:OnDepressed).
     * 
     * This works as an alternative to [PANEL:OnMouseReleased](https://wiki.facepunch.com/gmod/PANEL:OnMouseReleased) as that hook is used heavily by [DLabel](https://wiki.facepunch.com/gmod/DLabel) and overriding it will break functionality.
     * 
     * See also [DLabel:DoClick](https://wiki.facepunch.com/gmod/DLabel:DoClick), [DLabel:DoMiddleClick](https://wiki.facepunch.com/gmod/DLabel:DoMiddleClick), [DLabel:DoRightClick](https://wiki.facepunch.com/gmod/DLabel:DoRightClick) and [DLabel:DoDoubleClick](https://wiki.facepunch.com/gmod/DLabel:DoDoubleClick).
     * 
     */
    OnReleased(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when the toggle state of the label is changed by [DLabel:Toggle](https://wiki.facepunch.com/gmod/DLabel:Toggle).
     * 
     * In order to use toggle functionality, you must first call [DLabel:SetIsToggle](https://wiki.facepunch.com/gmod/DLabel:SetIsToggle) with `true`, as it is disabled by default.
     * @param toggleState - The new toggle state.
     */
    OnToggled(toggleState: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Automatically adjusts the height of the label dependent of the height of the text inside of it.
     * @param stretch - Whenever to stretch the label vertically or not.
     */
    SetAutoStretchVertical(stretch: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the color of the text to the bright text color defined in the skin.
     * 
     * See also [DLabel:SetDark](https://wiki.facepunch.com/gmod/DLabel:SetDark) and [DLabel:SetHighlight](https://wiki.facepunch.com/gmod/DLabel:SetHighlight).
     * 
     * You should only consider using this if you are using background elements that are not manually painted and are using the skin colors.
     * 
     * @deprecated You really should use [DLabel:SetTextColor](https://wiki.facepunch.com/gmod/DLabel:SetTextColor).
     * 
     * @param bright - Whenever to set the text to bright or not.
     */
    SetBright(bright: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Changes color of label. Alias of [DLabel:SetTextColor](https://wiki.facepunch.com/gmod/DLabel:SetTextColor).
     * @param color - The color to set. Uses the Color structure.
     */
    SetColor(color: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the color of the text to the dark text color defined in the skin.
     * 
     * See also [DLabel:SetBright](https://wiki.facepunch.com/gmod/DLabel:SetBright) and [DLabel:SetHighlight](https://wiki.facepunch.com/gmod/DLabel:SetHighlight).
     * 
     * You should only consider using this if you are using background elements that are not manually painted and are using the skin colors.
     * 
     * @deprecated You really should use [DLabel:SetTextColor](https://wiki.facepunch.com/gmod/DLabel:SetTextColor).
     * 
     * @param dark - Whenever to set the text to dark or not.
     */
    SetDark(dark: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the disabled state of the [DLabel](https://wiki.facepunch.com/gmod/DLabel).
     * 
     * When disabled, the label does not respond to click, toggle or drag & drop actions.
     * 
     * @deprecated Use [Panel:SetEnabled](https://wiki.facepunch.com/gmod/Panel:SetEnabled) instead.
     * 
     * @param disable - `true` to disable the DLabel, `false` to enable it.
     */
    SetDisabled(disable: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not double clicking should call [DLabel:DoDoubleClick](https://wiki.facepunch.com/gmod/DLabel:DoDoubleClick).
     * 
     * This is enabled by default.
     * @param enable - true to enable, false to disable
     */
    SetDoubleClickingEnabled(enable: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not to draw the panel background. Alias of [DLabel:SetPaintBackground](https://wiki.facepunch.com/gmod/DLabel:SetPaintBackground).
     * 
     * @deprecated You should use [DLabel:SetPaintBackground](https://wiki.facepunch.com/gmod/DLabel:SetPaintBackground) instead.
     * 
     * @param draw - True to show the panel's background, false to hide it.
     */
    SetDrawBackground(draw: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the font of the label.
     * @param fontName - The name of the font.
     * See <page text="here">Default_Fonts</page> for a list of existing fonts.
     * Alternatively, use [surface.CreateFont](https://wiki.facepunch.com/gmod/surface.CreateFont) to create your own custom font.
     */
    SetFont(fontName: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the color of the text to the highlight text color defined in the skin.
     * 
     * For the default Derma skin this makes the label red.
     * 
     * See also [DLabel:SetBright](https://wiki.facepunch.com/gmod/DLabel:SetBright) and [DLabel:SetDark](https://wiki.facepunch.com/gmod/DLabel:SetDark).
     * 
     * You should only consider using this if you are using background elements that are not manually painted and are using the skin colors.
     * 
     * @deprecated You really should use [DLabel:SetTextColor](https://wiki.facepunch.com/gmod/DLabel:SetTextColor).
     * 
     * @param highlight - true to set the label's color to skins's text highlight color, false otherwise.
     */
    SetHighlight(highlight: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally by [DComboBox](https://wiki.facepunch.com/gmod/DComboBox).
     * 
     * Sets whether the frame is part of a derma menu or not.
     * 
     * If this is set to `true`, [Global.CloseDermaMenus](https://wiki.facepunch.com/gmod/Global.CloseDermaMenus) will not be called when the frame is clicked, and thus any open menus will remain open.
     * @param isMenu - Whether this pane is a Menu Component
     */
    SetIsMenu(isMenu: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Enables or disables toggle functionality for a label. Retrieved with [DLabel:GetIsToggle](https://wiki.facepunch.com/gmod/DLabel:GetIsToggle).
     * 
     * You must call this before using [DLabel:SetToggle](https://wiki.facepunch.com/gmod/DLabel:SetToggle), [DLabel:GetToggle](https://wiki.facepunch.com/gmod/DLabel:GetToggle) or [DLabel:Toggle](https://wiki.facepunch.com/gmod/DLabel:Toggle).
     * @param allowToggle - Whether or not to enable toggle functionality.
     */
    SetIsToggle(allowToggle: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not the background should be painted. This is mainly used by derivative classes, such as [DButton](https://wiki.facepunch.com/gmod/DButton).
     * @param paint - 
     */
    SetPaintBackground(paint: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the text color of the [DLabel](https://wiki.facepunch.com/gmod/DLabel). This will take precedence over [DLabel:SetTextStyleColor](https://wiki.facepunch.com/gmod/DLabel:SetTextStyleColor).
     * @param color - The text color. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     */
    SetTextColor(color: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * **!**
     * 
     * Used by [DLabel:SetDark](https://wiki.facepunch.com/gmod/DLabel:SetDark), [DLabel:SetBright](https://wiki.facepunch.com/gmod/DLabel:SetBright) and [DLabel:SetHighlight](https://wiki.facepunch.com/gmod/DLabel:SetHighlight) to set the text color without affecting [DLabel:SetTextColor](https://wiki.facepunch.com/gmod/DLabel:SetTextColor) calls.
     * @param color - The text color. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     */
    SetTextStyleColor(color: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the toggle state of the label. This can be retrieved with [DLabel:GetToggle](https://wiki.facepunch.com/gmod/DLabel:GetToggle) and toggled with [DLabel:Toggle](https://wiki.facepunch.com/gmod/DLabel:Toggle).
     * 
     * In order to use toggle functionality, you must first call [DLabel:SetIsToggle](https://wiki.facepunch.com/gmod/DLabel:SetIsToggle) with `true`, as it is disabled by default.
     * @param toggleState - The toggle state to be set.
     */
    SetToggle(toggleState: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Toggles the label's state. This can be set and retrieved with [DLabel:SetToggle](https://wiki.facepunch.com/gmod/DLabel:SetToggle) and [DLabel:GetToggle](https://wiki.facepunch.com/gmod/DLabel:GetToggle).
     * 
     * In order to use toggle functionality, you must first call [DLabel:SetIsToggle](https://wiki.facepunch.com/gmod/DLabel:SetIsToggle) with `true`, as it is disabled by default.
     * 
     */
    Toggle(): void;
    
    /**
     * [Client and Menu]
     * 
     * A hook called from within [PANEL:ApplySchemeSettings](https://wiki.facepunch.com/gmod/PANEL:ApplySchemeSettings) to determine the color of the text on display.
     * @param skin - A table supposed to contain the color values listed above.
     */
    UpdateColours(skin: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Called internally to update the color of the text.
     * 
     */
    UpdateFGColor(): void;

}

/**
 * An editable [DLabel](https://wiki.facepunch.com/gmod/DLabel), double click on it to edit.
 * 
 * 		This is used in the spawnmenu spawnlist headers.
 */
interface DLabelEditable extends DLabel {
    

    /**
     * [Client]
     * 
     * Returns whether the editable label will stretch to the text entered or not.
     * 
     */
    GetAutoStretch(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether this [DLabelEditable](https://wiki.facepunch.com/gmod/DLabelEditable) is being edited or not. (i.e. has focus)
     * 
     */
    IsEditing(): boolean;
    
    /**
     * [Client]
     * 
     * A hook called when the player presses Enter (i.e. the finished editing the label) and the text has changed.
     * 
     * Allows you to override/modify the text that will be set to display.
     * @param txt - The original user input text
     */
    OnLabelTextChanged(txt: string): string;
    
    /**
     * [Client]
     * 
     * Sets whether the editable label should stretch to the text entered or not.
     * @param stretch - Whether the editable label should stretch to the text entered or not.
     */
    SetAutoStretch(stretch: boolean): void;

}

/**
 * Underlined link label without a DoClick function. When a valid URL is set and the label is clicked, it will open a browser window and navigate to the address.
 * 
 * This panel uses [gui.OpenURL](https://wiki.facepunch.com/gmod/gui.OpenURL) internally and its restrictions apply.
 */
interface DLabelURL extends URLLabel {
    

    /**
     * [Client and Menu]
     * 
     * Does absolutely nothing at all.
     * 
     */
    GetAutoStretchVertical(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Gets the current text color of the [DLabelURL](https://wiki.facepunch.com/gmod/DLabelURL). Returns either [DLabelURL:GetTextColor](https://wiki.facepunch.com/gmod/DLabelURL:GetTextColor) or if that is unset -  [DLabelURL:GetTextStyleColor](https://wiki.facepunch.com/gmod/DLabelURL:GetTextStyleColor).
     * 
     */
    GetColor(): any;
    
    /**
     * [Client and Menu]
     * 
     * Gets the current text color of the [DLabelURL](https://wiki.facepunch.com/gmod/DLabelURL) set by [DLabelURL:SetTextColor](https://wiki.facepunch.com/gmod/DLabelURL:SetTextColor).
     * 
     */
    GetTextColor(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns the color set by [DLabelURL:SetTextStyleColor](https://wiki.facepunch.com/gmod/DLabelURL:SetTextStyleColor).
     * 
     */
    GetTextStyleColor(): Color;
    
    /**
     * [Client and Menu]
     * 
     * Does absolutely nothing at all.
     * @param draw - Does nothing.
     */
    SetAutoStretchVertical(draw: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Alias of [DLabelURL:SetTextColor](https://wiki.facepunch.com/gmod/DLabelURL:SetTextColor).
     * @param col - The [Global.Color](https://wiki.facepunch.com/gmod/Global.Color) to use.
     */
    SetColor(col: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the text color of the [DLabelURL](https://wiki.facepunch.com/gmod/DLabelURL). Overrides [DLabelURL:SetTextStyleColor](https://wiki.facepunch.com/gmod/DLabelURL:SetTextStyleColor).
     * 
     * This should only be used immediately after it is created, and otherwise [Panel:SetFGColor](https://wiki.facepunch.com/gmod/Panel:SetFGColor).
     * @param col - The [Global.Color](https://wiki.facepunch.com/gmod/Global.Color) to use.
     */
    SetTextColor(col: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the base text color of the [DLabelURL](https://wiki.facepunch.com/gmod/DLabelURL). This is overridden by [DLabelURL:SetTextColor](https://wiki.facepunch.com/gmod/DLabelURL:SetTextColor).
     * @param color - The [Global.Color](https://wiki.facepunch.com/gmod/Global.Color) to set
     */
    SetTextStyleColor(color: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally to set correct text color via [Panel:SetFGColor](https://wiki.facepunch.com/gmod/Panel:SetFGColor) and [DLabelURL:GetColor](https://wiki.facepunch.com/gmod/DLabelURL:GetColor).
     * 
     */
    UpdateFGColor(): void;

}

/**
 * A simple list box with optional multi-select.  
 * 		As this is deprecated, it is recommended that you use [DListView](https://wiki.facepunch.com/gmod/DListView), which contains the same functionality with multi-column options.
 * 
 * @deprecated Derived from the deprecated [DPanelList](https://wiki.facepunch.com/gmod/DPanelList).
 * 
 */
interface DListBox extends DPanelList {
    

    /**
     * [Client and Menu]
     * 
     * Returns whether the list box can select multiple items.
     * 
     */
    GetMultiple(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns selected items.
     * 
     */
    GetSelectedItems(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns selected item values.
     * 
     */
    GetSelectedValues(): any;
    
    /**
     * [Client and Menu]
     * 
     * Select a [DListBoxItem](https://wiki.facepunch.com/gmod/DListBoxItem) based on its value.
     * @param val - [Panel:GetValue](https://wiki.facepunch.com/gmod/Panel:GetValue) of a [DListBoxItem](https://wiki.facepunch.com/gmod/DListBoxItem) to select.
     */
    SelectByName(val: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally to select a specific panel.
     * @param item - [DListBox](https://wiki.facepunch.com/gmod/DListBox) to select.
     * @param onlyme - Whether to deselect other selected items.
     */
    SelectItem(item: Panel, onlyme: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether the list box can select multiple items.
     * @param multiple - Whether the list box can select multiple items.
     */
    SetMultiple(multiple: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets selected items.
     * @param items - The items to select. A list of [DListBoxItem](https://wiki.facepunch.com/gmod/DListBoxItem).
     */
    SetSelectedItems(items: any): void;

}

/**
 * **	**
 */
interface DListBoxItem extends DLabel {
    

    /**
     * [Client]
     * 
     * Returns the parent "mother" of this **DListBoxItem** set by [DListBoxItem:SetMother](https://wiki.facepunch.com/gmod/DListBoxItem:SetMother).
     * 
     */
    GetMother(): Panel;
    
    /**
     * [Client]
     * 
     * Selects this item.
     * @param onlyMe - Whether to deselect other items.
     */
    Select(onlyMe: boolean): void;
    
    /**
     * [Client]
     * 
     * Sets the "mother" (parent) panel for this item. Done internally by [DListBox:AddItem](https://wiki.facepunch.com/gmod/DListBox:AddItem)
     * @param parent - The "mother" panel to set.
     */
    SetMother(parent: Panel): void;

}

/**
 * A vertical list of panels that optionally allows child elements to be rearranged with the mouse cursor.
 * 
 * Child panels' widths are set to the width of the DListLayout, and it resizes vertically to accommodate the heights of all children. You can place this inside a [DScrollPanel](https://wiki.facepunch.com/gmod/DScrollPanel) when adding many panels.
 * 
 * To enable the drag & drop rearrangement functionality, call [DDragBase:MakeDroppable](https://wiki.facepunch.com/gmod/DDragBase:MakeDroppable) on the DListLayout with a unique identifier. All panels added following this will be moveable.
 */
interface DListLayout extends DDragBase {
    

    

}

/**
 * A data view with rows and columns.
 */
interface DListView extends DPanel {
    

    /**
     * [Client and Menu]
     * 
     * Adds a column to the listview.
     * @param column - The name of the column to add.
     * @param [position = nil] - At which position to insert the new column compared to the other columns. Set to 1 to add the new column before all other columns. 
     * By default the column will be placed after all columns.
     */
    AddColumn(column: string, position?: number): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Adds a line to the list view.
     * @param text - Values for a new row in the DListView, If several arguments are supplied, each argument will correspond to a respective column in the DListView.
     */
    AddLine(...text: any[]): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Clears the current selection in the DListView.
     * 
     */
    ClearSelection(): void;
    
    /**
     * [Client and Menu]
     * 
     * Gets the width of a column.
     * @param column - The column to get the width of.
     */
    ColumnWidth(column: number): number;
    
    /**
     * [Client and Menu]
     * 
     * Creates the lines and gets the height of the contents, in a DListView.
     * 
     */
    DataLayout(): number;
    
    /**
     * [Client and Menu]
     * 
     * Removes the scrollbar.
     * 
     */
    DisableScrollbar(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when a line in the DListView is double clicked.
     * @param lineID - The line number of the double clicked line.
     * @param line - The double clicked [DListView_Line](https://wiki.facepunch.com/gmod/DListView_Line).
     */
    DoDoubleClick(lineID: number, line: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Internal helper function called from the [PANEL:PerformLayout](https://wiki.facepunch.com/gmod/PANEL:PerformLayout) of [DListView](https://wiki.facepunch.com/gmod/DListView).
     * 
     */
    FixColumnsLayout(): void;
    
    /**
     * [Client and Menu]
     * 
     * Gets the canvas.
     * 
     */
    GetCanvas(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Returns the height of the data of the [DListView](https://wiki.facepunch.com/gmod/DListView).
     * 
     * See also [DListView:SetDataHeight](https://wiki.facepunch.com/gmod/DListView:SetDataHeight).
     * 
     */
    GetDataHeight(): number;
    
    /**
     * [Client and Menu]
     * 
     * See [DListView:SetDirty](https://wiki.facepunch.com/gmod/DListView:SetDirty).
     * 
     */
    GetDirty(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the height of the header of the [DListView](https://wiki.facepunch.com/gmod/DListView).
     * 
     * See also [DListView:SetHeaderHeight](https://wiki.facepunch.com/gmod/DListView:SetHeaderHeight).
     * 
     */
    GetHeaderHeight(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the header line should be visible on not.
     * 
     */
    GetHideHeaders(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the height of [DListView:GetCanvas](https://wiki.facepunch.com/gmod/DListView:GetCanvas).
     * 
     * Intended to represent the height of all data lines.
     * 
     */
    GetInnerTall(): number;
    
    /**
     * [Client and Menu]
     * 
     * Gets the [DListView_Line](https://wiki.facepunch.com/gmod/DListView_Line) at the given index.
     * @param id - The index of the line to get.
     */
    GetLine(id: number): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Gets all of the lines added to the DListView.
     * 
     */
    GetLines(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether multiple lines can be selected or not.
     * 
     * See [DListView:SetMultiSelect](https://wiki.facepunch.com/gmod/DListView:SetMultiSelect).
     * 
     */
    GetMultiSelect(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Gets all of the lines that are currently selected.
     * 
     */
    GetSelected(): any;
    
    /**
     * [Client and Menu]
     * 
     * Gets the currently selected [DListView_Line](https://wiki.facepunch.com/gmod/DListView_Line) index.
     * 
     * If [DListView:SetMultiSelect](https://wiki.facepunch.com/gmod/DListView:SetMultiSelect) is set to true, only the first line of all selected lines will be returned. Use [DListView:GetSelected](https://wiki.facepunch.com/gmod/DListView:GetSelected) instead to get all of the selected lines.
     * 
     */
    GetSelectedLine(): LuaMultiReturn<[number, Panel]>;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether sorting of columns by clicking their headers is allowed or not.
     * 
     * See also [DListView:SetSortable](https://wiki.facepunch.com/gmod/DListView:SetSortable).
     * 
     */
    GetSortable(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Converts LineID to SortedID
     * @param lineId - The [DListView_Line:GetID](https://wiki.facepunch.com/gmod/DListView_Line:GetID) of a line to look up
     */
    GetSortedID(lineId: number): number;
    
    /**
     * [Client and Menu]
     * 
     * **!**
     * 
     * Called whenever a line is clicked.
     * @param line - The selected line.
     * @param isSelected - Boolean indicating whether the line is selected.
     */
    OnClickLine(line: Panel, isSelected: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Called from [DListView_Column](https://wiki.facepunch.com/gmod/DListView_Column).
     * @param column - The column which initialized the resize
     * @param size - 
     */
    OnRequestResize(column: Panel, size: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when a row is right-clicked
     * @param lineID - The line ID of the right clicked line
     * @param line - The line panel itself, a [DListView_Line](https://wiki.facepunch.com/gmod/DListView_Line).
     */
    OnRowRightClick(lineID: number, line: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Called internally by [DListView:OnClickLine](https://wiki.facepunch.com/gmod/DListView:OnClickLine) when a line is selected. This is the function you should override to define the behavior when a line is selected.
     * @param rowIndex - The index of the row/line that the user clicked on.
     * @param row - The [DListView_Line](https://wiki.facepunch.com/gmod/DListView_Line) that the user clicked on.
     */
    OnRowSelected(rowIndex: number, row: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Removes a line from the list view.
     * @param line - Removes the given row, by row id (same number as [DListView:GetLine](https://wiki.facepunch.com/gmod/DListView:GetLine)).
     */
    RemoveLine(line: number): void;
    
    /**
     * [undefined]
     * 
     * Selects the line at the first index of the DListView if one has been added.
     * 
     */
    SelectFirstItem(): void;
    
    /**
     * [Client and Menu]
     * 
     * Selects a line in the listview.
     * @param Line - The line to select.
     */
    SelectItem(Line: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the height of all lines of the [DListView](https://wiki.facepunch.com/gmod/DListView) except for the header line.
     * 
     * See also [DListView:SetHeaderHeight](https://wiki.facepunch.com/gmod/DListView:SetHeaderHeight).
     * @param height - The new height to set. Default value is 17.
     */
    SetDataHeight(height: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally to signify if the [DListView](https://wiki.facepunch.com/gmod/DListView) needs a rebuild.
     * @param isDirty - 
     */
    SetDirty(isDirty: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the height of the header line of the [DListView](https://wiki.facepunch.com/gmod/DListView).
     * 
     * See also [DListView:SetDataHeight](https://wiki.facepunch.com/gmod/DListView:SetDataHeight).
     * @param height - The new height to set. Default value is 16.
     */
    SetHeaderHeight(height: number): void;
    
    /**
     * [undefined]
     * 
     * Sets whether the header line should be visible on not.
     * @param hide - Whether the header line should be visible on not.
     */
    SetHideHeaders(hide: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether multiple lines can be selected by the user by using the <key>Ctrl</key> or <key>Shift</key> keys. When set to false, only one line can be selected.
     * @param allowMultiSelect - Whether multiple lines can be selected or not
     */
    SetMultiSelect(allowMultiSelect: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Enables/disables the sorting of columns by clicking.
     * 
     * **Note:**
     * >This will only affect columns that are created after this function is called. Existing columns will be unaffected.
     * 
     * @param isSortable - Whether sorting columns with clicking is allowed or not.
     */
    SetSortable(isSortable: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sorts the items in the specified column.
     * @param columnIndex - The index of the column that should be sorted.
     * @param [descending = false] - Whether the items should be sorted in descending order or not.
     */
    SortByColumn(columnIndex: number, descending = false): void;
    
    /**
     * [Client and Menu]
     * 
     * Sorts the list based on given columns.
     * 
     * All arguments are optional
     * @param [column1 = nil] - 
     * @param [descrending1 = false] - 
     * @param [column2 = nil] - 
     * @param [descrending2 = false] - 
     * @param [column3 = nil] - 
     * @param [descrending3 = false] - 
     * @param [column4 = nil] - 
     * @param [descrending4 = false] - 
     */
    SortByColumns(column1?: number, descrending1 = false, column2?: number, descrending2 = false, column3?: number, descrending3 = false, column4?: number, descrending4 = false): void;

}

/**
 * A single column, used by [DListView](https://wiki.facepunch.com/gmod/DListView).
 */
interface DListView_Column extends Panel {
    

    /**
     * [Client and Menu]
     * 
     * Called when the column is left clicked (on key release) by the client.
     * 
     * See also [DListView_Column:DoRightClick](https://wiki.facepunch.com/gmod/DListView_Column:DoRightClick).
     * 
     */
    DoClick(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when the column is right clicked (on key release) by the client.
     * 
     * See also [DListView_Column:DoClick](https://wiki.facepunch.com/gmod/DListView_Column:DoClick).
     * 
     */
    DoRightClick(): void;
    
    /**
     * [Client and Menu]
     * 
     * Gets the index used for this column.
     * 
     */
    GetColumnID(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the column is sorted in descending order or not.
     * 
     */
    GetDescending(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the fixed width of this column.
     * 
     */
    GetFixedWidth(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the maximum width set with [DListView_Column:SetMaxWidth](https://wiki.facepunch.com/gmod/DListView_Column:SetMaxWidth).
     * 
     */
    GetMaxWidth(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the minimum width set with [DListView_Column:SetMinWidth](https://wiki.facepunch.com/gmod/DListView_Column:SetMinWidth).
     * 
     */
    GetMinWidth(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the text alignment for the column
     * 
     */
    GetTextAlign(): number;
    
    /**
     * [Client and Menu]
     * 
     * Resizes the column, additionally adjusting the size of the column to the right, if any.
     * @param size - The amount to add to the current column's width.
     * 			Positive values will make it wider, and negative values will make it thinner.
     */
    ResizeColumn(size: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the index used for this column.
     * @param index - The column index of the [DListView_Column](https://wiki.facepunch.com/gmod/DListView_Column).
     */
    SetColumnID(index: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether the column is sorted in descending order or not.
     * @param desc - Whether the column is sorted in descending order or not.
     */
    SetDescending(desc: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the fixed width of the column.
     * 
     * **Note:**
     * >Internally this will setandto the value provided
     * 
     * @param width - The number value which will determine a fixed width.
     */
    SetFixedWidth(width: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the maximum width of a column.
     * @param width - The number value which will determine a maximum width.
     */
    SetMaxWidth(width: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the minimum width of a column.
     * @param width - The number value which will determine a minimum width.
     */
    SetMinWidth(width: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the text in the column's header.
     * @param name - The new name that the column's header will use.
     */
    SetName(name: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the text alignment for the column
     * @param alignment - The direction of the content, based on the number pad.
     * |   |   |   |
     * | --- | --- | --- |
     * | <key>7</key>: **top-left** | <key>8</key>: **top-center**	| <key>9</key>: **top-right** |
     * | <key>4</key>: **middle-left** | <key>5</key>: **center** | <key>6</key>: **middle-right** |
     * | <key>1</key>: **bottom-left** | <key>2</key>: **bottom-center** | <key>3</key>: **bottom-right** |
     */
    SetTextAlign(alignment: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the width of the panel.
     * @param width - The number value which will determine panel width.
     */
    SetWidth(width: number): void;

}

/**
 * **	**
 */
interface DListView_ColumnPlain extends DListView_Column {
    

    

}

/**
 * **.**
 */
interface DListView_DraggerBar extends DButton {
    

    

}

/**
 * A panel used by [DListView](https://wiki.facepunch.com/gmod/DListView)
 */
interface DListView_Line extends Panel {
    

    /**
     * [Client and Menu]
     * 
     * Called by [DListView:DataLayout](https://wiki.facepunch.com/gmod/DListView:DataLayout)
     * @param pnl - The list view.
     */
    DataLayout(pnl: DListView): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether this line is odd or even in the list. This is internally used (and set) to change the looks of every other line.
     * 
     */
    GetAltLine(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Gets the string held in the specified column of a [DListView_Line](https://wiki.facepunch.com/gmod/DListView_Line) panel.
     * 
     * This is the same thing as doing <page text="DListView_Line:GetValue">Panel:GetValue</page>( column_number ).
     * @param column - The number of the column to retrieve the text from, starts with 1.
     */
    GetColumnText(column: number): string;
    
    /**
     * [undefined]
     * 
     * Returns the ID of this line, set automatically in [DListView:AddLine](https://wiki.facepunch.com/gmod/DListView:AddLine).
     * 
     */
    GetID(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the parent [DListView](https://wiki.facepunch.com/gmod/DListView) of this line.
     * 
     */
    GetListView(): DListView;
    
    /**
     * [Client and Menu]
     * 
     * Returns the data stored on given cell of this line.
     * 
     * 	Used in the [DListView:SortByColumn](https://wiki.facepunch.com/gmod/DListView:SortByColumn) function in case you want to sort with something else than the text.
     * @param column - The number of the column to write the text from, starts with 1.
     */
    GetSortValue(column: number): any;
    
    /**
     * [Client and Menu]
     * 
     * Alias of [DListView_Line:GetColumnText](https://wiki.facepunch.com/gmod/DListView_Line:GetColumnText). Overrides [Panel:GetValue](https://wiki.facepunch.com/gmod/Panel:GetValue).
     * @param column - The number of the column to retrieve the text from, starts with 1.
     */
    GetValue(column: number): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether this line is selected.
     * 
     */
    IsLineSelected(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Called when the player right clicks this line.
     * 
     */
    OnRightClick(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when the player selects this line.
     * 
     */
    OnSelect(): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether this line is odd or even in the list. This is internally used (and set automatically) to change the looks of every other line.
     * @param alt - Whether this line is 'alternative'.
     */
    SetAltLine(alt: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the string held in the specified column of a [DListView_Line](https://wiki.facepunch.com/gmod/DListView_Line) panel.
     * @param column - The number of the column to write the text from, starts with 1.
     * @param value - Column text you want to set
     */
    SetColumnText(column: number, value: string): DLabel;
    
    /**
     * [undefined]
     * 
     * Sets the ID of this line, used internally by [DListView:AddLine](https://wiki.facepunch.com/gmod/DListView:AddLine).
     * @param id - The ID for this line.
     */
    SetID(id: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the parent [DListView](https://wiki.facepunch.com/gmod/DListView) for this line. Used internally by [DListView:AddLine](https://wiki.facepunch.com/gmod/DListView:AddLine).
     * @param pnl - The new parent [DListView](https://wiki.facepunch.com/gmod/DListView) for this line.
     */
    SetListView(pnl: DListView): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether this line is selected or not.
     * @param selected - Whether this line is selected.
     */
    SetSelected(selected: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Allows you to store data per column.
     * 
     * 	Used in the [DListView:SortByColumn](https://wiki.facepunch.com/gmod/DListView:SortByColumn) function in case you want to sort with something else than the text.
     * @param column - The number of the column to write the text from, starts with 1.
     * @param data - Data for given column on the line you wish to set.
     */
    SetSortValue(column: number, data: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Alias of [DListView_Line:SetColumnText](https://wiki.facepunch.com/gmod/DListView_Line:SetColumnText).
     * @param column - The number of the column to write the text from, starts with 1.
     * @param value - Column text you want to set
     */
    SetValue(column: number, value: string): DLabel;

}

/**
 * **.**
 */
interface DListViewHeaderLabel extends DLabel {
    

    

}

/**
 * **	**
 */
interface DListViewLabel extends DLabel {
    

    

}

/**
 * **	**
 */
interface DListViewLine extends Panel {
    

    

}

/**
 * A simple menu with sub menu, icon and convar support.
 */
interface DMenu extends DScrollPanel {
    

    /**
     * [Client and Menu]
     * 
     * Creates a [DMenuOptionCVar](https://wiki.facepunch.com/gmod/DMenuOptionCVar) and adds it as an option into the menu. Checking and unchecking the option will alter the given console variable's value.
     * @param strText - The text of the button
     * @param convar - The console variable to change
     * @param on - The value of the console variable to set when the option is checked
     * @param off - The value of the console variable to set when the option is unchecked
     * @param [funcFunction = nil] - If set, the function will be called every time the option is pressed/clicked/selected.
     * It will have only one argument:
     * [Panel](https://wiki.facepunch.com/gmod/Panel) pnl - The created [DMenuOptionCVar](https://wiki.facepunch.com/gmod/DMenuOptionCVar)
     */
    AddCVar(strText: string, convar: string, on: string, off: string, funcFunction?: Function): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Add an option to the DMenu
     * @param name - Name of the option.
     * @param [func = nil] - Function to execute when this option is clicked.
     */
    AddOption(name: string, func?: Function): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Adds a panel to the [DMenu](https://wiki.facepunch.com/gmod/DMenu) as if it were an option.
     * 
     * This invokes [DScrollPanel:AddItem](https://wiki.facepunch.com/gmod/DScrollPanel:AddItem) and will not create a new panel if a class name is passed, unlike [Panel:Add](https://wiki.facepunch.com/gmod/Panel:Add).
     * @param pnl - The panel that you want to add.
     */
    AddPanel(pnl: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Adds a horizontal line spacer.
     * 
     */
    AddSpacer(): void;
    
    /**
     * [Client and Menu]
     * 
     * Add a sub menu to the DMenu
     * @param Name - Name of the sub menu.
     * @param [func = nil] - Function to execute when this sub menu is clicked.
     */
    AddSubMenu(Name: string, func?: Function): LuaMultiReturn<[Panel, Panel]>;
    
    /**
     * [Client and Menu]
     * 
     * Returns the number of child elements of [DMenu](https://wiki.facepunch.com/gmod/DMenu)'s [DScrollPanel:GetCanvas](https://wiki.facepunch.com/gmod/DScrollPanel:GetCanvas).
     * 
     */
    ChildCount(): number;
    
    /**
     * [Client and Menu]
     * 
     * Clears all highlights made by [DMenu:HighlightItem](https://wiki.facepunch.com/gmod/DMenu:HighlightItem).
     * 
     * Doesn't appear to be used or do anything.
     * 
     */
    ClearHighlights(): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally by [DMenu:OpenSubMenu](https://wiki.facepunch.com/gmod/DMenu:OpenSubMenu).
     * @param menu - The menu to close
     */
    CloseSubMenu(menu: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Gets a child by its index.
     * @param childIndex - The index of the child to get.
     * **Note:**
     * >Unlike [Panel:GetChild](https://wiki.facepunch.com/gmod/Panel:GetChild), this index starts at 1.
     * 
     */
    GetChild(childIndex: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Set by [DMenu:SetDeleteSelf](https://wiki.facepunch.com/gmod/DMenu:SetDeleteSelf)
     * 
     */
    GetDeleteSelf(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the value set by [DMenu:SetDrawBorder](https://wiki.facepunch.com/gmod/DMenu:SetDrawBorder).
     * 
     */
    GetDrawBorder(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the [DMenu](https://wiki.facepunch.com/gmod/DMenu) should draw the icon column with a different color or not.
     * 
     * See [DMenu:SetDrawColumn](https://wiki.facepunch.com/gmod/DMenu:SetDrawColumn)
     * 
     */
    GetDrawColumn(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the maximum height of the [DMenu](https://wiki.facepunch.com/gmod/DMenu).
     * 
     */
    GetMaxHeight(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the minimum width of the [DMenu](https://wiki.facepunch.com/gmod/DMenu) in pixels
     * 
     */
    GetMinimumWidth(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the currently opened submenu.
     * 
     * Used internally to store the open submenu by [DMenu:Hide](https://wiki.facepunch.com/gmod/DMenu:Hide), [DMenu:OpenSubMenu](https://wiki.facepunch.com/gmod/DMenu:OpenSubMenu).
     * 
     */
    GetOpenSubMenu(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Used to safely hide (not remove) the menu. This will also hide any opened submenues recursively.
     * 
     */
    Hide(): void;
    
    /**
     * [Client and Menu]
     * 
     * Highlights selected item in the [DMenu](https://wiki.facepunch.com/gmod/DMenu) by setting the item's key "Highlight" to true.
     * 
     * Doesn't appear to be working or used.
     * @param item - The item to highlight.
     */
    HighlightItem(item: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Opens the DMenu at the current mouse position
     * @param [x = gui.MouseX()] - Position (X coordinate) to open the menu at.
     * @param [y = gui.MouseY()] - Position (Y coordinate) to open the menu at.
     * @param [skipanimation = nil] - This argument does nothing.
     * @param [ownerpanel = nil] - If `x` and `y` are not set manually, setting this argument will offset the `y` position of the opened menu by the height of given panel.
     */
    Open(x?: number, y?: number, skipanimation?: any, ownerpanel?: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Closes any active sub menus, and opens a new one.
     * @param item - The [DMenuOption](https://wiki.facepunch.com/gmod/DMenuOption) to open the submenu at
     * @param [menu = nil] - The submenu to open. If set to nil, the function just closes existing submenus.
     */
    OpenSubMenu(item: Panel, menu?: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when a option has been selected
     * @param option - The [DMenuOption](https://wiki.facepunch.com/gmod/DMenuOption) that was selected
     * @param optionText - The options text
     */
    OptionSelected(option: Panel, optionText: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Called by [DMenuOption](https://wiki.facepunch.com/gmod/DMenuOption). Calls [DMenu:OptionSelected](https://wiki.facepunch.com/gmod/DMenu:OptionSelected).
     * @param option - The [DMenuOption](https://wiki.facepunch.com/gmod/DMenuOption) that called this function
     */
    OptionSelectedInternal(option: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Set to true by default. IF set to true, the menu will be deleted when it is closed, not simply hidden.
     * 
     * This is used by [DMenuBar](https://wiki.facepunch.com/gmod/DMenuBar)
     * @param newState - true to delete menu on close, false to simply hide.
     */
    SetDeleteSelf(newState: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Does nothing.
     * @param bool - 
     */
    SetDrawBorder(bool: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether the [DMenu](https://wiki.facepunch.com/gmod/DMenu) should draw the icon column with a different color.
     * @param draw - Whether to draw the column or not
     */
    SetDrawColumn(draw: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the maximum height the [DMenu](https://wiki.facepunch.com/gmod/DMenu) can have. If the height of all menu items exceed this value, a scroll bar will be automatically added.
     * @param maxHeight - The maximum height of the [DMenu](https://wiki.facepunch.com/gmod/DMenu) to set, in pixels
     */
    SetMaxHeight(maxHeight: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the minimum width of the [DMenu](https://wiki.facepunch.com/gmod/DMenu). The menu will be stretched to match the given value.
     * @param minWidth - The minimum width of the [DMenu](https://wiki.facepunch.com/gmod/DMenu) in pixels
     */
    SetMinimumWidth(minWidth: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally to store the open submenu by [DMenu:Hide](https://wiki.facepunch.com/gmod/DMenu:Hide), [DMenu:OpenSubMenu](https://wiki.facepunch.com/gmod/DMenu:OpenSubMenu), [DMenu:CloseSubMenu](https://wiki.facepunch.com/gmod/DMenu:CloseSubMenu)
     * @param item - The menu to store
     */
    SetOpenSubMenu(item: Panel): void;

}

/**
 * A simple Derma MenuBar
 */
interface DMenuBar extends DPanel {
    

    /**
     * [Client and Menu]
     * 
     * Creates a new [DMenu](https://wiki.facepunch.com/gmod/DMenu) object tied to a [DButton](https://wiki.facepunch.com/gmod/DButton) with the given label on the menu bar.
     * 
     * This will create a new menu regardless of whether or not one with the same label exists. To add **or** get a menu, use [DMenuBar:AddOrGetMenu](https://wiki.facepunch.com/gmod/DMenuBar:AddOrGetMenu).
     * @param label - The name (label) of the derma menu to create.
     */
    AddMenu(label: string): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Retrieves a [DMenu](https://wiki.facepunch.com/gmod/DMenu) object from the menu bar. If one with the given label doesn't exist, a new one is created.
     * 
     * To add a DMenu without checking, use [DMenuBar:AddMenu](https://wiki.facepunch.com/gmod/DMenuBar:AddMenu).
     * @param label - The name (label) of the derma menu to get or create.
     */
    AddOrGetMenu(label: string): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Returns the DMenuBar's background color
     * 
     */
    GetBackgroundColor(): Color;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not the DMenuBar is disabled
     * 
     */
    GetDisabled(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not the background should be painted. Is the same as [DMenuBar:GetPaintBackground](https://wiki.facepunch.com/gmod/DMenuBar:GetPaintBackground)
     * 
     * @deprecated Use [DMenuBar:GetPaintBackground](https://wiki.facepunch.com/gmod/DMenuBar:GetPaintBackground) instead.
     * 
     * 
     */
    GetDrawBackground(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not the panel is a menu. Used for closing menus when another panel is selected.
     * 
     */
    GetIsMenu(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * If a menu is visible/opened, then the menu is returned.
     * 
     */
    GetOpenMenu(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not the background should be painted. Is the same as [DMenuBar:GetDrawBackground](https://wiki.facepunch.com/gmod/DMenuBar:GetDrawBackground)
     * 
     */
    GetPaintBackground(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Sets the background color
     * @param color - See [Color](https://wiki.facepunch.com/gmod/Color)
     */
    SetBackgroundColor(color: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not the panel is disabled
     * @param disable - Should be disabled or not
     */
    SetDisabled(disable: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not the background should be painted. Is the same as [DMenuBar:SetPaintBackground](https://wiki.facepunch.com/gmod/DMenuBar:SetPaintBackground)
     * 
     * @deprecated Use [DMenuBar:SetPaintBackground](https://wiki.facepunch.com/gmod/DMenuBar:SetPaintBackground)
     * 
     * @param shouldPaint - Should the background be painted
     */
    SetDrawBackground(shouldPaint: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not the panel is part of a DMenu.
     * 
     * If this is set to `true`, [Global.CloseDermaMenus](https://wiki.facepunch.com/gmod/Global.CloseDermaMenus) will not be called when the panel is clicked, and thus any open menus will remain open.
     * @param isMenu - Is this a menu
     */
    SetIsMenu(isMenu: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not the background should be painted. Is the same as [DMenuBar:SetDrawBackground](https://wiki.facepunch.com/gmod/DMenuBar:SetDrawBackground)
     * @param shouldPaint - Should the background be painted
     */
    SetPaintBackground(shouldPaint: boolean): void;

}

/**
 * Internal subpanel that represents an option used by [DMenu](https://wiki.facepunch.com/gmod/DMenu).
 */
interface DMenuOption extends DButton {
    

    /**
     * [Client and Menu]
     * 
     * Creates a sub [DMenu](https://wiki.facepunch.com/gmod/DMenu) and returns it. Has no duplicate call protection.
     * 
     */
    AddSubMenu(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Returns the checked state of [DMenuOption](https://wiki.facepunch.com/gmod/DMenuOption).
     * 
     */
    GetChecked(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the [DMenuOption](https://wiki.facepunch.com/gmod/DMenuOption) is a checkbox option or a normal button option.
     * 
     */
    GetIsCheckable(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns which [DMenu](https://wiki.facepunch.com/gmod/DMenu) this option belongs.
     * 
     */
    GetMenu(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Called whenever the [DMenuOption](https://wiki.facepunch.com/gmod/DMenuOption)'s checked state changes.
     * @param checked - The new checked state
     */
    OnChecked(checked: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the checked state of the [DMenuOption](https://wiki.facepunch.com/gmod/DMenuOption). Does not invoke [DMenuOption:OnChecked](https://wiki.facepunch.com/gmod/DMenuOption:OnChecked).
     * @param checked - `true` to set as checked.
     */
    SetChecked(checked: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether the [DMenuOption](https://wiki.facepunch.com/gmod/DMenuOption) is a checkbox option or a normal button option.
     * @param checkable - 
     */
    SetIsCheckable(checkable: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Used to set the [DMenu](https://wiki.facepunch.com/gmod/DMenu) for this option.
     * @param pnl - The [DMenu](https://wiki.facepunch.com/gmod/DMenu) for this option.
     */
    SetMenu(pnl: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally by [DMenuOption:AddSubMenu](https://wiki.facepunch.com/gmod/DMenuOption:AddSubMenu) to create the submenu arrow and assign the created submenu to be opened when this option is hovered.
     * @param menu - The sub [DMenu](https://wiki.facepunch.com/gmod/DMenu) this option belongs to.
     */
    SetSubMenu(menu: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Toggles the checked state of [DMenuOption](https://wiki.facepunch.com/gmod/DMenuOption). Does not respect [DMenuOption:GetIsCheckable](https://wiki.facepunch.com/gmod/DMenuOption:GetIsCheckable).
     * 
     */
    ToggleCheck(): void;

}

/**
 * An internal panel used by [DMenu](https://wiki.facepunch.com/gmod/DMenu).
 * 		It acts as a menu option that can be checked.
 * 		It automatically sets and reads the given console variable.
 * 
 * 		It can be right clicked to toggle without closing the [DMenu](https://wiki.facepunch.com/gmod/DMenu).
 * 
 * 		Use [DMenu:AddCVar](https://wiki.facepunch.com/gmod/DMenu:AddCVar) instead.
 */
interface DMenuOptionCVar extends DMenuOption {
    

    /**
     * [Client]
     * 
     * Returns the <page text="console variable">ConVars</page> used by the [DMenuOptionCVar](https://wiki.facepunch.com/gmod/DMenuOptionCVar).
     * 
     */
    GetConVar(): string;
    
    /**
     * [Client]
     * 
     * Returns the value of the <page text="console variable">ConVars</page> when the [DMenuOptionCVar](https://wiki.facepunch.com/gmod/DMenuOptionCVar) is not checked.
     * 
     */
    GetValueOff(): string;
    
    /**
     * [Client]
     * 
     * Return the value of the <page text="console variable">ConVars</page> when the [DMenuOptionCVar](https://wiki.facepunch.com/gmod/DMenuOptionCVar) is checked.
     * 
     */
    GetValueOn(): string;
    
    /**
     * [Client]
     * 
     * Sets the <page text="console variable">ConVars</page> to be used by [DMenuOptionCVar](https://wiki.facepunch.com/gmod/DMenuOptionCVar).
     * @param cvar - The <page text="console variable">ConVars</page> name to set
     */
    SetConVar(cvar: string): void;
    
    /**
     * [Client]
     * 
     * Sets the value of the <page text="console variable">ConVars</page> when the [DMenuOptionCVar](https://wiki.facepunch.com/gmod/DMenuOptionCVar) is not checked.
     * @param value - The value
     */
    SetValueOff(value: string): void;
    
    /**
     * [Client]
     * 
     * Sets the value of the <page text="console variable">ConVars</page> when the [DMenuOptionCVar](https://wiki.facepunch.com/gmod/DMenuOptionCVar) is checked.
     * @param value - The value
     */
    SetValueOn(value: string): void;

}

/**
 * DModelPanel is a VGUI element that projects a 3D model onto a 2D plane.
 */
interface DModelPanel extends DButton {
    

    /**
     * [Client]
     * 
     * Used by the DModelPanel's paint hook to draw the model and background.
     * 
     */
    DrawModel(): void;
    
    /**
     * [Client]
     * 
     * Returns the ambient lighting used on the rendered entity.
     * 
     */
    GetAmbientLight(): any;
    
    /**
     * [Client]
     * 
     * Returns whether or not the panel entity should be animated when the default [DModelPanel:LayoutEntity](https://wiki.facepunch.com/gmod/DModelPanel:LayoutEntity) function is called.
     * 
     */
    GetAnimated(): boolean;
    
    /**
     * [Client]
     * 
     * Returns the animation speed of the panel entity, see [DModelPanel:SetAnimSpeed](https://wiki.facepunch.com/gmod/DModelPanel:SetAnimSpeed).
     * 
     */
    GetAnimSpeed(): number;
    
    /**
     * [Client]
     * 
     * Returns the position of the model viewing camera.
     * 
     */
    GetCamPos(): Vector;
    
    /**
     * [Client]
     * 
     * Returns the color of the rendered entity.
     * 
     */
    GetColor(): Color;
    
    /**
     * [Client]
     * 
     * Returns the entity being rendered by the model panel.
     * 
     */
    GetEntity(): CSEnt;
    
    /**
     * [Client]
     * 
     * Returns the FOV (field of view) the camera is using.
     * 
     */
    GetFOV(): number;
    
    /**
     * [Client]
     * 
     * Returns the angles of the model viewing camera. Is **nil** until changed with [DModelPanel:SetLookAng](https://wiki.facepunch.com/gmod/DModelPanel:SetLookAng).
     * 
     */
    GetLookAng(): Angle;
    
    /**
     * [Client]
     * 
     * Returns the position the viewing camera is pointing toward.
     * 
     */
    GetLookAt(): Vector;
    
    /**
     * [Client]
     * 
     * Gets the model of the rendered entity.
     * 
     */
    GetModel(): string;
    
    /**
     * [Client]
     * 
     * By default, this function slowly rotates and animates the entity being rendered.
     * 
     * If you want to change this behavior, you should override it.
     * @param entity - The entity that is being rendered.
     */
    LayoutEntity(entity: Entity): void;
    
    /**
     * [Client]
     * 
     * Called when the entity of the [DModelPanel](https://wiki.facepunch.com/gmod/DModelPanel) was drawn.
     * 
     * This is a rendering hook with 3d drawing context.
     * @param ent - The clientside entity of the [DModelPanel](https://wiki.facepunch.com/gmod/DModelPanel) that has been drawn.
     */
    PostDrawModel(ent: Entity): void;
    
    /**
     * [Client]
     * 
     * Called **before** the entity of the [DModelPanel](https://wiki.facepunch.com/gmod/DModelPanel) is drawn.
     * @param ent - The clientside entity of the [DModelPanel](https://wiki.facepunch.com/gmod/DModelPanel) that has been drawn.
     */
    PreDrawModel(ent: Entity): boolean;
    
    /**
     * [Client]
     * 
     * This function is used in [DModelPanel:LayoutEntity](https://wiki.facepunch.com/gmod/DModelPanel:LayoutEntity). It will progress the animation, set using [Entity:SetSequence](https://wiki.facepunch.com/gmod/Entity:SetSequence). By default, it is the walking animation.
     * 
     */
    RunAnimation(): void;
    
    /**
     * [Client]
     * 
     * Sets the ambient lighting used on the rendered entity.
     * @param color - The color of the ambient lighting.
     */
    SetAmbientLight(color: any): void;
    
    /**
     * [Client]
     * 
     * Sets whether or not to animate the entity when the default [DModelPanel:LayoutEntity](https://wiki.facepunch.com/gmod/DModelPanel:LayoutEntity) is called.
     * @param animated - True to animate, false otherwise.
     */
    SetAnimated(animated: boolean): void;
    
    /**
     * [Client]
     * 
     * Sets the speed used by [DModelPanel:RunAnimation](https://wiki.facepunch.com/gmod/DModelPanel:RunAnimation) to advance frame on an entity sequence.
     * 
     * **Note:**
     * >[Entity:FrameAdvance](https://wiki.facepunch.com/gmod/Entity:FrameAdvance) doesn't seem to have any functioning arguments and therefore changing this will not have any affect on the panel entity's sequence speed without reimplementation. It only affects the value returned by [DModelPanel:GetAnimSpeed](https://wiki.facepunch.com/gmod/DModelPanel:GetAnimSpeed)
     * 
     * @param animSpeed - The animation speed.
     */
    SetAnimSpeed(animSpeed: number): void;
    
    /**
     * [Client]
     * 
     * Sets the position of the camera.
     * @param pos - The position to set the camera at.
     */
    SetCamPos(pos: Vector): void;
    
    /**
     * [Client]
     * 
     * Sets the color of the rendered entity.
     * 
     * **Note:**
     * >This does not work on Garry's Mod player models since they use a different color system. To modify a player model color, see Example 2 on the [DModelPanel](https://wiki.facepunch.com/gmod/DModelPanel) page
     * 
     * @param color - The render color of the entity.
     */
    SetColor(color: any): void;
    
    /**
     * [Client]
     * 
     * Sets the directional lighting used on the rendered entity.
     * @param direction - The light direction, see [Enums/BOX](https://wiki.facepunch.com/gmod/Enums/BOX).
     * @param color - The color of the directional lighting.
     */
    SetDirectionalLight(direction: BOX, color: any): void;
    
    /**
     * [Client]
     * 
     * Sets the entity to be rendered by the model panel.
     * 
     * **Note:**
     * >If you set `ent` to a shared entity you must set `ent` to nil before removing this panel or else a "Trying to remove server entity on client!" error is thrown
     * 
     * @param ent - The new panel entity.
     */
    SetEntity(ent: Entity): void;
    
    /**
     * [Client]
     * 
     * Sets the panel camera's FOV (field of view).
     * @param fov - The field of view value.
     */
    SetFOV(fov: number): void;
    
    /**
     * [Client]
     * 
     * Sets the angles of the camera.
     * @param ang - The angles to set the camera to.
     */
    SetLookAng(ang: Angle): void;
    
    /**
     * [Client]
     * 
     * Makes the panel's camera face the given position. Basically sets the camera's angles ([DModelPanel:SetLookAng](https://wiki.facepunch.com/gmod/DModelPanel:SetLookAng)) after doing some math.
     * @param pos - The position to orient the camera toward.
     */
    SetLookAt(pos: Vector): void;
    
    /**
     * [Client]
     * 
     * Sets the model of the rendered entity.
     * 
     * **Note:**
     * >This function may give a different model than expected. This is not a bug, however this problem may appear with some player models which are renamed several times in a wrong way. To solve that, you can use [Entity:SetModel](https://wiki.facepunch.com/gmod/Entity:SetModel) and [Entity:SetModelName](https://wiki.facepunch.com/gmod/Entity:SetModelName) on the internal panel entity. More information : https://github.com/Facepunch/garrysmod-issues/issues/4534.
     * 
     * @param model - The model to apply to the entity.
     */
    SetModel(model: string): void;
    
    /**
     * [Client]
     * 
     * Runs a [Global.ClientsideScene](https://wiki.facepunch.com/gmod/Global.ClientsideScene) on the panel's entity.
     * @param path - The path to the scene file. (.vcd)
     */
    StartScene(path: string): void;

}

/**
 * A vertical list of models.
 * 
 * @deprecated This is derived from the deprecated [DPanelList](https://wiki.facepunch.com/gmod/DPanelList).
 * 
 */
interface DModelSelect extends DPanelSelect {
    

    /**
     * [Client]
     * 
     * Sets the height of the panel **in the amount of 64px spawnicons**.
     * 
     * Overrides [Panel:SetHeight](https://wiki.facepunch.com/gmod/Panel:SetHeight).
     * @param [num = 2] - Basically how many rows of 64x64 px spawnicons should fit in this DModelSelect
     */
    SetHeight(num = 2): void;
    
    /**
     * [Client]
     * 
     * Called to set the list of models within the panel element.
     * @param models - Each key is a model path, the value is a kay-value table where they key is a convar name and value is the value to set to that convar.
     * @param convar - [ConVar](https://wiki.facepunch.com/gmod/ConVar) to set when a model from this list is selected.
     * @param dontSort - Do not sort the list. (by the `Model` member)
     * @param dontCallListConVars - If set, only the `convar` from the 2nd argument will be set, not individual convars from the models list.
     */
    SetModelList(models: any, convar: string, dontSort: boolean, dontCallListConVars: boolean): void;

}

/**
 * A combination of [DModelSelect](https://wiki.facepunch.com/gmod/DModelSelect) and [DPropertySheet](https://wiki.facepunch.com/gmod/DPropertySheet).
 */
interface DModelSelectMulti extends DPropertySheet {
    

    /**
     * [Client and Menu]
     * 
     * Adds a new tab of models.
     * @param name - Name of the tab to add.
     * @param models - Models list for this tab. See [DModelSelect:SetModelList](https://wiki.facepunch.com/gmod/DModelSelect:SetModelList).
     * @param convar - [ConVar](https://wiki.facepunch.com/gmod/ConVar) to set when a model from this list is selected.
     * @param dontSort - Do not sort the list. (by the `Model` member)
     * @param dontCallListConVars - If set, only the `convar` from the 2nd argument will be set, not individual convars from the models list.
     */
    AddModelList(name: string, models: any, convar: string, dontSort: boolean, dontCallListConVars: boolean): void;

}

/**
 * A panel that fades its contents in and out once, like a notification.
 */
interface DNotify extends Panel {
    

    /**
     * [Client]
     * 
     * Adds a panel to the notification
     * @param pnl - The panel to add
     * @param [lifeLength = nil] - If set, overrides [DNotify:SetLife](https://wiki.facepunch.com/gmod/DNotify:SetLife) for when the given panel should be removed.
     */
    AddItem(pnl: Panel, lifeLength?: number): void;
    
    /**
     * [Client]
     * 
     * Returns the current alignment of this notification panel. Set by [DNotify:SetAlignment](https://wiki.facepunch.com/gmod/DNotify:SetAlignment).
     * 
     */
    GetAlignment(): number;
    
    /**
     * [Client]
     * 
     * Returns all the items added with [DNotify:AddItem](https://wiki.facepunch.com/gmod/DNotify:AddItem).
     * 
     */
    GetItems(): any;
    
    /**
     * [Client]
     * 
     * Returns the display time in seconds of the DNotify. This is set with 
     * [DNotify:SetLife](https://wiki.facepunch.com/gmod/DNotify:SetLife).
     * 
     */
    GetLife(): number;
    
    /**
     * [Client]
     * 
     * Returns the spacing between items set by [DNotify:SetSpacing](https://wiki.facepunch.com/gmod/DNotify:SetSpacing).
     * 
     */
    GetSpacing(): number;
    
    /**
     * [Client]
     * 
     * Sets the alignment of the child panels in the notification
     * @param alignment - It's the Numpad alignment, 6 is right, 9 is top left, etc.
     */
    SetAlignment(alignment: number): void;
    
    /**
     * [Client]
     * 
     * Sets the display time in seconds for the DNotify.
     * @param time - The time in seconds.
     */
    SetLife(time: number): void;
    
    /**
     * [Client]
     * 
     * Sets the spacing between child elements of the notification panel.
     * @param spacing - 
     */
    SetSpacing(spacing: number): void;
    
    /**
     * [Client]
     * 
     * Used internally to position and fade in/out its [DNotify:GetItems](https://wiki.facepunch.com/gmod/DNotify:GetItems).
     * 
     */
    Shuffle(): void;

}

/**
 * Choose a number from a number line, with zooming for precision.
 * 		Zoom in by moving your mouse forward and moving back does the opposite. Looks like a blue circle until you click and hold on it
 */
interface DNumberScratch extends DImageButton {
    

    /**
     * [Client and Menu]
     * 
     * Used by [DNumberScratch:DrawScreen](https://wiki.facepunch.com/gmod/DNumberScratch:DrawScreen).
     * @param level - 
     * @param x - 
     * @param y - 
     * @param w - 
     * @param h - 
     * @param range - 
     * @param value - 
     * @param min - 
     * @param max - 
     */
    DrawNotches(level: number, x: number, y: number, w: number, h: number, range: number, value: number, min: number, max: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Used by [DNumberScratch:PaintScratchWindow](https://wiki.facepunch.com/gmod/DNumberScratch:PaintScratchWindow).
     * @param x - 
     * @param y - 
     * @param w - 
     * @param h - 
     */
    DrawScreen(x: number, y: number, w: number, h: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether this panel is active or not, i.e. if the player is currently changing its value.
     * 
     */
    GetActive(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the desired amount of numbers after the decimal point.
     * 
     */
    GetDecimals(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the real value of the [DNumberScratch](https://wiki.facepunch.com/gmod/DNumberScratch) as a number.
     * 
     * See also [DNumberScratch:GetTextValue](https://wiki.facepunch.com/gmod/DNumberScratch:GetTextValue) and [DNumberScratch:GetFraction](https://wiki.facepunch.com/gmod/DNumberScratch:GetFraction).
     * 
     */
    GetFloatValue(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the value of the [DNumberScratch](https://wiki.facepunch.com/gmod/DNumberScratch) as a fraction, a value between 0 and 1 where 0 is the minimum and 1 is the maximum value of the [DNumberScratch](https://wiki.facepunch.com/gmod/DNumberScratch).
     * 
     * See also:
     * * [DNumberScratch:GetTextValue](https://wiki.facepunch.com/gmod/DNumberScratch:GetTextValue)
     * * [DNumberScratch:GetFloatValue](https://wiki.facepunch.com/gmod/DNumberScratch:GetFloatValue)
     * * [DNumberScratch:SetFraction](https://wiki.facepunch.com/gmod/DNumberScratch:SetFraction)
     * 
     */
    GetFraction(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the maximum value that can be selected on the number scratch
     * 
     */
    GetMax(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the minimum value that can be selected on the number scratch
     * 
     */
    GetMin(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the range of the [DNumberScratch](https://wiki.facepunch.com/gmod/DNumberScratch). Basically max value - min value.
     * 
     */
    GetRange(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the scratch window should be visible or not.
     * 
     */
    GetShouldDrawScreen(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the real value of the [DNumberScratch](https://wiki.facepunch.com/gmod/DNumberScratch) as a string.
     * 
     * See also [DNumberScratch:GetFloatValue](https://wiki.facepunch.com/gmod/DNumberScratch:GetFloatValue) and [DNumberScratch:GetFraction](https://wiki.facepunch.com/gmod/DNumberScratch:GetFraction).
     * 
     */
    GetTextValue(): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns the zoom level of the scratch window
     * 
     */
    GetZoom(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the ideal zoom level for the panel based on the [DNumberScratch:GetRange](https://wiki.facepunch.com/gmod/DNumberScratch:GetRange).
     * 
     */
    IdealZoom(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the player is currently editing the value of the [DNumberScratch](https://wiki.facepunch.com/gmod/DNumberScratch).
     * 
     */
    IsEditing(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Used to lock the cursor in place.
     * 
     */
    LockCursor(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when the value of the [DNumberScratch](https://wiki.facepunch.com/gmod/DNumberScratch) is changed.
     * @param newValue - The new value
     */
    OnValueChanged(newValue: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Used to paint the 'scratch' window.
     * 
     */
    PaintScratchWindow(): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not the panel is 'active'.
     * 
     * Forcing this panel to be active may not work.
     * @param active - true to activate, false to deactivate.
     */
    SetActive(active: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the desired amount of numbers after the decimal point.
     * @param decimals - 0 for whole numbers only, 1 for one number after the decimal point, etc.
     */
    SetDecimals(decimals: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Does not trigger [DNumberScratch:OnValueChanged](https://wiki.facepunch.com/gmod/DNumberScratch:OnValueChanged)
     * 
     * Use [DNumberScratch:SetValue](https://wiki.facepunch.com/gmod/DNumberScratch:SetValue) instead.
     * @param val - The value to set
     */
    SetFloatValue(val: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the value of the [DNumberScratch](https://wiki.facepunch.com/gmod/DNumberScratch) as a fraction, a value between 0 and 1 where 0 is the minimum and 1 is the maximum value of the [DNumberScratch](https://wiki.facepunch.com/gmod/DNumberScratch)
     * @param frac - A value between 0 and 1
     */
    SetFraction(frac: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the max value that can be selected on the number scratch
     * @param max - The maximum number
     */
    SetMax(max: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the minimum value that can be selected on the number scratch.
     * @param min - The minimum number
     */
    SetMin(min: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets if the scratch window should be drawn or not. Cannot be used to force it to draw, only to hide it, which will not stop the panel from working with invisible window.
     * @param shouldDraw - 
     */
    SetShouldDrawScreen(shouldDraw: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the value of the [DNumberScratch](https://wiki.facepunch.com/gmod/DNumberScratch) and triggers [DNumberScratch:OnValueChanged](https://wiki.facepunch.com/gmod/DNumberScratch:OnValueChanged)
     * @param val - The value to set.
     */
    SetValue(val: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the zoom level of the scratch panel.
     * @param zoom - 
     */
    SetZoom(zoom: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Forces the assigned ConVar to be updated to the value of this [DNumberScratch](https://wiki.facepunch.com/gmod/DNumberScratch)
     * 
     */
    UpdateConVar(): void;

}

/**
 * DNumberWang is a VGUI element that allows you to input a numeric value using up and down arrows or direct entry.
 */
interface DNumberWang extends Omit<DTextEntry, "SetValue"> {
    

    /**
     * [Client and Menu]
     * 
     * Returns the amount of decimal places allowed in the number selector, set by [DNumberWang:SetDecimals](https://wiki.facepunch.com/gmod/DNumberWang:SetDecimals)
     * 
     */
    GetDecimals(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns whatever is set by [DNumberWang:SetFloatValue](https://wiki.facepunch.com/gmod/DNumberWang:SetFloatValue) or 0.
     * 
     */
    GetFloatValue(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns a fraction representing the current number selector value to number selector min/max range ratio. If argument `val` is supplied, that number will be computed instead.
     * @param val - The fraction numerator.
     */
    GetFraction(val: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns interval at which the up and down buttons change the current value.
     * 
     */
    GetInterval(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the maximum numeric value allowed by the number selector.
     * 
     */
    GetMax(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the minimum numeric value allowed by the number selector.
     * 
     */
    GetMin(): number;
    
    /**
     * [Client and Menu]
     * 
     * This function returns the panel it is used on.
     * 
     */
    GetTextArea(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Returns the numeric value inside the number selector.
     * 
     */
    GetValue(): number;
    
    /**
     * [Client and Menu]
     * 
     * Hides the number selector arrows.
     * 
     */
    HideWang(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when the number selector value is changed.
     * @param val - The new value of the number selector.
     */
    OnValueChanged(val: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the amount of decimal places allowed in the number selector.
     * @param num - The amount of decimal places.
     */
    SetDecimals(num: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Appears to do nothing.
     * @param val - 
     */
    SetFloatValue(val: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the value of the number selector based on the given fraction number.
     * @param val - The fraction of the number selector's range.
     */
    SetFraction(val: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets interval at which the up and down buttons change the current value.
     * @param min - The new interval.
     */
    SetInterval(min: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the maximum numeric value allowed by the number selector.
     * @param max - The maximum value.
     */
    SetMax(max: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the minimum numeric value allowed by the number selector.
     * @param min - The minimum value.
     */
    SetMin(min: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the minimum and maximum value allowed by the number selector.
     * @param min - The minimum value.
     * @param max - The maximum value.
     */
    SetMinMax(min: number, max: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the value of the [DNumberWang](https://wiki.facepunch.com/gmod/DNumberWang) and triggers [DNumberWang:OnValueChanged](https://wiki.facepunch.com/gmod/DNumberWang:OnValueChanged)
     * @param val - The value to set.
     */
    SetValue(val: number): void;

}

/**
 * GMod 12 style "number pad" panel used by tools for binding keys to tool actions. Deprecated in favor of [DBinder](https://wiki.facepunch.com/gmod/DBinder).
 * 
 * @deprecated You should use [DBinder](https://wiki.facepunch.com/gmod/DBinder) instead.
 * 
 */
interface DNumPad extends DPanel {
    

    

}

/**
 * The DNumSlider allows you to create a slider, allowing the user to slide it to set a value, or changing the value in the box.
 */
interface DNumSlider extends Panel {
    

    /**
     * [Client and Menu]
     * 
     * Returns the amount of numbers after the decimal point.
     * 
     */
    GetDecimals(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the default value of the slider, if one was set by [DNumSlider:SetDefaultValue](https://wiki.facepunch.com/gmod/DNumSlider:SetDefaultValue)
     * 
     */
    GetDefaultValue(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the maximum value of the slider
     * 
     */
    GetMax(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the minimum value of the slider
     * 
     */
    GetMin(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the range of the slider, basically maximum value - minimum value.
     * 
     */
    GetRange(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry) component of the slider.
     * 
     */
    GetTextArea(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Returns the value of the [DNumSlider](https://wiki.facepunch.com/gmod/DNumSlider)
     * 
     */
    GetValue(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns true if either the [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry), the [DSlider](https://wiki.facepunch.com/gmod/DSlider) or the [DNumberScratch](https://wiki.facepunch.com/gmod/DNumberScratch) are being edited.
     * 
     */
    IsEditing(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Called when the value of the slider is changed, through code or changing the slider.
     * @param value - The new value of the DNumSlider.
     */
    OnValueChanged(value: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Resets the slider to the default value, if one was set by [DNumSlider:SetDefaultValue](https://wiki.facepunch.com/gmod/DNumSlider:SetDefaultValue).
     * 
     * This function is called by the [DNumSlider](https://wiki.facepunch.com/gmod/DNumSlider) when user middle mouse clicks on the draggable knob of the slider.
     * 
     */
    ResetToDefaultValue(): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the console variable to be updated when the value of the slider is changed.
     * @param cvar - The name of the [ConVar](https://wiki.facepunch.com/gmod/ConVar) to be updated.
     */
    SetConVar(cvar: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Calls [DLabel:SetDark](https://wiki.facepunch.com/gmod/DLabel:SetDark) on the [DLabel](https://wiki.facepunch.com/gmod/DLabel) part of the [DNumSlider](https://wiki.facepunch.com/gmod/DNumSlider).
     * @param dark - 
     */
    SetDark(dark: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the desired amount of numbers after the decimal point.
     * 
     * **Note:**
     * >This doesn't affect values passed to [DNumSlider:OnValueChanged](https://wiki.facepunch.com/gmod/DNumSlider:OnValueChanged).
     * 
     * **Note:**
     * >To get right values passed to [DNumSlider:OnValueChanged](https://wiki.facepunch.com/gmod/DNumSlider:OnValueChanged) use [math.Round](https://wiki.facepunch.com/gmod/math.Round).
     * 
     * @param decimals - 0 for whole numbers only, 1 for one number after the decimal point, etc.
     */
    SetDecimals(decimals: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the default value of the slider, to be used by [DNumSlider:ResetToDefaultValue](https://wiki.facepunch.com/gmod/DNumSlider:ResetToDefaultValue) or by middle mouse clicking the draggable knob of the slider.
     * @param default_ - The new default value of the slider to set
     */
    SetDefaultValue(default_: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the maximum value for the slider.
     * @param max - The value to set as maximum for the slider.
     */
    SetMax(max: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the minimum value for the slider
     * @param min - The value to set as minimum for the slider.
     */
    SetMin(min: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the minimum and the maximum value of the slider.
     * @param min - The minimum value of the slider.
     * @param max - The maximum value of the slider.
     */
    SetMinMax(min: number, max: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the value of the [DNumSlider](https://wiki.facepunch.com/gmod/DNumSlider).
     * @param val - The value to set.
     */
    SetValue(val: number): void;
    
    /**
     * [Client and Menu]
     * 
     * @param x - 
     * @param y - 
     */
    TranslateSliderValues(x: number, y: number): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Updates visual notches on the slider.
     * 
     */
    UpdateNotches(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when the value has been changed. This will also be called when the user manually changes the value through the text panel.
     * 
     * This is an internal function. Override [DNumSlider:OnValueChanged](https://wiki.facepunch.com/gmod/DNumSlider:OnValueChanged) instead.
     * @param value - The value the slider has been changed to.
     */
    ValueChanged(value: number): void;

}

/**
 * A simple rectangular box, commonly used for parenting other elements to. Pretty much all elements are based on this.
 */
interface DPanel extends Panel {
    

    /**
     * [Client and Menu]
     * 
     * Returns the panel's background color.
     * 
     * **Note:**
     * >By default this returns **nil** even though the default background color is white
     * 
     * 
     */
    GetBackgroundColor(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not the panel is disabled.
     * 
     */
    GetDisabled(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not the panel background is being drawn. Alias of [DPanel:GetPaintBackground](https://wiki.facepunch.com/gmod/DPanel:GetPaintBackground).
     * 
     * @deprecated You should use [DPanel:GetPaintBackground](https://wiki.facepunch.com/gmod/DPanel:GetPaintBackground) instead.
     * 
     * 
     */
    GetDrawBackground(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Used internally by [DMenu](https://wiki.facepunch.com/gmod/DMenu).
     * 
     * Returns whether the frame is part of a derma menu or not.
     * 
     * If this is `true`, [Global.CloseDermaMenus](https://wiki.facepunch.com/gmod/Global.CloseDermaMenus) will not be called when the frame is clicked, and thus any open menus will remain open.
     * 
     */
    GetIsMenu(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not the panel background is being drawn.
     * 
     */
    GetPaintBackground(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Does nothing. Returns value set by [DPanel:SetTabbingDisabled](https://wiki.facepunch.com/gmod/DPanel:SetTabbingDisabled).
     * 
     */
    GetTabbingDisabled(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Sets the background color of the panel.
     * @param color - The background color.
     */
    SetBackgroundColor(color: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not to disable the panel.
     * @param disabled - True to disable the panel (mouse input disabled and background alpha set to 75), false to enable it (mouse input enabled and background alpha set to 255).
     */
    SetDisabled(disabled: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not to draw the panel background. Alias of [DPanel:SetPaintBackground](https://wiki.facepunch.com/gmod/DPanel:SetPaintBackground).
     * 
     * @deprecated You should use [DPanel:SetPaintBackground](https://wiki.facepunch.com/gmod/DPanel:SetPaintBackground) instead.
     * 
     * @param draw - True to show the panel's background, false to hide it.
     */
    SetDrawBackground(draw: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally by [DMenu](https://wiki.facepunch.com/gmod/DMenu).
     * 
     * Sets whether the frame is part of a derma menu or not.
     * 
     * If this is set to `true`, [Global.CloseDermaMenus](https://wiki.facepunch.com/gmod/Global.CloseDermaMenus) will not be called when the frame is clicked, and thus any open menus will remain open.
     * @param isMenu - Whether this pane is a Menu Component
     */
    SetIsMenu(isMenu: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not to paint/draw the panel background.
     * @param paint - True to show the panel's background, false to hide it.
     */
    SetPaintBackground(paint: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Does nothing.
     * @param draw - 
     */
    SetTabbingDisabled(draw: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Does nothing.
     * 
     */
    UpdateColours(): void;

}

/**
 * Displays elements in a horizontal or vertical list. A scrollbar is automatically shown if necessary.
 * 		You can get its vertical bar via `DPanelList.VBar`.  
 * 		[DPanelList](https://wiki.facepunch.com/gmod/DPanelList) was succeeded in version 13 by more specialised layout elements.
 * 
 * @deprecated Use a combination of [DIconLayout](https://wiki.facepunch.com/gmod/DIconLayout), [DListLayout](https://wiki.facepunch.com/gmod/DListLayout) and [DScrollPanel](https://wiki.facepunch.com/gmod/DScrollPanel) instead.
 * 
 */
interface DPanelList extends DPanel {
    

    /**
     * [Client and Menu]
     * 
     * Adds a existing panel to the end of [DPanelList](https://wiki.facepunch.com/gmod/DPanelList).
     * @param pnl - Panel to be used as element of list
     * @param [state = nil] - If set to "ownline", the item will take its own entire line.
     */
    AddItem(pnl: Panel, state?: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Removes all items.
     * 
     */
    CleanList(): void;
    
    /**
     * [Client and Menu]
     * 
     * Enables/creates the vertical scroll bar so that the panel list can be scrolled through.
     * 
     */
    EnableVerticalScrollbar(): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns all panels has added by [DPanelList:AddItem](https://wiki.facepunch.com/gmod/DPanelList:AddItem)
     * 
     */
    GetItems(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns offset of list items from the panel borders set by [DPanelList:SetPadding](https://wiki.facepunch.com/gmod/DPanelList:SetPadding)
     * 
     */
    GetPadding(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns distance between list items set by [DPanelList:SetSpacing](https://wiki.facepunch.com/gmod/DPanelList:SetSpacing)
     * 
     */
    GetSpacing(): number;
    
    /**
     * [Client and Menu]
     * 
     * Insert given panel at the top of the list.
     * @param insert - The panel to insert
     * @param strLineState - If set to "ownline", no other panels will be placed to the left or right of the panel we are inserting
     */
    InsertAtTop(insert: Panel, strLineState: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally to rebuild the child panel positions.
     * 
     */
    Rebuild(): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the offset of the lists items from the panel borders
     * @param Offset - Offset from panel borders
     */
    SetPadding(Offset: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets distance between list items
     * @param Distance - Distance between panels
     */
    SetSpacing(Distance: number): void;

}

/**
 * Adds curved corners.
 */
interface DPanelOverlay extends DPanel {
    

    /**
     * [Client and Menu]
     * 
     * Returns the border color of the [DPanelOverlay](https://wiki.facepunch.com/gmod/DPanelOverlay) set by [DPanelOverlay:SetColor](https://wiki.facepunch.com/gmod/DPanelOverlay:SetColor).
     * 
     */
    GetColor(): Color;
    
    /**
     * [Client and Menu]
     * 
     * Returns the type of the [DPanelOverlay](https://wiki.facepunch.com/gmod/DPanelOverlay) set by [DPanelOverlay:SetType](https://wiki.facepunch.com/gmod/DPanelOverlay:SetType).
     * 
     */
    GetType(): number;
    
    /**
     * [Client and Menu]
     * 
     * Used internally by the panel for type 3.
     * @param cola - 
     * @param colb - 
     * @param colc - 
     * @param cold - 
     * @param size - 
     */
    PaintDifferentColours(cola: any, colb: any, colc: any, cold: any, size: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally by the panel for types 1 and 2.
     * @param size - 
     */
    PaintInnerCorners(size: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the border color of the [DPanelOverlay](https://wiki.facepunch.com/gmod/DPanelOverlay).
     * @param color - The color to set. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     */
    SetColor(color: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the type of the [DPanelOverlay](https://wiki.facepunch.com/gmod/DPanelOverlay).
     * @param type - The type to set.
     * Possible value are:
     * * 1 - 8px corners of given color
     * * 2 - 4px corners of given type
     * * 3 - 2 top? corners of hardcoded color, 2 other corners of given color
     */
    SetType(type: number): void;

}

/**
 * A base panel for things like [DModelSelect](https://wiki.facepunch.com/gmod/DModelSelect).
 * 		Basically, a list of panels that can be selected.
 * 		Selected panel can be retrieved and has visual indication of being selected.
 * 
 * @deprecated This is derived from the deprecated [DPanelList](https://wiki.facepunch.com/gmod/DPanelList).
 * 
 */
interface DPanelSelect extends DPanelList {
    

    /**
     * [Client]
     * 
     * Adds a panel to be selectable.
     * @param pnl - The panel to add.
     * @param [conVars = nil] - [ConVar](https://wiki.facepunch.com/gmod/ConVar)s to set when this panel is selected. Keys are the cvar name, value is the value for that cvar.
     */
    AddPanel(pnl: Panel, conVars?: any): void;
    
    /**
     * [Client]
     * 
     * Used internally by [DPanelSelect:AddPanel](https://wiki.facepunch.com/gmod/DPanelSelect:AddPanel) to select the best default selected panel based on player's convars.
     * 
     */
    FindBestActive(): void;
    
    /**
     * [Client]
     * 
     * Called when the selected panel changes.
     * @param oldPnl - Old selected panel.
     * @param newPnl - New selected panel.
     */
    OnActivePanelChanged(oldPnl: Panel, newPnl: Panel): void;
    
    /**
     * [Client]
     * 
     * Selects a given panel.
     * @param pnl - Panel to select. It should've been added previously via [DPanelSelect:AddPanel](https://wiki.facepunch.com/gmod/DPanelSelect:AddPanel).
     */
    SelectPanel(pnl: Panel): void;

}

/**
 * A panel similar to [DScrollPanel](https://wiki.facepunch.com/gmod/DScrollPanel), but that allows the player to pan around, for example a zoomed in image within a small window.
 */
interface DPanPanel extends DPanel {
    

    /**
     * [Client and Menu]
     * 
     * Parents the passed panel to the [DPanPanel:GetCanvas](https://wiki.facepunch.com/gmod/DPanPanel:GetCanvas).
     * @param pnl - The panel to add.
     */
    AddItem(pnl: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * The internal canvas panel.
     * 
     */
    GetCanvas(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Used internally, called from [DPanPanel:ScrollToChild](https://wiki.facepunch.com/gmod/DPanPanel:ScrollToChild).
     * @param x - 
     * @param y - 
     */
    OnScroll(x: number, y: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Scroll to a specific child panel.
     * @param pnl - The panel to scroll to.
     */
    ScrollToChild(pnl: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally.
     * @param pnl - The canvas panel.
     */
    SetCanvas(pnl: Panel): void;

}

/**
 * A progressbar, works with a fraction between 0 and 1 where 0 is 0% and 1 is 100%.
 */
interface DProgress extends Panel {
    

    /**
     * [Client and Menu]
     * 
     * Returns the progress bar's fraction. 0 is 0% and 1 is 100%.
     * 
     */
    GetFraction(): number;
    
    /**
     * [Client and Menu]
     * 
     * Sets the fraction of the progress bar. 0 is 0% and 1 is 100%.
     * @param fraction - Fraction of the progress bar. Range is 0 to 1 (0% to 100%).
     */
    SetFraction(fraction: number): void;

}

/**
 * A grid for editing the properties of something using names and values. Properties can be categorized and strongly typed.
 * 
 * ![](http://wiki.garrysmod.com/images/9/99/DProperties.png)
 * ##  Associated controls 
 * * [DProperty_VectorColor](https://wiki.facepunch.com/gmod/DProperty_VectorColor)
 * * [DProperty_Boolean](https://wiki.facepunch.com/gmod/DProperty_Boolean)
 * * [DProperty_Generic](https://wiki.facepunch.com/gmod/DProperty_Generic)
 * * [DProperty_Combo](https://wiki.facepunch.com/gmod/DProperty_Combo)
 * * [DProperty_Float](https://wiki.facepunch.com/gmod/DProperty_Float)
 * * [DProperty_Int](https://wiki.facepunch.com/gmod/DProperty_Int)
 */
interface DProperties extends Panel {
    

    /**
     * [Client]
     * 
     * Creates a row in the properties panel.
     * @param category - The category to list this row under
     * @param name - The label of this row
     */
    CreateRow(category: string, name: string): Panel;
    
    /**
     * [Client]
     * 
     * Returns the [DScrollPanel](https://wiki.facepunch.com/gmod/DScrollPanel) all the properties panels are attached to.
     * 
     */
    GetCanvas(): Panel;
    
    /**
     * [Client]
     * 
     * Returns (or creates) a category of properties.
     * 
     * See [DProperties:CreateRow](https://wiki.facepunch.com/gmod/DProperties:CreateRow) for adding actual properties.
     * @param name - Name of the category
     * @param create - Create a new category if it doesn't exist.
     */
    GetCategory(name: string, create: boolean): Panel;

}

/**
 * Checkbox control for the [DProperties](https://wiki.facepunch.com/gmod/DProperties) panel.
 */
interface DProperty_Boolean extends DProperty_Generic {
    

    

}

/**
 * [DComboBox](https://wiki.facepunch.com/gmod/DComboBox) control for a [DProperties](https://wiki.facepunch.com/gmod/DProperties) panel.
 */
interface DProperty_Combo extends Omit<DProperty_Generic, "SetSelected"> {
    

    /**
     * [Client]
     * 
     * Add a choice to your combo control.
     * @param Text - Shown text.
     * @param data - Stored Data.
     * @param [select = false] - Select this element?
     */
    AddChoice(Text: string, data: any, select = false): void;
    
    /**
     * [Client]
     * 
     * Called after the user selects a new value.
     * @param data - The new data that was selected.
     */
    DataChanged(data: any): void;
    
    /**
     * [Client]
     * 
     * Set the selected option.
     * @param Id - Id of the choice to be selected.
     */
    SetSelected(Id: number): void;
    
    /**
     * [Client]
     * 
     * Sets up a combo control.
     * @param [data = { text = 'Select...' }] - Data to use to set up the combo box control. See [Editable Entities](https://wiki.facepunch.com/gmod/Editable_Entities).
     * Structure:
     * * [string](https://wiki.facepunch.com/gmod/string) text - The default label for this combo box
     * * [table](https://wiki.facepunch.com/gmod/table) values - The values to add to the combo box. Keys are the "nice" text, values are the data value to send.
     * * [table](https://wiki.facepunch.com/gmod/table) icons - The icons for each value. They will be matched by key name.
     * * [boolean](https://wiki.facepunch.com/gmod/boolean) select - The "nice" name/key of the value that should be initially selected.
     */
    Setup(data?: any): void;

}

/**
 * Entity picker control for the [DProperties](https://wiki.facepunch.com/gmod/DProperties) panel.
 */
interface DProperty_Entity extends DProperty_Generic {
    

    

}

/**
 * Float control for the [DProperties](https://wiki.facepunch.com/gmod/DProperties) panel.
 */
interface DProperty_Float extends DProperty_Generic {
    

    /**
     * [Client]
     * 
     * Called to poll the amount of digits after the decimal point. This is used internally for [DProperty_Int](https://wiki.facepunch.com/gmod/DProperty_Int).
     * 
     */
    GetDecimals(): any;

}

/**
 * A base for other controls for [DProperties](https://wiki.facepunch.com/gmod/DProperties). Acts as a generic text input on its own.
 */
interface DProperty_Generic extends Panel {
    

    /**
     * [Client]
     * 
     * Returns the internal row panel of a [DProperties](https://wiki.facepunch.com/gmod/DProperties) that this panel belongs to.
     * 
     */
    GetRow(): Panel;
    
    /**
     * [Client]
     * 
     * Called internally by [DProperties](https://wiki.facepunch.com/gmod/DProperties).
     * @param row - The new row panel.
     */
    SetRow(row: Panel): void;
    
    /**
     * [Client]
     * 
     * Sets up a generic control for use by [DProperties](https://wiki.facepunch.com/gmod/DProperties).
     * @param data - See [Editable Entities](https://wiki.facepunch.com/gmod/Editable_Entities).
     */
    Setup(data: any): void;
    
    /**
     * [Client]
     * 
     * Called by this control, or a derived control, to alert the row of the change.
     * @param newVal - The new value.
     * @param force - Force an update.
     */
    ValueChanged(newVal: any, force: boolean): void;

}

/**
 * Integer control for the [DProperties](https://wiki.facepunch.com/gmod/DProperties) panel.
 */
interface DProperty_Int extends DProperty_Float {
    

    

}

/**
 * Color picker control for a DProperties panel. Opens a [DColorCombo](https://wiki.facepunch.com/gmod/DColorCombo) if the color preview is clicked.
 * 
 * 		See [Editable Entities](https://wiki.facepunch.com/gmod/Editable_Entities) for how this is used ingame.
 */
interface DProperty_VectorColor extends DProperty_Generic {
    

    /**
     * [Client]
     * 
     * Called by a property row to setup a color selection control.
     * @param settings - A table of settings. None of the values are used for this property. See [Editable Entities](https://wiki.facepunch.com/gmod/Editable_Entities).
     */
    Setup(settings: any): void;
    
    /**
     * [Client]
     * 
     * Sets the color value of the property.
     * @param color - Sets the color to use in a [DProperty_VectorColor](https://wiki.facepunch.com/gmod/DProperty_VectorColor).
     */
    SetValue(color: Vector): void;

}

/**
 * A tab oriented control where you can create multiple tabs with items within. Used mainly for organization.
 */
interface DPropertySheet extends Panel {
    

    /**
     * [Client and Menu]
     * 
     * Adds a new tab.
     * @param name - Name of the tab
     * @param pnl - Panel to be used as contents of the tab. This normally should be a [DPanel](https://wiki.facepunch.com/gmod/DPanel)
     * @param [icon = nil] - Icon for the tab. This will ideally be a <page text="silkicon">Silkicons</page>, but any material name can be used.
     * @param [noStretchX = false] - Should [DPropertySheet](https://wiki.facepunch.com/gmod/DPropertySheet) try to fill itself with given panel horizontally.
     * @param [noStretchY = false] - Should [DPropertySheet](https://wiki.facepunch.com/gmod/DPropertySheet) try to fill itself with given panel vertically.
     * @param [tooltip = nil] - Tooltip for the tab when user hovers over it with his cursor
     */
    AddSheet(name: string, pnl: Panel, icon?: string, noStretchX = false, noStretchY = false, tooltip?: string): any;
    
    /**
     * [Client and Menu]
     * 
     * Removes tab and/or panel from the parent DPropertySheet.
     * @param tab - The [DTab](https://wiki.facepunch.com/gmod/DTab) of the sheet from [DPropertySheet](https://wiki.facepunch.com/gmod/DPropertySheet).
     * See [DPropertySheet:GetItems](https://wiki.facepunch.com/gmod/DPropertySheet:GetItems).
     * @param removePanel - Set to true to remove the associated panel object as well.
     */
    CloseTab(tab: Panel, removePanel: boolean): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Internal function that handles the cross fade animation when the player switches tabs.
     * @param anim - 
     * @param delta - 
     * @param data - 
     */
    CrossFade(anim: any, delta: number, data: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the active [DTab](https://wiki.facepunch.com/gmod/DTab) of this [DPropertySheet](https://wiki.facepunch.com/gmod/DPropertySheet).
     * 
     */
    GetActiveTab(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Returns the amount of time (in seconds) it takes to fade between tabs.
     * 
     * Set by [DPropertySheet:SetFadeTime](https://wiki.facepunch.com/gmod/DPropertySheet:SetFadeTime)
     * 
     */
    GetFadeTime(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns a list of all tabs of this [DPropertySheet](https://wiki.facepunch.com/gmod/DPropertySheet).
     * 
     */
    GetItems(): any;
    
    /**
     * [Client and Menu]
     * 
     * Gets the padding from the parent panel to child panels.
     * 
     */
    GetPadding(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns whatever value was set by [DPropertySheet:SetShowIcons](https://wiki.facepunch.com/gmod/DPropertySheet:SetShowIcons).
     * 
     */
    GetShowIcons(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Called when a player switches the tabs.
     * 
     * 		Source code states that this is meant to be overridden.
     * @param old - The previously active [DTab](https://wiki.facepunch.com/gmod/DTab)
     * @param new_ - The newly active [DTab](https://wiki.facepunch.com/gmod/DTab)
     */
    OnActiveTabChanged(old: Panel, new_: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the active tab of the [DPropertySheet](https://wiki.facepunch.com/gmod/DPropertySheet).
     * @param tab - The [DTab](https://wiki.facepunch.com/gmod/DTab) to set active.
     * See [DPropertySheet:GetItems](https://wiki.facepunch.com/gmod/DPropertySheet:GetItems)
     */
    SetActiveTab(tab: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the amount of time (in seconds) it takes to fade between tabs.
     * @param [time = 0.1] - The amount of time it takes (in seconds) to fade between tabs.
     */
    SetFadeTime(time = 0.1): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the padding from parent panel to children panel.
     * @param [padding = 8] - Amount of padding
     */
    SetPadding(padding = 8): void;
    
    /**
     * [Client and Menu]
     * 
     * Does nothing.
     * @param show - 
     */
    SetShowIcons(show: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Creates a close button on the right side of the [DPropertySheet](https://wiki.facepunch.com/gmod/DPropertySheet) that will run the given callback function when pressed.
     * @param func - Callback function to be called when the close button is pressed.
     */
    SetupCloseButton(func: Function): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the width of the [DPropertySheet](https://wiki.facepunch.com/gmod/DPropertySheet) to fit the contents of all of the tabs.
     * 
     */
    SizeToContentWidth(): void;
    
    /**
     * [Client and Menu]
     * 
     * Switches the active tab to a tab with given name.
     * @param name - Case sensitive name of the tab.
     */
    SwitchToName(name: string): void;

}

/**
 * DRGBPicker is an interactive panel which can be used to select a color hue.
 * 
 * See [DColorCube](https://wiki.facepunch.com/gmod/DColorCube) for a color picker which controls brightness and saturation.
 * 
 * See [DColorMixer](https://wiki.facepunch.com/gmod/DColorMixer) for a color picker that allows control over hue, saturation, and brightness at once.
 */
interface DRGBPicker extends DPanel {
    

    /**
     * [Client and Menu]
     * 
     * Returns the color at given position on the internal texture.
     * @param x - The X coordinate on the texture to get the color from
     * @param y - The Y coordinate on the texture to get the color from
     */
    GetPosColor(x: number, y: number): LuaMultiReturn<[Color, number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Returns the color currently set on the color picker.
     * 
     */
    GetRGB(): Color;
    
    /**
     * [Client and Menu]
     * 
     * Function which is called when the cursor is clicked and/or moved on the color picker. Meant to be overridden.
     * @param col - The color that is selected on the color picker ([Color](https://wiki.facepunch.com/gmod/Color) form).
     */
    OnChange(col: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the color stored in the color picker.
     * 
     * **Note:**
     * >This function is meant to be called internally and will not update the position of the color picker line or call [DRGBPicker:OnChange](https://wiki.facepunch.com/gmod/DRGBPicker:OnChange)
     * 
     * @param color - The color to set, see [Color](https://wiki.facepunch.com/gmod/Color).
     */
    SetRGB(color: Color): void;

}

/**
 * An internal panel used by [DVScrollBar](https://wiki.facepunch.com/gmod/DVScrollBar) as the grip (middle) part of the scrollbar.
 */
interface DScrollBarGrip extends DPanel {
    

    

}

/**
 * DScrollPanel is a VGUI Element similar to DPanel however it has a vertical scrollbar docked to the right which can be used to put more content in a smaller area. DScrollPanels are essentially [DPanel](https://wiki.facepunch.com/gmod/DPanel)s with the Scroll Bar.
 * 
 * This can be used to replace the [DPanelList](https://wiki.facepunch.com/gmod/DPanelList) with [DPanelList:EnableVerticalScrollbar](https://wiki.facepunch.com/gmod/DPanelList:EnableVerticalScrollbar) and get similar functionality as well as using a non-deprecated element.
 * 
 * If you would like to paint or edit the elements of the scrollbar use [DScrollPanel:GetVBar](https://wiki.facepunch.com/gmod/DScrollPanel:GetVBar). If you want to see if the scrollbar is visible then use the VBar.Enabled variable on the scrollbar's VBar.
 * 
 * **Note:**
 * >[Panel:DockPadding](https://wiki.facepunch.com/gmod/Panel:DockPadding) will not have an effect on children of this panel. Use the function on [DScrollPanel:GetCanvas](https://wiki.facepunch.com/gmod/DScrollPanel:GetCanvas) instead.
 * 
 */
interface DScrollPanel extends DPanel {
    

    /**
     * [Client and Menu]
     * 
     * Parents the passed panel to the DScrollPanel's canvas.
     * @param pnl - The panel to add.
     */
    AddItem(pnl: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Clears the `DScrollPanel`'s canvas, removing all added items.
     * 
     */
    Clear(): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the canvas ( The panel all child panels are parented to ) of the DScrollPanel.
     * 
     */
    GetCanvas(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Gets the [DScrollPanel](https://wiki.facepunch.com/gmod/DScrollPanel)s padding, set by [DScrollPanel:SetPadding](https://wiki.facepunch.com/gmod/DScrollPanel:SetPadding).
     * 
     */
    GetPadding(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the vertical scroll bar of the panel.
     * 
     */
    GetVBar(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Return the width of the DScrollPanel's canvas.
     * 
     */
    InnerWidth(): number;
    
    /**
     * [Client and Menu]
     * 
     * Used internally to rebuild the panel's children positioning. You should use [Panel:InvalidateLayout](https://wiki.facepunch.com/gmod/Panel:InvalidateLayout) instead.
     * 
     */
    PerformLayoutInternal(): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally to rebuild the panel's children positioning. You should use [Panel:InvalidateLayout](https://wiki.facepunch.com/gmod/Panel:InvalidateLayout) instead.
     * 
     */
    Rebuild(): void;
    
    /**
     * [Client and Menu]
     * 
     * Scrolls to the given child
     * @param panel - The panel to scroll to, must be a child of the DScrollPanel.
     */
    ScrollToChild(panel: Panel): void;
    
    /**
     * [undefined]
     * 
     * Sets the canvas of the DScrollPanel.
     * @param canvas - The new canvas
     */
    SetCanvas(canvas: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the DScrollPanel's padding. This function appears to be unused.
     * @param padding - The padding of the DScrollPanel.
     */
    SetPadding(padding: number): void;

}

/**
 * Draw a shape on a derma panel. Only one kind of shape, a rectangle, is available for use.
 */
interface DShape extends DPanel {
    

    /**
     * [Client]
     * 
     * Returns the current type of shape this panel is set to display.
     * 
     * See [DShape:SetBorderColor](https://wiki.facepunch.com/gmod/DShape:SetBorderColor).
     * 
     */
    GetBorderColor(): Color;
    
    /**
     * [Client]
     * 
     * Returns the color set to display the shape with.
     * 
     */
    GetColor(): Color;
    
    /**
     * [Client]
     * 
     * Returns the current type of shape this panel is set to display.
     * 
     * See [DShape:SetType](https://wiki.facepunch.com/gmod/DShape:SetType).
     * 
     */
    GetType(): string;
    
    /**
     * [Client]
     * 
     * Sets the border color of the shape.
     * 
     * Currently does nothing.
     * @param clr - The desired border color.
     * See [Color](https://wiki.facepunch.com/gmod/Color)
     */
    SetBorderColor(clr: Color): void;
    
    /**
     * [Client]
     * 
     * Sets the color to display the shape with.
     * @param clr - The [Color](https://wiki.facepunch.com/gmod/Color)
     */
    SetColor(clr: Color): void;
    
    /**
     * [Client]
     * 
     * Sets the shape to be drawn.
     * @param type - The render type of the DShape. Only rectangles (`Rect`) work currently. If you don't define a type immediately, the [PANEL:Paint](https://wiki.facepunch.com/gmod/PANEL:Paint) method will generate errors until you do.
     */
    SetType(type: string): void;

}

/**
 * A helper panel that will automatically resize itself to fit all its children using [Panel:SizeToChildren](https://wiki.facepunch.com/gmod/Panel:SizeToChildren).
 */
interface DSizeToContents extends Panel {
    

    /**
     * [Client and Menu]
     * 
     * Returns whether the [DSizeToContents](https://wiki.facepunch.com/gmod/DSizeToContents) panel should size to contents horizontally.
     * 
     */
    GetSizeX(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the [DSizeToContents](https://wiki.facepunch.com/gmod/DSizeToContents) panel should size to contents vertically.
     * 
     */
    GetSizeY(): number;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether the [DSizeToContents](https://wiki.facepunch.com/gmod/DSizeToContents) panel should size to contents horizontally. This is `true` by default.
     * @param __unnamedArg - Whether the panel should size to contents horizontally.
     */
    SetSizeX(__unnamedArg: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether the [DSizeToContents](https://wiki.facepunch.com/gmod/DSizeToContents) panel should size to contents vertically. This is `true` by default.
     * @param __unnamedArg - Whether the panel should size to contents vertically.
     */
    SetSizeY(__unnamedArg: number): void;

}

/**
 * Creates a slider that can be moved along the X and/or Y axis
 */
interface DSlider extends Panel {
    

    /**
     * [Client and Menu]
     * 
     * Used internally to set the X axis convar.
     * 
     */
    ConVarXNumberThink(): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally to set the Y axis convar.
     * 
     */
    ConVarYNumberThink(): void;
    
    /**
     * [Client and Menu]
     * 
     * Identical to [DSlider:IsEditing](https://wiki.facepunch.com/gmod/DSlider:IsEditing)
     * 
     */
    GetDragging(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the draggable panel's lock on the X axis.
     * 
     * See [DSlider:SetLockX](https://wiki.facepunch.com/gmod/DSlider:SetLockX) for more info.
     * 
     */
    GetLockX(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the draggable panel's lock on the Y axis.
     * 
     * See [DSlider:SetLockY](https://wiki.facepunch.com/gmod/DSlider:SetLockY) for more info.
     * 
     */
    GetLockY(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the current notch color, set by [DSlider:SetNotchColor](https://wiki.facepunch.com/gmod/DSlider:SetNotchColor)
     * 
     * @deprecated Does not affect anything by default.
     * 
     * 
     */
    GetNotchColor(): Color;
    
    /**
     * [Client and Menu]
     * 
     * Appears to be non functioning, however is still used by panels such as [DNumSlider](https://wiki.facepunch.com/gmod/DNumSlider).
     * 
     */
    GetNotches(): number;
    
    /**
     * [Client and Menu]
     * 
     * Does nothing.
     * 
     */
    GetNumSlider(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns the target position of the draggable "knob" panel of the slider on the X axis.
     * 
     * Set by [DSlider:SetSlideX](https://wiki.facepunch.com/gmod/DSlider:SetSlideX).
     * 
     */
    GetSlideX(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the target position of the draggable "knob" panel of the slider on the Y axis.
     * 
     * Set by [DSlider:SetSlideY](https://wiki.facepunch.com/gmod/DSlider:SetSlideY).
     * 
     */
    GetSlideY(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the value set by [DSlider:SetTrapInside](https://wiki.facepunch.com/gmod/DSlider:SetTrapInside).
     * 
     */
    GetTrapInside(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns true if this element is being edited by the player.
     * 
     */
    IsEditing(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Called when the values of this slider panel were changed.
     * @param x - The X axis position of the slider in range 0-1
     * @param y - The Y axis position of the slider in range 0-1
     */
    OnValueChanged(x: number, y: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally to fire [DSlider:OnValueChanged](https://wiki.facepunch.com/gmod/DSlider:OnValueChanged)
     * 
     */
    OnValuesChangedInternal(): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the background for the slider.
     * @param path - Path to the image.
     */
    SetBackground(path: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the [ConVar](https://wiki.facepunch.com/gmod/ConVar) to be set when the slider changes on the X axis.
     * @param convar - Name of the convar to set.
     */
    SetConVarX(convar: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the [ConVar](https://wiki.facepunch.com/gmod/ConVar) to be set when the slider changes on the Y axis.
     * @param convar - Name of the convar to set.
     */
    SetConVarY(convar: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not the slider is being dragged.
     * @param dragging - 
     */
    SetDragging(dragging: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Does nothing.
     * 
     */
    SetImage(): void;
    
    /**
     * [Client and Menu]
     * 
     * Does nothing.
     * 
     */
    SetImageColor(): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the lock on the X axis. 
     * 
     * For example the value 0.5 will lock the draggable panel to half the width of the slider's panel.
     * @param [lockX = nil] - Set to nil to reset lock.
     * The value range is from 0 to 1.
     */
    SetLockX(lockX?: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the lock on the Y axis. 
     * 
     * For example the value 0.5 will lock the draggable panel to half the height of the slider's panel.
     * @param [lockY = nil] - Set to nil to reset lock.
     * The value range is from 0 to 1.
     */
    SetLockY(lockY?: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the current notch color, overriding the color set by the derma skin.
     * 
     * @deprecated Does not affect anything by default.
     * 
     * @param clr - The new color to set
     */
    SetNotchColor(clr: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * Appears to be non functioning, however is still used by panels such as [DNumSlider](https://wiki.facepunch.com/gmod/DNumSlider).
     * @param notches - 
     */
    SetNotches(notches: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Does nothing.
     * @param slider - 
     */
    SetNumSlider(slider: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Used to position the draggable panel of the slider on the X axis.
     * @param x - The value range seems to be from 0 to 1
     */
    SetSlideX(x: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Used to position the draggable panel of the slider on the Y axis.
     * @param y - The value range seems to be from 0 to 1
     */
    SetSlideY(y: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Makes the slider itself, the "knob", trapped within the bounds of the slider panel. Example:
     * 
     * <upload src="70c/8dafb0260022da3.png" size="6257" name="image.png" />
     * @param trap - 
     */
    SetTrapInside(trap: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * For override by child panels, such as [DNumSlider](https://wiki.facepunch.com/gmod/DNumSlider). Allows changing the output values of the slider.
     * @param x - The input X coordinate, in range of 0-1.
     * @param y - The input Y coordinate, in range of 0-1.
     */
    TranslateValues(x: number, y: number): LuaMultiReturn<[number, number]>;

}

/**
 * A panel that draws a sprite on the player's HUD with the given [IMaterial](https://wiki.facepunch.com/gmod/IMaterial), [Global.Color](https://wiki.facepunch.com/gmod/Global.Color) and rotation.
 * 
 * A shortcut for this is [Global.CreateSprite](https://wiki.facepunch.com/gmod/Global.CreateSprite)().
 */
interface DSprite extends DPanel {
    

    /**
     * [Client]
     * 
     * Gets the color the sprite is using as a modifier.
     * 
     */
    GetColor(): any;
    
    /**
     * [Client]
     * 
     * Returns the value set by [DSprite:SetHandle](https://wiki.facepunch.com/gmod/DSprite:SetHandle)
     * 
     */
    GetHandle(): Vector;
    
    /**
     * [Client]
     * 
     * Gets the material the sprite is using.
     * 
     */
    GetMaterial(): IMaterial;
    
    /**
     * [Client]
     * 
     * Gets the 2D rotation angle of the sprite, in the plane of the screen.
     * 
     */
    GetRotation(): number;
    
    /**
     * [Client]
     * 
     * Sets the color modifier for the sprite.
     * @param color - The [Global.Color](https://wiki.facepunch.com/gmod/Global.Color) to use.
     */
    SetColor(color: any): void;
    
    /**
     * [Client]
     * 
     * Seems to be an unused feature. Does nothing.
     * @param vec - 
     */
    SetHandle(vec: Vector): void;
    
    /**
     * [Client]
     * 
     * Sets the source material for the sprite.
     * @param material - The material to use. This will ideally be an [UnlitGeneric](https://developer.valvesoftware.com/wiki/UnlitGeneric).
     */
    SetMaterial(material: IMaterial): void;
    
    /**
     * [Client]
     * 
     * Sets the 2D rotation angle of the sprite, in the plane of the screen.
     * @param ang - The anti-clockwise rotation in degrees.
     */
    SetRotation(ang: number): void;

}

/**
 * A tab for internal use on the [DPropertySheet](https://wiki.facepunch.com/gmod/DPropertySheet).
 */
interface DTab extends DButton {
    

    /**
     * [Client and Menu]
     * 
     * Returns the panel that the tab represents.
     * 
     */
    GetPanel(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * The [DPropertySheet](https://wiki.facepunch.com/gmod/DPropertySheet) this tab belongs to.
     * 
     */
    GetPropertySheet(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Returns the target height of this tab. Used internally by [DTab](https://wiki.facepunch.com/gmod/DTab)'s [PANEL:ApplySchemeSettings](https://wiki.facepunch.com/gmod/PANEL:ApplySchemeSettings).
     * 
     */
    GetTabHeight(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the tab is the currently selected tab of the associated [DPropertySheet](https://wiki.facepunch.com/gmod/DPropertySheet).
     * 
     */
    IsActive(): Boolean;
    
    /**
     * [Client and Menu]
     * 
     * Used internally by [DTab:Setup](https://wiki.facepunch.com/gmod/DTab:Setup).
     * @param pnl - The contents of this tab.
     */
    SetPanel(pnl: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally by [DTab:Setup](https://wiki.facepunch.com/gmod/DTab:Setup).
     * @param pnl - The [DPropertySheet](https://wiki.facepunch.com/gmod/DPropertySheet) to set for this tab.
     */
    SetPropertySheet(pnl: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally by [DPropertySheet:AddSheet](https://wiki.facepunch.com/gmod/DPropertySheet:AddSheet).
     * @param label - Label of the tab
     * @param sheet - The [DPropertySheet](https://wiki.facepunch.com/gmod/DPropertySheet) this tab belongs to.
     * @param pnl - Panel to be used as contents of the tab. This normally should be a [DPanel](https://wiki.facepunch.com/gmod/DPanel).
     * @param [icon = nil] - Icon for the tab. This will typically be a <page text="silkicon">Silkicons</page>, but any material name can be used.
     */
    Setup(label: string, sheet: Panel, pnl: Panel, icon?: string): void;

}

/**
 * A form which may be used to display text the player is meant to select and copy or alternately allow them to enter some text of their own.
 * 
 * **Note:**
 * >At least one of your `DTextEntry`'s parents must either be an [EditablePanel](https://wiki.facepunch.com/gmod/EditablePanel) or derived from it (like a [DFrame](https://wiki.facepunch.com/gmod/DFrame), for example), else it won't be able to focus and thus be unselectable.
 * 
 * You must also call [Panel:MakePopup](https://wiki.facepunch.com/gmod/Panel:MakePopup) on said panel or the `DTextEntry` will not work.
 * 
 */
interface DTextEntry extends TextEntry {
    

    /**
     * [Client and Menu]
     * 
     * Adds an entry to [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry)'s history.
     * 
     * See [DTextEntry:SetHistoryEnabled](https://wiki.facepunch.com/gmod/DTextEntry:SetHistoryEnabled).
     * @param text - Text to add to the text entry's history.
     */
    AddHistory(text: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Called whenever the value of the panel has been updated (whether by user input or otherwise).
     * 
     * It allows you to determine whether a user can modify the [TextEntry](https://wiki.facepunch.com/gmod/TextEntry)'s text.
     * 
     * By default, this only checks whether the panel disallows numeric characters, preventing it from being edited if the value contains any.
     * 
     * This is actually an engine hook that only works on [TextEntry](https://wiki.facepunch.com/gmod/TextEntry) derived elements.
     * 
     * If you are looking for a way to modify character limits, see [Panel:SetMaximumCharCount](https://wiki.facepunch.com/gmod/Panel:SetMaximumCharCount)
     * @param char - The last character entered into the panel.
     */
    AllowInput(char: string): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether a string is numeric or not.
     * Always returns false if the [DTextEntry:SetNumeric](https://wiki.facepunch.com/gmod/DTextEntry:SetNumeric) is set to false.
     * @param strValue - The string to check.
     */
    CheckNumeric(strValue: string): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Called by the DTextEntry when a list of autocompletion options is requested. Meant to be overridden.
     * @param inputText - Player's current input.
     */
    GetAutoComplete(inputText: string): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns the cursor color of a DTextEntry.
     * 
     */
    GetCursorColor(): Color;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the textbox is disabled. Use [Panel:IsEnabled](https://wiki.facepunch.com/gmod/Panel:IsEnabled) instead.
     * 
     * @deprecated Use [Panel:IsEnabled](https://wiki.facepunch.com/gmod/Panel:IsEnabled) instead.
     * 
     * 
     */
    GetDisabled(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Alias of [DTextEntry:GetPaintBackground](https://wiki.facepunch.com/gmod/DTextEntry:GetPaintBackground). Use that instead.
     * 
     * Whether the background is displayed or not.
     * 
     */
    GetDrawBackground(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the value set by [DTextEntry:SetDrawBorder](https://wiki.facepunch.com/gmod/DTextEntry:SetDrawBorder).
     * 
     */
    GetDrawBorder(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether pressing Enter can cause the panel to lose focus. Note that a multiline DTextEntry cannot be escaped using the Enter key even when this function returns true.
     * 
     */
    GetEnterAllowed(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the contents of the DTextEntry as a number.
     * 
     */
    GetFloat(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the highlight/text selection color of the text entry. If it was not overwritten, it will return the derma skin value. (`colTextEntryTextHighlight`)
     * 
     */
    GetHighlightColor(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the history functionality of  [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry) is enabled. See [DTextEntry:AddHistory](https://wiki.facepunch.com/gmod/DTextEntry:AddHistory).
     * 
     */
    GetHistoryEnabled(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Similar to [DTextEntry:GetFloat](https://wiki.facepunch.com/gmod/DTextEntry:GetFloat), but rounds the value to the nearest integer.
     * 
     */
    GetInt(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether only numeric characters (`123456789.-`) can be entered into the DTextEntry.
     * 
     */
    GetNumeric(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Whether the background is displayed or not
     * 
     */
    GetPaintBackground(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Return current color of panel placeholder
     * 
     */
    GetPlaceholderColor(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns the placeholder text set with [DTextEntry:SetPlaceholderText](https://wiki.facepunch.com/gmod/DTextEntry:SetPlaceholderText).
     * 
     */
    GetPlaceholderText(): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not the panel accepts <key>tab</key> key.
     * 
     */
    GetTabbingDisabled(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the text color of a DTextEntry.
     * 
     */
    GetTextColor(): Color;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry) is set to run [DTextEntry:OnValueChange](https://wiki.facepunch.com/gmod/DTextEntry:OnValueChange) every time a character is typed or deleted or only when Enter is pressed.
     * 
     */
    GetUpdateOnType(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether this DTextEntry is being edited or not. (i.e. has focus)
     * 
     */
    IsEditing(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Called by [DTextEntry:OnTextChanged](https://wiki.facepunch.com/gmod/DTextEntry:OnTextChanged) when the user modifies the text in the [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry).
     * 
     * You should override this function to define custom behavior when the [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry) text changes.
     * 
     */
    OnChange(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called whenever enter is pressed on a [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry).
     * 
     * **Note:**
     * >[DTextEntry:IsEditing](https://wiki.facepunch.com/gmod/DTextEntry:IsEditing) will still return true in this callback!
     * 
     * @param value - The current text of the [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry)
     */
    OnEnter(value: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Called whenever the [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry) gains focus.
     * 
     */
    OnGetFocus(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called from [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry)'s [TextEntry:OnKeyCodeTyped](https://wiki.facepunch.com/gmod/TextEntry:OnKeyCodeTyped) override whenever a valid character is typed while the text entry is focused.
     * @param keyCode - They key code of the key pressed, see [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY).
     */
    OnKeyCode(keyCode: KEY): void;
    
    /**
     * [Client and Menu]
     * 
     * Called whenever the [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry) lose focus.
     * 
     */
    OnLoseFocus(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called internally when the text inside the [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry) changes. This is an implementation of [TextEntry:OnTextChanged](https://wiki.facepunch.com/gmod/TextEntry:OnTextChanged)
     * 
     * You should not override this function. Use [DTextEntry:OnValueChange](https://wiki.facepunch.com/gmod/DTextEntry:OnValueChange) instead.
     * @param noMenuRemoval - Determines whether to remove the autocomplete menu (false) or not (true).
     */
    OnTextChanged(noMenuRemoval: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when the text changes of the [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry) are applied. (And set to the attached console variable, if one is given)
     * 
     * See also [DTextEntry:OnChange](https://wiki.facepunch.com/gmod/DTextEntry:OnChange) for a function that is called on every text change, even if the console variable is not updated.
     * 
     * You should override this function to define custom behavior when the text changes.
     * 
     * This method is called:
     * * When Enter is pressed after typing
     * * When [DTextEntry:SetValue](https://wiki.facepunch.com/gmod/DTextEntry:SetValue) is used
     * * For every key typed - only if [DTextEntry:SetUpdateOnType](https://wiki.facepunch.com/gmod/DTextEntry:SetUpdateOnType) was set to true (default is false)
     * @param value - The DTextEntry text.
     */
    OnValueChange(value: string): void;
    
    /**
     * [Client and Menu]
     * 
     * **.**
     * Builds a [DMenu](https://wiki.facepunch.com/gmod/DMenu) for the DTextEntry based on the input table.
     * @param tab - Table containing results from [DTextEntry:GetAutoComplete](https://wiki.facepunch.com/gmod/DTextEntry:GetAutoComplete).
     */
    OpenAutoComplete(tab: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the cursor's color in  DTextEntry (the blinking line).
     * @param color - The color to set the cursor to.
     */
    SetCursorColor(color: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Disables input on a DTextEntry and greys it out visually. This differs from [DTextEntry:SetEditable](https://wiki.facepunch.com/gmod/DTextEntry:SetEditable) which doesn't visually change the textbox.
     * 
     * @deprecated Use [Panel:SetEnabled](https://wiki.facepunch.com/gmod/Panel:SetEnabled) instead.
     * 
     * @param disabled - Whether the textbox should be disabled
     */
    SetDisabled(disabled: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Alias of [DTextEntry:SetPaintBackground](https://wiki.facepunch.com/gmod/DTextEntry:SetPaintBackground). Use that instead.
     * @param show - 
     */
    SetDrawBackground(show: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Does nothing.
     * @param bool - 
     */
    SetDrawBorder(bool: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Disables Input on a DTextEntry. This differs from [DTextEntry:SetDisabled](https://wiki.facepunch.com/gmod/DTextEntry:SetDisabled) - SetEditable will not affect the appearance of the textbox.
     * @param enabled - Whether the DTextEntry should be editable
     */
    SetEditable(enabled: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether pressing the Enter key will cause the DTextEntry to lose focus or not, provided it is not multiline. This is true by default.
     * @param allowEnter - If set to false, pressing Enter will not cause the panel to lose focus and will never call [DTextEntry:OnEnter](https://wiki.facepunch.com/gmod/DTextEntry:OnEnter).
     */
    SetEnterAllowed(allowEnter: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Changes the font of the DTextEntry.
     * @param font - The name of the font to be changed to.
     */
    SetFont(font: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets/overrides the default highlight/text selection color of the text entry.
     * @param color - The new highlight [Global.Color](https://wiki.facepunch.com/gmod/Global.Color).
     */
    SetHighlightColor(color: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Enables or disables the history functionality of  [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry). This allows the player to scroll through history elements using up and down arrow keys.
     * 
     * See [DTextEntry:AddHistory](https://wiki.facepunch.com/gmod/DTextEntry:AddHistory).
     * @param enable - Whether to enable history or not.
     */
    SetHistoryEnabled(enable: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not to decline non-numeric characters as input.
     * 
     * Numeric characters are `1234567890.-`
     * @param numericOnly - Whether to accept only numeric characters.
     */
    SetNumeric(numericOnly: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether to show the default background of the DTextEntry.
     * @param show - `false` hides the background; this is `true` by default.
     */
    SetPaintBackground(show: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Allow you to set placeholder color.
     * @param [color = Color(128, 128, 128)] - The color of the placeholder.
     */
    SetPlaceholderColor(color?: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the placeholder text that will be shown while the text entry has no user text. The player will not need to delete the placeholder text if they decide to start typing.
     * @param [text = nil] - 
     */
    SetPlaceholderText(text?: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not the panel accepts <key>tab</key> key.
     * 
     * **Note:**
     * >Disabling tab key prevents the panel from unfocusing by mouse, however, still works for focusing to other keyboard focus.
     * 
     * @param enabled - Whether the [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry) should ignore <key>tab</key>.
     */
    SetTabbingDisabled(enabled: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the text color of the [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry).
     * @param color - The text color. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     */
    SetTextColor(color: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether we should fire [DTextEntry:OnValueChange](https://wiki.facepunch.com/gmod/DTextEntry:OnValueChange) every time we type or delete a character or only when Enter is pressed.
     * @param updateOnType - 
     */
    SetUpdateOnType(updateOnType: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the text of the [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry) and calls [DTextEntry:OnValueChange](https://wiki.facepunch.com/gmod/DTextEntry:OnValueChange).
     * 
     * **Note:**
     * >The text of the [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry) only changes if it's not currently being typed in. If you would rather set the text regardless, use [Panel:SetText](https://wiki.facepunch.com/gmod/Panel:SetText).
     * 
     * @param text - The value to set.
     */
    SetValue(text: string): void;
    
    /**
     * [Client and Menu]
     * 
     * **)**
     * 
     * Updates the ConVar associated with the TextEntry to its new value.
     * 
     */
    UpdateConvarValue(): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally to set text from the history.
     * 
     */
    UpdateFromHistory(): void;
    
    /**
     * [Client and Menu]
     * 
     * Used internally to set text from the autocomplete menu.
     * 
     */
    UpdateFromMenu(): void;

}

/**
 * Similarly to [DIconLayout](https://wiki.facepunch.com/gmod/DIconLayout), this lays out panels in two dimensions as tiles.
 * 
 * 		The difference between this and [DIconLayout](https://wiki.facepunch.com/gmod/DIconLayout) is that [DIconLayout](https://wiki.facepunch.com/gmod/DIconLayout) items all have the same height while
 * 		[DTileLayout](https://wiki.facepunch.com/gmod/DTileLayout) items do not have this enforcement. 
 * 		[DTileLayout](https://wiki.facepunch.com/gmod/DTileLayout) will find the best way to "pack" its children.  
 * 		For example, in a two column layout, a item of height 2 units will be placed in one column while 
 * 		two items of height 1 unit will be placed in the other column. 
 * 
 * 		It is worth noting however that because this panel iterates through its children in an undefined order and lays out while
 * 		it is iterating, there is no guarantee that this packing will lead to the lowest possible height.
 * 
 * 		This is used by the spawnmenu to arrange spawnicons.
 * 
 * 		The base size defines the smallest a tile can be, and it will resize vertically to accommodate all child panels.
 * 		The number of elements in each row is determined by the base size and width.
 * 
 * 		It also optionally permits the rearrangement of these tiles.
 * 		To enable this functionality, call [DDragBase:MakeDroppable](https://wiki.facepunch.com/gmod/DDragBase:MakeDroppable) on the DTileLayout with a unique identifier.
 * 		All panels added following this will be moveable.
 */
interface DTileLayout extends DDragBase {
    

    /**
     * [Client]
     * 
     * Clears the panel's tile table. Used by [DTileLayout:LayoutTiles](https://wiki.facepunch.com/gmod/DTileLayout:LayoutTiles).
     * 
     */
    ClearTiles(): void;
    
    /**
     * [Client]
     * 
     * Called to designate a range of tiles as occupied by a panel.
     * @param x - The x coordinate of the top-left corner of the panel.
     * @param y - The y coordinate of the top-left corner of the panel.
     * @param w - The panel's width.
     * @param h - The panel's height.
     */
    ConsumeTiles(x: number, y: number, w: number, h: number): void;
    
    /**
     * [Client]
     * 
     * Creates and returns an exact copy of the DTileLayout.
     * 
     */
    Copy(): Panel;
    
    /**
     * [Client]
     * 
     * Creates copies of all the children from the given panel object and parents them to this one.
     * @param source - The source panel from which to copy all children.
     */
    CopyContents(source: Panel): void;
    
    /**
     * [Client]
     * 
     * Finds the coordinates of the first group of free tiles that fit the given size.
     * @param x - The x coordinate to start looking from.
     * @param y - The y coordinate to start looking from.
     * @param w - The needed width.
     * @param h - The needed height.
     */
    FindFreeTile(x: number, y: number, w: number, h: number): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client]
     * 
     * Determines if a group of tiles is vacant.
     * @param x - The x coordinate of the first tile.
     * @param y - The y coordinate of the first tile.
     * @param w - The width needed.
     * @param h - The height needed.
     */
    FitsInTile(x: number, y: number, w: number, h: number): boolean;
    
    /**
     * [Client]
     * 
     * Returns the size of each single tile, set with [DTileLayout:SetBaseSize](https://wiki.facepunch.com/gmod/DTileLayout:SetBaseSize).
     * 
     */
    GetBaseSize(): number;
    
    /**
     * [Client]
     * 
     * Returns the border spacing set by [DTileLayout:SetBorder](https://wiki.facepunch.com/gmod/DTileLayout:SetBorder).
     * 
     */
    GetBorder(): number;
    
    /**
     * [Client]
     * 
     * Returns the minimum height the DTileLayout can resize to.
     * 
     */
    GetMinHeight(): number;
    
    /**
     * [Client]
     * 
     * Returns the X axis spacing between 2 elements set by [DTileLayout:SetSpaceX](https://wiki.facepunch.com/gmod/DTileLayout:SetSpaceX).
     * 
     */
    GetSpaceX(): number;
    
    /**
     * [Client]
     * 
     * Returns the Y axis spacing between 2 elements set by [DTileLayout:SetSpaceY](https://wiki.facepunch.com/gmod/DTileLayout:SetSpaceY).
     * 
     */
    GetSpaceY(): number;
    
    /**
     * [Client]
     * 
     * Gets the occupied state of a tile.
     * @param x - The x coordinate of the tile.
     * @param y - The y coordinate of the tile.
     */
    GetTile(x: number, y: number): any;
    
    /**
     * [Client]
     * 
     * Resets the last width/height info, and invalidates the panel's layout, causing it to recalculate all child positions. It is called whenever a child is added or removed, and can be called to refresh the panel.
     * 
     */
    Layout(): void;
    
    /**
     * [Client]
     * 
     * Called by [PANEL:PerformLayout](https://wiki.facepunch.com/gmod/PANEL:PerformLayout) to arrange and lay out the child panels, if it has changed in size.
     * 
     */
    LayoutTiles(): void;
    
    /**
     * [Client]
     * 
     * Called when anything is dropped on or rearranged within the DTileLayout.
     * 
     */
    OnModified(): void;
    
    /**
     * [Client]
     * 
     * Sets the size of a single tile. If a child panel is larger than this size, it will occupy several tiles.
     * 
     * If you are setting the size of the children properly then you probably don't need to change this.
     * @param size - The size of each tile. It is recommended you use `2ⁿ` (`16, 32, 64...`) numbers, and those above `4`, as numbers lower than this will result in many tiles being processed and therefore slow operation.
     */
    SetBaseSize(size: number): void;
    
    /**
     * [Client]
     * 
     * Sets the spacing between the border/edge of the [DTileLayout](https://wiki.facepunch.com/gmod/DTileLayout) and all the elements inside.
     * @param border - 
     */
    SetBorder(border: number): void;
    
    /**
     * [Client]
     * 
     * Determines the minimum height the DTileLayout will resize to. This is useful if child panels will be added/removed often.
     * @param minH - The minimum height the panel can shrink to.
     */
    SetMinHeight(minH: number): void;
    
    /**
     * [Client]
     * 
     * Sets the spacing between 2 elements in the [DTileLayout](https://wiki.facepunch.com/gmod/DTileLayout) on the X axis.
     * @param spacingX - New X axis spacing.
     */
    SetSpaceX(spacingX: number): void;
    
    /**
     * [Client]
     * 
     * Sets the spacing between 2 elements in the [DTileLayout](https://wiki.facepunch.com/gmod/DTileLayout) on the Y axis.
     * @param spaceY - New Y axis spacing.
     */
    SetSpaceY(spaceY: number): void;
    
    /**
     * [Client]
     * 
     * Called to set the occupied state of a tile.
     * @param x - The x coordinate of the tile.
     * @param y - The y coordinate of the tile.
     * @param state - The new state of the tile, normally `1` or `nil`.
     */
    SetTile(x: number, y: number, state: any): void;

}

/**
 * The panel used internally for tool tips. See [Panel:SetTooltip](https://wiki.facepunch.com/gmod/Panel:SetTooltip).
 */
interface DTooltip extends DLabel {
    

    /**
     * [Client and Menu]
     * 
     * Forces the tooltip to close. This will remove the panel.
     * 
     */
    Close(): void;
    
    /**
     * [Client and Menu]
     * 
     * Used to draw a triangle beneath the [DTooltip](https://wiki.facepunch.com/gmod/DTooltip)
     * 
     * **Note:**
     * >Requires [DTooltip:SetContents](https://wiki.facepunch.com/gmod/DTooltip:SetContents), without this it will error
     * 
     * @param x - arrow location on the x axis
     * @param y - arrow location on the y axis
     */
    DrawArrow(x: number, y: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets up the tooltip for display for given panel and starts the timer.
     * 
     * Normally you wouldn't call this and you'd use [Panel:SetTooltip](https://wiki.facepunch.com/gmod/Panel:SetTooltip), [Panel:SetTooltipPanel](https://wiki.facepunch.com/gmod/Panel:SetTooltipPanel) or [Panel:SetTooltipPanelOverride](https://wiki.facepunch.com/gmod/Panel:SetTooltipPanelOverride).
     * @param pnl - The panel to open the tooltip for.
     */
    OpenForPanel(pnl: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Positions the [DTooltip](https://wiki.facepunch.com/gmod/DTooltip) so it doesn't stay in the same draw position.
     * 
     */
    PositionTooltip(): void;
    
    /**
     * [Client and Menu]
     * 
     * What Panel you want put inside of the [DTooltip](https://wiki.facepunch.com/gmod/DTooltip)
     * 
     * **Note:**
     * >You can only have one Panel at a time; use Parenting to add more
     * 
     * @param panel - Contents
     * @param [delete_ = false] - If set to true, the panel in the first argument will be automatically removed when [DTooltip](https://wiki.facepunch.com/gmod/DTooltip) is closed via [DTooltip:Close](https://wiki.facepunch.com/gmod/DTooltip:Close).
     */
    SetContents(panel: Panel, delete_ = false): void;

}

/**
 * A tree view element for Derma.
 * 
 * See also [DTree_Node](https://wiki.facepunch.com/gmod/DTree_Node).
 */
interface DTree extends DScrollPanel {
    

    /**
     * [Client and Menu]
     * 
     * Add a node to the DTree
     * @param name - Name of the option.
     * @param [icon = icon16/folder.png] - The icon that will show nexto the node in the DTree.
     */
    AddNode(name: string, icon?: string): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Calls directly to [Panel:InvalidateLayout](https://wiki.facepunch.com/gmod/Panel:InvalidateLayout).
     * Called by [DTree_Node](https://wiki.facepunch.com/gmod/DTree_Node)s when a sub element has been expanded or collapsed.
     * 
     * Used as a placeholder function alongside [DTree:ExpandTo](https://wiki.facepunch.com/gmod/DTree:ExpandTo), [DTree:SetExpanded](https://wiki.facepunch.com/gmod/DTree:SetExpanded) and [DTree:MoveChildTo](https://wiki.facepunch.com/gmod/DTree:MoveChildTo).
     * 
     * The [DTree](https://wiki.facepunch.com/gmod/DTree) acts a root node and methods with the same name in [DTree_Node](https://wiki.facepunch.com/gmod/DTree_Node) call to the parent.
     * @param bExpand - 
     */
    ChildExpanded(bExpand: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when the any node is clicked. Called by [DTree_Node:DoClick](https://wiki.facepunch.com/gmod/DTree_Node:DoClick).
     * @param node - The right clicked node.
     */
    DoClick(node: DTree_Node): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Called when the any node is right clicked. Called by [DTree_Node:DoRightClick](https://wiki.facepunch.com/gmod/DTree_Node:DoRightClick).
     * @param node - The right clicked node.
     */
    DoRightClick(node: DTree_Node): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Does nothing. Used as a placeholder empty function alongside [DTree:MoveChildTo](https://wiki.facepunch.com/gmod/DTree:MoveChildTo), [DTree:SetExpanded](https://wiki.facepunch.com/gmod/DTree:SetExpanded) and [DTree:ChildExpanded](https://wiki.facepunch.com/gmod/DTree:ChildExpanded).
     * 
     * The [DTree](https://wiki.facepunch.com/gmod/DTree) acts a root node and methods with the same name in [DTree_Node](https://wiki.facepunch.com/gmod/DTree_Node) call to the parent.
     * @param bExpand - 
     */
    ExpandTo(bExpand: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the status of [DTree:SetClickOnDragHover](https://wiki.facepunch.com/gmod/DTree:SetClickOnDragHover). See that for more info.
     * 
     */
    GetClickOnDragHover(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the indentation size of the [DTree](https://wiki.facepunch.com/gmod/DTree), the distance between each "level" of the tree is offset on the left from the previous level.
     * 
     * Currently this feature has no effect on the [DTree](https://wiki.facepunch.com/gmod/DTree) element.
     * 
     */
    GetIndentSize(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the height of each [DTree_Node](https://wiki.facepunch.com/gmod/DTree_Node) in the tree.
     * 
     */
    GetLineHeight(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the currently selected node.
     * 
     */
    GetSelectedItem(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not the [Silkicons](https://wiki.facepunch.com/gmod/Silkicons) next to each node of the DTree will be displayed.
     * 
     * Individual icons can be set with [DTree_Node:SetIcon](https://wiki.facepunch.com/gmod/DTree_Node:SetIcon) or passed as the second argument in [DTree:AddNode](https://wiki.facepunch.com/gmod/DTree:AddNode).
     * 
     */
    GetShowIcons(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Does nothing.
     * 
     */
    LayoutTree(): void;
    
    /**
     * [Client and Menu]
     * 
     * Moves given node to the top of [DTree](https://wiki.facepunch.com/gmod/DTree)s children. (Makes it the topmost mode)
     * 
     * Used as a placeholder function alongside [DTree:ExpandTo](https://wiki.facepunch.com/gmod/DTree:ExpandTo), [DTree:SetExpanded](https://wiki.facepunch.com/gmod/DTree:SetExpanded) and [DTree:ChildExpanded](https://wiki.facepunch.com/gmod/DTree:ChildExpanded).
     * 
     * The [DTree](https://wiki.facepunch.com/gmod/DTree) acts a root node and methods with the same name in [DTree_Node](https://wiki.facepunch.com/gmod/DTree_Node) call to the parent.
     * @param child - The node to move
     * @param pos - Unused, does nothing.
     */
    MoveChildTo(child: Panel, pos: number): void;
    
    /**
     * [Client and Menu]
     * 
     * This function is called when a node within a tree is selected.
     * @param node - The node that was selected.
     */
    OnNodeSelected(node: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the root [DTree_Node](https://wiki.facepunch.com/gmod/DTree_Node), the node that is the parent to all other nodes of the DTree.
     * 
     */
    Root(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Enables the "click when drag-hovering" functionality.
     * 
     * If enabled, when hovering over any [DTree_Node](https://wiki.facepunch.com/gmod/DTree_Node) of this [DTree](https://wiki.facepunch.com/gmod/DTree) while dragging a panel, the node will be automatically clicked on (and subsequently [DTree:OnNodeSelected](https://wiki.facepunch.com/gmod/DTree:OnNodeSelected) will be called) to open any attached panels, such as spawnlists in spawnmenu.
     * 
     * See also: [PANEL:DragHoverClick](https://wiki.facepunch.com/gmod/PANEL:DragHoverClick).
     * @param enable - 
     */
    SetClickOnDragHover(enable: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Does nothing. Is not called by the [DTree](https://wiki.facepunch.com/gmod/DTree) itself.
     * 
     * Used as a placeholder empty function alongside [DTree:ExpandTo](https://wiki.facepunch.com/gmod/DTree:ExpandTo), [DTree:MoveChildTo](https://wiki.facepunch.com/gmod/DTree:MoveChildTo) and [DTree:ChildExpanded](https://wiki.facepunch.com/gmod/DTree:ChildExpanded) to prevent errors when [DTree_Node:SetExpanded](https://wiki.facepunch.com/gmod/DTree_Node:SetExpanded) is incorrectly used on a [DTree](https://wiki.facepunch.com/gmod/DTree).
     * @param bExpand - 
     */
    SetExpanded(bExpand: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the indentation size of the [DTree](https://wiki.facepunch.com/gmod/DTree), the distance between each "level" of the tree is offset on the left from the previous level.
     * 
     * Currently this feature has no effect on the [DTree](https://wiki.facepunch.com/gmod/DTree) element.
     * @param size - The new indentation size.
     */
    SetIndentSize(size: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the height of each [DTree_Node](https://wiki.facepunch.com/gmod/DTree_Node) in the tree.
     * 
     * The default value is 17.
     * @param h - The height to set.
     */
    SetLineHeight(h: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Set the currently selected top-level node.
     * @param node - [DTree_Node](https://wiki.facepunch.com/gmod/DTree_Node) to select.
     */
    SetSelectedItem(node: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not the [Silkicons](https://wiki.facepunch.com/gmod/Silkicons) next to each node of the DTree will be displayed.
     * 
     * Individual icons can be set with [DTree_Node:SetIcon](https://wiki.facepunch.com/gmod/DTree_Node:SetIcon) or passed as the second argument in [DTree:AddNode](https://wiki.facepunch.com/gmod/DTree:AddNode).
     * @param show - Whether or not to show icons.
     */
    SetShowIcons(show: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not the [Silkicons](https://wiki.facepunch.com/gmod/Silkicons) next to each node of the DTree will be displayed.
     * 
     * Alias of [DTree:GetShowIcons](https://wiki.facepunch.com/gmod/DTree:GetShowIcons).
     * 
     */
    ShowIcons(): boolean;

}

/**
 * This panel is created whenever you add a node to a [DTree](https://wiki.facepunch.com/gmod/DTree).
 * The root node of a [DTree](https://wiki.facepunch.com/gmod/DTree) is also a [DTree_Node](https://wiki.facepunch.com/gmod/DTree_Node) and controls much of its action. it can be accessed with [DTree:Root](https://wiki.facepunch.com/gmod/DTree:Root).
 */
interface DTree_Node extends DPanel {
    

    /**
     * [Client and Menu]
     * 
     * A helper function that adds a new node and calls to [DTree_Node:MakeFolder](https://wiki.facepunch.com/gmod/DTree_Node:MakeFolder) on it.
     * @param name - The name of the new node
     * @param folder - The folder in the filesystem to use, relative to the garrysmod/ folder.
     * @param path - The path to search in. See [File Search Paths](https://wiki.facepunch.com/gmod/File_Search_Paths)
     * @param [showFiles = false] - Should files be added as nodes (true) or folders only (false)
     * @param [wildcard = *] - The wildcard to use when searching for files.
     * @param [bDontForceExpandable = false] - 
     */
    AddFolder(name: string, folder: string, path: string, showFiles = false, wildcard?: string, bDontForceExpandable = false): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Add a child node to the DTree_Node
     * @param name - Name of the node.
     * @param [icon = icon16/folder.png] - The icon that will show next to the node in the DTree.
     */
    AddNode(name: string, icon?: string): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Adds the given panel to the child nodes list, a [DListLayout](https://wiki.facepunch.com/gmod/DListLayout).
     * @param pnl - The panel to add.
     */
    AddPanel(pnl: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Internal function that handles the expand/collapse animations.
     * @param anim - 
     * @param delta - 
     * @param data - 
     */
    AnimSlide(anim: any, delta: number, data: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when a child node is expanded or collapsed to propagate this event to parent nodes to update layout.
     * @param expanded - 
     */
    ChildExpanded(expanded: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Cleans up the internal table of items (sub-nodes) of this node from invalid panels or sub-nodes that were moved from this node to another.
     * 
     * Appears the be completely unused by the game on its own.
     * 
     */
    CleanList(): void;
    
    /**
     * [Client and Menu]
     * 
     * Create and returns a copy of this node, including all the sub-nodes.
     * 
     */
    Copy(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Creates the container [DListLayout](https://wiki.facepunch.com/gmod/DListLayout) for the [DTree_Node](https://wiki.facepunch.com/gmod/DTree_Node)s.
     * 
     * This is called automatically so you don't have to.
     * 
     */
    CreateChildNodes(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called automatically to update the status of [DTree_Node:GetLastChild](https://wiki.facepunch.com/gmod/DTree_Node:GetLastChild) on children of this node.
     * 
     */
    DoChildrenOrder(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when the node is clicked.
     * 
     * See also [DTree_Node:DoRightClick](https://wiki.facepunch.com/gmod/DTree_Node:DoRightClick).
     * 
     */
    DoClick(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Called when the node is right clicked.
     * 
     * See also [DTree_Node:DoClick](https://wiki.facepunch.com/gmod/DTree_Node:DoClick).
     * 
     */
    DoRightClick(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Expands or collapses this node, as well as ALL child nodes of this node.
     * 
     * Works opposite of [DTree_Node:ExpandTo](https://wiki.facepunch.com/gmod/DTree_Node:ExpandTo).
     * @param expand - Whether to expand (true) or collapse (false)
     */
    ExpandRecurse(expand: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Collapses or expands all nodes from the topmost-level node to this one.
     * 
     * Works opposite of [DTree_Node:ExpandRecurse](https://wiki.facepunch.com/gmod/DTree_Node:ExpandRecurse).
     * @param expand - Whether to expand (true) or collapse (false)
     */
    ExpandTo(expand: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Called automatically from [DTree_Node:PopulateChildrenAndSelf](https://wiki.facepunch.com/gmod/DTree_Node:PopulateChildrenAndSelf) and [DTree_Node:PopulateChildren](https://wiki.facepunch.com/gmod/DTree_Node:PopulateChildren) to populate this node with child nodes of files and folders.
     * @param bAndChildren - Does nothing. Set to true if called from [DTree_Node:PopulateChildren](https://wiki.facepunch.com/gmod/DTree_Node:PopulateChildren).
     * @param bExpand - Expand self once population process is finished.
     */
    FilePopulate(bAndChildren: boolean, bExpand: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Called automatically from [DTree_Node:FilePopulate](https://wiki.facepunch.com/gmod/DTree_Node:FilePopulate) to actually fill the node with sub-nodes based on set preferences like should files be added, etc.
     * @param files - A list of files in this folder
     * @param folders - A list of folder in this folder.
     * @param foldername - The folder name/path this node represents
     * @param path - The Path ID search was performed with. See [File Search Paths](https://wiki.facepunch.com/gmod/File_Search_Paths)
     * @param bAndChildren - Inherited from the **FilePopulate** call. Does nothing
     * @param wildcard - The wildcard that was given
     */
    FilePopulateCallback(files: any, folders: any, foldername: string, path: string, bAndChildren: boolean, wildcard: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns n-th child node.
     * 
     * Basically an alias of [Panel:GetChild](https://wiki.facepunch.com/gmod/Panel:GetChild).
     * @param num - The number of the child to get, starting with 0
     */
    GetChildNode(num: number): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Returns the number of child nodes this node has. For use with [DTree_Node:GetChildNode](https://wiki.facepunch.com/gmod/DTree_Node:GetChildNode)
     * 
     */
    GetChildNodeCount(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns a table containing all child nodes of this node.
     * 
     */
    GetChildNodes(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns value set by [DTree_Node:SetDirty](https://wiki.facepunch.com/gmod/DTree_Node:SetDirty).
     * 
     */
    GetDirty(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the double clock to collapse/expand functionality is enabled on this node.
     * 
     */
    GetDoubleClickToOpen(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns what is set by [DTree_Node:SetDraggableName](https://wiki.facepunch.com/gmod/DTree_Node:SetDraggableName).
     * 
     */
    GetDraggableName(): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not this node is drawing lines
     * 
     */
    GetDrawLines(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the node is expanded or not.
     * 
     */
    GetExpanded(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the filepath of the file attached to this node.
     * 
     */
    GetFileName(): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns the folder path to search in, set by [DTree_Node:MakeFolder](https://wiki.facepunch.com/gmod/DTree_Node:MakeFolder).
     * 
     */
    GetFolder(): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the expand/collapse button is shown on this node regardless of whether or not it has sub-nodes.
     * 
     * See also [DTree_Node:SetForceShowExpander](https://wiki.facepunch.com/gmod/DTree_Node:SetForceShowExpander).
     * 
     */
    GetForceShowExpander(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the expand button (little + button) should be shown or hidden.
     * 
     */
    GetHideExpander(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the image path to the icon of this node.
     * 
     */
    GetIcon(): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns the indentation level of the [DTree](https://wiki.facepunch.com/gmod/DTree) this node belongs to.
     * 
     * Alias of [DTree:GetIndentSize](https://wiki.facepunch.com/gmod/DTree:GetIndentSize), see it for more info.
     * 
     */
    GetIndentSize(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether this node is the last child on this level or not.
     * 
     */
    GetLastChild(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * The height of a single [DTree_Node](https://wiki.facepunch.com/gmod/DTree_Node) of the [DTree](https://wiki.facepunch.com/gmod/DTree) this node belongs to.
     * 
     * Alias of [DTree:GetLineHeight](https://wiki.facepunch.com/gmod/DTree:GetLineHeight).
     * 
     */
    GetLineHeight(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the node still needs a filesystem search for sub-nodes.
     * 
     * @deprecated Seems to be unused entirely.
     * 
     * 
     */
    GetNeedsChildSearch(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not the node is set to be populated from the filesystem.
     * 
     */
    GetNeedsPopulating(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the parent [DTree_Node](https://wiki.facepunch.com/gmod/DTree_Node). Note that [Panel:GetParent](https://wiki.facepunch.com/gmod/Panel:GetParent) will not be the same!
     * 
     */
    GetParentNode(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Returns the path ID ([File Search Paths](https://wiki.facepunch.com/gmod/File_Search_Paths)) used in populating the [DTree](https://wiki.facepunch.com/gmod/DTree) from the filesystem.
     * 
     * See [DTree_Node:SetPathID](https://wiki.facepunch.com/gmod/DTree_Node:SetPathID) and [DTree_Node:MakeFolder](https://wiki.facepunch.com/gmod/DTree_Node:MakeFolder).
     * 
     */
    GetPathID(): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns the root node, the [DTree](https://wiki.facepunch.com/gmod/DTree) this node is under.
     * 
     * See also [DTree_Node:GetParentNode](https://wiki.facepunch.com/gmod/DTree_Node:GetParentNode).
     * 
     */
    GetRoot(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not nodes for files should/will be added when populating the node from filesystem.
     * 
     */
    GetShowFiles(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the wildcard set by [DTree_Node:MakeFolder](https://wiki.facepunch.com/gmod/DTree_Node:MakeFolder).
     * 
     */
    GetWildCard(): string;
    
    /**
     * [Client and Menu]
     * 
     * Inserts a sub-node into this node before or after the given node.
     * @param node - The [DTree_Node](https://wiki.facepunch.com/gmod/DTree_Node) to insert.
     * @param nodeNextTo - The node to insert the node above before or after.
     * @param before - true to insert before, false to insert after.
     */
    Insert(node: Panel, nodeNextTo: Panel, before: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Inserts an existing node as a "child" or a sub-node of this node.
     * Used internally by the drag'n'drop functionality.
     * @param node - Has to be [DTree_Node](https://wiki.facepunch.com/gmod/DTree_Node)
     */
    InsertNode(node: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Called automatically internally.
     * 
     * Makes the target node compatible with this node's drag'n'drop.
     * @param node - The [DTree_Node](https://wiki.facepunch.com/gmod/DTree_Node).
     */
    InstallDraggable(node: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * See [DTree_Node:DoClick](https://wiki.facepunch.com/gmod/DTree_Node:DoClick)
     * 
     */
    InternalDoClick(): void;
    
    /**
     * [Client and Menu]
     * 
     * See [DTree_Node:DoRightClick](https://wiki.facepunch.com/gmod/DTree_Node:DoRightClick).
     * 
     */
    InternalDoRightClick(): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns true if [DTree_Node:GetRoot](https://wiki.facepunch.com/gmod/DTree_Node:GetRoot) is the same as [DTree_Node:GetParentNode](https://wiki.facepunch.com/gmod/DTree_Node:GetParentNode) of this node.
     * 
     */
    IsRootNode(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Removes given node as a sub-node of this node.
     * 
     * It doesn't actually remove or unparent the panel, just removes it from the internal [DListView](https://wiki.facepunch.com/gmod/DListView).
     * @param pnl - The node to remove
     */
    LeaveTree(pnl: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Makes this node a folder in the filesystem. This will make it automatically populated.
     * 
     * See also [DTree_Node:AddFolder](https://wiki.facepunch.com/gmod/DTree_Node:AddFolder).
     * @param folder - The folder in the filesystem to use, relative to the garrysmod/ folder.
     * @param path - The path to search in. See [File Search Paths](https://wiki.facepunch.com/gmod/File_Search_Paths)
     * @param [showFiles = false] - Should files be added as nodes (true) or folders only (false)
     * @param [wildcard = *] - The wildcard to use when searching for files.
     * @param [dontForceExpandable = false] - If set to true, don't show the expand buttons on empty nodes.
     */
    MakeFolder(folder: string, path: string, showFiles = false, wildcard?: string, dontForceExpandable = false): void;
    
    /**
     * [Client and Menu]
     * 
     * Moves given panel to the top of the children of this node.
     * 
     * Despite name of this function, it cannot move the children to any position but the topmost.
     * @param node - The node to move.
     */
    MoveChildTo(node: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Moves this node to the top of the level.
     * 
     */
    MoveToTop(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when sub-nodes of this [DTree_Node](https://wiki.facepunch.com/gmod/DTree_Node) were changed, such as being rearranged if that functionality is enabled.
     * 
     */
    OnModified(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when a new sub-node is added this node.
     * @param newNode - The newly added sub node.
     */
    OnNodeAdded(newNode: DTree_Node): void;
    
    /**
     * [Client and Menu]
     * 
     * Called when this or a sub node is selected. Do not use this, it is not for override.
     * 
     * Use [DTree:OnNodeSelected](https://wiki.facepunch.com/gmod/DTree:OnNodeSelected) or [DTree_Node:DoClick](https://wiki.facepunch.com/gmod/DTree_Node:DoClick) instead.
     * @param node - 
     */
    OnNodeSelected(node: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Called automatically to perform layout on this node if this node [DTree_Node:IsRootNode](https://wiki.facepunch.com/gmod/DTree_Node:IsRootNode).
     * 
     */
    PerformRootNodeLayout(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called automatically from [DTree_Node:PopulateChildrenAndSelf](https://wiki.facepunch.com/gmod/DTree_Node:PopulateChildrenAndSelf).
     * 
     */
    PopulateChildren(): void;
    
    /**
     * [Client and Menu]
     * 
     * Called automatically from [DTree_Node:SetExpanded](https://wiki.facepunch.com/gmod/DTree_Node:SetExpanded) (or when user manually expands the node) to populate the node with sub-nodes from the filesystem if this was enabled via [DTree_Node:MakeFolder](https://wiki.facepunch.com/gmod/DTree_Node:MakeFolder).
     * @param expand - Expand self once population process is finished.
     */
    PopulateChildrenAndSelf(expand: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Appears to have no effect on the [DTree_Node](https://wiki.facepunch.com/gmod/DTree_Node).
     * @param dirty - 
     */
    SetDirty(dirty: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether double clicking the node should expand/collapse it or not.
     * @param enable - true to enable, false to disable this functionality.
     */
    SetDoubleClickToOpen(enable: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Used to store name for sub elements for a [Panel:Droppable](https://wiki.facepunch.com/gmod/Panel:Droppable) call.
     * @param name - 
     */
    SetDraggableName(name: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not this node should draw visual lines.
     * @param draw - 
     */
    SetDrawLines(draw: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Expands or collapses this node.
     * @param expand - Whether to expand (true) or collapse (false)
     * @param [surpressAnimation = false] - Whether to play animation (false) or not (true)
     */
    SetExpanded(expand: boolean, surpressAnimation = false): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the file full filepath to the file attached to this node
     * @param filename - 
     */
    SetFileName(filename: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the folder to search files and folders in.
     * 
     * Use [DTree_Node:MakeFolder](https://wiki.facepunch.com/gmod/DTree_Node:MakeFolder) instead.
     * @param folder - 
     */
    SetFolder(folder: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not the expand/collapse button (+/- button) should be shown on this node regardless of whether it has sub-elements or not.
     * @param forceShow - 
     */
    SetForceShowExpander(forceShow: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether the expand button (little + button) should be shown or hidden.
     * @param hide - 
     */
    SetHideExpander(hide: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the material for the icon of the [DTree_Node](https://wiki.facepunch.com/gmod/DTree_Node).
     * @param path - The path to the material to be used. Do not include "materials/". .pngs are supported.
     */
    SetIcon(path: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Called automatically to set whether this node is the last child on this level or not.
     * @param last - 
     */
    SetLastChild(last: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether the node still needs a filesystem search for sub-nodes.
     * 
     * @deprecated Seems to be unused entirely.
     * 
     * @param newState - New state.
     */
    SetNeedsChildSearch(newState: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not the node needs populating from the filesystem.
     * @param needs - Whether or not the node needs populating
     */
    SetNeedsPopulating(needs: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the parent node of this node. Not the same as [Panel:SetParent](https://wiki.facepunch.com/gmod/Panel:SetParent).
     * 
     * This is set automatically, you shouldn't use this.
     * @param parent - The panel to set as a parent node for this node
     */
    SetParentNode(parent: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the path ID ([File Search Paths](https://wiki.facepunch.com/gmod/File_Search_Paths)) for populating the tree from the filesystem.
     * 
     * Use [DTree_Node:MakeFolder](https://wiki.facepunch.com/gmod/DTree_Node:MakeFolder) instead.
     * @param path - The path ID to set.
     */
    SetPathID(path: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the root node (the [DTree](https://wiki.facepunch.com/gmod/DTree)) of this node.
     * 
     * This is set automatically, you shouldn't use this.
     * @param root - The panel to set as root node.
     */
    SetRoot(root: Panel): void;
    
    /**
     * [Client and Menu]
     * 
     * Called automatically to update the "selected" status of this node.
     * @param selected - Whether this node is currently selected or not.
     */
    SetSelected(selected: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether or not nodes for files should be added when populating the node from filesystem.
     * @param showFiles - 
     */
    SetShowFiles(showFiles: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Currently does nothing, not implemented.
     * 
     */
    SetupCopy(): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the search wildcard.
     * 
     * Use [DTree_Node:MakeFolder](https://wiki.facepunch.com/gmod/DTree_Node:MakeFolder) instead
     * @param wildcard - The wildcard to set
     */
    SetWildCard(wildcard: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not the [DTree](https://wiki.facepunch.com/gmod/DTree) this node is in has icons enabled.
     * 
     * See [DTree:ShowIcons](https://wiki.facepunch.com/gmod/DTree:ShowIcons) for more info.
     * 
     */
    ShowIcons(): number;

}

/**
 * Used by [DTree_Node](https://wiki.facepunch.com/gmod/DTree_Node).
 */
interface DTree_Node_Button extends DButton {
    

    

}

/**
 * Vertical version of [DHorizontalDivider](https://wiki.facepunch.com/gmod/DHorizontalDivider).
 */
interface DVerticalDivider extends DPanel {
    

    /**
     * [Client]
     * 
     * Used internally to clamp the vertical divider to [DVerticalDivider:GetTopMin](https://wiki.facepunch.com/gmod/DVerticalDivider:GetTopMin) and [DVerticalDivider:GetBottomMin](https://wiki.facepunch.com/gmod/DVerticalDivider:GetBottomMin).
     * 
     */
    DoConstraints(): void;
    
    /**
     * [Client]
     * 
     * Returns the bottom content panel of the [DVerticalDivider](https://wiki.facepunch.com/gmod/DVerticalDivider).
     * 
     */
    GetBottom(): Panel;
    
    /**
     * [Client]
     * 
     * Returns the minimum height of the bottom content panel.
     * 
     */
    GetBottomMin(): number;
    
    /**
     * [Client]
     * 
     * Returns the height of the divider bar between the top and bottom content panels of the [DVerticalDivider](https://wiki.facepunch.com/gmod/DVerticalDivider).
     * 
     */
    GetDividerHeight(): number;
    
    /**
     * [Client]
     * 
     * Returns whether the divider is being dragged or not.
     * 
     */
    GetDragging(): boolean;
    
    /**
     * [Client]
     * 
     * Returns the local Y position of where the user starts dragging the divider.
     * 
     */
    GetHoldPos(): number;
    
    /**
     * [Client]
     * 
     * Returns the middle content panel of the [DVerticalDivider](https://wiki.facepunch.com/gmod/DVerticalDivider).
     * 
     */
    GetMiddle(): Panel;
    
    /**
     * [Client]
     * 
     * Returns the top content panel of the [DVerticalDivider](https://wiki.facepunch.com/gmod/DVerticalDivider).
     * 
     */
    GetTop(): Panel;
    
    /**
     * [Client]
     * 
     * Returns the current height of the top content panel set by [DVerticalDivider:SetTopHeight](https://wiki.facepunch.com/gmod/DVerticalDivider:SetTopHeight) or by the user.
     * 
     */
    GetTopHeight(): number;
    
    /**
     * [Client]
     * 
     * Returns the maximum height of the top content panel. See [DVerticalDivider:SetTopMax](https://wiki.facepunch.com/gmod/DVerticalDivider:SetTopMax) for more information.
     * 
     */
    GetTopMax(): number;
    
    /**
     * [Client]
     * 
     * Returns the minimum height of the top content panel.
     * 
     */
    GetTopMin(): number;
    
    /**
     * [Client]
     * 
     * Sets the passed panel as the bottom content of the [DVerticalDivider](https://wiki.facepunch.com/gmod/DVerticalDivider).
     * @param pnl - The panel to set as the bottom content.
     */
    SetBottom(pnl: Panel): void;
    
    /**
     * [Client]
     * 
     * Sets the minimum height of the bottom content panel.
     * @param height - The minimum height of the bottom content panel. Default is 50.
     */
    SetBottomMin(height: number): void;
    
    /**
     * [Client]
     * 
     * Sets the height of the divider bar between the top and bottom content panels of the [DVerticalDivider](https://wiki.facepunch.com/gmod/DVerticalDivider).
     * @param height - The height of the divider bar.
     */
    SetDividerHeight(height: number): void;
    
    /**
     * [Client]
     * 
     * Sets whether the divider is being dragged or not.
     * @param isDragging - Setting this to true causes cursor movement to alter the position of the divider.
     */
    SetDragging(isDragging: boolean): void;
    
    /**
     * [Client]
     * 
     * Sets the local Y position of where the user starts dragging the divider.
     * @param y - The local Y position where divider dragging has started.
     */
    SetHoldPos(y: number): void;
    
    /**
     * [Client]
     * 
     * Places the passed panel in between the top and bottom content panels of the [DVerticalDivider](https://wiki.facepunch.com/gmod/DVerticalDivider).
     * @param pnl - The panel to set as the middle content.
     */
    SetMiddle(pnl: Panel): void;
    
    /**
     * [Client]
     * 
     * Sets the passed panel as the top content of the [DVerticalDivider](https://wiki.facepunch.com/gmod/DVerticalDivider).
     * @param pnl - The panel to set as the top content.
     */
    SetTop(pnl: Panel): void;
    
    /**
     * [Client]
     * 
     * Sets the height of the top content panel.
     * 
     * The height of the bottom content panel is automatically calculated by taking the total height of the [DVerticalDivider](https://wiki.facepunch.com/gmod/DVerticalDivider) and subtracting it with the height of the top content panel and the divider bar.
     * @param height - The height of the top content panel.
     */
    SetTopHeight(height: number): void;
    
    /**
     * [Client]
     * 
     * Sets the maximum height of the top content panel. This is ignored if the panel would exceed the minimum bottom content panel height set from [DVerticalDivider:SetBottomMin](https://wiki.facepunch.com/gmod/DVerticalDivider:SetBottomMin).
     * @param height - The maximum height of the top content panel. Default is 4096.
     */
    SetTopMax(height: number): void;
    
    /**
     * [Client]
     * 
     * Sets the minimum height of the top content panel.
     * @param height - The minimum height of the top content panel. Default is 50.
     */
    SetTopMin(height: number): void;
    
    /**
     * [Client]
     * 
     * Causes the user to start dragging the divider.
     * 
     */
    StartGrab(): void;

}

/**
 * A generic vertical scrollbar, used in [DScrollPanel](https://wiki.facepunch.com/gmod/DScrollPanel). See the horizontal alternative [here](DHScrollBar).
 * 
 * The scrollbar notably contains `DVScrollBar.btnUp`, `DVScrollBar.btnDown`, and `DVScrollBar.btnGrip` which are the up button, down button, and grip respectively. Editing the paint functions of these allows custom scrollbar styling (See [DScrollPanel:GetVBar](https://wiki.facepunch.com/gmod/DScrollPanel:GetVBar) for an example), although it is a better idea to use [Derma Skins](Derma_Skin_Creation).
 */
interface DVScrollBar extends Panel {
    

    /**
     * [Client and Menu]
     * 
     * Adds specified amount of scroll in pixels.
     * @param add - How much to scroll downwards. Can be negative for upwards scroll
     */
    AddScroll(add: number): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Smoothly scrolls to given level.
     * @param scroll - The scroll level to animate to. In pixels from the top ( from 0 )
     * @param length - Length of the animation in seconds
     * @param [delay = 0] - Delay of the animation in seconds
     * @param [ease = -1] - See [Panel:NewAnimation](https://wiki.facepunch.com/gmod/Panel:NewAnimation) for explanation.
     */
    AnimateTo(scroll: number, length: number, delay = 0, ease = -1): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the scale of the scroll bar based on the difference in size between the visible "window" into the canvas that is being scrolled. Should be used after [DVScrollBar:SetUp](https://wiki.facepunch.com/gmod/DVScrollBar:SetUp).
     * 
     */
    BarScale(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether or not the manual up/down scroll buttons are visible or not. Set by [DVScrollBar:SetHideButtons](https://wiki.facepunch.com/gmod/DVScrollBar:SetHideButtons).
     * 
     */
    GetHideButtons(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the negative of [DVScrollBar:GetScroll](https://wiki.facepunch.com/gmod/DVScrollBar:GetScroll).
     * 
     */
    GetOffset(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the amount of scroll level from the top in pixels
     * 
     */
    GetScroll(): number;
    
    /**
     * [Client and Menu]
     * 
     * Called from within [DScrollBarGrip](https://wiki.facepunch.com/gmod/DScrollBarGrip)
     * 
     */
    Grip(): void;
    
    /**
     * [Client and Menu]
     * 
     * Allows hiding the up and down buttons for better visual stylisation.
     * @param hide - True to hide
     */
    SetHideButtons(hide: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the scroll level in pixels.
     * @param scroll - The new scroll value.
     */
    SetScroll(scroll: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets up the scrollbar for use.
     * 
     * The scrollbar will automatically disable itself if the total height of the canvas is lower than the height of the panel that holds the canvas during this function call.
     * @param barSize - The size of the panel that holds the canvas, basically size of "1 page".
     * @param canvasSize - The total size of the canvas, this typically is the bigger number.
     */
    SetUp(barSize: number, canvasSize: number): void;

}

/**
 * Base panel used by [DFrame](https://wiki.facepunch.com/gmod/DFrame), this panel is needed so that elements such as the [TextEntry](https://wiki.facepunch.com/gmod/TextEntry) can obtain focus.
 */
interface EditablePanel extends Panel {
    

    

}

/**
 * A panel used by Sandbox's Finger Poser tool.
 */
interface fingerposer extends ContextBase {
    

    

}

/**
 * **	**
 * 
 * 		A panel used by Sandbox's Finger Poser tool.
 */
interface FingerVar extends Panel {
    

    

}

/**
 * A window that in which you can place just about every other component and even another frame.
 */
interface Frame extends Panel {
    

    

}

/**
 * The HTML control can be used to display HTML code just like an internet browser. Unlike [DHTML](https://wiki.facepunch.com/gmod/DHTML), this control cannot accept user input or complex interaction, such as retrieving image data.
 * 
 * **Blocked URL Extentions**
 * 
 * `This means your url cannot end in any of these extensions, e.g.: (http://yourdomain.com/garry.exe)`
 * * .exe
 * * .bat
 * * .dll
 * * .zip
 * * .mp3
 * * .swf
 */
interface HTML extends Panel {
    

    

}

/**
 * An icon editor that permits a user to modify a [SpawnIcon](https://wiki.facepunch.com/gmod/SpawnIcon) and re-render it. This is used by the spawn menu and is what is shown when you right-click an icon and select `Edit Icon`.
 * 
 * This makes use of the [DAdjustableModelPanel](https://wiki.facepunch.com/gmod/DAdjustableModelPanel) element.
 * 
 * <image src="IconEditor.jpg"/>
 * 
 * **Note:**
 * >This panel is only available in Sandbox and Sandbox derived gamemodes!
 * 
 */
interface IconEditor extends Omit<DFrame, "SetIcon"> {
    

    /**
     * [Client]
     * 
     * Applies the top-down view camera settings for the model in the [DAdjustableModelPanel](https://wiki.facepunch.com/gmod/DAdjustableModelPanel).
     * 
     * Called when a user clicks the `Above` (third) button (See [IconEditor](https://wiki.facepunch.com/gmod/IconEditor)).
     * 
     */
    AboveLayout(): void;
    
    /**
     * [Client]
     * 
     * Applies the best camera settings for the model in the [DAdjustableModelPanel](https://wiki.facepunch.com/gmod/DAdjustableModelPanel), using the values returned by [Global.PositionSpawnIcon](https://wiki.facepunch.com/gmod/Global.PositionSpawnIcon).
     * 
     * Called when a user clicks the `wand` button (See the ) and when [IconEditor:Refresh](https://wiki.facepunch.com/gmod/IconEditor:Refresh) is called.
     * 
     */
    BestGuessLayout(): void;
    
    /**
     * [Client]
     * 
     * Fills the [DListView](https://wiki.facepunch.com/gmod/DListView) on the left of the editor with the model entity's animation list. Called by [IconEditor:Refresh](https://wiki.facepunch.com/gmod/IconEditor:Refresh).
     * @param ent - The entity being rendered within the model panel.
     */
    FillAnimations(ent: Entity): void;
    
    /**
     * [Client]
     * 
     * Applies the front view camera settings for the model in the [DAdjustableModelPanel](https://wiki.facepunch.com/gmod/DAdjustableModelPanel).
     * 
     * Called when a user clicks the `Front` (second) button (See the ).
     * 
     */
    FullFrontalLayout(): void;
    
    /**
     * [Client]
     * 
     * Places the camera at the origin (0,0,0), relative to the entity, in the [DAdjustableModelPanel](https://wiki.facepunch.com/gmod/DAdjustableModelPanel).
     * 
     * Called when a user clicks the `Center` (fifth) button (See the ).
     * 
     */
    OriginLayout(): void;
    
    /**
     * [Client]
     * 
     * Updates the internal [DAdjustableModelPanel](https://wiki.facepunch.com/gmod/DAdjustableModelPanel) and [SpawnIcon](https://wiki.facepunch.com/gmod/SpawnIcon). 
     * 
     * This should be called immediately after setting the SpawnIcon with [IconEditor:SetIcon](https://wiki.facepunch.com/gmod/IconEditor:SetIcon).
     * 
     */
    Refresh(): void;
    
    /**
     * [Client]
     * 
     * Re-renders the [SpawnIcon](https://wiki.facepunch.com/gmod/SpawnIcon).
     * 
     * Called when a user clicks the `RENDER` button, this retrieves the render data from the internal [DAdjustableModelPanel](https://wiki.facepunch.com/gmod/DAdjustableModelPanel) and passes it as a table to [Panel:RebuildSpawnIconEx](https://wiki.facepunch.com/gmod/Panel:RebuildSpawnIconEx).
     * 
     */
    RenderIcon(): void;
    
    /**
     * [Client]
     * 
     * Applies the right side view camera settings for the model in the [DAdjustableModelPanel](https://wiki.facepunch.com/gmod/DAdjustableModelPanel).
     * 
     * Called when a user clicks the `Right` (fourth) button (See the ). (Note: The icon for this points left.)
     * 
     */
    RightLayout(): void;
    
    /**
     * [Client]
     * 
     * Sets up the default ambient and directional lighting for the [DAdjustableModelPanel](https://wiki.facepunch.com/gmod/DAdjustableModelPanel). Called by [IconEditor:Refresh](https://wiki.facepunch.com/gmod/IconEditor:Refresh).
     * 
     */
    SetDefaultLighting(): void;
    
    /**
     * [Client]
     * 
     * Sets the editor's model and icon from an entity. Alternative to [IconEditor:SetIcon](https://wiki.facepunch.com/gmod/IconEditor:SetIcon), with uses a [SpawnIcon](https://wiki.facepunch.com/gmod/SpawnIcon).
     * 
     * You do not need to call [IconEditor:Refresh](https://wiki.facepunch.com/gmod/IconEditor:Refresh) after this.
     * @param ent - The entity to retrieve the model and skin from.
     */
    SetFromEntity(ent: Entity): void;
    
    /**
     * [Client]
     * 
     * Sets the [SpawnIcon](https://wiki.facepunch.com/gmod/SpawnIcon) to modify. You should call [Panel:Refresh](https://wiki.facepunch.com/gmod/Panel:Refresh) immediately after this, as the user will not be able to make changes to the icon beforehand.
     * @param icon - The [SpawnIcon](https://wiki.facepunch.com/gmod/SpawnIcon) object to be modified.
     */
    SetIcon(icon: Panel): void;
    
    /**
     * [Client]
     * 
     * Updates the entity being rendered in the internal [DAdjustableModelPanel](https://wiki.facepunch.com/gmod/DAdjustableModelPanel). Called by the model panel's [DModelPanel:LayoutEntity](https://wiki.facepunch.com/gmod/DModelPanel:LayoutEntity) method.
     * @param ent - The entity being rendered within the model panel.
     */
    UpdateEntity(ent: Entity): void;

}

/**
 * A checkbox panel similar to [DCheckBox](https://wiki.facepunch.com/gmod/DCheckBox) and [DImageButton](https://wiki.facepunch.com/gmod/DImageButton) with customizable checked state image.
 * 
 * Uses the [Material](https://wiki.facepunch.com/gmod/Material) panel internally. Can't have a label.
 * 
 * **Note:**
 * >Will error if no material was set.
 * 
 */
interface ImageCheckBox extends Button {
    

    /**
     * [Client]
     * 
     * Returns the checked state of the [ImageCheckBox](https://wiki.facepunch.com/gmod/ImageCheckBox)
     * 
     */
    GetChecked(): boolean;
    
    /**
     * [Client]
     * 
     * Sets the checked state of the checkbox.
     * 
     * Checked state can be obtained by [ImageCheckBox](https://wiki.facepunch.com/gmod/ImageCheckBox).State.
     * @param OnOff - true for checked, false otherwise
     */
    Set(OnOff: boolean): void;
    
    /**
     * [Client]
     * 
     * Sets the checked state of the checkbox.
     * 
     * Checked state can be obtained via [ImageCheckBox:GetChecked](https://wiki.facepunch.com/gmod/ImageCheckBox:GetChecked)
     * @param bOn - true for checked, false otherwise
     */
    SetChecked(bOn: boolean): void;
    
    /**
     * [Client]
     * 
     * Sets the material that will be visible when the [ImageCheckBox](https://wiki.facepunch.com/gmod/ImageCheckBox) is checked.
     * 
     * Internally calls [Material:SetMaterial](https://wiki.facepunch.com/gmod/Material:SetMaterial).
     * 
     * **Note:**
     * >Will error if no material was set.
     * 
     * @param mat - The file path of the material to set (relative to "garrysmod/materials/").
     */
    SetMaterial(mat: string): void;

}

/**
 * A basic label or "single line text area" that is non-editable. You might be looking for [DLabel](https://wiki.facepunch.com/gmod/DLabel).
 */
interface Label extends Panel {
    

    

}

/**
 * Material is a VGUI element that renders a VMT material.
 */
interface Material extends Button {
    

    /**
     * [Client]
     * 
     * Sets the alpha value of the Material panel.
     * @param alpha - The alpha value, from 0 to 255.
     */
    SetAlpha(alpha: number): void;
    
    /**
     * [Client]
     * 
     * Sets the material used by the panel.
     * 
     * **Note:**
     * >If the material is not showing up as the correct size, try setting the Material panel's `AutoSize` variable to **false**
     * 
     * @param matname - The file path of the material to set (relative to "garrysmod/materials/").
     */
    SetMaterial(matname: string): void;

}

/**
 * The panel used by Material & Lamp Sandbox tools for texture selection.
 */
interface MatSelect extends ContextBase {
    

    /**
     * [Client]
     * 
     * Clears all added materials and clears selection.
     * 
     */
    Clear(): void;
    
    /**
     * [Client]
     * 
     * Find a [DImageButton](https://wiki.facepunch.com/gmod/DImageButton) panel based on the input material path.
     * @param mat - The material to find within this [MatSelect](https://wiki.facepunch.com/gmod/MatSelect).
     */
    FindMaterialByValue(mat: string): DImageButton;
    
    /**
     * [Client]
     * 
     * Defines a paint over function for a [DImageButton](https://wiki.facepunch.com/gmod/DImageButton) when it is selected.
     * 
     * **Warning:**
     * >`self` in the context of this function is the [DImageButton](https://wiki.facepunch.com/gmod/DImageButton)!
     * 
     * @param w - Width of the [DImageButton](https://wiki.facepunch.com/gmod/DImageButton) panel.
     * @param h - Height of the [DImageButton](https://wiki.facepunch.com/gmod/DImageButton) panel.
     */
    SelectedItemPaintOver(w: number, h: number): void;
    
    /**
     * [Client]
     * 
     * Selects a given material panel.
     * @param mat - The material to select, found by [MatSelect:FindMaterialByValue](https://wiki.facepunch.com/gmod/MatSelect:FindMaterialByValue)
     */
    SelectMaterial(mat: DImageButton): void;

}

/**
 * Panel used to display models, used by [SpawnIcon](https://wiki.facepunch.com/gmod/SpawnIcon).
 */
interface ModelImage {
    

    

}

/**
 * A panel list with a custom vertical scroll bar that doesn't have up/down buttons and has a momentum to scrolling.
 * 
 * @deprecated You should use [DScrollPanel](https://wiki.facepunch.com/gmod/DScrollPanel) instead
 * 
 */
interface PanelList extends Panel {
    

    

}

/**
 * A preset editor, which can be opened by [ControlPresets](https://wiki.facepunch.com/gmod/ControlPresets).
 * 		This control only exists in Sandbox derived gamemodes.
 */
interface PresetEditor extends DFrame {
    

    

}

/**
 * Used in sandbox tools
 */
interface PropSelect extends ContextBase {
    

    

}

/**
 * Currently there are no functions to retrieve checked state of a Radio Button, and their visuals are seemingly broken.
 */
interface RadioButton extends Panel {
    

    

}

/**
 * A very versatile text display element that's used to power the default chat and console.
 * 
 * Rich Text panels allows multicolored, highlight-able, and interactive text using individual text segment markup (segments are defined by the [Panel:AppendText](https://wiki.facepunch.com/gmod/Panel:AppendText) method).
 * 
 * The **RichText** element has a `64000` character limit.
 */
interface RichText extends Panel {
    

    

}

/**
 * Used as scroll bar for [PanelList](https://wiki.facepunch.com/gmod/PanelList)
 * 
 * @deprecated Used in deprecated  [PanelList](https://wiki.facepunch.com/gmod/PanelList). Use [DVScrollBar](https://wiki.facepunch.com/gmod/DVScrollBar) (Used in [DScrollPanel](https://wiki.facepunch.com/gmod/DScrollPanel)).
 * 
 */
interface SlideBar extends Panel {
    

    

}

/**
 * A simple slider featuring an numeric display.
 * 
 * @deprecated Only exists for backwards compatibility with [Panel:SetActionFunction](https://wiki.facepunch.com/gmod/Panel:SetActionFunction) and [Panel:PostMessage](https://wiki.facepunch.com/gmod/Panel:PostMessage).
 * 			Use [DNumSlider](https://wiki.facepunch.com/gmod/DNumSlider) instead.
 * 
 */
interface Slider extends Panel {
    

    

}

/**
 * A "spawn icon" displays an image for the given model path.
 * 		It is mostly used in the Spawn Menu (<key>Q</key>).
 * 		It uses [ModelImage](https://wiki.facepunch.com/gmod/ModelImage) internally.
 */
interface SpawnIcon extends DButton {
    

    /**
     * [Client]
     * 
     * Returns the currently set body groups of the spawn icon. This is set by [SpawnIcon:SetBodyGroup](https://wiki.facepunch.com/gmod/SpawnIcon:SetBodyGroup).
     * 
     */
    GetBodyGroup(): string;
    
    /**
     * [Client]
     * 
     * Returns the currently set model name. This is set by [SpawnIcon:SetModelName](https://wiki.facepunch.com/gmod/SpawnIcon:SetModelName).
     * 
     */
    GetModelName(): string;
    
    /**
     * [Client]
     * 
     * Returns the currently set skin of the spawnicon. This is set by [SpawnIcon:SetSkinID](https://wiki.facepunch.com/gmod/SpawnIcon:SetSkinID).
     * 
     */
    GetSkinID(): number;
    
    /**
     * [Client]
     * 
     * Called when right clicked on the SpawnIcon. It will not be called if there is a selection ([Panel:GetSelectionCanvas](https://wiki.facepunch.com/gmod/Panel:GetSelectionCanvas)), in which case [SANDBOX:SpawnlistOpenGenericMenu](https://wiki.facepunch.com/gmod/SANDBOX:SpawnlistOpenGenericMenu) is called.
     * 
     */
    OpenMenu(): void;
    
    /**
     * [Client]
     * 
     * **.**
     * 
     * Sets the bodygroups, so it can be retrieved with [SpawnIcon:GetBodyGroup](https://wiki.facepunch.com/gmod/SpawnIcon:GetBodyGroup). Use [Panel:SetModel](https://wiki.facepunch.com/gmod/Panel:SetModel) instead.
     * @param bodygroup - The id of the bodygroup you're setting. Starts from 0.
     * @param value - The value you're setting the bodygroup to. Starts from 0.
     */
    SetBodyGroup(bodygroup: number, value: number): void;
    
    /**
     * [Client]
     * 
     * **.**
     * 
     * Sets the model name, so it can be retrieved with [SpawnIcon:GetModelName](https://wiki.facepunch.com/gmod/SpawnIcon:GetModelName). Use [Panel:SetModel](https://wiki.facepunch.com/gmod/Panel:SetModel) instead.
     * @param mdl - The model name to set
     */
    SetModelName(mdl: string): void;
    
    /**
     * [Client]
     * 
     * **.**
     * 
     * Sets the skin id of the spawn icon, so it can be retrieved with [SpawnIcon:GetSkinID](https://wiki.facepunch.com/gmod/SpawnIcon:GetSkinID). Use [Panel:SetModel](https://wiki.facepunch.com/gmod/Panel:SetModel) instead.
     * @param skin - Skin ID to set
     */
    SetSkinID(skin: number): void;

}

/**
 * The default SpawnmenuContentPanel
 */
interface SpawnmenuContentPanel extends DPanel {
    

    /**
     * [Client]
     * 
     * Changes the Spawnmenu category to search in
     * @param hookname - The Hook name
     */
    CallPopulateHook(hookname: string): void;
    
    /**
     * [Client]
     * 
     * Allows the modification of the ContentSidebar
     * 
     */
    EnableModify(): void;
    
    /**
     * [Client]
     * 
     * Changes the Spawnmenu category to search in
     * @param category - The category
     * @param hookname - The Hook name
     */
    EnableSearch(category: string, hookname: string): void;
    
    /**
     * [Client]
     * 
     * Switches the current panel with the given panel
     * @param panel - Panel to switch to
     */
    SwitchPanel(panel: Panel): void;

}

/**
 * Basic text input field. See [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry) for a more advanced version.
 */
interface TextEntry extends Panel {
    

    /**
     * [Client and Menu]
     * 
     * Called from engine whenever a valid character is typed while the text entry is focused.
     * 
     * Used internally for functionality of [DTextEntry](https://wiki.facepunch.com/gmod/DTextEntry)
     * @param keyCode - They key code of the key pressed, see [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY).
     */
    OnKeyCodeTyped(keyCode: KEY): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Called when the text inside the [TextEntry](https://wiki.facepunch.com/gmod/TextEntry) changes.
     * 
     * You may be looking for [DTextEntry:OnValueChange](https://wiki.facepunch.com/gmod/DTextEntry:OnValueChange) instead.
     * 
     */
    OnTextChanged(): void;

}

/**
 * A panel capable of loading .tga images.
 */
interface TGAImage extends Panel {
    

    

}

/**
 * A panel similar to [Label](https://wiki.facepunch.com/gmod/Label) used by [DLabelURL](https://wiki.facepunch.com/gmod/DLabelURL).
 */
interface URLLabel {
    

    

}

/**
 * [Shared]
 * 
 * Table structure that describes a Source Engine ammo type.
 * 
 * See [game.AddAmmoType](https://wiki.facepunch.com/gmod/game.AddAmmoType) and [game.GetAmmoData](https://wiki.facepunch.com/gmod/game.GetAmmoData).
 */
interface AmmoData {
    /**
     * Damage type using [Enums/DMG](https://wiki.facepunch.com/gmod/Enums/DMG).
     * 
     * Related function is [game.GetAmmoDamageType](https://wiki.facepunch.com/gmod/game.GetAmmoDamageType).
     */
    dmgtype: number,
    
    /**
     * The force of the ammo.
     * 
     * Related function is [game.GetAmmoForce](https://wiki.facepunch.com/gmod/game.GetAmmoForce).
     */
    force: number,
    
    /**
     * The maximum water splash size.
     */
    maxsplash: number,
    
    /**
     * The minimum water splash size.
     */
    minsplash: number,
    
    /**
     * Name of the ammo.
     * 
     * Related functions are [game.GetAmmoName](https://wiki.facepunch.com/gmod/game.GetAmmoName) and [game.GetAmmoID](https://wiki.facepunch.com/gmod/game.GetAmmoID).
     */
    name: string,
    
    /**
     * The damage dealt to NPCs.
     * 
     * Related function is [game.GetAmmoNPCDamage](https://wiki.facepunch.com/gmod/game.GetAmmoNPCDamage).
     * 
     * Can also be a string pointing to a [convar](https://wiki.facepunch.com/gmod/convar). The value will automatically update with the convar's.
     */
    npcdmg: number,
    
    /**
     * The damage dealt to players.
     * 
     * Related function is [game.GetAmmoPlayerDamage](https://wiki.facepunch.com/gmod/game.GetAmmoPlayerDamage).
     * 
     * Can also be a string pointing to a [convar](https://wiki.facepunch.com/gmod/convar). The value will automatically update with the convar's.
     */
    plydmg: number,
    
    /**
     * Tracer type using [Enums/TRACER](https://wiki.facepunch.com/gmod/Enums/TRACER).
     */
    tracer: number,
    
    /**
     * Maximum amount of ammo of this type the player should be able to carry in reserve. `-2` makes this ammo type infinite.
     * 
     * Related function is [game.GetAmmoMax](https://wiki.facepunch.com/gmod/game.GetAmmoMax).
     * 
     * Can also be a string pointing to a [convar](https://wiki.facepunch.com/gmod/convar). The value will automatically update with the convar's.
     * 
     * **Warning:**
     * >`gmod_maxammo` convar will override this value if set to above 0, **which it is by default**.
     * 
     */
    maxcarry: number,
    
    /**
     * Flags for the ammo type using [Enums/AMMO](https://wiki.facepunch.com/gmod/Enums/AMMO).
     */
    flags: number,

    

}

/**
 * [Shared]
 * 
 * Table used by various functions, such as [Entity:GetAttachment](https://wiki.facepunch.com/gmod/Entity:GetAttachment).
 */
interface AngPos {
    /**
     * Angle object
     */
    Ang: Angle,
    
    /**
     * Vector object
     */
    Pos: Vector,
    
    /**
     * The bone ID the attachment point is parented to.
     */
    Bone: number,

    

}

/**
 * [Client]
 * 
 * Table used by panel animation methods, primarily [Panel:AnimationThinkInternal](https://wiki.facepunch.com/gmod/Panel:AnimationThinkInternal), and returned by [Panel:NewAnimation](https://wiki.facepunch.com/gmod/Panel:NewAnimation).
 */
interface AnimationData {
    /**
     * The system time value returned by [Global.SysTime](https://wiki.facepunch.com/gmod/Global.SysTime) when the animation starts/will start.
     */
    StartTime: number,
    
    /**
     * The system time value returned by [Global.SysTime](https://wiki.facepunch.com/gmod/Global.SysTime) when the animation ends/will end.
     */
    EndTime: number,
    
    /**
     * The ease in/out level of the animation.
     */
    Ease: number,
    
    /**
     * The callback function that will be called upon completion of the animation. The arguments passed to it are:
     * * [table](https://wiki.facepunch.com/gmod/table) animData - This structure.
     * * [Panel](https://wiki.facepunch.com/gmod/Panel) tgtPanel - The panel the animation was run on.
     */
    OnEnd: Function,
    
    /**
     * The `think` function called every frame that will animate the panel object. This varies based on the animation. You can create a custom function for this if you aren't using the stock panel methods. The arguments passed to it are:
     * * [table](https://wiki.facepunch.com/gmod/table) animData - This structure.
     * * [Panel](https://wiki.facepunch.com/gmod/Panel) tgtPanel - The panel the animation is being run on.
     * * [number](https://wiki.facepunch.com/gmod/number) fraction - The progress fraction of the animation, between 0 and 1. The change rate of this number will not be linear if you are easing.
     */
    Think: Function,
    
    /**
     * The target position, or target translation of the panel object. Used by [Panel:MoveTo](https://wiki.facepunch.com/gmod/Panel:MoveTo) and [Panel:MoveBy](https://wiki.facepunch.com/gmod/Panel:MoveBy) respectively.
     */
    Pos: Vector,
    
    /**
     * The position of the panel object when the animation started. Used by [Panel:MoveTo](https://wiki.facepunch.com/gmod/Panel:MoveTo) and [Panel:MoveBy](https://wiki.facepunch.com/gmod/Panel:MoveBy).
     */
    StartPos: Vector,
    
    /**
     * Whether to resize the panel horizontally or not. Only used by [Panel:SizeTo](https://wiki.facepunch.com/gmod/Panel:SizeTo).
     */
    SizeX: boolean,
    
    /**
     * Whether to resize the panel vertically or not. Only used by [Panel:SizeTo](https://wiki.facepunch.com/gmod/Panel:SizeTo).
     */
    SizeY: boolean,
    
    /**
     * The target size of the panel object. Only used by [Panel:SizeTo](https://wiki.facepunch.com/gmod/Panel:SizeTo).
     */
    Size: Vector,
    
    /**
     * The size of the panel object when the animation started. Only used by [Panel:SizeTo](https://wiki.facepunch.com/gmod/Panel:SizeTo).
     */
    StartSize: Vector,
    
    /**
     * The target colour of the panel object. Only used by [Panel:ColorTo](https://wiki.facepunch.com/gmod/Panel:ColorTo).
     */
    Color: any,
    
    /**
     * The colour of the panel object when the animation started. Only used by [Panel:ColorTo](https://wiki.facepunch.com/gmod/Panel:ColorTo).
     */
    StartColor: any,
    
    /**
     * The target alpha (0-255) of the panel object. Only used by [Panel:AlphaTo](https://wiki.facepunch.com/gmod/Panel:AlphaTo).
     */
    Alpha: number,
    
    /**
     * The alpha (0-255) of the panel object when the animation started. Only used by [Panel:AlphaTo](https://wiki.facepunch.com/gmod/Panel:AlphaTo).
     */
    StartAlpha: number,
    
    /**
     * The speed to use for transitions when using linear interpolation (Lerp) animations. Only used by [Panel:LerpPositions](https://wiki.facepunch.com/gmod/Panel:LerpPositions).
     */
    Speed: number,
    
    /**
     * Whether or not to use easing to make the panel 'jump' at its target, slowing as it approaches. Only used by [Panel:LerpPositions](https://wiki.facepunch.com/gmod/Panel:LerpPositions).
     */
    UseGravity: boolean,

    

}

/**
 * [Shared]
 * 
 * Table returned by [Entity:GetAttachments](https://wiki.facepunch.com/gmod/Entity:GetAttachments).
 */
interface AttachmentData {
    /**
     * Index of the attachment.
     */
    id: number,
    
    /**
     * Name of the attachment.
     */
    name: string,

    

}

/**
 * [Shared]
 * 
 * Table returned by [Entity:GetBodyGroups](https://wiki.facepunch.com/gmod/Entity:GetBodyGroups).
 */
interface BodyGroupData {
    /**
     * Index of the body group.
     */
    id: number,
    
    /**
     * Name of the body group.
     */
    name: string,
    
    /**
     * Amount of subgroups.
     */
    num: number,
    
    /**
     * A zero-indexed table that is of length _num_ with values being the name of the smd mesh file of the respective body group value.
     */
    submodels: any,

    

}

/**
 * [Shared]
 * 
 * Structure used for storing/restoring bone manipulations.
 * Data is stored from [Entity:GetManipulateBoneScale](https://wiki.facepunch.com/gmod/Entity:GetManipulateBoneScale), [Entity:GetManipulateBoneAngles](https://wiki.facepunch.com/gmod/Entity:GetManipulateBoneAngles), and [Entity:GetManipulateBonePosition](https://wiki.facepunch.com/gmod/Entity:GetManipulateBonePosition).
 * Data is restored using [Entity:ManipulateBoneScale](https://wiki.facepunch.com/gmod/Entity:ManipulateBoneScale), [Entity:ManipulateBoneAngles](https://wiki.facepunch.com/gmod/Entity:ManipulateBoneAngles), and [Entity:ManipulateBonePosition](https://wiki.facepunch.com/gmod/Entity:ManipulateBonePosition).
 * 
 * The function [duplicator.DoBoneManipulator](https://wiki.facepunch.com/gmod/duplicator.DoBoneManipulator) and [Structures/EntityCopyData](https://wiki.facepunch.com/gmod/Structures/EntityCopyData) use a table
 * containing a BoneManipulationData structure for each bone (that has manipulations applied) with the bone ID as the struct index in the table.
 * 
 * Fields **s**, **a**, and **p** are set if they don't equal **Vector( 1, 1, 1 )**, **Angle( 0, 0, 0 )**, and **Vector( 0, 0, 0 )** respectively.
 */
interface BoneManipulationData {
    /**
     * The entity's scale manipulation of the bone
     */
    s: Vector,
    
    /**
     * The entity's angle manipulation of the bone
     */
    a: Angle,
    
    /**
     * The entity's position manipulation of the given bone
     */
    p: Vector,

    

}

/**
 * [Shared]
 * 
 * Tables used for bullets see [Entity:FireBullets](https://wiki.facepunch.com/gmod/Entity:FireBullets) and [GM:EntityFireBullets](https://wiki.facepunch.com/gmod/GM:EntityFireBullets).
 */
interface Bullet {
    /**
     * The entity that should be reported as attacker eg. a player
     * 
     * By default this would be set to the entity [Entity:FireBullets](https://wiki.facepunch.com/gmod/Entity:FireBullets) is called on.
     */
    Attacker: Entity,
    
    /**
     * Function to be called **after** the bullet was fired but **before** the damage is applied (the callback is called even if no damage is applied). The arguments are:
     * * [Entity](https://wiki.facepunch.com/gmod/Entity) attacker
     * * [table](https://wiki.facepunch.com/gmod/table) tr - See [Structures/TraceResult](https://wiki.facepunch.com/gmod/Structures/TraceResult)
     * * [CTakeDamageInfo](https://wiki.facepunch.com/gmod/CTakeDamageInfo) dmgInfo
     * 
     * The return value can be a table with following keys:
     * * [boolean](https://wiki.facepunch.com/gmod/boolean) effects - `false` to not do any of the effects.
     * * [boolean](https://wiki.facepunch.com/gmod/boolean) damage - `false` to not do any damage.
     */
    Callback: Function,
    
    /**
     * The damage dealt by the bullet.
     * 
     * If set to `0`, it means the damage should be calculated from the ammo type's [ConVar](https://wiki.facepunch.com/gmod/ConVar)s if  the ammo type has `AMMO_INTERPRET_PLRDAMAGE_AS_DAMAGE_TO_PLAYER` flag set.  
     * See [Structures/AmmoData](https://wiki.facepunch.com/gmod/Structures/AmmoData).
     */
    Damage: number,
    
    /**
     * The force of the bullets
     */
    Force: number,
    
    /**
     * Maximum distance the bullet can travel
     */
    Distance: number,
    
    /**
     * The hull size of the bullet
     */
    HullSize: number,
    
    /**
     * The amount of bullets to fire
     */
    Num: number,
    
    /**
     * Show tracer for every x bullets
     */
    Tracer: number,
    
    /**
     * The ammunition name
     */
    AmmoType: string,
    
    /**
     * The tracer name. You can find a list of default effects <page text="here">Effects</page>.
     */
    TracerName: string,
    
    /**
     * The fire direction
     */
    Dir: Vector,
    
    /**
     * The spread, only x and y are needed
     */
    Spread: Vector,
    
    /**
     * The position to fire the bullets from
     */
    Src: Vector,
    
    /**
     * The entity that the bullet will ignore when it will be shot.
     */
    IgnoreEntity: Entity,

    

}

/**
 * [Client]
 * 
 * Table structure used [GM:CalcView](https://wiki.facepunch.com/gmod/GM:CalcView) and [GM:CalcVehicleView](https://wiki.facepunch.com/gmod/GM:CalcVehicleView) hook.
 */
interface CamData {
    /**
     * The camera's position
     */
    origin: Vector,
    
    /**
     * The camera's angles
     */
    angles: Angle,
    
    /**
     * The camera's FOV
     */
    fov: number,
    
    /**
     * Distance to near clipping plane
     */
    znear: number,
    
    /**
     * Distance to far clipping plane
     */
    zfar: number,
    
    /**
     * Set true to draw local players player model.
     */
    drawviewer: boolean,
    
    /**
     * If set, enables orthographic mode. The table has following arguments:
     * * [number](https://wiki.facepunch.com/gmod/number) left
     * * [number](https://wiki.facepunch.com/gmod/number) right
     * * [number](https://wiki.facepunch.com/gmod/number) top
     * * [number](https://wiki.facepunch.com/gmod/number) bottom
     * 
     * Each describes where their border starts, (`left`+`right`) and (`top`+`bottom`) should equal `0` to center on the view position.
     */
    ortho: any,

    

}

/**
 * [Shared]
 * 
 * Passed as argument of [ENTITY:PhysicsCollide](https://wiki.facepunch.com/gmod/ENTITY:PhysicsCollide), [EFFECT:PhysicsCollide](https://wiki.facepunch.com/gmod/EFFECT:PhysicsCollide) and used with [Entity:AddCallback](https://wiki.facepunch.com/gmod/Entity:AddCallback).
 * 
 * **Note:**
 * >Sometimes, the value of `Speed` can be different from getting the length calculated from `OurOldVelocity`, even though they should be the same, or close to same. It's recommended to do `OurOldVelocity:Length()` instead. 
 * 
 * ```
 * function ENT:PhysicsCollide( colData, collider )
 *     -- you may get two completely different values, and the second one should be more accurate.
 *     print(colData.Speed)
 *     print(colData.OurOldVelocity:Length())
 * end
 * ```
 * 
 */
interface CollisionData {
    /**
     * The collision position
     */
    HitPos: Vector,
    
    /**
     * The other collision entity
     */
    HitEntity: Entity,
    
    /**
     * The entity's velocity before the collision
     */
    OurOldVelocity: Vector,
    
    /**
     * Other entity's physics object
     */
    HitObject: PhysObj,
    
    /**
     * Time since the last collision with the `HitEntity`
     */
    DeltaTime: number,
    
    /**
     * Speed of the other entity before the collision
     */
    TheirOldVelocity: Vector,
    
    /**
     * The speed of the entity before the collision
     */
    Speed: number,
    
    /**
     * Normal of the surface that hit the other entity
     */
    HitNormal: Vector,
    
    /**
     * Entity's physics object
     */
    PhysObject: PhysObj,
    
    /**
     * Surface Property ID of `this` entity
     */
    OurSurfaceProps: number,
    
    /**
     * Surface Property ID of the entity we collided with
     */
    TheirSurfaceProps: number,
    
    /**
     * The speed at which the impact happened
     */
    HitSpeed: Vector,
    
    /**
     * Our new velocity after the impact
     */
    OurNewVelocity: Vector,
    
    /**
     * The new velocity after the impact of the entity we collided with
     */
    TheirNewVelocity: Vector,
    
    /**
     * Old angular velocity of this entity
     */
    OurOldAngularVelocity: Vector,
    
    /**
     * Old angular velocity of the entity we collided with
     */
    TheirOldAngularVelocity: Vector,

    

}

/**
 * [Shared]
 * 
 * Table created by the [Global.Color](https://wiki.facepunch.com/gmod/Global.Color) function and used in various situations.
 */
interface Color {
    /**
     * The red channel
     */
    r: number,
    
    /**
     * The green channel
     */
    g: number,
    
    /**
     * The blue channel
     */
    b: number,
    
    /**
     * The alpha channel
     */
    a: number,

    

}

/**
 * [Client]
 * 
 * Table that maintains information on the creation menu tabs. Each key of the table represents the name of the tab. See [spawnmenu.AddCreationTab](https://wiki.facepunch.com/gmod/spawnmenu.AddCreationTab) and [spawnmenu.GetCreationTabs](https://wiki.facepunch.com/gmod/spawnmenu.GetCreationTabs).
 */
interface CreationMenus {
    /**
     * The function used to generate the content of the tab.
     */
    Function: Function,
    
    /**
     * The icon material that will accompany the title of the tab.
     */
    Icon: string,
    
    /**
     * The order in which a tab will be displayed relative to the other tabs.
     */
    Order: number,
    
    /**
     * The tooltip to be shown with the tab.
     */
    Tooltip: string,

    

}

/**
 * [Shared and Menu]
 * 
 * Table returned by [os.date](https://wiki.facepunch.com/gmod/os.date) and used by [os.time](https://wiki.facepunch.com/gmod/os.time).
 */
interface DateData {
    /**
     * Day of the month
     */
    day: number,
    
    /**
     * Hour
     */
    hour: number,
    
    /**
     * Daylight saving enabled
     */
    isdst: boolean,
    
    /**
     * Minute
     */
    min: number,
    
    /**
     * Month
     * January: 1, December: 12
     */
    month: number,
    
    /**
     * Second
     */
    sec: number,
    
    /**
     * Day of the week
     * Sunday: 1, Saturday: 7
     */
    wday: number,
    
    /**
     * Day of the year
     */
    yday: number,
    
    /**
     * Year
     */
    year: number,

    

}

/**
 * [Shared and Menu]
 * 
 * Table returned by [debug.getinfo](https://wiki.facepunch.com/gmod/debug.getinfo).
 * 
 * For functions defined in C/C++, the following members will always have the given values: 
 * * what = "C"
 * * source = "[C]"
 * * nparams = 0
 * * isvararg = true
 * * namewhat = ""
 * * short_src = "[C]"
 * * linedefined = -1
 * * currentline = -1
 * * lastlinedefined = -1
 * 
 * **Note:**
 * >If a filter is applied to [debug.getinfo](https://wiki.facepunch.com/gmod/debug.getinfo), some members may not exist!
 * 
 */
interface DebugInfo {
    /**
     * Reference to the function that was passed in. If a stack level was specified, this will be the function at that stack level. 0 = debug.getinfo, 1 = function that called debug.getinfo, etc.
     * 
     * **Option: f**
     */
    func: Function,
    
    /**
     * The line where the function definiton starts (where "function" is located).
     * 
     * **Option: S**
     */
    linedefined: number,
    
    /**
     * The line the function definition ended (where "end" is located).
     * 
     * **Option: S**
     */
    lastlinedefined: number,
    
    /**
     * The path to the file where the passed function is defined prepended by an @ (ex. "@lua/autorun/mytestfile.lua"). This will be the [Global.CompileString](https://wiki.facepunch.com/gmod/Global.CompileString) or [Global.RunString](https://wiki.facepunch.com/gmod/Global.RunString) identifier if the function wasn't defined in a file, also prepended by an @.
     * 
     * **Option: S**
     */
    source: string,
    
    /**
     * The shortened name of the source (without the @). May be truncated if the source path is long.
     * 
     * **Option: S**
     */
    short_src: string,
    
    /**
     * The language used. Either "Lua" or "C".
     * 
     * **Option: S**
     */
    what: string,
    
    /**
     * The current line. This will be -1 if the code is not executed from a file.
     * 
     * **Option: l** (lowercase L)
     */
    currentline: number,
    
    /**
     * The function name. This will be nil if the name cannot be found. Only works if stack level is passed rather than function pointer.
     * 
     * **Option: n**
     */
    name: string,
    
    /**
     * The function "type". This will be "global", "local", "method", "field". Can also be an empty string if the function name could not be found. Only works if stack level is passed rather than function pointer.
     * 
     * **Option: n**
     */
    namewhat: string,
    
    /**
     * Whether the function is variadic (has a `...` argument).
     * 
     * **Option: u**
     */
    isvararg: boolean,
    
    /**
     * The number of arguments the function uses excluding varargs.
     * 
     * **Option: u**
     */
    nparams: number,
    
    /**
     * Upvalue count. Max index that can be used with [debug.getupvalue](https://wiki.facepunch.com/gmod/debug.getupvalue). C functions can have upvalues but they cannot be accessed from Lua.
     * 
     * **Option: u**
     */
    nups: number,
    
    /**
     * A table of all the active lines in the function - that is, lines with code that actually does something (not blank lines or lines with comments only).
     * 
     * The table keys will be line numbers, and their values will all be true. Lines that are inactive are simply not included in the table - they have the value nil.
     * 
     * It doesn't check for activeline in subfunctions.
     * 
     * **Option: L**
     */
    activelines: any,

    

}

/**
 * [Client]
 * 
 * Structure for [Global.DynamicLight](https://wiki.facepunch.com/gmod/Global.DynamicLight).
 * All members are case insensitive.
 * 
 * **Note:**
 * >This is an actual class named **dlight_t**, not a table.
 * 
 */
interface DynamicLight {
    /**
     * The brightness of the light.
     */
    brightness: number,
    
    /**
     * Fade out speed.
     * Here's a formula for calculating Decay for your light: 1000 / fadeOutTimeInSeconds. For example setting decay to 1000 would fade out the light in 1 second, 2000 - 0.5 seconds.
     */
    decay: number,
    
    /**
     * Time after which light will be removed.
     * 
     * This is relative to [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime). If you put in a value that is less than or equal to [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime), the light will not behave properly.
     * 
     * Note, that it does not affect fading out. Light will be removed regardless of it being fully faded out or not.
     */
    dietime: number,
    
    /**
     * The light direction. Used with **InnerAngle** and **OuterAngle**.
     */
    dir: Vector,
    
    /**
     * The closer this is to zero, the smoother the light will be. Requires **Dir** and **OuterAngle** to be set.
     */
    innerangle: number,
    
    /**
     * The angle of the Dynamic Light. Requires **Dir** to be set.
     */
    outerangle: number,
    
    /**
     * Makes the light brighter and flicker? Changing the value does not seem to affect anything.
     */
    key: number,
    
    /**
     * Minimum light
     */
    minlight: number,
    
    /**
     * Don't light the world. Has no effect for elights since they never light the world.
     */
    noworld: boolean,
    
    /**
     * Don't light models
     */
    nomodel: boolean,
    
    /**
     * Position of the light
     */
    pos: Vector,
    
    /**
     * Radius of the light
     */
    size: number,
    
    /**
     * Flicker style, see [this page](https://developer.valvesoftware.com/wiki/Light_dynamic#Appearances) for examples.
     */
    style: number,
    
    /**
     * The blue part of the color
     */
    b: number,
    
    /**
     * The green part of the color
     */
    g: number,
    
    /**
     * The red part of the color
     */
    r: number,

    

}

/**
 * [Shared]
 * 
 * Passed as argument of [GM:EntityEmitSound](https://wiki.facepunch.com/gmod/GM:EntityEmitSound).
 */
interface EmitSoundInfo {
    /**
     * The file path of the played sound.
     * 
     * Sounds prefixed with ) tell the sound engine that it is a spatial sound; this allows the sound to emit from a specific location within the world.
     * 
     * Sounds prefixed with ^ tell the sound engine that it is a distance based sound. The left channel of the .wav is the 'near' sound that will play when the sound originates close to you, and the right channel is the 'far' sound that will play when the sound originates far from you.
     */
    SoundName: string,
    
    /**
     * The original file path or soundscript name.
     * 
     * Even if the SoundName value is changed, the OriginalSoundName value will remain the same.
     * 
     * Sounds may be returned as soundscripts (for example, "Weapon_357.Single") instead of the sound's file path. You can use [sound.GetProperties](https://wiki.facepunch.com/gmod/sound.GetProperties) to retrieve the actual file path.
     */
    OriginalSoundName: string,
    
    /**
     * The time at which the sound should be played.
     * 
     * If equal to 0 or CurTime(), the sound is played immediately. If greater than CurTime(), the sound is played with a delay. If less than CurTime(), part of the sound is skipped.
     */
    SoundTime: number,
    
    /**
     * The DSP (digital signal processing) preset applied to the sound.
     * 
     * There are approximately 134 different presets defined by the Source engine between 0 and 133. These presets represent different types of 'rooms' or environments.
     * 
     * [List of DSP's](https://developer.valvesoftware.com/wiki/Dsp_presets)
     */
    DSP: number,
    
    /**
     * The sound's attenuation, a number between 0 (low) and 511 (high)
     * 
     * This determines how fast the sound drops away. A higher value means the sound can be heard farther away.
     * 
     * See [Enums/SNDLVL](https://wiki.facepunch.com/gmod/Enums/SNDLVL).
     */
    SoundLevel: number,
    
    /**
     * The pitch of the played sound, a number between 0 (low) and 255 (high), where 100 is the sound's original pitch.
     */
    Pitch: number,
    
    /**
     * The bit flags of the played sound. See [Enums/SND](https://wiki.facepunch.com/gmod/Enums/SND) for available options.
     */
    Flags: number,
    
    /**
     * The sound's channel. See [Enums/CHAN](https://wiki.facepunch.com/gmod/Enums/CHAN) for available options.
     */
    Channel: number,
    
    /**
     * The volume of the played sound, return as a decimal number between 0 (low) and 1 (high).
     */
    Volume: number,
    
    /**
     * The entity that played the sound.
     */
    Entity: Entity,
    
    /**
     * The origin of the played sound.
     */
    Pos: Vector,

    

}

/**
 * [Shared]
 * 
 * Information about the ENT structure.
 * 
 * To learn more about scripted entities, <page text="see this page">Scripted_Entities</page>.
 * 
 * While some of the fields may be serverside or clientside only, it is recommended to provide them on both so addons could use their values.
 * 
 * **Note:**
 * >Values defined in ENT table can't be changed per instance. Initialize default values in [ENTITY:Initialize](https://wiki.facepunch.com/gmod/ENTITY:Initialize) or other hook.
 * 
 */
interface ENT {
    /**
     * The base entity to derive from. This **must** be a valid Lua entity
     */
    Base: string,
    
    /**
     * Type of the entity. This **must** be one of these:
     * * **anim**
     * * **brush**
     * * **point**
     * * **ai**
     * * **nextbot**
     * * **filter**
     * 
     * See [Scripted Entities](https://wiki.facepunch.com/gmod/Scripted_Entities) for a more detailed explanation of what each one is.
     */
    Type: string,
    
    /**
     * The class name of the entity (File or folder name of your entity).
     * **This is set automatically _after_ the entity file is loaded.**
     */
    ClassName: string,
    
    /**
     * If set, overrides the classname of the SWEP.
     */
    ClassNameOverride: string,
    
    /**
     * The folder from where the entity was loaded. This should always be "entity/ent_myentity", regardless whether your entity is stored as a file, or multiple files in a folder. **This is set automatically _before_ the entity file is loaded.**
     */
    Folder: string,
    
    /**
     * Set this to true if your entity has animations. You should also apply changes to the [ENTITY:Think](https://wiki.facepunch.com/gmod/ENTITY:Think) function from the example on that page.
     */
    AutomaticFrameAdvance: boolean,
    
    /**
     * Spawnmenu category to put the entity into
     */
    Category: string,
    
    /**
     * Whether this entity should be displayed and is spawnable in the spawn menu
     */
    Spawnable: boolean,
    
    /**
     * Whether the entity supports Editing. See [Editable Entities](https://wiki.facepunch.com/gmod/Editable_Entities) for more info.
     */
    Editable: boolean,
    
    /**
     * Whether or not only admins can spawn the entity from their spawn menu
     */
    AdminOnly: boolean,
    
    /**
     * Nice name of the entity to appear in the spawn menu
     */
    PrintName: string,
    
    /**
     * The author of the entity
     */
    Author: string,
    
    /**
     * The contacts of the entity creator
     */
    Contact: string,
    
    /**
     * The purpose of the entity creation
     */
    Purpose: string,
    
    /**
     * How to use your entity
     */
    Instructions: string,
    
    /**
     * The entity's render group, see [Enums/RENDERGROUP](https://wiki.facepunch.com/gmod/Enums/RENDERGROUP). If unset, the engine will decide the render group based on the entity's model.
     */
    RenderGroup: number,
    
    /**
     * Disable the ability for players to duplicate this entity.
     */
    DisableDuplicator: boolean,
    
    /**
     * Sets the spawnmenu content icon type for the entity, used by spawnmenu in the Sandbox-derived gamemodes.
     * See [spawnmenu.AddContentType](https://wiki.facepunch.com/gmod/spawnmenu.AddContentType) for more information.
     */
    ScriptedEntityType: string,
    
    /**
     * If set, the entity will not be duplicated via the built-in duplicator system.
     */
    DoNotDuplicate: boolean,
    
    /**
     * If set, overrides the icon path to be displayed in the Spawnmenu for this entity.
     */
    IconOverride: string,
    
    /**
     * If set, the entity forbid physgun interaction.
     */
    PhysgunDisabled: boolean,

    

}

/**
 * [Server]
 * 
 * Data structure used by the [duplicator](https://wiki.facepunch.com/gmod/duplicator) to store and load entity data.
 * 
 * It is created by [duplicator.CopyEntTable](https://wiki.facepunch.com/gmod/duplicator.CopyEntTable) and can be loaded by [duplicator.CreateEntityFromTable](https://wiki.facepunch.com/gmod/duplicator.CreateEntityFromTable).
 * 
 * It also shows up in several other contexts:
 * * [duplicator.RegisterEntityClass](https://wiki.facepunch.com/gmod/duplicator.RegisterEntityClass)
 * * [ENTITY:OnEntityCopyTableFinish](https://wiki.facepunch.com/gmod/ENTITY:OnEntityCopyTableFinish)
 * * [ENTITY:OnDuplicated](https://wiki.facepunch.com/gmod/ENTITY:OnDuplicated)
 * 
 * **Note:**
 * >In addition to all fields listed here, any field saved on the entity will be saved as-is to this table. For example, if you set `ent.FavoriteFood = "Steak"` before duplicating it, this structure will also contain the field `FavoriteFood` with the value `"Steak"`.
 * 
 */
interface EntityCopyData {
    /**
     * The entity's name, see [Entity:GetName](https://wiki.facepunch.com/gmod/Entity:GetName).
     */
    Name: string,
    
    /**
     * The entity's class name, see [Entity:GetClass](https://wiki.facepunch.com/gmod/Entity:GetClass).
     */
    Class: string,
    
    /**
     * The entity's position, relative to the duplication origin point.
     */
    Pos: Vector,
    
    /**
     * The entity's angle, relative to the duplication angle.
     */
    Angle: Angle,
    
    /**
     * The entity's Network Vars, see [ENTITY:SetupDataTables](https://wiki.facepunch.com/gmod/ENTITY:SetupDataTables) and [Networking Entities](https://wiki.facepunch.com/gmod/Networking_Entities).
     */
    DT: any,
    
    /**
     * The entity's model, see [Entity:GetModel](https://wiki.facepunch.com/gmod/Entity:GetModel).
     */
    Model: string,
    
    /**
     * The entity's model scale, see [Entity:GetModelScale](https://wiki.facepunch.com/gmod/Entity:GetModelScale). This will only be present if the model scale isn't 1.
     */
    ModelScale: number,
    
    /**
     * The entity's active skin, see [Entity:GetSkin](https://wiki.facepunch.com/gmod/Entity:GetSkin).
     */
    Skin: number,
    
    /**
     * The entity's collision group, see [Entity:GetCollisionGroup](https://wiki.facepunch.com/gmod/Entity:GetCollisionGroup). Uses the [Enums/COLLISION_GROUP](https://wiki.facepunch.com/gmod/Enums/COLLISION_GROUP).
     */
    ColGroup: number,
    
    /**
     * The entity's collision bound minimums, see [Entity:GetCollisionBounds](https://wiki.facepunch.com/gmod/Entity:GetCollisionBounds).
     */
    Mins: Vector,
    
    /**
     * The entity's collision bound maximums, see [Entity:GetCollisionBounds](https://wiki.facepunch.com/gmod/Entity:GetCollisionBounds).
     */
    Maxs: Vector,
    
    /**
     * Data about the entity's [PhysObj](https://wiki.facepunch.com/gmod/PhysObj)s, see [Entity:GetPhysicsObjectNum](https://wiki.facepunch.com/gmod/Entity:GetPhysicsObjectNum). The key is the physics object index (starts from 0), and the value is a [Structures/PhysicsObjectSave](https://wiki.facepunch.com/gmod/Structures/PhysicsObjectSave). Unlike other tables in this structure, if there are no physics objects for this entity this will be an empty table.
     */
    PhysicsObjects: any,
    
    /**
     * The entity's Flex Scale, see [Entity:GetFlexScale](https://wiki.facepunch.com/gmod/Entity:GetFlexScale).
     */
    FlexScale: number,
    
    /**
     * Each flex bone's flex weight, see [Entity:GetFlexWeight](https://wiki.facepunch.com/gmod/Entity:GetFlexWeight). The key is the flex's index and the value is the weight. Only flexes with a non-default (nonzero) weight are listed, and if none exist, this field will be nil.
     */
    Flex: any,
    
    /**
     * The entity's body groups, see [Entity:GetBodygroup](https://wiki.facepunch.com/gmod/Entity:GetBodygroup). The key is the bodygroup ID and the value is the assigned bodygroup number. Only body groups with a non-default (> 0) value are listed, and if none exist, this field will be nil.
     */
    BodyG: any,
    
    /**
     * Bone manipulation data, see [Entity:HasBoneManipulations](https://wiki.facepunch.com/gmod/Entity:HasBoneManipulations). The key is the bone index and the value is a [Structures/BoneManipulationData](https://wiki.facepunch.com/gmod/Structures/BoneManipulationData). Only bones that have been manipulated with non-default values are listed, and if none exist, this field will be nil.
     */
    BoneManip: any,
    
    /**
     * The entity's MapCreationID, only exists for entities that were created by the map. See [Entity:MapCreationID](https://wiki.facepunch.com/gmod/Entity:MapCreationID).
     */
    MapCreationID: number,
    
    /**
     * Deprecated, always 0. See [Entity:GetWorkshopID](https://wiki.facepunch.com/gmod/Entity:GetWorkshopID).
     */
    WorkshopID: number,

    

}

/**
 * [Client and Menu]
 * 
 * Used for [surface.CreateFont](https://wiki.facepunch.com/gmod/surface.CreateFont).
 */
interface FontData {
    /**
     * The font source. Custom font files are stored in resource/fonts/.
     * 
     * The length is limited to 31 characters maximum.
     * 
     * **Warning:**
     * >This must be the actual 'nice' font, not a file name. ([Finding the Font Name](https://wiki.facepunch.com/gmod/Finding_the_Font_Name))
     * 
     * This also cannot be an already registered font, i.e. you cannot base your font from any of the
     * 
     */
    font: string,
    
    /**
     * Allow the font to display glyphs that are outside of the Latin-1 range. Unicode code points above 0xFFFF are not supported.
     */
    extended: boolean,
    
    /**
     * The font height in pixels
     * 
     * `Range:` 4 - 255
     */
    size: number,
    
    /**
     * The font boldness
     */
    weight: number,
    
    /**
     * The strength of the font blurring
     * 
     * `Range:` 0 - 80
     */
    blursize: number,
    
    /**
     * The "scanline" interval
     * Must be > 1 to work. This setting is per blursize per font - so if you create a font using "Arial" without scanlines, you cannot create an Arial font using scanlines with the same blursize
     */
    scanlines: number,
    
    /**
     * Smooth the font
     */
    antialias: boolean,
    
    /**
     * Add an underline to the font
     */
    underline: boolean,
    
    /**
     * Make the font italic
     */
    italic: boolean,
    
    /**
     * Add a strike through
     */
    strikeout: boolean,
    
    /**
     * Enables the use of symbolic fonts such as Webdings
     */
    symbol: boolean,
    
    /**
     * Seems to add a line in the middle of each letter
     */
    rotary: boolean,
    
    /**
     * Add shadow casting to the font
     */
    shadow: boolean,
    
    /**
     * Additive rendering
     */
    additive: boolean,
    
    /**
     * Add a black outline to the font.
     * 
     * This does not work well with antialias, and only allows black 1-pixel outlines. It may be preferable to not use this parameter, and instead use [draw.SimpleTextOutlined](https://wiki.facepunch.com/gmod/draw.SimpleTextOutlined) when drawing text that you want outlined.
     */
    outline: boolean,

    

}

/**
 * [Shared]
 * 
 * Information about a gamemode.
 * 
 * While some of the fields may be serverside or clientside only, it is recommended to provide them on both so addons could use their values.
 */
interface GM {
    /**
     * The fancy name of your gamemode.
     */
    Name: string,
    
    /**
     * The name/contact info of the gamemode author.
     */
    Author: string,
    
    /**
     * The contact email associated with the gamemode.
     */
    Email: string,
    
    /**
     * The website associated with the gamemode.
     */
    Website: string,
    
    /**
     * The name of the gamemode folder, automatically set.
     */
    FolderName: string,
    
    /**
     * The name of the gamemode folder prepended with "gamemodes/" (such as "gamemodes/sandbox"), automatically set.
     */
    Folder: string,
    
    /**
     * Set this to true if your gamemode is team-based. Used to enable/disable the base gamemode team system.
     */
    TeamBased: boolean,
    
    /**
     * True if the gamemode is derived from sandbox.
     */
    IsSandboxDerived: boolean,
    
    /**
     * The name of the gamemode folder prepended with "gamemode_" (such as "gamemode_sandbox"), automatically set.
     */
    ThisClass: string,
    
    /**
     * The table of the base gamemode to derive from, set automatically by [Global.DeriveGamemode](https://wiki.facepunch.com/gmod/Global.DeriveGamemode).
     * 
     * **Note:**
     * >It is recommended to use [Global.DEFINE_BASECLASS](https://wiki.facepunch.com/gmod/Global.DEFINE_BASECLASS) when referencing the gamemode's BaseClass to prevent unintended behavior
     * 
     * **Note:**
     * >[Global.DeriveGamemode](https://wiki.facepunch.com/gmod/Global.DeriveGamemode) modifies the main gamemode's BaseClass, which is shared with parent gamemodes. Because of this, in parent gamemodes the BaseClass can be incorrect, so for instance you need to use `self.BaseClass.BaseClass` in the 1st parent instead
     * 
     */
    BaseClass: any,

    

}

/**
 * [Shared and Menu]
 * 
 * Table used by [Global.HTTP](https://wiki.facepunch.com/gmod/Global.HTTP) function.
 */
interface HTTPRequest {
    /**
     * Function to be called on failure. Arguments are
     * * [string](https://wiki.facepunch.com/gmod/string) reason
     */
    failed: Function,
    
    /**
     * Function to be called on success. Arguments are
     * * [number](https://wiki.facepunch.com/gmod/number) code
     * * [string](https://wiki.facepunch.com/gmod/string) body
     * * [table](https://wiki.facepunch.com/gmod/table) headers
     */
    success: Function,
    
    /**
     * Request method, case insensitive. Possible values are:
     * * GET
     * * POST
     * * HEAD
     * * PUT
     * * DELETE
     * * PATCH
     * * OPTIONS
     */
    method: string,
    
    /**
     * The target url
     */
    url: string,
    
    /**
     * KeyValue table for parameters. This is only applicable to the following request methods:
     * * GET
     * * POST
     * * HEAD
     */
    parameters: any,
    
    /**
     * KeyValue table for headers
     */
    headers: any,
    
    /**
     * Body string for POST data. If set, will override parameters
     */
    body: string,
    
    /**
     * Content type for body.
     */
    type: string,
    
    /**
     * The timeout for the connection.
     */
    timeout: number,

    

}

/**
 * [Shared]
 * 
 * Table used by [util.TraceHull](https://wiki.facepunch.com/gmod/util.TraceHull).
 */
interface HullTrace {
    /**
     * The start position of the trace
     */
    start: Vector,
    
    /**
     * The end position of the trace
     */
    endpos: Vector,
    
    /**
     * The 3D vector local to the start/endpos with the highest values. This will represent the corner with the upper bounds of the box.
     */
    maxs: Vector,
    
    /**
     * The 3D vector local to the start/endpos with the lowest (often negative) values. This will represent the corner with the lower bounds of the box.
     */
    mins: Vector,
    
    /**
     * Things the trace should not hit. Can also be a table of entities or a function with one argument:
     * 
     * * [Entity](https://wiki.facepunch.com/gmod/Entity) ent - The entity that the trace hit
     * 
     * Using a function here is super slow. Try to avoid it.
     */
    filter: Entity,
    
    /**
     * The trace mask [Enums/MASK](https://wiki.facepunch.com/gmod/Enums/MASK). This determines what the trace should hit and what it shouldn't hit.
     */
    mask: number,
    
    /**
     * The collision group [Enums/COLLISION_GROUP](https://wiki.facepunch.com/gmod/Enums/COLLISION_GROUP). This determines what the trace should hit in regards to the entity's collision group.
     */
    collisiongroup: number,
    
    /**
     * Should the trace ignore world or not.
     */
    ignoreworld: boolean,
    
    /**
     * If set, the trace result will be written to the supplied table instead of returning a new table
     */
    output: any,

    

}

/**
 * [Client]
 * 
 * Table structure used for [render.SetLocalModelLights](https://wiki.facepunch.com/gmod/render.SetLocalModelLights).
 */
interface LocalLight {
    /**
     * The type of the light source, see [Enums/MATERIAL_LIGHT](https://wiki.facepunch.com/gmod/Enums/MATERIAL_LIGHT).
     */
    type: number,
    
    /**
     * The color of the light source (x is red, y is green, z is blue). Values are not restricted to a specific range, higher values will result in a brighter light.
     */
    color: Vector,
    
    /**
     * The origin of the light in world coordinates.
     */
    pos: Vector,
    
    /**
     * The direction of the light. Only required for directional and spot lights.
     */
    dir: Vector,
    
    /**
     * The maximum range of the light source. Does not actually control light attenuation. Usually left at 0 for infinite range.
     */
    range: number,
    
    /**
     * Angular falloff exponent for spot lights. Higher values result in a sharper transition between the inner cone and the outer cone.
     */
    angularFalloff: number,
    
    /**
     * The inner cone angle for spot lights, in degrees. No angular falloff will occur inside that cone.
     */
    innerAngle: number,
    
    /**
     * The outer cone angle for spot lights, in degrees.
     */
    outerAngle: number,
    
    /**
     * The distance at which the light will fade to 50% of its brightness.
     */
    fiftyPercentDistance: number,
    
    /**
     * The distance at which the light will completely fade out.
     */
    zeroPercentDistance: number,
    
    /**
     * The quadratic term of the light falloff. This will only be used if fiftyPercentDistance and zeroPercentDistance are not supplied, and allows finer control over light attenuation.
     */
    quadraticFalloff: number,
    
    /**
     * The linear term of the light falloff. This will only be used if fiftyPercentDistance and zeroPercentDistance are not supplied, and allows finer control over light attenuation.
     */
    linearFalloff: number,
    
    /**
     * The constant term of the light falloff. This will only be used if fiftyPercentDistance and zeroPercentDistance are not supplied, and allows finer control over light attenuation.
     */
    constantFalloff: number,

    

}

/**
 * [Client]
 * 
 * Table structure used by [matproxy.Add](https://wiki.facepunch.com/gmod/matproxy.Add).
 */
interface MatProxyData {
    /**
     * The name of the material proxy
     */
    name: string,
    
    /**
     * The function used to get variables from the ".vmt". Called once per each ".vmt". Arguments are:
     * * [table](https://wiki.facepunch.com/gmod/table) self
     * * [string](https://wiki.facepunch.com/gmod/string) materialName
     * * [table](https://wiki.facepunch.com/gmod/table) values
     */
    init: Function,
    
    /**
     * The function used to apply the proxy. This is called every frame while any materials with this proxy are used in world. Arguments are:
     * * [table](https://wiki.facepunch.com/gmod/table) self
     * * [string](https://wiki.facepunch.com/gmod/string) materialName
     * * [Entity](https://wiki.facepunch.com/gmod/Entity) ent
     */
    bind: Function,

    

}

/**
 * [Shared]
 * 
 * Table structure representing a mesh vertex used by various functions, such as [IMesh:BuildFromTriangles](https://wiki.facepunch.com/gmod/IMesh:BuildFromTriangles) and [Entity:PhysicsFromMesh](https://wiki.facepunch.com/gmod/Entity:PhysicsFromMesh) and returned by functions such as [util.GetModelMeshes](https://wiki.facepunch.com/gmod/util.GetModelMeshes) and  [PhysObj:GetMesh](https://wiki.facepunch.com/gmod/PhysObj:GetMesh).
 */
interface MeshVertex {
    /**
     * The vertex color. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     */
    color: any,
    
    /**
     * The triangles normal required to calculate lighting(optional).
     */
    normal: Vector,
    
    /**
     * The triangles tangent. Not used by the VertexLitGeneric shader.
     */
    tangent: Vector,
    
    /**
     * The triangles binormal. Not used by the VertexLitGeneric shader.
     */
    binormal: Vector,
    
    /**
     * The vertex position.
     */
    pos: Vector,
    
    /**
     * The u texture scale.
     */
    u: number,
    
    /**
     * The v texture scale.
     */
    v: number,
    
    /**
     * A table of four numbers. This is used by most shaders in Source to hold tangent information of the vertex ( tangentX, tangentY, tangentZ, tangentHandedness ).
     */
    userdata: any,

    

}

/**
 * [Shared]
 * 
 * Information about the NPC data structure, used to define spawnable NPCs for the Sandbox gamemode.
 * 
 * Example usage:
 * ```
 * list.Set( "NPC", "npc_tf2_ghost", {
 * 	Name = "Example NPC",
 * 	Class = "npc_tf2_ghost",
 * 	Category = "Nextbot"
 * } )
 * ```
 */
interface NPCData {
    /**
     * The nice name of the NPC for UI display.
     */
    Name: string,
    
    /**
     * Class name of the entity to spawn.
     */
    Class: string,
    
    /**
     * Spawnmenu category to put the NPCinto.
     */
    Category: string,
    
    /**
     * A list of weapons this NPC is typically meant to use. One will be picked on spawn at random, unless overwritten by the player.
     */
    Weapons: any,
    
    /**
     * Key-value pairs to apply to the NPC on spawn. See [Entity:SetKeyValue](https://wiki.facepunch.com/gmod/Entity:SetKeyValue).
     */
    KeyValues: any,
    
    /**
     * Model override for this NPC.
     */
    Model: string,
    
    /**
     * Additional spawnflags for this NPC. See [Entity:GetSpawnFlags](https://wiki.facepunch.com/gmod/Entity:GetSpawnFlags).
     * 
     * Ignored if `TotalSpawnFlags` key is present.
     */
    SpawnFlags: number,
    
    /**
     * Total spawnflags override for this NPC.
     */
    TotalSpawnFlags: number,
    
    /**
     * If set to `true`, this NPC can only be spawned on the ceiling. Stacks with `OnFloor`.
     */
    OnCeiling: boolean,
    
    /**
     * If set to `true`, this NPC can only be spawned on the floor. Stacks with `OnCeiling`.
     */
    OnFloor: boolean,
    
    /**
     * Offset, in Hammer units, away from the surface where the player is looking at for the NPC spawn position.
     */
    Offset: number,
    
    /**
     * Material override for this NPC. See [Entity:SetMaterial](https://wiki.facepunch.com/gmod/Entity:SetMaterial).
     */
    Material: string,
    
    /**
     * Skin override for the NPC. See [Entity:SetSkin](https://wiki.facepunch.com/gmod/Entity:SetSkin).
     */
    Skin: number,
    
    /**
     * If set to `true`, do not try to teleport the NPC to the ground.
     */
    NoDrop: boolean,
    
    /**
     * Used to add additional rotation the NPC post spawn. Usually all NPCs would be facing the player on spawn. Value of `Angle( 0, 180, 0 )` would make the NPC face away from the player.
     */
    Rotate: Angle,
    
    /**
     * Health override for this NPC. Also sets [Entity:SetMaxHealth](https://wiki.facepunch.com/gmod/Entity:SetMaxHealth).
     */
    Health: number,
    
    /**
     * If set, a function to be called when the NPC is pasted using the [duplicator](https://wiki.facepunch.com/gmod/duplicator) library.
     */
    OnDuplicated: Function,

    

}

/**
 * [Server]
 * 
 * The structure used by [Vehicle:GetOperatingParams](https://wiki.facepunch.com/gmod/Vehicle:GetOperatingParams).
 */
interface OperatingParams {
    /**
     * The current RPM of the vehicle
     */
    RPM: number,
    
    /**
     * The current gear of the vehicle, starting from 0
     */
    gear: number,
    
    /**
     * Is the vehicle boosting?
     */
    isTorqueBoosting: boolean,
    
    /**
     * The current speed, in inches per second
     */
    speed: number,
    
    /**
     * Steering angle
     */
    steeringAngle: number,
    
    /**
     * Wheels on ground
     */
    wheelsInContact: number,

    

}

/**
 * [Server]
 * 
 * Structure represents a path segment, returned by [PathFollower:GetCurrentGoal](https://wiki.facepunch.com/gmod/PathFollower:GetCurrentGoal), [PathFollower:FirstSegment](https://wiki.facepunch.com/gmod/PathFollower:FirstSegment) and [PathFollower:LastSegment](https://wiki.facepunch.com/gmod/PathFollower:LastSegment).
 */
interface PathSegment {
    /**
     * The navmesh area this segment occupies.
     */
    area: CNavArea,
    
    /**
     * How much of a curve should the bot execute when navigating this segment. 0 = none, 1 = 180°
     */
    curvature: number,
    
    /**
     * Distance of this segment from the start of the path.
     */
    distanceFromStart: number,
    
    /**
     * The direction of travel to reach the end of this segment from the start, represented as a normalised vector.
     */
    forward: Vector,
    
    /**
     * The direction of travel to reach the end of this segment from the start, represented as a cardinal direction integer 0 to 3, or 9 for vertical movement.
     */
    how: number,
    
    /**
     * The navmesh ladder this segment occupies, if any.
     */
    ladder: CNavLadder,
    
    /**
     * Length of this segment.
     */
    length: number,
    
    /**
     * 
     */
    m_portalCenter: Vector,
    
    /**
     * 
     */
    m_portalHalfWidth: number,
    
    /**
     * The position of the end of this segment.
     */
    pos: Vector,
    
    /**
     * The movement type of this segment, indicating how bots are expected to move along this segment.
     * * 0 is ground movement
     * * 1 is falling down
     * * 2 is climbing up or jumping
     * * 3 is jumping over a gap
     * * 4 is climbing a ladder up (unused)
     * * 5 is climbing a ladder down (unused)
     */
    type: number,

    

}

/**
 * [Shared]
 * 
 * Table used by [physenv.SetPerformanceSettings](https://wiki.facepunch.com/gmod/physenv.SetPerformanceSettings) and [physenv.GetPerformanceSettings](https://wiki.facepunch.com/gmod/physenv.GetPerformanceSettings).
 */
interface PhysEnvPerformanceSettings {
    /**
     * Maximum amount of seconds to precalculate collisions with objects.
     */
    LookAheadTimeObjectsVsObject: number,
    
    /**
     * Maximum amount of seconds to precalculate collisions with world.
     */
    LookAheadTimeObjectsVsWorld: number,
    
    /**
     * Maximum rotation velocity.
     */
    MaxAngularVelocity: number,
    
    /**
     * Maximum collision checks per tick.
     */
    MaxCollisionChecksPerTimestep: number,
    
    /**
     * Maximum collision per object per tick.
     */
    MaxCollisionsPerObjectPerTimestep: number,
    
    /**
     * Maximum mass of an object to be affected by friction.
     */
    MaxFrictionMass: number,
    
    /**
     * Maximum speed of an object.
     */
    MaxVelocity: number,
    
    /**
     * Minimum mass of an object to be affected by friction.
     */
    MinFrictionMass: number,

    

}

/**
 * [Server]
 * 
 * Structure used in storing/restoring physics object attributes.
 * [duplicator.GenericDuplicatorFunction](https://wiki.facepunch.com/gmod/duplicator.GenericDuplicatorFunction) and [duplicator.DoGenericPhysics](https://wiki.facepunch.com/gmod/duplicator.DoGenericPhysics) use a table of **PhysicsObjectSave**s with the struct's index in the table being the physics object ID.
 * 
 * Pos and Angle are set by the following:
 * 
 * ```
 * Pos, Angle = WorldToLocal(phys:GetPos(), phys:GetAngle(), Vector( 0, 0, 0 ), Angle( 0, 0, 0 ))
 * ```
 */
interface PhysicsObjectSave {
    /**
     * The entity's world position made local with [Global.WorldToLocal](https://wiki.facepunch.com/gmod/Global.WorldToLocal)
     */
    Pos: Vector,
    
    /**
     * The entity's world angles made local with [Global.WorldToLocal](https://wiki.facepunch.com/gmod/Global.WorldToLocal)
     */
    Angle: Angle,
    
    /**
     * Whether the entity is moveable. Equal to (`not` [PhysObj:IsMoveable](https://wiki.facepunch.com/gmod/PhysObj:IsMoveable))
     */
    Frozen: boolean,
    
    /**
     * Whether the entity's gravity is affected by gravity or not. [PhysObj:IsGravityEnabled](https://wiki.facepunch.com/gmod/PhysObj:IsGravityEnabled)
     */
    NoGrav: boolean,
    
    /**
     * Whether the entity is dormant or not. [PhysObj:IsAsleep](https://wiki.facepunch.com/gmod/PhysObj:IsAsleep)
     */
    Sleep: boolean,

    

}

/**
 * [Server]
 * 
 * Structure used by [construct.SetPhysProp](https://wiki.facepunch.com/gmod/construct.SetPhysProp).
 */
interface PhysProperties {
    /**
     * Enables or disables gravity for the entity
     */
    GravityToggle: boolean,
    
    /**
     * Sets the physics material for the entity
     */
    Material: string,

    

}

/**
 * [Shared]
 * 
 * This page describes all **default** fields for a <page text="player class">Player_Classes</page>.
 */
interface PLAYER {
    /**
     * The 'nice' name of the player class for display in User Interface and such.
     */
    DisplayName: string,
    
    /**
     * How fast to move when not running
     */
    WalkSpeed: number,
    
    /**
     * How fast to move when running/sprinting
     */
    RunSpeed: number,
    
    /**
     * How fast to move when slow walking, which is activated via the <key>+WALK</key> keybind.
     */
    SlowWalkSpeed: number,
    
    /**
     * Multiply walk speed by this when crouching
     */
    CrouchedWalkSpeed: number,
    
    /**
     * How fast to go from not ducking, to ducking
     */
    DuckSpeed: number,
    
    /**
     * How fast to go from ducking, to not ducking
     */
    UnDuckSpeed: number,
    
    /**
     * How powerful a jump should be
     */
    JumpPower: number,
    
    /**
     * Can the player use the flashlight
     */
    CanUseFlashlight: boolean,
    
    /**
     * Max health we can have
     */
    MaxHealth: number,
    
    /**
     * Max armor the player can have
     */
    MaxArmor: number,
    
    /**
     * How much health we start with
     */
    StartHealth: number,
    
    /**
     * How much armour we start with
     */
    StartArmor: number,
    
    /**
     * Do we drop our weapon when we die
     */
    DropWeaponOnDie: boolean,
    
    /**
     * Do we collide with teammates or run straight through them
     */
    TeammateNoCollide: boolean,
    
    /**
     * Automatically swerves around other players
     */
    AvoidPlayers: boolean,
    
    /**
     * Uses viewmodel hands
     */
    UseVMHands: boolean,

    

}

/**
 * [Client and Menu]
 * 
 * A structure containing vertex information for use with [surface.DrawPoly](https://wiki.facepunch.com/gmod/surface.DrawPoly).
 * 
 * UV coordinates describe which part of a given texture should be drawn at a vertex - your graphics card's interpolator will fill in space between vertices. UV coords range from `0-1`, with `0` being top/left and `1` being bottom/right. If you're using a texture these are mandatory.
 * 
 * **Note:**
 * >You must pass a table of tables with this structure to the function. **You need to pass at least 3 points.**
 * 
 * Your points must be defined in a **clockwise order.** Otherwise, your shape will not render properly.
 * 
 */
interface PolygonVertex {
    /**
     * The x coordinate of the vertex.
     */
    x: number,
    
    /**
     * The y coordinate of the vertex.
     */
    y: number,
    
    /**
     * The u texture coordinate of the vertex. `Can be left blank.`
     */
    u: number,
    
    /**
     * The v texture coordinate of the vertex. `Can be left blank.`
     */
    v: number,

    

}

/**
 * [Menu]
 * 
 * The structure used by [Global.CreateNewAddonPreset](https://wiki.facepunch.com/gmod/Global.CreateNewAddonPreset).
 */
interface Preset {
    /**
     * A Table containing all enabled addons.
     */
    enabled: any,
    
    /**
     * A Table containing all disabled addons.
     */
    disabled: any,
    
    /**
     * The name of the Preset.
     */
    name: string,
    
    /**
     * What to do with addons not in the preset. Can be `enable`, `disable` or nothing.
     */
    newAction: string,

    

}

/**
 * [Menu]
 * 
 * Table used by [Global.FireProblem](https://wiki.facepunch.com/gmod/Global.FireProblem) function.
 */
interface Problem {
    /**
     * The Problem ID.
     */
    id: string,
    
    /**
     * The Text to Display.
     */
    text: string,
    
    /**
     * The Problem severity.
     */
    severity: number,
    
    /**
     * The Problem Type. Possible values are:
     * * config
     * * hardware
     * * addons
     */
    type: string,
    
    /**
     * a Function that fixes the Problem.
     */
    fix: Function,

    

}

/**
 * [Shared]
 * 
 * Structure used for [properties.Add](https://wiki.facepunch.com/gmod/properties.Add).
 */
interface PropertyAdd {
    /**
     * Can be set to "toggle" to make this property a toggle property.
     */
    Type: string,
    
    /**
     * Label to show on opened menu
     */
    MenuLabel: string,
    
    /**
     * Icon to show on opened menu for this item. Optional for simple properties and unused for toggle properties.
     */
    MenuIcon: string,
    
    /**
     * Where in the list should the property be positioned, relative to other properties.
     * 
     * For reference, here are the default properties and their Order values:
     * 
     * Property |  Order |
     * ---------|-------|
     * | Bone Manipulate | 500 |
     * | Bodygroups | 600 |
     * | Skin | 601 |
     * | Keep Upright | 900 |
     * | Ignite/Extinguish | 999 |
     * | Remove | 1000 |
     * | Gravity | 1001 |
     * | Drive | 1100 |
     * | Collision | 1500 |
     * | Statue | 1501 |
     * | NPC Biggify/Smallify | 1799, 1800 |
     * | Motion Control (Kinect) | 2500 |
     * | <page text="Edit Properties">Editable_Entities</page> | 90001 |
     */
    StructureField_: number,
    
    /**
     * Whether to add a spacer before this property. This should generally be true for the first property in a group of properties.
     */
    PrependSpacer: boolean,
    
    /**
     * Used **clientside** to decide whether this property should be shown for an entity. Gets these arguments:
     * * [table](https://wiki.facepunch.com/gmod/table) self - the property table
     * * [Entity](https://wiki.facepunch.com/gmod/Entity) ent - the entity the player clicked
     * * [Global.LocalPlayer](https://wiki.facepunch.com/gmod/Global.LocalPlayer) player - the localplayer
     * 
     * Return true if the property should be shown for this entity. It's good practice to call [SANDBOX:CanProperty](https://wiki.facepunch.com/gmod/SANDBOX:CanProperty) in this hook via [gamemode.Call](https://wiki.facepunch.com/gmod/gamemode.Call) or [hook.Run](https://wiki.facepunch.com/gmod/hook.Run).
     */
    Filter: Function,
    
    /**
     * Required for toggle properties (clientside). Must return a boolean value to either check or uncheck the toggle property.
     * * [table](https://wiki.facepunch.com/gmod/table) self - the property table
     * * [Entity](https://wiki.facepunch.com/gmod/Entity) ent - the entity the player clicked
     * * [table](https://wiki.facepunch.com/gmod/table) tr - the player's eye trace
     */
    Checked: Function,
    
    /**
     * Called **clientside** when the property is clicked with these arguments:
     * * [table](https://wiki.facepunch.com/gmod/table) self - the property table
     * * [Entity](https://wiki.facepunch.com/gmod/Entity) ent - the entity the player clicked
     * * [table](https://wiki.facepunch.com/gmod/table) tr - the player's eye trace
     * 
     * When appropriate, within this function you can call self:MsgStart(), write data with the [net](https://wiki.facepunch.com/gmod/net) 'Write' functions, and finish with self:MsgEnd(). This will activate the 'Receive' function on the server. In most cases, you will want to send the entity to the server, as it's not done by default.
     */
    Action: Function,
    
    /**
     * Called **serverside** if the client sends a message in the 'Action' function (see above).
     * * [table](https://wiki.facepunch.com/gmod/table) self - the property table
     * * [number](https://wiki.facepunch.com/gmod/number) len - the net message length, although this includes the property identifier used internally (the name of the property)
     * * [Player](https://wiki.facepunch.com/gmod/Player) ply - the player who clicked the property
     * 
     * You can read data received from the client with the [net](https://wiki.facepunch.com/gmod/net) 'Read' functions. It's good practice to check [SANDBOX:CanProperty](https://wiki.facepunch.com/gmod/SANDBOX:CanProperty) here via [gamemode.Call](https://wiki.facepunch.com/gmod/gamemode.Call) or [hook.Run](https://wiki.facepunch.com/gmod/hook.Run).
     */
    Receive: Function,
    
    /**
     * Called **clientside** when the property option has been created in the right-click menu. This is not called for toggle properties!
     * * [table](https://wiki.facepunch.com/gmod/table) self - the property table
     * * [DMenuOption](https://wiki.facepunch.com/gmod/DMenuOption) option - the menu option
     * * [Entity](https://wiki.facepunch.com/gmod/Entity) ent - the entity the player right-clicked
     * * [table](https://wiki.facepunch.com/gmod/table) tr - the player's eye trace
     */
    MenuOpen: Function,
    
    /**
     * Same as MenuOpen, but also called for toggle properties and has different arguments. This is called immediately after MenuOpen, but nothing happens in between so you should only ever use one or the other.
     * * [table](https://wiki.facepunch.com/gmod/table) self - the property table
     * * [DMenu](https://wiki.facepunch.com/gmod/DMenu) menu - the property menu
     * * [DMenuOption](https://wiki.facepunch.com/gmod/DMenuOption) option - the menu option
     */
    OnCreate: Function,

    

}

/**
 * [Client]
 * 
 * Used for [cam.Start](https://wiki.facepunch.com/gmod/cam.Start).
 * 
 * Unless stated otherwise, the default values for all these keys would be inherited from the engine's current `CViewSetup` and do not have static representations.
 */
interface RenderCamData {
    /**
     * The x position of the view port
     */
    x: number,
    
    /**
     * The y position of the view port
     */
    y: number,
    
    /**
     * The width of the view port
     */
    w: number,
    
    /**
     * The height of the view port
     */
    h: number,
    
    /**
     * The type of cam. Valid types are:
     * * "2D" - No additional arguments are required
     * * "3D" - Only origin and angles are needed, all other parameters are optional.
     */
    type: string,
    
    /**
     * The position to render from
     */
    origin: Vector,
    
    /**
     * The angles to render from
     */
    angles: Angle,
    
    /**
     * The field of view
     */
    fov: number,
    
    /**
     * The aspect ratio of the view port (Note that this is NOT set to w/h by default)
     */
    aspect: number,
    
    /**
     * The distance to the far clipping plane
     */
    zfar: number,
    
    /**
     * The distance to the near clipping plane
     */
    znear: number,
    
    /**
     * Set to true if this is to draw into a subrect of the larger screen.
     */
    subrect: boolean,
    
    /**
     * m_bDoBloomAndToneMapping
     */
    bloomtone: boolean,
    
    /**
     * A table having these keys: ( all floats )
     * * left
     * * right
     * * bottom
     * * top
     */
    offcenter: any,
    
    /**
     * If set, makes the view/camera orthogonal. A table having these keys: ( all floats )
     * * left
     * * right
     * * bottom
     * * top
     */
    ortho: any,

    

}

/**
 * [Client]
 * 
 * Used for [render.Capture](https://wiki.facepunch.com/gmod/render.Capture).
 */
interface RenderCaptureData {
    /**
     * Format of the capture. Valid formats are:
     * * `jpeg` or `jpg`
     * * `png`
     */
    format: string,
    
    /**
     * X coordinate of the capture origin
     */
    x: number,
    
    /**
     * Y coordinate of the capture origin
     */
    y: number,
    
    /**
     * Width of the capture
     */
    w: number,
    
    /**
     * Height of the capture
     */
    h: number,
    
    /**
     * The quality of the capture. Affects jpeg only.
     */
    quality: number,
    
    /**
     * Set to false to capture an image with alpha channel set to fully opaque. Affects png only.
     */
    alpha: boolean,

    

}

/**
 * [Shared]
 * 
 * Used by [Entity:GetSequenceInfo](https://wiki.facepunch.com/gmod/Entity:GetSequenceInfo).
 */
interface SequenceInfo {
    /**
     * Name of the sequence.
     */
    label: string,
    
    /**
     * Name of the activity this sequence is attached to.
     */
    activityname: string,
    
    /**
     * The activity ID associated with this sequence. See [Enums/ACT](https://wiki.facepunch.com/gmod/Enums/ACT).
     */
    activity: number,
    
    /**
     * How likely this sequence is to be picked when playing an activity its attached to. -1 means this is the only sequence for that activity. (needs validation)
     */
    actweight: number,
    
    /**
     * The looping and other flags of this sequence.
     */
    flags: number,
    
    /**
     * Number of animation events this sequence has.
     */
    numevents: number,
    
    /**
     * 
     */
    numblends: number,
    
    /**
     * Mins part of the bounding box for this sequence
     */
    bbmin: number,
    
    /**
     * Maxs part of the bounding box for this sequence
     */
    bbmax: number,
    
    /**
     * ideal cross fade in time (0.2 default)
     */
    fadeintime: number,
    
    /**
     * ideal cross fade out time (0.2 default)
     */
    fadeouttime: number,
    
    /**
     * transition node at entry
     */
    localentrynode: number,
    
    /**
     * transition node at exit
     */
    localexitnode: number,
    
    /**
     * Transition rules
     */
    nodeflags: number,
    
    /**
     * Frame that should generate EndOFSequence
     */
    lastframe: number,
    
    /**
     * If non 0, the next sequence for auto advancing sequences
     */
    nextseq: number,
    
    /**
     * 
     */
    pose: number,
    
    /**
     * If non 0, index of pose parameter to be used as cycle index. This means that the sequence playback will be controlled by a pose parameter.
     */
    cycleposeindex: number,
    
    /**
     * A 1-based array of all animationIDs associated with this sequence. For use with [Entity:GetAnimInfo](https://wiki.facepunch.com/gmod/Entity:GetAnimInfo).
     */
    anims: any,

    

}

/**
 * [Menu]
 * 
 * Used for [serverlist.Query](https://wiki.facepunch.com/gmod/serverlist.Query).
 */
interface ServerQueryData {
    /**
     * The game directory to get the servers for
     */
    GameDir: string,
    
    /**
     * Type of servers to retrieve. Valid values are `internet`, `favorite`, `history` and `lan`
     */
    Type: string,
    
    /**
     * Steam application ID to get the servers for
     */
    AppID: number,
    
    /**
     * Called when a new server is found and queried. Arguments:
     * 
     *       [number](https://wiki.facepunch.com/gmod/number) ping - Latency to the server.
     * 
     *       [string](https://wiki.facepunch.com/gmod/string) name - Name of the server
     * 
     *       [string](https://wiki.facepunch.com/gmod/string) desc - "Nice" gamemode name
     * 
     *       [string](https://wiki.facepunch.com/gmod/string) map - Current map
     * 
     *       [number](https://wiki.facepunch.com/gmod/number) players - Total player number ( bot + human )
     * 
     *       [number](https://wiki.facepunch.com/gmod/number) maxplayers - Maximum reported amount of players
     * 
     *       [number](https://wiki.facepunch.com/gmod/number) botplayers - Amount of bots on the server
     * 
     *       [boolean](https://wiki.facepunch.com/gmod/boolean) pass - Whether this server has password or not
     * 
     *       [number](https://wiki.facepunch.com/gmod/number) lastplayed - Time when you last played on this server, as UNIX timestamp or 0
     * 
     *       [string](https://wiki.facepunch.com/gmod/string) address - IP Address of the server
     * 
     *       [string](https://wiki.facepunch.com/gmod/string) gamemode - Gamemode folder name
     * 
     *       [number](https://wiki.facepunch.com/gmod/number) workshopid - Gamemode Steam Workshop ID
     * 
     *       [boolean](https://wiki.facepunch.com/gmod/boolean) isanon - Is the server signed into an anonymous account?
     * 
     *       [string](https://wiki.facepunch.com/gmod/string) version - Version number, same format as [jit.version_num](https://wiki.facepunch.com/gmod/jit.version_num)
     * 
     *       [string](https://wiki.facepunch.com/gmod/string) localization - Two digit country code, `us` if [nil](https://wiki.facepunch.com/gmod/nil)
     * 
     *       [string](https://wiki.facepunch.com/gmod/string) gmcategory - Category of the gamemode, ex. `pvp`, `pve`, `rp` or `roleplay`
     * 
     *       Return false to stop the query.
     */
    Callback: Function,
    
    /**
     * Called if the query has failed, called with the servers IP Address
     */
    CallbackFailed: Function,
    
    /**
     * Called when the query is finished. No arguments
     */
    Finished: Function,

    

}

/**
 * [Shared]
 * 
 * Table used in [sound.Add](https://wiki.facepunch.com/gmod/sound.Add) and [sound.GetProperties](https://wiki.facepunch.com/gmod/sound.GetProperties).
 */
interface SoundData {
    /**
     * Path to the sound file to be used in this sound effect, relative to `sound/` directory (so exclude the `sound/` part). 
     * 
     * Can be a table of sound files, in which case the sound will be chosen randomly every time from the provided list.
     * 
     * Each sound path can be prepended with a special character for special effects. You can learn more about this [here](https://developer.valvesoftware.com/wiki/Soundscripts#Sound_Characters).
     */
    sound: string,
    
    /**
     * The name of the soundscript, to be referenced by in functions such as [Entity:EmitSound](https://wiki.facepunch.com/gmod/Entity:EmitSound).
     */
    name: string,
    
    /**
     * The sound channel to play in. See [Enums/CHAN](https://wiki.facepunch.com/gmod/Enums/CHAN)
     */
    channel: number,
    
    /**
     * The soundlevel of the sound in dB. See [Enums/SNDLVL](https://wiki.facepunch.com/gmod/Enums/SNDLVL). This will affect how far the sound can be heard.
     */
    level: number,
    
    /**
     * The volume of the sound as a decimal between `0` and `1`. Can be a table of two numbers, a minimum and a maximum value.
     * 
     * **Warning:** Volume of `0` will act as volume of `1`
     */
    volume: number,
    
    /**
     * The pitch of the sound. Can be a table of two numbers, a minimum and a maximum value.
     */
    pitch: number,
    
    /**
     * The initial pitch.
     * 
     * **Warning:**
     * >Deprecated, use pitch.
     * 
     */
    pitchstart: number,
    
    /**
     * The pitch end.
     * 
     * **Warning:**
     * >Deprecated, use pitch.
     * 
     */
    pitchend: number,

    

}

/**
 * [Server]
 * 
 * Table describing a sound hint, used by [NPC:GetBestSoundHint](https://wiki.facepunch.com/gmod/NPC:GetBestSoundHint) and [sound.GetLoudestSoundHint](https://wiki.facepunch.com/gmod/sound.GetLoudestSoundHint).
 */
interface SoundHintData {
    /**
     * Origin of the sound hint
     */
    origin: Vector,
    
    /**
     * Owner of the sound hint, if any (emitting entity, like a thumper)
     */
    owner: Entity,
    
    /**
     * Target of the sound hint, if any
     */
    target: Entity,
    
    /**
     * Volume of the sound hint
     */
    volume: number,
    
    /**
     * <page text="SOUND_ enums">Enums/SOUND</page>
     */
    type: number,
    
    /**
     * <page text="CurTime">Global.CurTime</page> based expiration date
     */
    expiration: number,
    
    /**
     * Does this sound hint expire?
     */
    expires: boolean,
    
    /**
     * <page text="CHAN_ enums">Enums/CHAN</page>
     */
    channel: number,

    

}

/**
 * [Client]
 * 
 * Returned by [util.GetSunInfo](https://wiki.facepunch.com/gmod/util.GetSunInfo).
 */
interface SunInfo {
    /**
     * The suns direction relative to 0,0,0
     */
    direction: Vector,
    
    /**
     * Indicates how obstructed the sun is, 1 not visible, 0 fully visible
     */
    obstruction: number,

    

}

/**
 * [Shared]
 * 
 * Table returned by [util.GetSurfaceData](https://wiki.facepunch.com/gmod/util.GetSurfaceData).
 */
interface SurfacePropertyData {
    /**
     * The name of the surface property, identical to [util.GetSurfacePropName](https://wiki.facepunch.com/gmod/util.GetSurfacePropName).
     */
    name: string,
    
    /**
     * How hard a surface is. If this is greater than or equal to another surfaces's hardThreshold, a hard impact sound will be used.
     */
    hardnessFactor: number,
    
    /**
     * Hardness threshold for impact sounds. HitSurface.hardnessFactor >= InflictorSurface.hardThreshold - hard impact sound (depends on hardVelocityThreshold's value), HitSurface.hardnessFactor < InflictorSurface.hardThreshold - soft impact sound (always).
     */
    hardThreshold: number,
    
    /**
     * Velocity threshold for impact sounds. impactSpeed >= HitSurface.hardVelocityThreshold - hard impact sound (depends on hardThreshold's value), impactSpeed < HitSurface.hardVelocityThreshold - soft impact sound (always).
     */
    hardVelocityThreshold: number,
    
    /**
     * Amount of sound reflected from the surface represented as a number 0.0 - 1.0. 0 - no reflection, 1 - fully reflected.
     */
    reflectivity: number,
    
    /**
     * How rough a surface is. If this is greater than or equal to another surfaces's roughThreshold, a rough scrape sound will be used.
     */
    roughnessFactor: number,
    
    /**
     * Roughness threshold for friction sounds. HitSurface.roughnessFactor >= InflictorSurface.roughThreshold - rough friction sound, HitSurface.roughnessFactor < InflictorSurface.roughThreshold - soft friction sound.
     */
    roughThreshold: number,
    
    /**
     * Indicates whether or not the surface is a ladder. Used to detect whether a player is on a ladder. 0 - false, > 0 - true.
     */
    climbable: number,
    
    /**
     * Scalar multiplier for player jump height - or more accurately, applied z-axis velocity on a surface. For example, 1 - normal jump, 2 - twice as high, and 0.5 - half as high.
     */
    jumpFactor: number,
    
    /**
     * The surface material. See [Enums/MAT](https://wiki.facepunch.com/gmod/Enums/MAT).
     */
    material: number,
    
    /**
     * Scalar multiplier for player speed. Achieves this by multiplying [CMoveData:SetMaxSpeed](https://wiki.facepunch.com/gmod/CMoveData:SetMaxSpeed) in [GM:Move](https://wiki.facepunch.com/gmod/GM:Move).
     */
    maxSpeedFactor: number,
    
    /**
     * This is the physical drag on an object when in contact with this surface (0 - x, 0 none to x a lot).
     */
    dampening: number,
    
    /**
     * Material density in kg / m^3 (water is 1000). If a surface's density is < 1000, it will float in water. This is used to calculate the total mass of an object.
     */
    density: number,
    
    /**
     * Collision elasticity - used to compute coefficient of restitution represented as a number 0.0 - 1.0. 0.01 is soft, 1.0 is hard.
     */
    elasticity: number,
    
    /**
     * Physical friction used to slow entities touching the surface represented as a number 0.0 - 1.0. 0.01 is slick, 1.0 is completely rough.
     */
    friction: number,
    
    /**
     * Material thickness. If this is 0, the material is not volumetrically solid, and thus the object mass will be calculated as "volume * 0.0254^3 * density" where 0.0254 is meters per inch. If non-zero, the mass will be "surfacearea * thickness * 0.0254^3 * density".
     */
    thickness: number,
    
    /**
     * Sound to play when a prop or func_breakable is broken.
     */
    breakSound: string,
    
    /**
     * Bullet impact sound with this surface.
     */
    bulletImpactSound: string,
    
    /**
     * Physical impact sound when hitting surfaces hard.
     */
    impactHardSound: string,
    
    /**
     * Physical impact sound when hitting surfaces softly.
     */
    impactSoftSound: string,
    
    /**
     * Unused sound.
     */
    rollingSound: string,
    
    /**
     * Friction sound when roughly scraping against an entity.
     */
    scrapeRoughSound: string,
    
    /**
     * Friction sound when smoothly scraping against an entity.
     */
    scrapeSmoothSound: string,
    
    /**
     * Footstep sound for left foot.
     */
    stepLeftSound: string,
    
    /**
     * Footstep sound for right foot.
     */
    stepRightSound: string,
    
    /**
     * Unused sound.
     */
    strainSound: string,

    

}

/**
 * [Shared]
 * 
 * Information about <page text="Scripted Weapons">Scripted_Entities</page> (SWEPs), 
 * 		used by [SANDBOX:PlayerGiveSWEP](https://wiki.facepunch.com/gmod/SANDBOX:PlayerGiveSWEP) and in SWEP creation.
 * 
 *         For list of callbacks, see <page text="WEAPON Hooks">WEAPON_Hooks</page>.
 * 
 *         While some of the fields may be serverside or clientside only, it is recommended to provide them on both so
 *         addons could use their values.
 */
interface SWEP {
    /**
     * Entity class name of the SWEP (file or folder name of your SWEP). This is
     *             set automatically
     */
    ClassName: string,
    
    /**
     * If set, overrides the classname of the SWEP.
     */
    ClassNameOverride: string,
    
    /**
     * The spawn menu category that this weapon
     *             resides in.
     */
    Category: string,
    
    /**
     * Whether or not this weapon can be obtained through the
     *             spawn menu.
     */
    Spawnable: boolean,
    
    /**
     * If spawnable, this variable determines whether only
     *             administrators can use the button in the spawn menu.
     */
    AdminOnly: boolean,
    
    /**
     * The name of the SWEP displayed in the spawn menu.
     */
    PrintName: string,
    
    /**
     * The weapon's base script, relative to `lua/weapons`.
     */
    Base: string,
    
    /**
     * The deploy speed multiplier. This does not change the
     *             internal deployment speed.
     */
    m_WeaponDeploySpeed: number,
    
    /**
     * 
     * 
     * **Warning:**
     * >Deprecated, use [Entity:GetOwner](https://wiki.facepunch.com/gmod/Entity:GetOwner)() instead.
     * 
     */
    Owner: Entity,
    
    /**
     * The SWEP's author.
     */
    Author: string,
    
    /**
     * The contact information regarding the SWEP's author.
     */
    Contact: string,
    
    /**
     * The purpose of the SWEP.
     */
    Purpose: string,
    
    /**
     * The instructions regarding the SWEP's usage.
     */
    Instructions: string,
    
    /**
     * Relative path to the SWEP's view model.
     */
    ViewModel: string,
    
    /**
     * Used primarily for Counter Strike: Source view models, this variable is used to flip them back to normal.
     */
    ViewModelFlip: boolean,
    
    /**
     * Behaves similarly to `ViewModelFlip`, but for the second view model.
     */
    ViewModelFlip1: boolean,
    
    /**
     * Behaves similarly to `ViewModelFlip`, but for the third view model.
     */
    ViewModelFlip2: boolean,
    
    /**
     * The field of view percieved whilst wielding this `SWEP`.
     */
    ViewModelFOV: number,
    
    /**
     * Relative path to the SWEP's world model.
     */
    WorldModel: string,
    
    /**
     * Whether this weapon can be autoswitched
     *             away from when the player runs out of ammo in this weapon or picks up another weapon or ammo
     */
    AutoSwitchFrom: boolean,
    
    /**
     * Whether this weapon can be autoswitched to
     *             when the player runs out of ammo in their current weapon or they pick this weapon up
     */
    AutoSwitchTo: boolean,
    
    /**
     * Determines the priority of the weapon when
     *             autoswitching. The weapon being autoswitched from will attempt to switch to a weapon with the same weight
     *             that has ammo, but if none exists, it will prioritise higher weight weapons.
     */
    Weight: number,
    
    /**
     * The scale of the viewmodel bob (viewmodel movement
     *             from left to right when walking around)
     */
    BobScale: number,
    
    /**
     * The scale of the viewmodel sway (viewmodel
     *             position lerp when looking around).
     */
    SwayScale: number,
    
    /**
     * Should the weapon icon bounce in weapon
     *             selection?
     */
    BounceWeaponIcon: boolean,
    
    /**
     * Should draw the weapon selection info
     *             box, containing SWEP.Instructions, etc.
     */
    DrawWeaponInfoBox: boolean,
    
    /**
     * Should we draw the default HL2 ammo counter?
     */
    DrawAmmo: boolean,
    
    /**
     * Should we draw the default crosshair?
     */
    DrawCrosshair: boolean,
    
    /**
     * The SWEP render group, see [Enums/RENDERGROUP](https://wiki.facepunch.com/gmod/Enums/RENDERGROUP). If unset, the engine will decide the render group based on the SWEPs world model.
     */
    RenderGroup: number,
    
    /**
     * Slot in the weapon selection menu, starts with `0`
     */
    Slot: number,
    
    /**
     * Position in the slot, should be in the range `0-128`
     */
    SlotPos: number,
    
    /**
     * Internal variable for drawing the info box in weapon selection
     */
    SpeechBubbleLid: number,
    
    /**
     * Path to
     *             an texture. Override this in your SWEP to set the icon in the weapon selection. This must be the texture ID,
     *             see [surface.GetTextureID](https://wiki.facepunch.com/gmod/surface.GetTextureID). Alternatively you can render custom weapon selection via [WEAPON:DrawWeaponSelection](https://wiki.facepunch.com/gmod/WEAPON:DrawWeaponSelection).
     */
    WepSelectIcon: number,
    
    /**
     * Should we use Counter-Strike muzzle
     *             flashes upon firing? This is required for DoD:S or CS:S view models to fix their muzzle flashes.
     */
    CSMuzzleFlashes: boolean,
    
    /**
     * Use the X shape muzzle flash instead of the
     *             default Counter-Strike muzzle flash. Requires <page text="CSMuzzleFlashes">Structures/SWEP#CSMuzzleFlashes</page> to be set to true.
     */
    CSMuzzleX: boolean,
    
    /**
     * Primary attack settings. The table contains these fields:
     * 
     * * [string](https://wiki.facepunch.com/gmod/string) `Ammo` - Ammo type (`Pistol`, `SMG1`, etc.) See [game.AddAmmoType](https://wiki.facepunch.com/gmod/game.AddAmmoType).
     * * [number](https://wiki.facepunch.com/gmod/number) `ClipSize` - The maximum amount of bullets one clip can hold. Setting it to `-1` means weapon uses no clips, like a grenade or a rocket launch.
     * * [number](https://wiki.facepunch.com/gmod/number) `DefaultClip` - Default ammo in the clip, making it higher than ClipSize will give player additional ammo on spawn
     * * [boolean](https://wiki.facepunch.com/gmod/boolean) `Automatic` - If true makes the weapon shoot automatically as long as the player has primary attack button held down
     */
    Primary: any,
    
    /**
     * Secondary attack settings, has same fields as Primary attack settings
     */
    Secondary: any,
    
    /**
     * Makes the player models hands bonemerged onto
     *             the view model
     * 
     * **Warning:**
     * >The gamemode and view models **must** support this feature for it to work!
     *                 You can find more information here:
     * 
     */
    UseHands: boolean,
    
    /**
     * The folder from where the weapon was loaded. This should always be
     *             "weapons/weapon_myweapon", regardless whether your SWEP is stored as a file, or multiple files in a folder.
     *             It is set automatically on load
     */
    Folder: string,
    
    /**
     * Makes the default SWEP crosshair be
     *             positioned in 3D space where your aim actually is (like on Jeep), instead of simply sitting in the middle of
     *             the screen at all times
     */
    AccurateCrosshair: boolean,
    
    /**
     * Disable the ability for players to duplicate this
     *             SWEP
     */
    DisableDuplicator: boolean,
    
    /**
     * Sets the spawnmenu content icon type
     *             for the entity, used by spawnmenu in the Sandbox-derived gamemodes.
     *             See [spawnmenu.AddContentType](https://wiki.facepunch.com/gmod/spawnmenu.AddContentType) for more information.
     */
    ScriptedEntityType: string,
    
    /**
     * If set to false, the weapon will not play the
     *             weapon pick up sound when picked up.
     */
    m_bPlayPickupSound: boolean,
    
    /**
     * If set,
     *             overrides the icon path to be displayed in the Spawnmenu for this entity.
     */
    IconOverride: string,

    

}

/**
 * [Shared]
 * 
 * Table is one element from [team.GetAllTeams](https://wiki.facepunch.com/gmod/team.GetAllTeams).
 */
interface TeamData {
    /**
     * Color of the team
     */
    Color: any,
    
    /**
     * Whether the team is joinable or not.
     */
    Joinable: boolean,
    
    /**
     * Name of the team
     */
    Name: string,
    
    /**
     * Score of the team
     */
    Score: number,

    

}

/**
 * [Client and Menu]
 * 
 * Used for [draw.Text](https://wiki.facepunch.com/gmod/draw.Text).
 */
interface TextData {
    /**
     * Text to be drawn.
     */
    text: string,
    
    /**
     * The font to draw with. List of default fonts can be found <page text="here">Default_Fonts</page>.
     */
    font: string,
    
    /**
     * This holds the X and Y coordinates. Key value 1 is x, key value 2 is y.
     */
    pos: any,
    
    /**
     * The alignment of the X position. See [Enums/TEXT_ALIGN](https://wiki.facepunch.com/gmod/Enums/TEXT_ALIGN)
     */
    xalign: number,
    
    /**
     * The alignment of the Y position. See [Enums/TEXT_ALIGN](https://wiki.facepunch.com/gmod/Enums/TEXT_ALIGN)
     */
    yalign: number,
    
    /**
     * The text color
     */
    color: any,

    

}

/**
 * [Client and Menu]
 * 
 * Used for [draw.TexturedQuad](https://wiki.facepunch.com/gmod/draw.TexturedQuad).
 */
interface TextureData {
    /**
     * surface.GetTextureID number of the texture to be drawn.
     */
    texture: number,
    
    /**
     * The x Coordinate.
     */
    x: number,
    
    /**
     * The y Coordinate.
     */
    y: number,
    
    /**
     * The width of the texture.
     */
    w: number,
    
    /**
     * The height of the texture.
     */
    h: number,
    
    /**
     * The texture color. See [Color](https://wiki.facepunch.com/gmod/Color).
     */
    color: any,

    

}

/**
 * [Shared]
 * 
 * The **TOOL** table is used in Sandbox tool creation. You can find a list of callbacks on the  page and a list of methods on the  page. Do note that some of the fields below have no effect on server-side operations.
 * 
 * The tool information box drawn on the HUD while your tool is selected has 2 values that are set by [language.Add](https://wiki.facepunch.com/gmod/language.Add).
 * * `tool.[tool mode].name` - The tool name (Note this is NOT the same as TOOL.Name)
 * * `tool.[tool mode].desc` - The tool description
 * 
 * Ensure that all tool file names are entirely lowercase.  Including capital letters can lead to unintended behavior.
 */
interface TOOL {
    /**
     * If set to false, the tool won't be added to the tool menu and players will have to access it by other means.
     */
    AddToMenu: boolean,
    
    /**
     * The tool menu category under which the tool should be listed.
     */
    Category: string,
    
    /**
     * The console command to execute upon being selected in the Q menu.
     */
    Command: string,
    
    /**
     * The name of the tool in the Q menu.
     * Common practice is to set this to "#tool.[lua filename].name" to match the name displayed in the tool information box.
     */
    Name: string,
    
    /**
     * A key-value ( convar name-default value ) table containing the client-side convars to create. All convars will be prefixed with the filename of the tool.
     * You can later use [Tool:GetClientNumber](https://wiki.facepunch.com/gmod/Tool:GetClientNumber) or [Tool:GetClientInfo](https://wiki.facepunch.com/gmod/Tool:GetClientInfo) to retrieve these values.
     */
    ClientConVar: any,
    
    /**
     * Same as above, but created server-side instead.
     */
    ServerConVar: any,
    
    /**
     * A key-value ( [string](https://wiki.facepunch.com/gmod/string) name - [ConVar](https://wiki.facepunch.com/gmod/ConVar) object ) table containing the cached convar objected created from `ClientConVar`.
     */
    ClientConVars: any,
    
    /**
     * Same as above, but server-side (`ServerConVar`) instead.
     */
    ServerConVars: any,
    
    /**
     * The function that is called to build the context menu for your tool. It has one argument, namely the context menu's base panel to which all of your custom panels are going to be parented to.
     * 
     * While it might sound like a hook, it isn't - you won't receive a `self` argument inside the function. See [TOOL.BuildCPanel](https://wiki.facepunch.com/gmod/TOOL.BuildCPanel).
     */
    BuildCPanel: Function,
    
    /**
     * Allows you to override the tool usage information shown when the tool is equipped.
     * See [Tool Information Display](https://wiki.facepunch.com/gmod/Tool_Information_Display) for more information.
     */
    Information: any,
    
    /**
     * Class name of the tool. (name of the .lua file)
     * 
     * This is set automatically.
     */
    Mode: string,
    
    /**
     * The tool tab ([spawnmenu.AddToolTab](https://wiki.facepunch.com/gmod/spawnmenu.AddToolTab)) to add this tool to. (The internal name, first argument)
     */
    Tab: string,
    
    /**
     * When enabled the game tries to run the left mouse click as soon as possible
     */
    LeftClickAutomatic: boolean,
    
    /**
     * When enabled the game tries to run the right mouse click as soon as possible
     */
    RightClickAutomatic: boolean,

    

}

/**
 * [Client]
 * 
 * Table returned by [Vector:ToScreen](https://wiki.facepunch.com/gmod/Vector:ToScreen).
 */
interface ToScreenData {
    /**
     * The x coordinate on the players screen
     */
    x: number,
    
    /**
     * The y coordinate on the players screen
     */
    y: number,
    
    /**
     * The coordinate is not behind the player. **This does not mean the coordinate is on the screen.** When this is false, it means that the coordinate would not be on the screen even if the player had a full 180 degree FOV.
     */
    visible: boolean,

    

}

/**
 * [Shared]
 * 
 * Table structure used for [util.TraceLine](https://wiki.facepunch.com/gmod/util.TraceLine).
 */
interface Trace {
    /**
     * The start position of the trace
     */
    start: Vector,
    
    /**
     * The end position of the trace
     */
    endpos: Vector,
    
    /**
     * Things the trace should not hit. Can also be a table of entities or a function with one argument:
     * 
     * * [Entity](https://wiki.facepunch.com/gmod/Entity) ent - The entity that the trace hit
     * 
     * Return true in the function to hit the entity, false to skip it.
     * 
     * **Warning:**
     * >Using a function here is super slow - try to avoid it.
     * 
     */
    filter: Entity,
    
    /**
     * The trace mask [Enums/MASK](https://wiki.facepunch.com/gmod/Enums/MASK). This determines what the trace should hit and what it shouldn't hit. A mask is a combination of [Enums/CONTENTS](https://wiki.facepunch.com/gmod/Enums/CONTENTS) - you can use these for more advanced masks.
     */
    mask: number,
    
    /**
     * The collision group [Enums/COLLISION_GROUP](https://wiki.facepunch.com/gmod/Enums/COLLISION_GROUP). This determines what the trace should hit in regards to the entity's collision group.
     */
    collisiongroup: number,
    
    /**
     * Should the trace ignore world or not
     */
    ignoreworld: boolean,
    
    /**
     * If set, the trace result will be written to the supplied table instead of returning a new table
     */
    output: any,

    

}

/**
 * [Shared]
 * 
 * Table structure used as trace result. Default values are when the trace hits nothing.
 */
interface TraceResult {
    /**
     * The entity hit by the trace.
     */
    Entity: Entity,
    
    /**
     * This indicates the how much of your trace length was used from 0-1 (resultLength/originalLength).
     */
    Fraction: number,
    
    /**
     * Given the trace started in a solid enviroment, this will return at what distance the trace left the solid from 0-1. Doesn't work if the trace hit a non-worldspawn entity.
     */
    FractionLeftSolid: number,
    
    /**
     * Indicates whether the trace hit something.
     */
    Hit: boolean,
    
    /**
     * The ID of the hitbox hit by the trace.
     */
    HitBox: number,
    
    /**
     * [Enums/HITGROUP](https://wiki.facepunch.com/gmod/Enums/HITGROUP) describing what hitgroup the trace hit (not the same as HitBox).
     */
    HitGroup: number,
    
    /**
     * Indicates whenever the trace hit a no-draw brush.
     */
    HitNoDraw: boolean,
    
    /**
     * Indicates whenever the trace did not hit the world.
     */
    HitNonWorld: boolean,
    
    /**
     * The direction of the surface that was hit as a normal vector (vector with <page text="length">Vector:Length</page> of 1).
     */
    HitNormal: Vector,
    
    /**
     * The position the trace stopped. This will be the provided endpos if the trace hit nothing.
     */
    HitPos: Vector,
    
    /**
     * Indicates whenever the trace hit the sky.
     */
    HitSky: boolean,
    
    /**
     * The surface material (not texture) of whatever the trace hit. Will be `**displacement**` if the trace hit a displacement, and `**studio**` if it hit a prop.
     */
    HitTexture: string,
    
    /**
     * Indicates whenever the trace hit the world.
     */
    HitWorld: boolean,
    
    /**
     * [Enums/MAT](https://wiki.facepunch.com/gmod/Enums/MAT) of the material hit by the trace.
     */
    MatType: number,
    
    /**
     * The direction of the trace as a normal vector (vector with <page text="length">Vector:Length</page> of 1).
     * 
     * Equivalent to: `( traceRes.HitPos - traceRes.StartPos ):Normalize()`
     */
    Normal: Vector,
    
    /**
     * The [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) ID that was hit.
     * 
     * Used for [Entity:GetPhysicsObjectNum](https://wiki.facepunch.com/gmod/Entity:GetPhysicsObjectNum).
     */
    PhysicsBone: number,
    
    /**
     * The origin of the trace. Will match the provided startpos.
     */
    StartPos: Vector,
    
    /**
     * ID of hit surface property from `scripts/surfaceproperties.txt`.
     * You can get the name using [util.GetSurfacePropName](https://wiki.facepunch.com/gmod/util.GetSurfacePropName).
     * 
     * Used for [CEffectData:SetSurfaceProp](https://wiki.facepunch.com/gmod/CEffectData:SetSurfaceProp).
     */
    SurfaceProps: number,
    
    /**
     * Indicates whenever the trace started in a solid enviroment.
     */
    StartSolid: boolean,
    
    /**
     * True if the entire trace is inside a solid.
     */
    AllSolid: boolean,
    
    /**
     * The surface flags of the hit surface. See [Enums/SURF](https://wiki.facepunch.com/gmod/Enums/SURF).
     */
    SurfaceFlags: number,
    
    /**
     * The displacement flags of the hit surface. See [Enums/DISPSURF](https://wiki.facepunch.com/gmod/Enums/DISPSURF).
     */
    DispFlags: number,
    
    /**
     * The contents of the hit surface. See [Enums/CONTENTS](https://wiki.facepunch.com/gmod/Enums/CONTENTS).
     */
    Contents: number,

    

}

/**
 * [Client and Menu]
 * 
 * Table structure used by [steamworks.FileInfo](https://wiki.facepunch.com/gmod/steamworks.FileInfo).
 */
interface UGCFileInfo {
    /**
     * The Workshop item ID
     */
    id: number,
    
    /**
     * The title of the Workshop item
     */
    title: string,
    
    /**
     * The description of the Workshop item
     */
    description: string,
    
    /**
     * The internal File ID of the workshop item, if any
     */
    fileid: number,
    
    /**
     * The internal File ID of the workshop item preview, if any
     */
    previewid: number,
    
    /**
     * A URL to the preview image of the workshop item
     */
    previewurl: string,
    
    /**
     * The SteamID64 of the original uploader of the addon
     */
    owner: number,
    
    /**
     * Unix timestamp of when the item was created
     */
    created: number,
    
    /**
     * Unix timestamp of when the file was last updated
     */
    updated: number,
    
    /**
     * Whether the file is banned or not
     */
    banned: boolean,
    
    /**
     * Comma (,) separated list of tags, may be truncated to some length
     */
    tags: string,
    
    /**
     * File size of the workshop item contents
     */
    size: number,
    
    /**
     * Filesize of the preview file
     */
    previewsize: number,
    
    /**
     * If the addon is subscribed, this value represents whether it is installed on the client and its files are accessible, false otherwise.
     */
    installed: boolean,
    
    /**
     * If the addon is subscribed, this value represents whether it is disabled on the client, false otherwise.
     */
    disabled: boolean,
    
    /**
     * A list of child Workshop Items for this item.
     * 
     * For collections this will be sub-collections, for workshop items this will be the items they depend on.
     */
    children: any,
    
    /**
     * The "nice" name of the Uploader, or "Unnammed Player" if we failed to get the data for some reason.
     * 
     * Do not use this field as it will most likely not be updated in time. Use [steamworks.RequestPlayerInfo](https://wiki.facepunch.com/gmod/steamworks.RequestPlayerInfo) instead.
     * 
     * **Warning:**
     * >We advise against using this. It may be changed or removed in a future update.
     * 
     */
    ownername: string,
    
    /**
     * If this key is set, no other data will be present in the response.
     * 
     * Values above 0 represent Steam Error codes, values below 0 mean the following:
     * * -1 means Failed to create query
     * * -2 means Failed to send query
     * * -3 means Received 0 or more than 1 result
     * * -4 means Failed to get item data from the response
     * * -5 means Workshop item ID in the response is invalid
     * * -6 means Workshop item ID in response is mismatching the requested file ID
     */
    error: number,

    

}

/**
 * [Server]
 * 
 * Table structure used by [undo.Do_Undo](https://wiki.facepunch.com/gmod/undo.Do_Undo) and [GM:CanUndo](https://wiki.facepunch.com/gmod/GM:CanUndo).
 */
interface Undo {
    /**
     * The player responsible who owns the undo
     */
    Owner: Player,
    
    /**
     * The name of the text to report to the player
     */
    Name: string,
    
    /**
     * A table of entities to be removed by the undo
     */
    Entities: any,
    
    /**
     * A table of {function_to_call, func_arg2, func_arg3}
     */
    Functions: any,
    
    /**
     * A custom undo text to show the client
     */
    CustomUndoText: string,
    
    /**
     * A "nice" name of the undo, which will be used for the UI
     */
    NiceName: string,

    

}

/**
 * [Server]
 * 
 * The structure used by [Vehicle:SetVehicleParams](https://wiki.facepunch.com/gmod/Vehicle:SetVehicleParams) and [Vehicle:GetVehicleParams](https://wiki.facepunch.com/gmod/Vehicle:GetVehicleParams).
 */
interface VehicleParams {
    /**
     * Wheels per axle
     */
    wheelsPerAxle: number,
    
    /**
     * Number of axles
     */
    axleCount: number,
    
    /**
     * A table of [Structures/VehicleParamsAxle](https://wiki.facepunch.com/gmod/Structures/VehicleParamsAxle) tables.
     */
    axles: any,
    
    /**
     * See [Structures/VehicleParamsBody](https://wiki.facepunch.com/gmod/Structures/VehicleParamsBody)
     */
    body: any,
    
    /**
     * See [Structures/VehicleParamsEngine](https://wiki.facepunch.com/gmod/Structures/VehicleParamsEngine)
     */
    engine: any,
    
    /**
     * See [Structures/VehicleParamsSteering](https://wiki.facepunch.com/gmod/Structures/VehicleParamsSteering)
     */
    steering: any,

    

}

/**
 * [Server]
 * 
 * The structure used by [Structures/VehicleParams](https://wiki.facepunch.com/gmod/Structures/VehicleParams).
 */
interface VehicleParamsAxle {
    /**
     * 
     */
    brakeFactor: number,
    
    /**
     * 
     */
    offset: Vector,
    
    /**
     * 
     */
    raytraceCenterOffset: Vector,
    
    /**
     * 
     */
    raytraceOffset: Vector,
    
    /**
     * 
     */
    suspension_maxBodyForce: number,
    
    /**
     * 
     */
    suspension_springConstant: number,
    
    /**
     * 
     */
    suspension_springDamping: number,
    
    /**
     * 
     */
    suspension_springDampingCompression: number,
    
    /**
     * 
     */
    suspension_stabilizerConstant: number,
    
    /**
     * 
     */
    torqueFactor: number,
    
    /**
     * 
     */
    wheelOffset: Vector,
    
    /**
     * Material index of braking material of the wheels. Upon braking, the wheels will be set to this material.
     */
    wheels_brakeMaterialIndex: number,
    
    /**
     * 
     */
    wheels_damping: number,
    
    /**
     * 
     */
    wheels_frictionScale: number,
    
    /**
     * 
     */
    wheels_inertia: number,
    
    /**
     * Mass of each wheel.
     */
    wheels_mass: number,
    
    /**
     * Material index of the wheels by default.
     */
    wheels_materialIndex: number,
    
    /**
     * Radius of the wheels.
     */
    wheels_radius: number,
    
    /**
     * 
     */
    wheels_rotdamping: number,
    
    /**
     * Material index of skid material of the wheels. Upon skidding ( pressing Space and sliding the vehicle ), the wheels will be set to this material.
     */
    wheels_skidMaterialIndex: number,
    
    /**
     * 
     */
    wheels_springAdditionalLength: number,

    

}

/**
 * [Server]
 * 
 * The structure used by [Structures/VehicleParams](https://wiki.facepunch.com/gmod/Structures/VehicleParams).
 */
interface VehicleParamsBody {
    /**
     * Additional gravity to be applied to the vehicle
     */
    addGravity: number,
    
    /**
     * 
     */
    counterTorqueFactor: number,
    
    /**
     * 
     */
    keepUprightTorque: number,
    
    /**
     * Mass center override
     */
    massCenterOverride: Vector,
    
    /**
     * Mass override
     */
    massOverride: number,
    
    /**
     * Maximum angular velocity
     */
    maxAngularVelocity: number,
    
    /**
     * 
     */
    tiltForce: number,
    
    /**
     * 
     */
    tiltForceHeight: number,

    

}

/**
 * [Server]
 * 
 * The structure used by [Structures/VehicleParams](https://wiki.facepunch.com/gmod/Structures/VehicleParams).
 */
interface VehicleParamsEngine {
    /**
     * 
     */
    autobrakeSpeedFactor: number,
    
    /**
     * 
     */
    autobrakeSpeedGain: number,
    
    /**
     * This acts as the final ratio of the gearbox.
     * 
     * It's like a master coefficient of the gearbox.
     */
    axleRatio: number,
    
    /**
     * Amount of seconds between being able to use the boost ( by pressing Shift key by default )
     */
    boostDelay: number,
    
    /**
     * Duration of the boost in seconds
     */
    boostDuration: number,
    
    /**
     * 
     */
    boostForce: number,
    
    /**
     * Maximum speed while boosting
     * 
     * **Warning:**
     * >The [Vehicle:SetVehicleParams](https://wiki.facepunch.com/gmod/Vehicle:SetVehicleParams) function takes this in **miles per hour**, but [Vehicle:GetVehicleParams](https://wiki.facepunch.com/gmod/Vehicle:GetVehicleParams) returns this in **hammer units per second**!
     * 
     * In this case HU = inches, so 1 MPH is 17.6 HU/s.
     * 
     */
    boostMaxSpeed: number,
    
    /**
     * Amount of gears this vehicle has.
     */
    gearCount: number,
    
    /**
     * A table of numbers, of gear rations.
     * 
     * Table length is equal to "gearCount" member of this table.
     */
    gearRatio: any,
    
    /**
     * The HP amount of the vehicle
     * 
     * This value is used to calculate the effectively applied torque, along with ratios and `maxRPM`.
     */
    horsepower: number,
    
    /**
     * If `true`, the gearbox shifts gears, if `false` the gearbox stays stuck to the 1st gear (gear number 0).
     */
    isAutoTransmission: boolean,
    
    /**
     * Maximum RPM of the vehicle.
     * 
     * Despite this being a maximum value, the vehicle can exceed it.
     * 
     * **Warning:**
     * >Attempts to exceed the max RPM will force the active gear ratio to be that of the 1st gear, which will provide even more torque. This is the opposite of a rev limiter. This value is only used for the calculation of the effectively applied torque.
     * 
     */
    maxRPM: number,
    
    /**
     * Maximum reverse speed of the vehicle
     * 
     * **Warning:**
     * >The [Vehicle:SetVehicleParams](https://wiki.facepunch.com/gmod/Vehicle:SetVehicleParams) function takes this in **miles per hour**, but [Vehicle:GetVehicleParams](https://wiki.facepunch.com/gmod/Vehicle:GetVehicleParams) returns this in **hammer units per second**!
     * 
     * In this case HU = inches, so 1 MPH is 17.6 HU/s.
     * 
     */
    maxRevSpeed: number,
    
    /**
     * Maximum forward going speed of the vehicle without boosting
     * 
     * **Warning:**
     * >The [Vehicle:SetVehicleParams](https://wiki.facepunch.com/gmod/Vehicle:SetVehicleParams) function takes this in **miles per hour**, but [Vehicle:GetVehicleParams](https://wiki.facepunch.com/gmod/Vehicle:GetVehicleParams) returns this in **hammer units per second**!
     * 
     * In this case HU = inches, so 1 MPH is 17.6 HU/s.
     * 
     */
    maxSpeed: number,
    
    /**
     * Amount of RPM to automatically shift one gear down
     */
    shiftDownRPM: number,
    
    /**
     * Amount of RPM to automatically shift one gear up
     */
    shiftUpRPM: number,
    
    /**
     * 
     */
    throttleTime: number,
    
    /**
     * 
     */
    torqueBoost: boolean,

    

}

/**
 * [Server]
 * 
 * The structure used by [Structures/VehicleParams](https://wiki.facepunch.com/gmod/Structures/VehicleParams).
 */
interface VehicleParamsSteering {
    /**
     * 
     */
    boostSteeringRateFactor: number,
    
    /**
     * 
     */
    boostSteeringRestRateFactor: number,
    
    /**
     * 
     */
    brakeSteeringRateFactor: number,
    
    /**
     * The maximum angle at which the vehicle can turn while boosting
     */
    degreesBoost: number,
    
    /**
     * The maximum angle at which the vehicle can turn while moving at max speed and not boosting
     */
    degreesFast: number,
    
    /**
     * The maximum angle at which the vehicle can turn while moving slowest
     */
    degreesSlow: number,
    
    /**
     * Disabled in Garry's Mod. In Half-Life 2: Episode 2 this dictates whether the vehicle should leave wheel dust effects when driving around
     */
    dustCloud: boolean,
    
    /**
     * Whether the vehicle is allowed to skid/drift
     */
    isSkidAllowed: boolean,
    
    /**
     * In Hammer Units
     */
    powerSlideAccel: number,
    
    /**
     * 
     */
    speedFast: number,
    
    /**
     * 
     */
    speedSlow: number,
    
    /**
     * 
     */
    steeringExponent: number,
    
    /**
     * 
     */
    steeringRateFast: number,
    
    /**
     * 
     */
    steeringRateSlow: number,
    
    /**
     * 
     */
    steeringRestRateFast: number,
    
    /**
     * 
     */
    steeringRestRateSlow: number,
    
    /**
     * 
     */
    throttleSteeringRestRateFactor: number,
    
    /**
     * 
     */
    turnThrottleReduceFast: number,
    
    /**
     * 
     */
    turnThrottleReduceSlow: number,

    

}

/**
 * [Shared]
 * 
 * Table structure passed to [SANDBOX:PlayerSpawnVehicle](https://wiki.facepunch.com/gmod/SANDBOX:PlayerSpawnVehicle), describing a spawnable Vehicle in Sandbox gamemode.
 * 
 * Example usage in defined a custom spawnable vehicle:
 * ```
 * list.Set( "Vehicles", "Jeep", {
 * 	-- Required information
 * 	Name = "Jeep",
 * 	Model = "models/buggy.mdl",
 * 	Class = "prop_vehicle_jeep_old",
 * 	Category = "Half-Life 2",
 * 
 * 	-- Optional information
 * 	Author = "VALVe",
 * 	Information = "The regular old jeep",
 * 
 * 	KeyValues = {
 * 		vehiclescript = "scripts/vehicles/jeep_test.txt"
 * 	}
 * } )
 * ```
 */
interface VehicleTable {
    /**
     * Entity class name for this vehicle.
     */
    Class: string,
    
    /**
     * Nice name for this vehicle, for UI purposes.
     */
    Name: string,
    
    /**
     * Model of the vehicle.
     */
    Model: string,
    
    /**
     * A list of key-value pairs to apply to the vehicle entity.
     * Possible valid keys that can be set are:
     * * `vehiclescript`
     * * `limitview`
     * * `vehiclelocked`
     * * `cargovisible`
     * * `enablegun`
     */
    KeyValues: any,
    
    /**
     * Offset away the surface player is looking at to spawn at.
     */
    Offset: number,
    
    /**
     * Set these members on the spawned vehicle's table ([Entity:GetTable](https://wiki.facepunch.com/gmod/Entity:GetTable)) to given values.
     */
    Members: any,
    
    /**
     * Author of the vehicle, for UI purposes.
     */
    Author: string,
    
    /**
     * Category of this vehicle, for UI purposes.
     */
    Category: string,
    
    /**
     * A small description of the vehicle, for UI purposes.
     */
    Information: string,

    

}

/**
 * [Client and Menu]
 * 
 * Table structure used by [video.Record](https://wiki.facepunch.com/gmod/video.Record).
 */
interface VideoData {
    /**
     * The video container format.
     * 
     * Valid options are: `webm`, `ogg`
     */
    container: string,
    
    /**
     * The video codec.
     * 
     * Valid options are: `vp8`, `theora`
     */
    video: string,
    
    /**
     * The audio codec.
     * 
     * Valid options are: `vorbis`
     */
    audio: string,
    
    /**
     * The video quality
     */
    quality: number,
    
    /**
     * The record bitrate
     */
    bitrate: number,
    
    /**
     * Frames per second
     */
    fps: number,
    
    /**
     * Lock the frame count per second
     */
    lockfps: boolean,
    
    /**
     * The file name for the video
     */
    name: string,
    
    /**
     * The videos width
     */
    width: number,
    
    /**
     * The videos height
     */
    height: number,

    

}

/**
 * [Client]
 * 
 * Table structure used for [render.RenderView](https://wiki.facepunch.com/gmod/render.RenderView).
 * 
 * Unless stated otherwise, the default values for all these keys would be inherited from the engine's CViewSetup and do not have static representations.
 */
interface ViewData {
    /**
     * The view's original position
     */
    origin: Vector,
    
    /**
     * The view's angles
     */
    angles: Angle,
    
    /**
     * Default width divided by height. Has a deprecated alias `aspectratio`.
     */
    aspect: number,
    
    /**
     * The x position of the viewport to render in
     */
    x: number,
    
    /**
     * The y position of the viewport to render in
     */
    y: number,
    
    /**
     * The width of the viewport to render in
     */
    w: number,
    
    /**
     * The height of the viewport to render in
     */
    h: number,
    
    /**
     * Draw the HUD and call the hud painting related hooks
     */
    drawhud: boolean,
    
    /**
     * Draw monitors
     */
    drawmonitors: boolean,
    
    /**
     * The weapon's viewmodel
     */
    drawviewmodel: boolean,
    
    /**
     * The viewmodel's FOV
     */
    viewmodelfov: number,
    
    /**
     * The main view's FOV
     */
    fov: number,
    
    /**
     * If set, renders the view orthogonally. A table with these keys:
     * * left
     * * right
     * * top
     * * bottom
     */
    ortho: any,
    
    /**
     * Coordinate for the left clipping plane. Requires `ortho` to be set to `true`.
     * 
     * **Deprecated**: Use `ortho` table instead!
     */
    ortholeft: number,
    
    /**
     * Coordinate for the right clipping plane. Requires `ortho` to be set to `true`.
     * 
     * **Deprecated**: Use `ortho` table instead!
     */
    orthoright: number,
    
    /**
     * Coordinate for the top clipping plane. Requires `ortho` to be set to `true`.
     * 
     * **Deprecated**: Use `ortho` table instead!
     */
    orthotop: number,
    
    /**
     * Coordinate for the bottom clipping plane. Requires `ortho` to be set to `true`.
     * 
     * **Deprecated**: Use `ortho` table instead!
     */
    orthobottom: number,
    
    /**
     * The distance of the view's origin to the near clipping plane
     */
    znear: number,
    
    /**
     * The distance of the view's origin to the far clipping plane
     */
    zfar: number,
    
    /**
     * The distance of the view's origin to the near clipping plane for the viewmodel
     */
    znearviewmodel: number,
    
    /**
     * The distance of the view's origin to the far clipping plane for the viewmodel
     */
    zfarviewmodel: number,
    
    /**
     * Currently works identically to the "bloomtone" option (it also overrides it if you set this to false).
     */
    dopostprocess: boolean,
    
    /**
     * Disables default engine bloom and pauses the "brightness changes" on HDR maps.
     */
    bloomtone: boolean,
    
    /**
     * This is identifying which logical part of the scene an entity is being redered in, see [Enums/VIEW](https://wiki.facepunch.com/gmod/Enums/VIEW).
     */
    viewid: number,
    
    /**
     * This allows you to "zoom in" on a part of the screen - for example, the top-left quarter of the screen. This is similar to how [poster splits the screen](https://garry.blog/poster-screenshots/) into separate renders.
     * 
     * It's a table with 4 keys, controlling what portion of the screen to draw:
     * * left - where the left edge starts. Natural value is 0.
     * * right - where the right edge ends. Natural value is equal to w (the width of the viewport).
     * * top - where the `bottom` edge starts. Natural value is 0.
     * * bottom - where the `top` edge ends. Natural value is equal to h (the height of the viewport).
     * 
     * Note that top and bottom are reversed.
     * 
     * Values outside the viewport are allowed, but not recommended - instead you should increase the view FOV.
     */
    offcenter: any,

    

}

/**
 * [Client]
 * 
 * Table structure used for [render.GetViewSetup](https://wiki.facepunch.com/gmod/render.GetViewSetup).
 */
interface ViewSetup {
    /**
     * The view's origin/position
     */
    origin: Vector,
    
    /**
     * The view's angles
     */
    angles: Angle,
    
    /**
     * Width divided by height
     */
    aspect: number,
    
    /**
     * The x position of the viewport
     */
    x: number,
    
    /**
     * The y position of the viewport
     */
    y: number,
    
    /**
     * The width of the viewport
     */
    width: number,
    
    /**
     * The height of the viewport
     */
    height: number,
    
    /**
     * The main view's FOV, adjusted for aspect ratio.
     */
    fov: number,
    
    /**
     * The main view's FOV as the user setting.
     */
    fov_unscaled: number,
    
    /**
     * The viewmodel's FOV, adjusted for aspect ratio.
     */
    fovviewmodel: number,
    
    /**
     * The viewmodel's FOV as the user setting.
     */
    fovviewmodel_unscaled: number,
    
    /**
     * If the current view is orthogonal, a table with these keys:
     * * left
     * * right
     * * top
     * * bottom
     * 
     * Will not be present if view is not orthagonal.
     */
    ortho: any,
    
    /**
     * The distance of the view's origin to the near clipping plane
     */
    znear: number,
    
    /**
     * The distance of the view's origin to the far clipping plane
     */
    zfar: number,
    
    /**
     * The distance of the view's origin to the near clipping plane for the viewmodel
     */
    znearviewmodel: number,
    
    /**
     * The distance of the view's origin to the far clipping plane for the viewmodel
     */
    zfarviewmodel: number,
    
    /**
     * Whether default engine bloom and tonemapping are enabled at this instant for this view.
     */
    bloomtone: boolean,
    
    /**
     * Whether `m_bRenderToSubrectOfLargerScreen` if set for this view.
     */
    subrect: boolean,
    
    /**
     * It's a table with 4 keys, controlling what portion of the screen to draw:
     * * left - where the left edge starts. Natural value is 0.
     * * right - where the right edge ends. Natural value is equal to w (the width of the viewport).
     * * top - where the `bottom` edge starts. Natural value is 0.
     * * bottom - where the `top` edge ends. Natural value is equal to h (the height of the viewport).
     * 
     * Note that top and bottom are reversed.
     * 
     * This will not be present if offscreen rendering is not enabled for this view.
     * 
     * See [Structures/ViewData](https://wiki.facepunch.com/gmod/Structures/ViewData) for more info.
     */
    offcenter: any,

    

}

/**
 * 
 * @compileMembersOnly
 */
declare enum _USE {
    /**
     * Fire a <page text="USE_ON">Enums/USE</page> signal every tick as long as the player holds their use key and aims at the target.
     */
    CONTINUOUS_USE = 0,
    
    /**
     * Fires a <page text="USE_ON">Enums/USE</page> signal when starting to use an entity, and a <page text="USE_OFF">Enums/USE</page> signal when letting go.
     * 
     * **Warning:**
     * >There is no guarantee to receive both ON and OFF signals. A signal will only be sent when pushing or letting go of the use key while actually aiming at the entity, so an ON signal might not be followed by an OFF signal if the player is aiming somewhere else when releasing the key, and similarly, an OFF signal may not be preceded by an ON signal if the player started aiming at the entity only after pressing the key.
     * 
     * Therefore, this method of input is unreliable and should not be used.
     * 
     */
    ONOFF_USE = 1,
    
    /**
     * Like a wheel turning.
     */
    DIRECTIONAL_USE = 2,
    
    /**
     * Fire a <page text="USE_ON">Enums/USE</page> signal only once when player presses their use key while aiming at the target.
     */
    SIMPLE_USE = 3,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum ACT {
    /**
     * 
     */
    ACT_INVALID = -1,
    
    /**
     * 
     */
    ACT_RESET = 0,
    
    /**
     * 
     */
    ACT_IDLE = 1,
    
    /**
     * 
     */
    ACT_TRANSITION = 2,
    
    /**
     * 
     */
    ACT_COVER = 3,
    
    /**
     * 
     */
    ACT_COVER_MED = 4,
    
    /**
     * 
     */
    ACT_COVER_LOW = 5,
    
    /**
     * 
     */
    ACT_WALK = 6,
    
    /**
     * 
     */
    ACT_WALK_AIM = 7,
    
    /**
     * 
     */
    ACT_WALK_CROUCH = 8,
    
    /**
     * 
     */
    ACT_WALK_CROUCH_AIM = 9,
    
    /**
     * 
     */
    ACT_RUN = 10,
    
    /**
     * 
     */
    ACT_RUN_AIM = 11,
    
    /**
     * 
     */
    ACT_RUN_CROUCH = 12,
    
    /**
     * 
     */
    ACT_RUN_CROUCH_AIM = 13,
    
    /**
     * 
     */
    ACT_RUN_PROTECTED = 14,
    
    /**
     * 
     */
    ACT_SCRIPT_CUSTOM_MOVE = 15,
    
    /**
     * 
     */
    ACT_RANGE_ATTACK1 = 16,
    
    /**
     * 
     */
    ACT_RANGE_ATTACK2 = 17,
    
    /**
     * 
     */
    ACT_RANGE_ATTACK1_LOW = 18,
    
    /**
     * 
     */
    ACT_RANGE_ATTACK2_LOW = 19,
    
    /**
     * 
     */
    ACT_DIESIMPLE = 20,
    
    /**
     * 
     */
    ACT_DIEBACKWARD = 21,
    
    /**
     * 
     */
    ACT_DIEFORWARD = 22,
    
    /**
     * 
     */
    ACT_DIEVIOLENT = 23,
    
    /**
     * 
     */
    ACT_DIERAGDOLL = 24,
    
    /**
     * 
     */
    ACT_FLY = 25,
    
    /**
     * 
     */
    ACT_HOVER = 26,
    
    /**
     * 
     */
    ACT_GLIDE = 27,
    
    /**
     * 
     */
    ACT_SWIM = 28,
    
    /**
     * 
     */
    ACT_SWIM_IDLE = 29,
    
    /**
     * 
     */
    ACT_JUMP = 30,
    
    /**
     * 
     */
    ACT_HOP = 31,
    
    /**
     * 
     */
    ACT_LEAP = 32,
    
    /**
     * 
     */
    ACT_LAND = 33,
    
    /**
     * 
     */
    ACT_CLIMB_UP = 34,
    
    /**
     * 
     */
    ACT_CLIMB_DOWN = 35,
    
    /**
     * 
     */
    ACT_CLIMB_DISMOUNT = 36,
    
    /**
     * 
     */
    ACT_SHIPLADDER_UP = 37,
    
    /**
     * 
     */
    ACT_SHIPLADDER_DOWN = 38,
    
    /**
     * 
     */
    ACT_STRAFE_LEFT = 39,
    
    /**
     * 
     */
    ACT_STRAFE_RIGHT = 40,
    
    /**
     * 
     */
    ACT_ROLL_LEFT = 41,
    
    /**
     * 
     */
    ACT_ROLL_RIGHT = 42,
    
    /**
     * 
     */
    ACT_TURN_LEFT = 43,
    
    /**
     * 
     */
    ACT_TURN_RIGHT = 44,
    
    /**
     * 
     */
    ACT_CROUCH = 45,
    
    /**
     * 
     */
    ACT_CROUCHIDLE = 46,
    
    /**
     * 
     */
    ACT_STAND = 47,
    
    /**
     * 
     */
    ACT_USE = 48,
    
    /**
     * 
     */
    ACT_SIGNAL1 = 49,
    
    /**
     * 
     */
    ACT_SIGNAL2 = 50,
    
    /**
     * 
     */
    ACT_SIGNAL3 = 51,
    
    /**
     * 
     */
    ACT_SIGNAL_ADVANCE = 52,
    
    /**
     * 
     */
    ACT_SIGNAL_FORWARD = 53,
    
    /**
     * 
     */
    ACT_SIGNAL_GROUP = 54,
    
    /**
     * 
     */
    ACT_SIGNAL_HALT = 55,
    
    /**
     * 
     */
    ACT_SIGNAL_LEFT = 56,
    
    /**
     * 
     */
    ACT_SIGNAL_RIGHT = 57,
    
    /**
     * 
     */
    ACT_SIGNAL_TAKECOVER = 58,
    
    /**
     * 
     */
    ACT_LOOKBACK_RIGHT = 59,
    
    /**
     * 
     */
    ACT_LOOKBACK_LEFT = 60,
    
    /**
     * 
     */
    ACT_COWER = 61,
    
    /**
     * 
     */
    ACT_SMALL_FLINCH = 62,
    
    /**
     * 
     */
    ACT_BIG_FLINCH = 63,
    
    /**
     * 
     */
    ACT_MELEE_ATTACK1 = 64,
    
    /**
     * 
     */
    ACT_MELEE_ATTACK2 = 65,
    
    /**
     * 
     */
    ACT_RELOAD = 66,
    
    /**
     * 
     */
    ACT_RELOAD_START = 67,
    
    /**
     * 
     */
    ACT_RELOAD_FINISH = 68,
    
    /**
     * 
     */
    ACT_RELOAD_LOW = 69,
    
    /**
     * 
     */
    ACT_ARM = 70,
    
    /**
     * 
     */
    ACT_DISARM = 71,
    
    /**
     * 
     */
    ACT_DROP_WEAPON = 72,
    
    /**
     * 
     */
    ACT_DROP_WEAPON_SHOTGUN = 73,
    
    /**
     * 
     */
    ACT_PICKUP_GROUND = 74,
    
    /**
     * 
     */
    ACT_PICKUP_RACK = 75,
    
    /**
     * 
     */
    ACT_IDLE_ANGRY = 76,
    
    /**
     * 
     */
    ACT_IDLE_RELAXED = 77,
    
    /**
     * 
     */
    ACT_IDLE_STIMULATED = 78,
    
    /**
     * 
     */
    ACT_IDLE_AGITATED = 79,
    
    /**
     * 
     */
    ACT_IDLE_STEALTH = 80,
    
    /**
     * 
     */
    ACT_IDLE_HURT = 81,
    
    /**
     * 
     */
    ACT_WALK_RELAXED = 82,
    
    /**
     * 
     */
    ACT_WALK_STIMULATED = 83,
    
    /**
     * 
     */
    ACT_WALK_AGITATED = 84,
    
    /**
     * 
     */
    ACT_WALK_STEALTH = 85,
    
    /**
     * 
     */
    ACT_RUN_RELAXED = 86,
    
    /**
     * 
     */
    ACT_RUN_STIMULATED = 87,
    
    /**
     * 
     */
    ACT_RUN_AGITATED = 88,
    
    /**
     * 
     */
    ACT_RUN_STEALTH = 89,
    
    /**
     * 
     */
    ACT_IDLE_AIM_RELAXED = 90,
    
    /**
     * 
     */
    ACT_IDLE_AIM_STIMULATED = 91,
    
    /**
     * 
     */
    ACT_IDLE_AIM_AGITATED = 92,
    
    /**
     * 
     */
    ACT_IDLE_AIM_STEALTH = 93,
    
    /**
     * 
     */
    ACT_WALK_AIM_RELAXED = 94,
    
    /**
     * 
     */
    ACT_WALK_AIM_STIMULATED = 95,
    
    /**
     * 
     */
    ACT_WALK_AIM_AGITATED = 96,
    
    /**
     * 
     */
    ACT_WALK_AIM_STEALTH = 97,
    
    /**
     * 
     */
    ACT_RUN_AIM_RELAXED = 98,
    
    /**
     * 
     */
    ACT_RUN_AIM_STIMULATED = 99,
    
    /**
     * 
     */
    ACT_RUN_AIM_AGITATED = 100,
    
    /**
     * 
     */
    ACT_RUN_AIM_STEALTH = 101,
    
    /**
     * 
     */
    ACT_CROUCHIDLE_STIMULATED = 102,
    
    /**
     * 
     */
    ACT_CROUCHIDLE_AIM_STIMULATED = 103,
    
    /**
     * 
     */
    ACT_CROUCHIDLE_AGITATED = 104,
    
    /**
     * 
     */
    ACT_WALK_HURT = 105,
    
    /**
     * 
     */
    ACT_RUN_HURT = 106,
    
    /**
     * 
     */
    ACT_SPECIAL_ATTACK1 = 107,
    
    /**
     * 
     */
    ACT_SPECIAL_ATTACK2 = 108,
    
    /**
     * 
     */
    ACT_COMBAT_IDLE = 109,
    
    /**
     * 
     */
    ACT_WALK_SCARED = 110,
    
    /**
     * 
     */
    ACT_RUN_SCARED = 111,
    
    /**
     * 
     */
    ACT_VICTORY_DANCE = 112,
    
    /**
     * 
     */
    ACT_DIE_HEADSHOT = 113,
    
    /**
     * 
     */
    ACT_DIE_CHESTSHOT = 114,
    
    /**
     * 
     */
    ACT_DIE_GUTSHOT = 115,
    
    /**
     * 
     */
    ACT_DIE_BACKSHOT = 116,
    
    /**
     * 
     */
    ACT_FLINCH_HEAD = 117,
    
    /**
     * 
     */
    ACT_FLINCH_CHEST = 118,
    
    /**
     * 
     */
    ACT_FLINCH_STOMACH = 119,
    
    /**
     * 
     */
    ACT_FLINCH_LEFTARM = 120,
    
    /**
     * 
     */
    ACT_FLINCH_RIGHTARM = 121,
    
    /**
     * 
     */
    ACT_FLINCH_LEFTLEG = 122,
    
    /**
     * 
     */
    ACT_FLINCH_RIGHTLEG = 123,
    
    /**
     * 
     */
    ACT_FLINCH_PHYSICS = 124,
    
    /**
     * 
     */
    ACT_IDLE_ON_FIRE = 125,
    
    /**
     * 
     */
    ACT_WALK_ON_FIRE = 126,
    
    /**
     * 
     */
    ACT_RUN_ON_FIRE = 127,
    
    /**
     * 
     */
    ACT_RAPPEL_LOOP = 128,
    
    /**
     * 
     */
    ACT_180_LEFT = 129,
    
    /**
     * 
     */
    ACT_180_RIGHT = 130,
    
    /**
     * 
     */
    ACT_90_LEFT = 131,
    
    /**
     * 
     */
    ACT_90_RIGHT = 132,
    
    /**
     * 
     */
    ACT_STEP_LEFT = 133,
    
    /**
     * 
     */
    ACT_STEP_RIGHT = 134,
    
    /**
     * 
     */
    ACT_STEP_BACK = 135,
    
    /**
     * 
     */
    ACT_STEP_FORE = 136,
    
    /**
     * 
     */
    ACT_GESTURE_RANGE_ATTACK1 = 137,
    
    /**
     * 
     */
    ACT_GESTURE_RANGE_ATTACK2 = 138,
    
    /**
     * 
     */
    ACT_GESTURE_MELEE_ATTACK1 = 139,
    
    /**
     * 
     */
    ACT_GESTURE_MELEE_ATTACK2 = 140,
    
    /**
     * 
     */
    ACT_GESTURE_RANGE_ATTACK1_LOW = 141,
    
    /**
     * 
     */
    ACT_GESTURE_RANGE_ATTACK2_LOW = 142,
    
    /**
     * 
     */
    ACT_MELEE_ATTACK_SWING_GESTURE = 143,
    
    /**
     * 
     */
    ACT_GESTURE_SMALL_FLINCH = 144,
    
    /**
     * 
     */
    ACT_GESTURE_BIG_FLINCH = 145,
    
    /**
     * 
     */
    ACT_GESTURE_FLINCH_BLAST = 146,
    
    /**
     * 
     */
    ACT_GESTURE_FLINCH_BLAST_SHOTGUN = 147,
    
    /**
     * 
     */
    ACT_GESTURE_FLINCH_BLAST_DAMAGED = 148,
    
    /**
     * 
     */
    ACT_GESTURE_FLINCH_BLAST_DAMAGED_SHOTGUN = 149,
    
    /**
     * 
     */
    ACT_GESTURE_FLINCH_HEAD = 150,
    
    /**
     * 
     */
    ACT_GESTURE_FLINCH_CHEST = 151,
    
    /**
     * 
     */
    ACT_GESTURE_FLINCH_STOMACH = 152,
    
    /**
     * 
     */
    ACT_GESTURE_FLINCH_LEFTARM = 153,
    
    /**
     * 
     */
    ACT_GESTURE_FLINCH_RIGHTARM = 154,
    
    /**
     * 
     */
    ACT_GESTURE_FLINCH_LEFTLEG = 155,
    
    /**
     * 
     */
    ACT_GESTURE_FLINCH_RIGHTLEG = 156,
    
    /**
     * 
     */
    ACT_GESTURE_TURN_LEFT = 157,
    
    /**
     * 
     */
    ACT_GESTURE_TURN_RIGHT = 158,
    
    /**
     * 
     */
    ACT_GESTURE_TURN_LEFT45 = 159,
    
    /**
     * 
     */
    ACT_GESTURE_TURN_RIGHT45 = 160,
    
    /**
     * 
     */
    ACT_GESTURE_TURN_LEFT90 = 161,
    
    /**
     * 
     */
    ACT_GESTURE_TURN_RIGHT90 = 162,
    
    /**
     * 
     */
    ACT_GESTURE_TURN_LEFT45_FLAT = 163,
    
    /**
     * 
     */
    ACT_GESTURE_TURN_RIGHT45_FLAT = 164,
    
    /**
     * 
     */
    ACT_GESTURE_TURN_LEFT90_FLAT = 165,
    
    /**
     * 
     */
    ACT_GESTURE_TURN_RIGHT90_FLAT = 166,
    
    /**
     * 
     */
    ACT_BARNACLE_HIT = 167,
    
    /**
     * 
     */
    ACT_BARNACLE_PULL = 168,
    
    /**
     * 
     */
    ACT_BARNACLE_CHOMP = 169,
    
    /**
     * 
     */
    ACT_BARNACLE_CHEW = 170,
    
    /**
     * 
     */
    ACT_DO_NOT_DISTURB = 171,
    
    /**
     * 
     */
    ACT_VM_DRAW = 172,
    
    /**
     * 
     */
    ACT_VM_HOLSTER = 173,
    
    /**
     * 
     */
    ACT_VM_IDLE = 174,
    
    /**
     * 
     */
    ACT_VM_FIDGET = 175,
    
    /**
     * 
     */
    ACT_VM_PULLBACK = 176,
    
    /**
     * 
     */
    ACT_VM_PULLBACK_HIGH = 177,
    
    /**
     * 
     */
    ACT_VM_PULLBACK_LOW = 178,
    
    /**
     * 
     */
    ACT_VM_THROW = 179,
    
    /**
     * 
     */
    ACT_VM_PULLPIN = 180,
    
    /**
     * 
     */
    ACT_VM_PRIMARYATTACK = 181,
    
    /**
     * 
     */
    ACT_VM_SECONDARYATTACK = 182,
    
    /**
     * 
     */
    ACT_VM_RELOAD = 183,
    
    /**
     * 
     */
    ACT_VM_DRYFIRE = 186,
    
    /**
     * 
     */
    ACT_VM_HITLEFT = 187,
    
    /**
     * 
     */
    ACT_VM_HITLEFT2 = 188,
    
    /**
     * 
     */
    ACT_VM_HITRIGHT = 189,
    
    /**
     * 
     */
    ACT_VM_HITRIGHT2 = 190,
    
    /**
     * 
     */
    ACT_VM_HITCENTER = 191,
    
    /**
     * 
     */
    ACT_VM_HITCENTER2 = 192,
    
    /**
     * 
     */
    ACT_VM_MISSLEFT = 193,
    
    /**
     * 
     */
    ACT_VM_MISSLEFT2 = 194,
    
    /**
     * 
     */
    ACT_VM_MISSRIGHT = 195,
    
    /**
     * 
     */
    ACT_VM_MISSRIGHT2 = 196,
    
    /**
     * 
     */
    ACT_VM_MISSCENTER = 197,
    
    /**
     * 
     */
    ACT_VM_MISSCENTER2 = 198,
    
    /**
     * 
     */
    ACT_VM_HAULBACK = 199,
    
    /**
     * 
     */
    ACT_VM_SWINGHARD = 200,
    
    /**
     * 
     */
    ACT_VM_SWINGMISS = 201,
    
    /**
     * 
     */
    ACT_VM_SWINGHIT = 202,
    
    /**
     * 
     */
    ACT_VM_IDLE_TO_LOWERED = 203,
    
    /**
     * 
     */
    ACT_VM_IDLE_LOWERED = 204,
    
    /**
     * 
     */
    ACT_VM_LOWERED_TO_IDLE = 205,
    
    /**
     * 
     */
    ACT_VM_RECOIL1 = 206,
    
    /**
     * 
     */
    ACT_VM_RECOIL2 = 207,
    
    /**
     * 
     */
    ACT_VM_RECOIL3 = 208,
    
    /**
     * 
     */
    ACT_VM_PICKUP = 209,
    
    /**
     * 
     */
    ACT_VM_RELEASE = 210,
    
    /**
     * 
     */
    ACT_VM_ATTACH_SILENCER = 211,
    
    /**
     * 
     */
    ACT_VM_DETACH_SILENCER = 212,
    
    /**
     * 
     */
    ACT_SLAM_STICKWALL_IDLE = 229,
    
    /**
     * 
     */
    ACT_SLAM_STICKWALL_ND_IDLE = 230,
    
    /**
     * 
     */
    ACT_SLAM_STICKWALL_ATTACH = 231,
    
    /**
     * 
     */
    ACT_SLAM_STICKWALL_ATTACH2 = 232,
    
    /**
     * 
     */
    ACT_SLAM_STICKWALL_ND_ATTACH = 233,
    
    /**
     * 
     */
    ACT_SLAM_STICKWALL_ND_ATTACH2 = 234,
    
    /**
     * 
     */
    ACT_SLAM_STICKWALL_DETONATE = 235,
    
    /**
     * 
     */
    ACT_SLAM_STICKWALL_DETONATOR_HOLSTER = 236,
    
    /**
     * 
     */
    ACT_SLAM_STICKWALL_DRAW = 237,
    
    /**
     * 
     */
    ACT_SLAM_STICKWALL_ND_DRAW = 238,
    
    /**
     * 
     */
    ACT_SLAM_STICKWALL_TO_THROW = 239,
    
    /**
     * 
     */
    ACT_SLAM_STICKWALL_TO_THROW_ND = 240,
    
    /**
     * 
     */
    ACT_SLAM_STICKWALL_TO_TRIPMINE_ND = 241,
    
    /**
     * 
     */
    ACT_SLAM_THROW_IDLE = 242,
    
    /**
     * 
     */
    ACT_SLAM_THROW_ND_IDLE = 243,
    
    /**
     * 
     */
    ACT_SLAM_THROW_THROW = 244,
    
    /**
     * 
     */
    ACT_SLAM_THROW_THROW2 = 245,
    
    /**
     * 
     */
    ACT_SLAM_THROW_THROW_ND = 246,
    
    /**
     * 
     */
    ACT_SLAM_THROW_THROW_ND2 = 247,
    
    /**
     * 
     */
    ACT_SLAM_THROW_DRAW = 248,
    
    /**
     * 
     */
    ACT_SLAM_THROW_ND_DRAW = 249,
    
    /**
     * 
     */
    ACT_SLAM_THROW_TO_STICKWALL = 250,
    
    /**
     * 
     */
    ACT_SLAM_THROW_TO_STICKWALL_ND = 251,
    
    /**
     * 
     */
    ACT_SLAM_THROW_DETONATE = 252,
    
    /**
     * 
     */
    ACT_SLAM_THROW_DETONATOR_HOLSTER = 253,
    
    /**
     * 
     */
    ACT_SLAM_THROW_TO_TRIPMINE_ND = 254,
    
    /**
     * 
     */
    ACT_SLAM_TRIPMINE_IDLE = 255,
    
    /**
     * 
     */
    ACT_SLAM_TRIPMINE_DRAW = 256,
    
    /**
     * 
     */
    ACT_SLAM_TRIPMINE_ATTACH = 257,
    
    /**
     * 
     */
    ACT_SLAM_TRIPMINE_ATTACH2 = 258,
    
    /**
     * 
     */
    ACT_SLAM_TRIPMINE_TO_STICKWALL_ND = 259,
    
    /**
     * 
     */
    ACT_SLAM_TRIPMINE_TO_THROW_ND = 260,
    
    /**
     * 
     */
    ACT_SLAM_DETONATOR_IDLE = 261,
    
    /**
     * 
     */
    ACT_SLAM_DETONATOR_DRAW = 262,
    
    /**
     * 
     */
    ACT_SLAM_DETONATOR_DETONATE = 263,
    
    /**
     * 
     */
    ACT_SLAM_DETONATOR_HOLSTER = 264,
    
    /**
     * 
     */
    ACT_SLAM_DETONATOR_STICKWALL_DRAW = 265,
    
    /**
     * 
     */
    ACT_SLAM_DETONATOR_THROW_DRAW = 266,
    
    /**
     * 
     */
    ACT_SHOTGUN_RELOAD_START = 267,
    
    /**
     * 
     */
    ACT_SHOTGUN_RELOAD_FINISH = 268,
    
    /**
     * 
     */
    ACT_SHOTGUN_PUMP = 269,
    
    /**
     * 
     */
    ACT_SMG2_IDLE2 = 270,
    
    /**
     * 
     */
    ACT_SMG2_FIRE2 = 271,
    
    /**
     * 
     */
    ACT_SMG2_DRAW2 = 272,
    
    /**
     * 
     */
    ACT_SMG2_RELOAD2 = 273,
    
    /**
     * 
     */
    ACT_SMG2_DRYFIRE2 = 274,
    
    /**
     * 
     */
    ACT_SMG2_TOAUTO = 275,
    
    /**
     * 
     */
    ACT_SMG2_TOBURST = 276,
    
    /**
     * 
     */
    ACT_PHYSCANNON_UPGRADE = 277,
    
    /**
     * 
     */
    ACT_RANGE_ATTACK_AR1 = 278,
    
    /**
     * 
     */
    ACT_RANGE_ATTACK_AR2 = 279,
    
    /**
     * 
     */
    ACT_RANGE_ATTACK_AR2_LOW = 280,
    
    /**
     * 
     */
    ACT_RANGE_ATTACK_AR2_GRENADE = 281,
    
    /**
     * 
     */
    ACT_RANGE_ATTACK_HMG1 = 282,
    
    /**
     * 
     */
    ACT_RANGE_ATTACK_ML = 283,
    
    /**
     * 
     */
    ACT_RANGE_ATTACK_SMG1 = 284,
    
    /**
     * 
     */
    ACT_RANGE_ATTACK_SMG1_LOW = 285,
    
    /**
     * 
     */
    ACT_RANGE_ATTACK_SMG2 = 286,
    
    /**
     * 
     */
    ACT_RANGE_ATTACK_SHOTGUN = 287,
    
    /**
     * 
     */
    ACT_RANGE_ATTACK_SHOTGUN_LOW = 288,
    
    /**
     * 
     */
    ACT_RANGE_ATTACK_PISTOL = 289,
    
    /**
     * 
     */
    ACT_RANGE_ATTACK_PISTOL_LOW = 290,
    
    /**
     * 
     */
    ACT_RANGE_ATTACK_SLAM = 291,
    
    /**
     * 
     */
    ACT_RANGE_ATTACK_TRIPWIRE = 292,
    
    /**
     * 
     */
    ACT_RANGE_ATTACK_THROW = 293,
    
    /**
     * 
     */
    ACT_RANGE_ATTACK_SNIPER_RIFLE = 294,
    
    /**
     * 
     */
    ACT_RANGE_ATTACK_RPG = 295,
    
    /**
     * 
     */
    ACT_MELEE_ATTACK_SWING = 296,
    
    /**
     * 
     */
    ACT_RANGE_AIM_LOW = 297,
    
    /**
     * 
     */
    ACT_RANGE_AIM_SMG1_LOW = 298,
    
    /**
     * 
     */
    ACT_RANGE_AIM_PISTOL_LOW = 299,
    
    /**
     * 
     */
    ACT_RANGE_AIM_AR2_LOW = 300,
    
    /**
     * 
     */
    ACT_COVER_PISTOL_LOW = 301,
    
    /**
     * 
     */
    ACT_COVER_SMG1_LOW = 302,
    
    /**
     * 
     */
    ACT_GESTURE_RANGE_ATTACK_AR1 = 303,
    
    /**
     * 
     */
    ACT_GESTURE_RANGE_ATTACK_AR2 = 304,
    
    /**
     * 
     */
    ACT_GESTURE_RANGE_ATTACK_AR2_GRENADE = 305,
    
    /**
     * 
     */
    ACT_GESTURE_RANGE_ATTACK_HMG1 = 306,
    
    /**
     * 
     */
    ACT_GESTURE_RANGE_ATTACK_ML = 307,
    
    /**
     * 
     */
    ACT_GESTURE_RANGE_ATTACK_SMG1 = 308,
    
    /**
     * 
     */
    ACT_GESTURE_RANGE_ATTACK_SMG1_LOW = 309,
    
    /**
     * 
     */
    ACT_GESTURE_RANGE_ATTACK_SMG2 = 310,
    
    /**
     * 
     */
    ACT_GESTURE_RANGE_ATTACK_SHOTGUN = 311,
    
    /**
     * 
     */
    ACT_GESTURE_RANGE_ATTACK_PISTOL = 312,
    
    /**
     * 
     */
    ACT_GESTURE_RANGE_ATTACK_PISTOL_LOW = 313,
    
    /**
     * 
     */
    ACT_GESTURE_RANGE_ATTACK_SLAM = 314,
    
    /**
     * 
     */
    ACT_GESTURE_RANGE_ATTACK_TRIPWIRE = 315,
    
    /**
     * 
     */
    ACT_GESTURE_RANGE_ATTACK_THROW = 316,
    
    /**
     * 
     */
    ACT_GESTURE_RANGE_ATTACK_SNIPER_RIFLE = 317,
    
    /**
     * 
     */
    ACT_GESTURE_MELEE_ATTACK_SWING = 318,
    
    /**
     * 
     */
    ACT_IDLE_RIFLE = 319,
    
    /**
     * 
     */
    ACT_IDLE_SMG1 = 320,
    
    /**
     * 
     */
    ACT_IDLE_ANGRY_SMG1 = 321,
    
    /**
     * 
     */
    ACT_IDLE_PISTOL = 322,
    
    /**
     * 
     */
    ACT_IDLE_ANGRY_PISTOL = 323,
    
    /**
     * 
     */
    ACT_IDLE_ANGRY_SHOTGUN = 324,
    
    /**
     * 
     */
    ACT_IDLE_STEALTH_PISTOL = 325,
    
    /**
     * 
     */
    ACT_IDLE_PACKAGE = 326,
    
    /**
     * 
     */
    ACT_WALK_PACKAGE = 327,
    
    /**
     * 
     */
    ACT_IDLE_SUITCASE = 328,
    
    /**
     * 
     */
    ACT_WALK_SUITCASE = 329,
    
    /**
     * 
     */
    ACT_IDLE_SMG1_RELAXED = 330,
    
    /**
     * 
     */
    ACT_IDLE_SMG1_STIMULATED = 331,
    
    /**
     * 
     */
    ACT_WALK_RIFLE_RELAXED = 332,
    
    /**
     * 
     */
    ACT_RUN_RIFLE_RELAXED = 333,
    
    /**
     * 
     */
    ACT_WALK_RIFLE_STIMULATED = 334,
    
    /**
     * 
     */
    ACT_RUN_RIFLE_STIMULATED = 335,
    
    /**
     * 
     */
    ACT_IDLE_AIM_RIFLE_STIMULATED = 336,
    
    /**
     * 
     */
    ACT_WALK_AIM_RIFLE_STIMULATED = 337,
    
    /**
     * 
     */
    ACT_RUN_AIM_RIFLE_STIMULATED = 338,
    
    /**
     * 
     */
    ACT_IDLE_SHOTGUN_RELAXED = 339,
    
    /**
     * 
     */
    ACT_IDLE_SHOTGUN_STIMULATED = 340,
    
    /**
     * 
     */
    ACT_IDLE_SHOTGUN_AGITATED = 341,
    
    /**
     * 
     */
    ACT_WALK_ANGRY = 342,
    
    /**
     * 
     */
    ACT_POLICE_HARASS1 = 343,
    
    /**
     * 
     */
    ACT_POLICE_HARASS2 = 344,
    
    /**
     * 
     */
    ACT_IDLE_MANNEDGUN = 345,
    
    /**
     * 
     */
    ACT_IDLE_MELEE = 346,
    
    /**
     * 
     */
    ACT_IDLE_ANGRY_MELEE = 347,
    
    /**
     * 
     */
    ACT_IDLE_RPG_RELAXED = 348,
    
    /**
     * 
     */
    ACT_IDLE_RPG = 349,
    
    /**
     * 
     */
    ACT_IDLE_ANGRY_RPG = 350,
    
    /**
     * 
     */
    ACT_COVER_LOW_RPG = 351,
    
    /**
     * 
     */
    ACT_WALK_RPG = 352,
    
    /**
     * 
     */
    ACT_RUN_RPG = 353,
    
    /**
     * 
     */
    ACT_WALK_CROUCH_RPG = 354,
    
    /**
     * 
     */
    ACT_RUN_CROUCH_RPG = 355,
    
    /**
     * 
     */
    ACT_WALK_RPG_RELAXED = 356,
    
    /**
     * 
     */
    ACT_RUN_RPG_RELAXED = 357,
    
    /**
     * 
     */
    ACT_WALK_RIFLE = 358,
    
    /**
     * 
     */
    ACT_WALK_AIM_RIFLE = 359,
    
    /**
     * 
     */
    ACT_WALK_CROUCH_RIFLE = 360,
    
    /**
     * 
     */
    ACT_WALK_CROUCH_AIM_RIFLE = 361,
    
    /**
     * 
     */
    ACT_RUN_RIFLE = 362,
    
    /**
     * 
     */
    ACT_RUN_AIM_RIFLE = 363,
    
    /**
     * 
     */
    ACT_RUN_CROUCH_RIFLE = 364,
    
    /**
     * 
     */
    ACT_RUN_CROUCH_AIM_RIFLE = 365,
    
    /**
     * 
     */
    ACT_RUN_STEALTH_PISTOL = 366,
    
    /**
     * 
     */
    ACT_WALK_AIM_SHOTGUN = 367,
    
    /**
     * 
     */
    ACT_RUN_AIM_SHOTGUN = 368,
    
    /**
     * 
     */
    ACT_WALK_PISTOL = 369,
    
    /**
     * 
     */
    ACT_RUN_PISTOL = 370,
    
    /**
     * 
     */
    ACT_WALK_AIM_PISTOL = 371,
    
    /**
     * 
     */
    ACT_RUN_AIM_PISTOL = 372,
    
    /**
     * 
     */
    ACT_WALK_STEALTH_PISTOL = 373,
    
    /**
     * 
     */
    ACT_WALK_AIM_STEALTH_PISTOL = 374,
    
    /**
     * 
     */
    ACT_RUN_AIM_STEALTH_PISTOL = 375,
    
    /**
     * 
     */
    ACT_RELOAD_PISTOL = 376,
    
    /**
     * 
     */
    ACT_RELOAD_PISTOL_LOW = 377,
    
    /**
     * 
     */
    ACT_RELOAD_SMG1 = 378,
    
    /**
     * 
     */
    ACT_RELOAD_SMG1_LOW = 379,
    
    /**
     * 
     */
    ACT_RELOAD_SHOTGUN = 380,
    
    /**
     * 
     */
    ACT_RELOAD_SHOTGUN_LOW = 381,
    
    /**
     * 
     */
    ACT_GESTURE_RELOAD = 382,
    
    /**
     * 
     */
    ACT_GESTURE_RELOAD_PISTOL = 383,
    
    /**
     * 
     */
    ACT_GESTURE_RELOAD_SMG1 = 384,
    
    /**
     * 
     */
    ACT_GESTURE_RELOAD_SHOTGUN = 385,
    
    /**
     * 
     */
    ACT_BUSY_LEAN_LEFT = 386,
    
    /**
     * 
     */
    ACT_BUSY_LEAN_LEFT_ENTRY = 387,
    
    /**
     * 
     */
    ACT_BUSY_LEAN_LEFT_EXIT = 388,
    
    /**
     * 
     */
    ACT_BUSY_LEAN_BACK = 389,
    
    /**
     * 
     */
    ACT_BUSY_LEAN_BACK_ENTRY = 390,
    
    /**
     * 
     */
    ACT_BUSY_LEAN_BACK_EXIT = 391,
    
    /**
     * 
     */
    ACT_BUSY_SIT_GROUND = 392,
    
    /**
     * 
     */
    ACT_BUSY_SIT_GROUND_ENTRY = 393,
    
    /**
     * 
     */
    ACT_BUSY_SIT_GROUND_EXIT = 394,
    
    /**
     * 
     */
    ACT_BUSY_SIT_CHAIR = 395,
    
    /**
     * 
     */
    ACT_BUSY_SIT_CHAIR_ENTRY = 396,
    
    /**
     * 
     */
    ACT_BUSY_SIT_CHAIR_EXIT = 397,
    
    /**
     * 
     */
    ACT_BUSY_STAND = 398,
    
    /**
     * 
     */
    ACT_BUSY_QUEUE = 399,
    
    /**
     * 
     */
    ACT_DUCK_DODGE = 400,
    
    /**
     * 
     */
    ACT_DIE_BARNACLE_SWALLOW = 401,
    
    /**
     * 
     */
    ACT_GESTURE_BARNACLE_STRANGLE = 402,
    
    /**
     * 
     */
    ACT_PHYSCANNON_DETACH = 403,
    
    /**
     * 
     */
    ACT_PHYSCANNON_ANIMATE = 404,
    
    /**
     * 
     */
    ACT_PHYSCANNON_ANIMATE_PRE = 405,
    
    /**
     * 
     */
    ACT_PHYSCANNON_ANIMATE_POST = 406,
    
    /**
     * 
     */
    ACT_DIE_FRONTSIDE = 407,
    
    /**
     * 
     */
    ACT_DIE_RIGHTSIDE = 408,
    
    /**
     * 
     */
    ACT_DIE_BACKSIDE = 409,
    
    /**
     * 
     */
    ACT_DIE_LEFTSIDE = 410,
    
    /**
     * 
     */
    ACT_OPEN_DOOR = 411,
    
    /**
     * 
     */
    ACT_DI_ALYX_ZOMBIE_MELEE = 412,
    
    /**
     * 
     */
    ACT_DI_ALYX_ZOMBIE_TORSO_MELEE = 413,
    
    /**
     * 
     */
    ACT_DI_ALYX_HEADCRAB_MELEE = 414,
    
    /**
     * 
     */
    ACT_DI_ALYX_ANTLION = 415,
    
    /**
     * 
     */
    ACT_DI_ALYX_ZOMBIE_SHOTGUN64 = 416,
    
    /**
     * 
     */
    ACT_DI_ALYX_ZOMBIE_SHOTGUN26 = 417,
    
    /**
     * 
     */
    ACT_READINESS_RELAXED_TO_STIMULATED = 418,
    
    /**
     * 
     */
    ACT_READINESS_RELAXED_TO_STIMULATED_WALK = 419,
    
    /**
     * 
     */
    ACT_READINESS_AGITATED_TO_STIMULATED = 420,
    
    /**
     * 
     */
    ACT_READINESS_STIMULATED_TO_RELAXED = 421,
    
    /**
     * 
     */
    ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED = 422,
    
    /**
     * 
     */
    ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED_WALK = 423,
    
    /**
     * 
     */
    ACT_READINESS_PISTOL_AGITATED_TO_STIMULATED = 424,
    
    /**
     * 
     */
    ACT_READINESS_PISTOL_STIMULATED_TO_RELAXED = 425,
    
    /**
     * 
     */
    ACT_IDLE_CARRY = 426,
    
    /**
     * 
     */
    ACT_WALK_CARRY = 427,
    
    /**
     * 
     */
    ACT_STARTDYING = 428,
    
    /**
     * 
     */
    ACT_DYINGLOOP = 429,
    
    /**
     * 
     */
    ACT_DYINGTODEAD = 430,
    
    /**
     * 
     */
    ACT_RIDE_MANNED_GUN = 431,
    
    /**
     * 
     */
    ACT_VM_SPRINT_ENTER = 432,
    
    /**
     * 
     */
    ACT_VM_SPRINT_IDLE = 433,
    
    /**
     * 
     */
    ACT_VM_SPRINT_LEAVE = 434,
    
    /**
     * 
     */
    ACT_FIRE_START = 435,
    
    /**
     * 
     */
    ACT_FIRE_LOOP = 436,
    
    /**
     * 
     */
    ACT_FIRE_END = 437,
    
    /**
     * 
     */
    ACT_CROUCHING_GRENADEIDLE = 438,
    
    /**
     * 
     */
    ACT_CROUCHING_GRENADEREADY = 439,
    
    /**
     * 
     */
    ACT_CROUCHING_PRIMARYATTACK = 440,
    
    /**
     * 
     */
    ACT_OVERLAY_GRENADEIDLE = 441,
    
    /**
     * 
     */
    ACT_OVERLAY_GRENADEREADY = 442,
    
    /**
     * 
     */
    ACT_OVERLAY_PRIMARYATTACK = 443,
    
    /**
     * 
     */
    ACT_OVERLAY_SHIELD_UP = 444,
    
    /**
     * 
     */
    ACT_OVERLAY_SHIELD_DOWN = 445,
    
    /**
     * 
     */
    ACT_OVERLAY_SHIELD_UP_IDLE = 446,
    
    /**
     * 
     */
    ACT_OVERLAY_SHIELD_ATTACK = 447,
    
    /**
     * 
     */
    ACT_OVERLAY_SHIELD_KNOCKBACK = 448,
    
    /**
     * 
     */
    ACT_SHIELD_UP = 449,
    
    /**
     * 
     */
    ACT_SHIELD_DOWN = 450,
    
    /**
     * 
     */
    ACT_SHIELD_UP_IDLE = 451,
    
    /**
     * 
     */
    ACT_SHIELD_ATTACK = 452,
    
    /**
     * 
     */
    ACT_SHIELD_KNOCKBACK = 453,
    
    /**
     * 
     */
    ACT_CROUCHING_SHIELD_UP = 454,
    
    /**
     * 
     */
    ACT_CROUCHING_SHIELD_DOWN = 455,
    
    /**
     * 
     */
    ACT_CROUCHING_SHIELD_UP_IDLE = 456,
    
    /**
     * 
     */
    ACT_CROUCHING_SHIELD_ATTACK = 457,
    
    /**
     * 
     */
    ACT_CROUCHING_SHIELD_KNOCKBACK = 458,
    
    /**
     * 
     */
    ACT_TURNRIGHT45 = 459,
    
    /**
     * 
     */
    ACT_TURNLEFT45 = 460,
    
    /**
     * 
     */
    ACT_TURN = 461,
    
    /**
     * 
     */
    ACT_OBJ_ASSEMBLING = 462,
    
    /**
     * 
     */
    ACT_OBJ_DISMANTLING = 463,
    
    /**
     * 
     */
    ACT_OBJ_STARTUP = 464,
    
    /**
     * 
     */
    ACT_OBJ_RUNNING = 465,
    
    /**
     * 
     */
    ACT_OBJ_IDLE = 466,
    
    /**
     * 
     */
    ACT_OBJ_PLACING = 467,
    
    /**
     * 
     */
    ACT_OBJ_DETERIORATING = 468,
    
    /**
     * 
     */
    ACT_OBJ_UPGRADING = 469,
    
    /**
     * 
     */
    ACT_DEPLOY = 470,
    
    /**
     * 
     */
    ACT_DEPLOY_IDLE = 471,
    
    /**
     * 
     */
    ACT_UNDEPLOY = 472,
    
    /**
     * 
     */
    ACT_GRENADE_ROLL = 473,
    
    /**
     * 
     */
    ACT_GRENADE_TOSS = 474,
    
    /**
     * 
     */
    ACT_HANDGRENADE_THROW1 = 475,
    
    /**
     * 
     */
    ACT_HANDGRENADE_THROW2 = 476,
    
    /**
     * 
     */
    ACT_HANDGRENADE_THROW3 = 477,
    
    /**
     * 
     */
    ACT_SHOTGUN_IDLE_DEEP = 478,
    
    /**
     * 
     */
    ACT_SHOTGUN_IDLE4 = 479,
    
    /**
     * 
     */
    ACT_GLOCK_SHOOTEMPTY = 480,
    
    /**
     * 
     */
    ACT_GLOCK_SHOOT_RELOAD = 481,
    
    /**
     * 
     */
    ACT_RPG_DRAW_UNLOADED = 482,
    
    /**
     * 
     */
    ACT_RPG_HOLSTER_UNLOADED = 483,
    
    /**
     * 
     */
    ACT_RPG_IDLE_UNLOADED = 484,
    
    /**
     * 
     */
    ACT_RPG_FIDGET_UNLOADED = 485,
    
    /**
     * 
     */
    ACT_CROSSBOW_DRAW_UNLOADED = 486,
    
    /**
     * 
     */
    ACT_CROSSBOW_IDLE_UNLOADED = 487,
    
    /**
     * 
     */
    ACT_CROSSBOW_FIDGET_UNLOADED = 488,
    
    /**
     * 
     */
    ACT_GAUSS_SPINUP = 489,
    
    /**
     * 
     */
    ACT_GAUSS_SPINCYCLE = 490,
    
    /**
     * 
     */
    ACT_TRIPMINE_GROUND = 491,
    
    /**
     * 
     */
    ACT_TRIPMINE_WORLD = 492,
    
    /**
     * 
     */
    ACT_VM_PRIMARYATTACK_SILENCED = 493,
    
    /**
     * 
     */
    ACT_VM_RELOAD_SILENCED = 494,
    
    /**
     * 
     */
    ACT_VM_DRYFIRE_SILENCED = 495,
    
    /**
     * 
     */
    ACT_VM_IDLE_SILENCED = 496,
    
    /**
     * 
     */
    ACT_VM_DRAW_SILENCED = 497,
    
    /**
     * 
     */
    ACT_VM_IDLE_EMPTY_LEFT = 498,
    
    /**
     * 
     */
    ACT_VM_DRYFIRE_LEFT = 499,
    
    /**
     * 
     */
    ACT_PLAYER_IDLE_FIRE = 500,
    
    /**
     * 
     */
    ACT_PLAYER_CROUCH_FIRE = 501,
    
    /**
     * 
     */
    ACT_PLAYER_CROUCH_WALK_FIRE = 502,
    
    /**
     * 
     */
    ACT_PLAYER_WALK_FIRE = 503,
    
    /**
     * 
     */
    ACT_PLAYER_RUN_FIRE = 504,
    
    /**
     * 
     */
    ACT_IDLETORUN = 505,
    
    /**
     * 
     */
    ACT_RUNTOIDLE = 506,
    
    /**
     * 
     */
    ACT_SPRINT = 507,
    
    /**
     * 
     */
    ACT_GET_DOWN_STAND = 508,
    
    /**
     * 
     */
    ACT_GET_UP_STAND = 509,
    
    /**
     * 
     */
    ACT_GET_DOWN_CROUCH = 510,
    
    /**
     * 
     */
    ACT_GET_UP_CROUCH = 511,
    
    /**
     * 
     */
    ACT_PRONE_FORWARD = 512,
    
    /**
     * 
     */
    ACT_PRONE_IDLE = 513,
    
    /**
     * 
     */
    ACT_DEEPIDLE1 = 514,
    
    /**
     * 
     */
    ACT_DEEPIDLE2 = 515,
    
    /**
     * 
     */
    ACT_DEEPIDLE3 = 516,
    
    /**
     * 
     */
    ACT_DEEPIDLE4 = 517,
    
    /**
     * 
     */
    ACT_VM_RELOAD_DEPLOYED = 518,
    
    /**
     * 
     */
    ACT_VM_RELOAD_IDLE = 519,
    
    /**
     * 
     */
    ACT_VM_DRAW_DEPLOYED = 520,
    
    /**
     * 
     */
    ACT_VM_DRAW_EMPTY = 521,
    
    /**
     * 
     */
    ACT_VM_PRIMARYATTACK_EMPTY = 522,
    
    /**
     * 
     */
    ACT_VM_RELOAD_EMPTY = 523,
    
    /**
     * 
     */
    ACT_VM_IDLE_EMPTY = 524,
    
    /**
     * 
     */
    ACT_VM_IDLE_DEPLOYED_EMPTY = 525,
    
    /**
     * 
     */
    ACT_VM_IDLE_8 = 526,
    
    /**
     * 
     */
    ACT_VM_IDLE_7 = 527,
    
    /**
     * 
     */
    ACT_VM_IDLE_6 = 528,
    
    /**
     * 
     */
    ACT_VM_IDLE_5 = 529,
    
    /**
     * 
     */
    ACT_VM_IDLE_4 = 530,
    
    /**
     * 
     */
    ACT_VM_IDLE_3 = 531,
    
    /**
     * 
     */
    ACT_VM_IDLE_2 = 532,
    
    /**
     * 
     */
    ACT_VM_IDLE_1 = 533,
    
    /**
     * 
     */
    ACT_VM_IDLE_DEPLOYED = 534,
    
    /**
     * 
     */
    ACT_VM_IDLE_DEPLOYED_8 = 535,
    
    /**
     * 
     */
    ACT_VM_IDLE_DEPLOYED_7 = 536,
    
    /**
     * 
     */
    ACT_VM_IDLE_DEPLOYED_6 = 537,
    
    /**
     * 
     */
    ACT_VM_IDLE_DEPLOYED_5 = 538,
    
    /**
     * 
     */
    ACT_VM_IDLE_DEPLOYED_4 = 539,
    
    /**
     * 
     */
    ACT_VM_IDLE_DEPLOYED_3 = 540,
    
    /**
     * 
     */
    ACT_VM_IDLE_DEPLOYED_2 = 541,
    
    /**
     * 
     */
    ACT_VM_IDLE_DEPLOYED_1 = 542,
    
    /**
     * 
     */
    ACT_VM_UNDEPLOY = 543,
    
    /**
     * 
     */
    ACT_VM_UNDEPLOY_8 = 544,
    
    /**
     * 
     */
    ACT_VM_UNDEPLOY_7 = 545,
    
    /**
     * 
     */
    ACT_VM_UNDEPLOY_6 = 546,
    
    /**
     * 
     */
    ACT_VM_UNDEPLOY_5 = 547,
    
    /**
     * 
     */
    ACT_VM_UNDEPLOY_4 = 548,
    
    /**
     * 
     */
    ACT_VM_UNDEPLOY_3 = 549,
    
    /**
     * 
     */
    ACT_VM_UNDEPLOY_2 = 550,
    
    /**
     * 
     */
    ACT_VM_UNDEPLOY_1 = 551,
    
    /**
     * 
     */
    ACT_VM_UNDEPLOY_EMPTY = 552,
    
    /**
     * 
     */
    ACT_VM_DEPLOY = 553,
    
    /**
     * 
     */
    ACT_VM_DEPLOY_8 = 554,
    
    /**
     * 
     */
    ACT_VM_DEPLOY_7 = 555,
    
    /**
     * 
     */
    ACT_VM_DEPLOY_6 = 556,
    
    /**
     * 
     */
    ACT_VM_DEPLOY_5 = 557,
    
    /**
     * 
     */
    ACT_VM_DEPLOY_4 = 558,
    
    /**
     * 
     */
    ACT_VM_DEPLOY_3 = 559,
    
    /**
     * 
     */
    ACT_VM_DEPLOY_2 = 560,
    
    /**
     * 
     */
    ACT_VM_DEPLOY_1 = 561,
    
    /**
     * 
     */
    ACT_VM_DEPLOY_EMPTY = 562,
    
    /**
     * 
     */
    ACT_VM_PRIMARYATTACK_8 = 563,
    
    /**
     * 
     */
    ACT_VM_PRIMARYATTACK_7 = 564,
    
    /**
     * 
     */
    ACT_VM_PRIMARYATTACK_6 = 565,
    
    /**
     * 
     */
    ACT_VM_PRIMARYATTACK_5 = 566,
    
    /**
     * 
     */
    ACT_VM_PRIMARYATTACK_4 = 567,
    
    /**
     * 
     */
    ACT_VM_PRIMARYATTACK_3 = 568,
    
    /**
     * 
     */
    ACT_VM_PRIMARYATTACK_2 = 569,
    
    /**
     * 
     */
    ACT_VM_PRIMARYATTACK_1 = 570,
    
    /**
     * 
     */
    ACT_VM_PRIMARYATTACK_DEPLOYED = 571,
    
    /**
     * 
     */
    ACT_VM_PRIMARYATTACK_DEPLOYED_8 = 572,
    
    /**
     * 
     */
    ACT_VM_PRIMARYATTACK_DEPLOYED_7 = 573,
    
    /**
     * 
     */
    ACT_VM_PRIMARYATTACK_DEPLOYED_6 = 574,
    
    /**
     * 
     */
    ACT_VM_PRIMARYATTACK_DEPLOYED_5 = 575,
    
    /**
     * 
     */
    ACT_VM_PRIMARYATTACK_DEPLOYED_4 = 576,
    
    /**
     * 
     */
    ACT_VM_PRIMARYATTACK_DEPLOYED_3 = 577,
    
    /**
     * 
     */
    ACT_VM_PRIMARYATTACK_DEPLOYED_2 = 578,
    
    /**
     * 
     */
    ACT_VM_PRIMARYATTACK_DEPLOYED_1 = 579,
    
    /**
     * 
     */
    ACT_VM_PRIMARYATTACK_DEPLOYED_EMPTY = 580,
    
    /**
     * 
     */
    ACT_DOD_DEPLOYED = 581,
    
    /**
     * 
     */
    ACT_DOD_PRONE_DEPLOYED = 582,
    
    /**
     * 
     */
    ACT_DOD_IDLE_ZOOMED = 583,
    
    /**
     * 
     */
    ACT_DOD_WALK_ZOOMED = 584,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_ZOOMED = 585,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_ZOOMED = 586,
    
    /**
     * 
     */
    ACT_DOD_PRONE_ZOOMED = 587,
    
    /**
     * 
     */
    ACT_DOD_PRONE_FORWARD_ZOOMED = 588,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_DEPLOYED = 589,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED = 590,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_DEPLOYED = 591,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE_DEPLOYED = 592,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PRONE = 593,
    
    /**
     * 
     */
    ACT_DOD_SECONDARYATTACK_PRONE = 594,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_CROUCH = 595,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE = 596,
    
    /**
     * 
     */
    ACT_DOD_STAND_IDLE = 597,
    
    /**
     * 
     */
    ACT_DOD_STAND_AIM = 598,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_IDLE = 599,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_AIM = 600,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_IDLE = 601,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_AIM = 602,
    
    /**
     * 
     */
    ACT_DOD_WALK_IDLE = 603,
    
    /**
     * 
     */
    ACT_DOD_WALK_AIM = 604,
    
    /**
     * 
     */
    ACT_DOD_RUN_IDLE = 605,
    
    /**
     * 
     */
    ACT_DOD_RUN_AIM = 606,
    
    /**
     * 
     */
    ACT_DOD_STAND_AIM_PISTOL = 607,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_AIM_PISTOL = 608,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_AIM_PISTOL = 609,
    
    /**
     * 
     */
    ACT_DOD_WALK_AIM_PISTOL = 610,
    
    /**
     * 
     */
    ACT_DOD_RUN_AIM_PISTOL = 611,
    
    /**
     * 
     */
    ACT_DOD_PRONE_AIM_PISTOL = 612,
    
    /**
     * 
     */
    ACT_DOD_STAND_IDLE_PISTOL = 613,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_IDLE_PISTOL = 614,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_IDLE_PISTOL = 615,
    
    /**
     * 
     */
    ACT_DOD_WALK_IDLE_PISTOL = 616,
    
    /**
     * 
     */
    ACT_DOD_RUN_IDLE_PISTOL = 617,
    
    /**
     * 
     */
    ACT_DOD_SPRINT_IDLE_PISTOL = 618,
    
    /**
     * 
     */
    ACT_DOD_PRONEWALK_IDLE_PISTOL = 619,
    
    /**
     * 
     */
    ACT_DOD_STAND_AIM_C96 = 620,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_AIM_C96 = 621,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_AIM_C96 = 622,
    
    /**
     * 
     */
    ACT_DOD_WALK_AIM_C96 = 623,
    
    /**
     * 
     */
    ACT_DOD_RUN_AIM_C96 = 624,
    
    /**
     * 
     */
    ACT_DOD_PRONE_AIM_C96 = 625,
    
    /**
     * 
     */
    ACT_DOD_STAND_IDLE_C96 = 626,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_IDLE_C96 = 627,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_IDLE_C96 = 628,
    
    /**
     * 
     */
    ACT_DOD_WALK_IDLE_C96 = 629,
    
    /**
     * 
     */
    ACT_DOD_RUN_IDLE_C96 = 630,
    
    /**
     * 
     */
    ACT_DOD_SPRINT_IDLE_C96 = 631,
    
    /**
     * 
     */
    ACT_DOD_PRONEWALK_IDLE_C96 = 632,
    
    /**
     * 
     */
    ACT_DOD_STAND_AIM_RIFLE = 633,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_AIM_RIFLE = 634,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_AIM_RIFLE = 635,
    
    /**
     * 
     */
    ACT_DOD_WALK_AIM_RIFLE = 636,
    
    /**
     * 
     */
    ACT_DOD_RUN_AIM_RIFLE = 637,
    
    /**
     * 
     */
    ACT_DOD_PRONE_AIM_RIFLE = 638,
    
    /**
     * 
     */
    ACT_DOD_STAND_IDLE_RIFLE = 639,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_IDLE_RIFLE = 640,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_IDLE_RIFLE = 641,
    
    /**
     * 
     */
    ACT_DOD_WALK_IDLE_RIFLE = 642,
    
    /**
     * 
     */
    ACT_DOD_RUN_IDLE_RIFLE = 643,
    
    /**
     * 
     */
    ACT_DOD_SPRINT_IDLE_RIFLE = 644,
    
    /**
     * 
     */
    ACT_DOD_PRONEWALK_IDLE_RIFLE = 645,
    
    /**
     * 
     */
    ACT_DOD_STAND_AIM_BOLT = 646,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_AIM_BOLT = 647,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_AIM_BOLT = 648,
    
    /**
     * 
     */
    ACT_DOD_WALK_AIM_BOLT = 649,
    
    /**
     * 
     */
    ACT_DOD_RUN_AIM_BOLT = 650,
    
    /**
     * 
     */
    ACT_DOD_PRONE_AIM_BOLT = 651,
    
    /**
     * 
     */
    ACT_DOD_STAND_IDLE_BOLT = 652,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_IDLE_BOLT = 653,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_IDLE_BOLT = 654,
    
    /**
     * 
     */
    ACT_DOD_WALK_IDLE_BOLT = 655,
    
    /**
     * 
     */
    ACT_DOD_RUN_IDLE_BOLT = 656,
    
    /**
     * 
     */
    ACT_DOD_SPRINT_IDLE_BOLT = 657,
    
    /**
     * 
     */
    ACT_DOD_PRONEWALK_IDLE_BOLT = 658,
    
    /**
     * 
     */
    ACT_DOD_STAND_AIM_TOMMY = 659,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_AIM_TOMMY = 660,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_AIM_TOMMY = 661,
    
    /**
     * 
     */
    ACT_DOD_WALK_AIM_TOMMY = 662,
    
    /**
     * 
     */
    ACT_DOD_RUN_AIM_TOMMY = 663,
    
    /**
     * 
     */
    ACT_DOD_PRONE_AIM_TOMMY = 664,
    
    /**
     * 
     */
    ACT_DOD_STAND_IDLE_TOMMY = 665,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_IDLE_TOMMY = 666,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_IDLE_TOMMY = 667,
    
    /**
     * 
     */
    ACT_DOD_WALK_IDLE_TOMMY = 668,
    
    /**
     * 
     */
    ACT_DOD_RUN_IDLE_TOMMY = 669,
    
    /**
     * 
     */
    ACT_DOD_SPRINT_IDLE_TOMMY = 670,
    
    /**
     * 
     */
    ACT_DOD_PRONEWALK_IDLE_TOMMY = 671,
    
    /**
     * 
     */
    ACT_DOD_STAND_AIM_MP40 = 672,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_AIM_MP40 = 673,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_AIM_MP40 = 674,
    
    /**
     * 
     */
    ACT_DOD_WALK_AIM_MP40 = 675,
    
    /**
     * 
     */
    ACT_DOD_RUN_AIM_MP40 = 676,
    
    /**
     * 
     */
    ACT_DOD_PRONE_AIM_MP40 = 677,
    
    /**
     * 
     */
    ACT_DOD_STAND_IDLE_MP40 = 678,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_IDLE_MP40 = 679,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_IDLE_MP40 = 680,
    
    /**
     * 
     */
    ACT_DOD_WALK_IDLE_MP40 = 681,
    
    /**
     * 
     */
    ACT_DOD_RUN_IDLE_MP40 = 682,
    
    /**
     * 
     */
    ACT_DOD_SPRINT_IDLE_MP40 = 683,
    
    /**
     * 
     */
    ACT_DOD_PRONEWALK_IDLE_MP40 = 684,
    
    /**
     * 
     */
    ACT_DOD_STAND_AIM_MP44 = 685,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_AIM_MP44 = 686,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_AIM_MP44 = 687,
    
    /**
     * 
     */
    ACT_DOD_WALK_AIM_MP44 = 688,
    
    /**
     * 
     */
    ACT_DOD_RUN_AIM_MP44 = 689,
    
    /**
     * 
     */
    ACT_DOD_PRONE_AIM_MP44 = 690,
    
    /**
     * 
     */
    ACT_DOD_STAND_IDLE_MP44 = 691,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_IDLE_MP44 = 692,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_IDLE_MP44 = 693,
    
    /**
     * 
     */
    ACT_DOD_WALK_IDLE_MP44 = 694,
    
    /**
     * 
     */
    ACT_DOD_RUN_IDLE_MP44 = 695,
    
    /**
     * 
     */
    ACT_DOD_SPRINT_IDLE_MP44 = 696,
    
    /**
     * 
     */
    ACT_DOD_PRONEWALK_IDLE_MP44 = 697,
    
    /**
     * 
     */
    ACT_DOD_STAND_AIM_GREASE = 698,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_AIM_GREASE = 699,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_AIM_GREASE = 700,
    
    /**
     * 
     */
    ACT_DOD_WALK_AIM_GREASE = 701,
    
    /**
     * 
     */
    ACT_DOD_RUN_AIM_GREASE = 702,
    
    /**
     * 
     */
    ACT_DOD_PRONE_AIM_GREASE = 703,
    
    /**
     * 
     */
    ACT_DOD_STAND_IDLE_GREASE = 704,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_IDLE_GREASE = 705,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_IDLE_GREASE = 706,
    
    /**
     * 
     */
    ACT_DOD_WALK_IDLE_GREASE = 707,
    
    /**
     * 
     */
    ACT_DOD_RUN_IDLE_GREASE = 708,
    
    /**
     * 
     */
    ACT_DOD_SPRINT_IDLE_GREASE = 709,
    
    /**
     * 
     */
    ACT_DOD_PRONEWALK_IDLE_GREASE = 710,
    
    /**
     * 
     */
    ACT_DOD_STAND_AIM_MG = 711,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_AIM_MG = 712,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_AIM_MG = 713,
    
    /**
     * 
     */
    ACT_DOD_WALK_AIM_MG = 714,
    
    /**
     * 
     */
    ACT_DOD_RUN_AIM_MG = 715,
    
    /**
     * 
     */
    ACT_DOD_PRONE_AIM_MG = 716,
    
    /**
     * 
     */
    ACT_DOD_STAND_IDLE_MG = 717,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_IDLE_MG = 718,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_IDLE_MG = 719,
    
    /**
     * 
     */
    ACT_DOD_WALK_IDLE_MG = 720,
    
    /**
     * 
     */
    ACT_DOD_RUN_IDLE_MG = 721,
    
    /**
     * 
     */
    ACT_DOD_SPRINT_IDLE_MG = 722,
    
    /**
     * 
     */
    ACT_DOD_PRONEWALK_IDLE_MG = 723,
    
    /**
     * 
     */
    ACT_DOD_STAND_AIM_30CAL = 724,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_AIM_30CAL = 725,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_AIM_30CAL = 726,
    
    /**
     * 
     */
    ACT_DOD_WALK_AIM_30CAL = 727,
    
    /**
     * 
     */
    ACT_DOD_RUN_AIM_30CAL = 728,
    
    /**
     * 
     */
    ACT_DOD_PRONE_AIM_30CAL = 729,
    
    /**
     * 
     */
    ACT_DOD_STAND_IDLE_30CAL = 730,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_IDLE_30CAL = 731,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_IDLE_30CAL = 732,
    
    /**
     * 
     */
    ACT_DOD_WALK_IDLE_30CAL = 733,
    
    /**
     * 
     */
    ACT_DOD_RUN_IDLE_30CAL = 734,
    
    /**
     * 
     */
    ACT_DOD_SPRINT_IDLE_30CAL = 735,
    
    /**
     * 
     */
    ACT_DOD_PRONEWALK_IDLE_30CAL = 736,
    
    /**
     * 
     */
    ACT_DOD_STAND_AIM_GREN_FRAG = 737,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_AIM_GREN_FRAG = 738,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_AIM_GREN_FRAG = 739,
    
    /**
     * 
     */
    ACT_DOD_WALK_AIM_GREN_FRAG = 740,
    
    /**
     * 
     */
    ACT_DOD_RUN_AIM_GREN_FRAG = 741,
    
    /**
     * 
     */
    ACT_DOD_PRONE_AIM_GREN_FRAG = 742,
    
    /**
     * 
     */
    ACT_DOD_SPRINT_AIM_GREN_FRAG = 743,
    
    /**
     * 
     */
    ACT_DOD_PRONEWALK_AIM_GREN_FRAG = 744,
    
    /**
     * 
     */
    ACT_DOD_STAND_AIM_GREN_STICK = 745,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_AIM_GREN_STICK = 746,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_AIM_GREN_STICK = 747,
    
    /**
     * 
     */
    ACT_DOD_WALK_AIM_GREN_STICK = 748,
    
    /**
     * 
     */
    ACT_DOD_RUN_AIM_GREN_STICK = 749,
    
    /**
     * 
     */
    ACT_DOD_PRONE_AIM_GREN_STICK = 750,
    
    /**
     * 
     */
    ACT_DOD_SPRINT_AIM_GREN_STICK = 751,
    
    /**
     * 
     */
    ACT_DOD_PRONEWALK_AIM_GREN_STICK = 752,
    
    /**
     * 
     */
    ACT_DOD_STAND_AIM_KNIFE = 753,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_AIM_KNIFE = 754,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_AIM_KNIFE = 755,
    
    /**
     * 
     */
    ACT_DOD_WALK_AIM_KNIFE = 756,
    
    /**
     * 
     */
    ACT_DOD_RUN_AIM_KNIFE = 757,
    
    /**
     * 
     */
    ACT_DOD_PRONE_AIM_KNIFE = 758,
    
    /**
     * 
     */
    ACT_DOD_SPRINT_AIM_KNIFE = 759,
    
    /**
     * 
     */
    ACT_DOD_PRONEWALK_AIM_KNIFE = 760,
    
    /**
     * 
     */
    ACT_DOD_STAND_AIM_SPADE = 761,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_AIM_SPADE = 762,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_AIM_SPADE = 763,
    
    /**
     * 
     */
    ACT_DOD_WALK_AIM_SPADE = 764,
    
    /**
     * 
     */
    ACT_DOD_RUN_AIM_SPADE = 765,
    
    /**
     * 
     */
    ACT_DOD_PRONE_AIM_SPADE = 766,
    
    /**
     * 
     */
    ACT_DOD_SPRINT_AIM_SPADE = 767,
    
    /**
     * 
     */
    ACT_DOD_PRONEWALK_AIM_SPADE = 768,
    
    /**
     * 
     */
    ACT_DOD_STAND_AIM_BAZOOKA = 769,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_AIM_BAZOOKA = 770,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_AIM_BAZOOKA = 771,
    
    /**
     * 
     */
    ACT_DOD_WALK_AIM_BAZOOKA = 772,
    
    /**
     * 
     */
    ACT_DOD_RUN_AIM_BAZOOKA = 773,
    
    /**
     * 
     */
    ACT_DOD_PRONE_AIM_BAZOOKA = 774,
    
    /**
     * 
     */
    ACT_DOD_STAND_IDLE_BAZOOKA = 775,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_IDLE_BAZOOKA = 776,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_IDLE_BAZOOKA = 777,
    
    /**
     * 
     */
    ACT_DOD_WALK_IDLE_BAZOOKA = 778,
    
    /**
     * 
     */
    ACT_DOD_RUN_IDLE_BAZOOKA = 779,
    
    /**
     * 
     */
    ACT_DOD_SPRINT_IDLE_BAZOOKA = 780,
    
    /**
     * 
     */
    ACT_DOD_PRONEWALK_IDLE_BAZOOKA = 781,
    
    /**
     * 
     */
    ACT_DOD_STAND_AIM_PSCHRECK = 782,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_AIM_PSCHRECK = 783,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_AIM_PSCHRECK = 784,
    
    /**
     * 
     */
    ACT_DOD_WALK_AIM_PSCHRECK = 785,
    
    /**
     * 
     */
    ACT_DOD_RUN_AIM_PSCHRECK = 786,
    
    /**
     * 
     */
    ACT_DOD_PRONE_AIM_PSCHRECK = 787,
    
    /**
     * 
     */
    ACT_DOD_STAND_IDLE_PSCHRECK = 788,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_IDLE_PSCHRECK = 789,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_IDLE_PSCHRECK = 790,
    
    /**
     * 
     */
    ACT_DOD_WALK_IDLE_PSCHRECK = 791,
    
    /**
     * 
     */
    ACT_DOD_RUN_IDLE_PSCHRECK = 792,
    
    /**
     * 
     */
    ACT_DOD_SPRINT_IDLE_PSCHRECK = 793,
    
    /**
     * 
     */
    ACT_DOD_PRONEWALK_IDLE_PSCHRECK = 794,
    
    /**
     * 
     */
    ACT_DOD_STAND_AIM_BAR = 795,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_AIM_BAR = 796,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_AIM_BAR = 797,
    
    /**
     * 
     */
    ACT_DOD_WALK_AIM_BAR = 798,
    
    /**
     * 
     */
    ACT_DOD_RUN_AIM_BAR = 799,
    
    /**
     * 
     */
    ACT_DOD_PRONE_AIM_BAR = 800,
    
    /**
     * 
     */
    ACT_DOD_STAND_IDLE_BAR = 801,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_IDLE_BAR = 802,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_IDLE_BAR = 803,
    
    /**
     * 
     */
    ACT_DOD_WALK_IDLE_BAR = 804,
    
    /**
     * 
     */
    ACT_DOD_RUN_IDLE_BAR = 805,
    
    /**
     * 
     */
    ACT_DOD_SPRINT_IDLE_BAR = 806,
    
    /**
     * 
     */
    ACT_DOD_PRONEWALK_IDLE_BAR = 807,
    
    /**
     * 
     */
    ACT_DOD_STAND_ZOOM_RIFLE = 808,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_ZOOM_RIFLE = 809,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_ZOOM_RIFLE = 810,
    
    /**
     * 
     */
    ACT_DOD_WALK_ZOOM_RIFLE = 811,
    
    /**
     * 
     */
    ACT_DOD_RUN_ZOOM_RIFLE = 812,
    
    /**
     * 
     */
    ACT_DOD_PRONE_ZOOM_RIFLE = 813,
    
    /**
     * 
     */
    ACT_DOD_STAND_ZOOM_BOLT = 814,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_ZOOM_BOLT = 815,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_ZOOM_BOLT = 816,
    
    /**
     * 
     */
    ACT_DOD_WALK_ZOOM_BOLT = 817,
    
    /**
     * 
     */
    ACT_DOD_RUN_ZOOM_BOLT = 818,
    
    /**
     * 
     */
    ACT_DOD_PRONE_ZOOM_BOLT = 819,
    
    /**
     * 
     */
    ACT_DOD_STAND_ZOOM_BAZOOKA = 820,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_ZOOM_BAZOOKA = 821,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_ZOOM_BAZOOKA = 822,
    
    /**
     * 
     */
    ACT_DOD_WALK_ZOOM_BAZOOKA = 823,
    
    /**
     * 
     */
    ACT_DOD_RUN_ZOOM_BAZOOKA = 824,
    
    /**
     * 
     */
    ACT_DOD_PRONE_ZOOM_BAZOOKA = 825,
    
    /**
     * 
     */
    ACT_DOD_STAND_ZOOM_PSCHRECK = 826,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_ZOOM_PSCHRECK = 827,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_ZOOM_PSCHRECK = 828,
    
    /**
     * 
     */
    ACT_DOD_WALK_ZOOM_PSCHRECK = 829,
    
    /**
     * 
     */
    ACT_DOD_RUN_ZOOM_PSCHRECK = 830,
    
    /**
     * 
     */
    ACT_DOD_PRONE_ZOOM_PSCHRECK = 831,
    
    /**
     * 
     */
    ACT_DOD_DEPLOY_RIFLE = 832,
    
    /**
     * 
     */
    ACT_DOD_DEPLOY_TOMMY = 833,
    
    /**
     * 
     */
    ACT_DOD_DEPLOY_MG = 834,
    
    /**
     * 
     */
    ACT_DOD_DEPLOY_30CAL = 835,
    
    /**
     * 
     */
    ACT_DOD_PRONE_DEPLOY_RIFLE = 836,
    
    /**
     * 
     */
    ACT_DOD_PRONE_DEPLOY_TOMMY = 837,
    
    /**
     * 
     */
    ACT_DOD_PRONE_DEPLOY_MG = 838,
    
    /**
     * 
     */
    ACT_DOD_PRONE_DEPLOY_30CAL = 839,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_RIFLE = 840,
    
    /**
     * 
     */
    ACT_DOD_SECONDARYATTACK_RIFLE = 841,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PRONE_RIFLE = 842,
    
    /**
     * 
     */
    ACT_DOD_SECONDARYATTACK_PRONE_RIFLE = 843,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_RIFLE = 844,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_DEPLOYED_RIFLE = 845,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_BOLT = 846,
    
    /**
     * 
     */
    ACT_DOD_SECONDARYATTACK_BOLT = 847,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PRONE_BOLT = 848,
    
    /**
     * 
     */
    ACT_DOD_SECONDARYATTACK_PRONE_BOLT = 849,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_TOMMY = 850,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PRONE_TOMMY = 851,
    
    /**
     * 
     */
    ACT_DOD_SECONDARYATTACK_TOMMY = 852,
    
    /**
     * 
     */
    ACT_DOD_SECONDARYATTACK_PRONE_TOMMY = 853,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_MP40 = 854,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PRONE_MP40 = 855,
    
    /**
     * 
     */
    ACT_DOD_SECONDARYATTACK_MP40 = 856,
    
    /**
     * 
     */
    ACT_DOD_SECONDARYATTACK_PRONE_MP40 = 857,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_MP44 = 858,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PRONE_MP44 = 859,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_GREASE = 860,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PRONE_GREASE = 861,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PISTOL = 862,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PRONE_PISTOL = 863,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_C96 = 864,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PRONE_C96 = 865,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_MG = 866,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PRONE_MG = 867,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_MG = 868,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_DEPLOYED_MG = 869,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_30CAL = 870,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PRONE_30CAL = 871,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_DEPLOYED_30CAL = 872,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_30CAL = 873,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_GREN_FRAG = 874,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PRONE_GREN_FRAG = 875,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_GREN_STICK = 876,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PRONE_GREN_STICK = 877,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_KNIFE = 878,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PRONE_KNIFE = 879,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_SPADE = 880,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PRONE_SPADE = 881,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_BAZOOKA = 882,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PRONE_BAZOOKA = 883,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PSCHRECK = 884,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PRONE_PSCHRECK = 885,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_BAR = 886,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_PRONE_BAR = 887,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_GARAND = 888,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_K43 = 889,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_BAR = 890,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_MP40 = 891,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_MP44 = 892,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_BOLT = 893,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_M1CARBINE = 894,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_TOMMY = 895,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_GREASEGUN = 896,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PISTOL = 897,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_FG42 = 898,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_RIFLE = 899,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_RIFLEGRENADE = 900,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_C96 = 901,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_CROUCH_BAR = 902,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_CROUCH_RIFLE = 903,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_CROUCH_RIFLEGRENADE = 904,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_CROUCH_BOLT = 905,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_CROUCH_MP44 = 906,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_CROUCH_MP40 = 907,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_CROUCH_TOMMY = 908,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_CROUCH_BAZOOKA = 909,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_CROUCH_PSCHRECK = 910,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_CROUCH_PISTOL = 911,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_CROUCH_M1CARBINE = 912,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_CROUCH_C96 = 913,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_BAZOOKA = 914,
    
    /**
     * 
     */
    ACT_DOD_ZOOMLOAD_BAZOOKA = 915,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PSCHRECK = 916,
    
    /**
     * 
     */
    ACT_DOD_ZOOMLOAD_PSCHRECK = 917,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_DEPLOYED_FG42 = 918,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_DEPLOYED_30CAL = 919,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_DEPLOYED_MG = 920,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_DEPLOYED_MG34 = 921,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_DEPLOYED_BAR = 922,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE_PISTOL = 923,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE_GARAND = 924,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE_M1CARBINE = 925,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE_BOLT = 926,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE_K43 = 927,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE_MP40 = 928,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE_MP44 = 929,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE_BAR = 930,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE_GREASEGUN = 931,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE_TOMMY = 932,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE_FG42 = 933,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE_RIFLE = 934,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE_RIFLEGRENADE = 935,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE_C96 = 936,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE_BAZOOKA = 937,
    
    /**
     * 
     */
    ACT_DOD_ZOOMLOAD_PRONE_BAZOOKA = 938,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE_PSCHRECK = 939,
    
    /**
     * 
     */
    ACT_DOD_ZOOMLOAD_PRONE_PSCHRECK = 940,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE_DEPLOYED_BAR = 941,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE_DEPLOYED_FG42 = 942,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE_DEPLOYED_30CAL = 943,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE_DEPLOYED_MG = 944,
    
    /**
     * 
     */
    ACT_DOD_RELOAD_PRONE_DEPLOYED_MG34 = 945,
    
    /**
     * 
     */
    ACT_DOD_PRONE_ZOOM_FORWARD_RIFLE = 946,
    
    /**
     * 
     */
    ACT_DOD_PRONE_ZOOM_FORWARD_BOLT = 947,
    
    /**
     * 
     */
    ACT_DOD_PRONE_ZOOM_FORWARD_BAZOOKA = 948,
    
    /**
     * 
     */
    ACT_DOD_PRONE_ZOOM_FORWARD_PSCHRECK = 949,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_CROUCH = 950,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_CROUCH_SPADE = 951,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_CROUCH_KNIFE = 952,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_CROUCH_GREN_FRAG = 953,
    
    /**
     * 
     */
    ACT_DOD_PRIMARYATTACK_CROUCH_GREN_STICK = 954,
    
    /**
     * 
     */
    ACT_DOD_SECONDARYATTACK_CROUCH = 955,
    
    /**
     * 
     */
    ACT_DOD_SECONDARYATTACK_CROUCH_TOMMY = 956,
    
    /**
     * 
     */
    ACT_DOD_SECONDARYATTACK_CROUCH_MP40 = 957,
    
    /**
     * 
     */
    ACT_DOD_HS_IDLE = 958,
    
    /**
     * 
     */
    ACT_DOD_HS_CROUCH = 959,
    
    /**
     * 
     */
    ACT_DOD_HS_IDLE_30CAL = 960,
    
    /**
     * 
     */
    ACT_DOD_HS_IDLE_BAZOOKA = 961,
    
    /**
     * 
     */
    ACT_DOD_HS_IDLE_PSCHRECK = 962,
    
    /**
     * 
     */
    ACT_DOD_HS_IDLE_KNIFE = 963,
    
    /**
     * 
     */
    ACT_DOD_HS_IDLE_MG42 = 964,
    
    /**
     * 
     */
    ACT_DOD_HS_IDLE_PISTOL = 965,
    
    /**
     * 
     */
    ACT_DOD_HS_IDLE_STICKGRENADE = 966,
    
    /**
     * 
     */
    ACT_DOD_HS_IDLE_TOMMY = 967,
    
    /**
     * 
     */
    ACT_DOD_HS_IDLE_MP44 = 968,
    
    /**
     * 
     */
    ACT_DOD_HS_IDLE_K98 = 969,
    
    /**
     * 
     */
    ACT_DOD_HS_CROUCH_30CAL = 970,
    
    /**
     * 
     */
    ACT_DOD_HS_CROUCH_BAZOOKA = 971,
    
    /**
     * 
     */
    ACT_DOD_HS_CROUCH_PSCHRECK = 972,
    
    /**
     * 
     */
    ACT_DOD_HS_CROUCH_KNIFE = 973,
    
    /**
     * 
     */
    ACT_DOD_HS_CROUCH_MG42 = 974,
    
    /**
     * 
     */
    ACT_DOD_HS_CROUCH_PISTOL = 975,
    
    /**
     * 
     */
    ACT_DOD_HS_CROUCH_STICKGRENADE = 976,
    
    /**
     * 
     */
    ACT_DOD_HS_CROUCH_TOMMY = 977,
    
    /**
     * 
     */
    ACT_DOD_HS_CROUCH_MP44 = 978,
    
    /**
     * 
     */
    ACT_DOD_HS_CROUCH_K98 = 979,
    
    /**
     * 
     */
    ACT_DOD_STAND_IDLE_TNT = 980,
    
    /**
     * 
     */
    ACT_DOD_CROUCH_IDLE_TNT = 981,
    
    /**
     * 
     */
    ACT_DOD_CROUCHWALK_IDLE_TNT = 982,
    
    /**
     * 
     */
    ACT_DOD_WALK_IDLE_TNT = 983,
    
    /**
     * 
     */
    ACT_DOD_RUN_IDLE_TNT = 984,
    
    /**
     * 
     */
    ACT_DOD_SPRINT_IDLE_TNT = 985,
    
    /**
     * 
     */
    ACT_DOD_PRONEWALK_IDLE_TNT = 986,
    
    /**
     * 
     */
    ACT_DOD_PLANT_TNT = 987,
    
    /**
     * 
     */
    ACT_DOD_DEFUSE_TNT = 988,
    
    /**
     * 
     */
    ACT_VM_FIZZLE = 989,
    
    /**
     * 
     */
    ACT_MP_STAND_IDLE = 990,
    
    /**
     * 
     */
    ACT_MP_CROUCH_IDLE = 991,
    
    /**
     * 
     */
    ACT_MP_CROUCH_DEPLOYED_IDLE = 992,
    
    /**
     * 
     */
    ACT_MP_CROUCH_DEPLOYED = 993,
    
    /**
     * 
     */
    ACT_MP_DEPLOYED_IDLE = 995,
    
    /**
     * 
     */
    ACT_MP_RUN = 996,
    
    /**
     * 
     */
    ACT_MP_WALK = 997,
    
    /**
     * 
     */
    ACT_MP_AIRWALK = 998,
    
    /**
     * 
     */
    ACT_MP_CROUCHWALK = 999,
    
    /**
     * 
     */
    ACT_MP_SPRINT = 1000,
    
    /**
     * 
     */
    ACT_MP_JUMP = 1001,
    
    /**
     * 
     */
    ACT_MP_JUMP_START = 1002,
    
    /**
     * 
     */
    ACT_MP_JUMP_FLOAT = 1003,
    
    /**
     * 
     */
    ACT_MP_JUMP_LAND = 1004,
    
    /**
     * 
     */
    ACT_MP_DOUBLEJUMP = 1005,
    
    /**
     * 
     */
    ACT_MP_SWIM = 1006,
    
    /**
     * 
     */
    ACT_MP_DEPLOYED = 1007,
    
    /**
     * 
     */
    ACT_MP_SWIM_DEPLOYED = 1008,
    
    /**
     * 
     */
    ACT_MP_VCD = 1009,
    
    /**
     * 
     */
    ACT_MP_SWIM_IDLE = 1010,
    
    /**
     * 
     */
    ACT_MP_ATTACK_STAND_PRIMARYFIRE = 1011,
    
    /**
     * 
     */
    ACT_MP_ATTACK_STAND_PRIMARYFIRE_DEPLOYED = 1012,
    
    /**
     * 
     */
    ACT_MP_ATTACK_STAND_SECONDARYFIRE = 1013,
    
    /**
     * 
     */
    ACT_MP_ATTACK_STAND_GRENADE = 1014,
    
    /**
     * 
     */
    ACT_MP_ATTACK_CROUCH_PRIMARYFIRE = 1015,
    
    /**
     * 
     */
    ACT_MP_ATTACK_CROUCH_PRIMARYFIRE_DEPLOYED = 1016,
    
    /**
     * 
     */
    ACT_MP_ATTACK_CROUCH_SECONDARYFIRE = 1017,
    
    /**
     * 
     */
    ACT_MP_ATTACK_CROUCH_GRENADE = 1018,
    
    /**
     * 
     */
    ACT_MP_ATTACK_SWIM_PRIMARYFIRE = 1019,
    
    /**
     * 
     */
    ACT_MP_ATTACK_SWIM_SECONDARYFIRE = 1020,
    
    /**
     * 
     */
    ACT_MP_ATTACK_SWIM_GRENADE = 1021,
    
    /**
     * 
     */
    ACT_MP_ATTACK_AIRWALK_PRIMARYFIRE = 1022,
    
    /**
     * 
     */
    ACT_MP_ATTACK_AIRWALK_SECONDARYFIRE = 1023,
    
    /**
     * 
     */
    ACT_MP_ATTACK_AIRWALK_GRENADE = 1024,
    
    /**
     * 
     */
    ACT_MP_RELOAD_STAND = 1025,
    
    /**
     * 
     */
    ACT_MP_RELOAD_STAND_LOOP = 1026,
    
    /**
     * 
     */
    ACT_MP_RELOAD_STAND_END = 1027,
    
    /**
     * 
     */
    ACT_MP_RELOAD_CROUCH = 1028,
    
    /**
     * 
     */
    ACT_MP_RELOAD_CROUCH_LOOP = 1029,
    
    /**
     * 
     */
    ACT_MP_RELOAD_CROUCH_END = 1030,
    
    /**
     * 
     */
    ACT_MP_RELOAD_SWIM = 1031,
    
    /**
     * 
     */
    ACT_MP_RELOAD_SWIM_LOOP = 1032,
    
    /**
     * 
     */
    ACT_MP_RELOAD_SWIM_END = 1033,
    
    /**
     * 
     */
    ACT_MP_RELOAD_AIRWALK = 1034,
    
    /**
     * 
     */
    ACT_MP_RELOAD_AIRWALK_LOOP = 1035,
    
    /**
     * 
     */
    ACT_MP_RELOAD_AIRWALK_END = 1036,
    
    /**
     * 
     */
    ACT_MP_ATTACK_STAND_PREFIRE = 1037,
    
    /**
     * 
     */
    ACT_MP_ATTACK_STAND_POSTFIRE = 1038,
    
    /**
     * 
     */
    ACT_MP_ATTACK_STAND_STARTFIRE = 1039,
    
    /**
     * 
     */
    ACT_MP_ATTACK_CROUCH_PREFIRE = 1040,
    
    /**
     * 
     */
    ACT_MP_ATTACK_CROUCH_POSTFIRE = 1041,
    
    /**
     * 
     */
    ACT_MP_ATTACK_SWIM_PREFIRE = 1042,
    
    /**
     * 
     */
    ACT_MP_ATTACK_SWIM_POSTFIRE = 1043,
    
    /**
     * 
     */
    ACT_MP_STAND_PRIMARY = 1044,
    
    /**
     * 
     */
    ACT_MP_CROUCH_PRIMARY = 1045,
    
    /**
     * 
     */
    ACT_MP_RUN_PRIMARY = 1046,
    
    /**
     * 
     */
    ACT_MP_WALK_PRIMARY = 1047,
    
    /**
     * 
     */
    ACT_MP_AIRWALK_PRIMARY = 1048,
    
    /**
     * 
     */
    ACT_MP_CROUCHWALK_PRIMARY = 1049,
    
    /**
     * 
     */
    ACT_MP_JUMP_PRIMARY = 1050,
    
    /**
     * 
     */
    ACT_MP_JUMP_START_PRIMARY = 1051,
    
    /**
     * 
     */
    ACT_MP_JUMP_FLOAT_PRIMARY = 1052,
    
    /**
     * 
     */
    ACT_MP_JUMP_LAND_PRIMARY = 1053,
    
    /**
     * 
     */
    ACT_MP_SWIM_PRIMARY = 1054,
    
    /**
     * 
     */
    ACT_MP_DEPLOYED_PRIMARY = 1055,
    
    /**
     * 
     */
    ACT_MP_SWIM_DEPLOYED_PRIMARY = 1056,
    
    /**
     * 
     */
    ACT_MP_ATTACK_STAND_PRIMARY = 1059,
    
    /**
     * 
     */
    ACT_MP_ATTACK_STAND_PRIMARY_DEPLOYED = 1060,
    
    /**
     * 
     */
    ACT_MP_ATTACK_CROUCH_PRIMARY = 1061,
    
    /**
     * 
     */
    ACT_MP_ATTACK_CROUCH_PRIMARY_DEPLOYED = 1062,
    
    /**
     * 
     */
    ACT_MP_ATTACK_SWIM_PRIMARY = 1063,
    
    /**
     * 
     */
    ACT_MP_ATTACK_AIRWALK_PRIMARY = 1064,
    
    /**
     * 
     */
    ACT_MP_RELOAD_STAND_PRIMARY = 1065,
    
    /**
     * 
     */
    ACT_MP_RELOAD_STAND_PRIMARY_LOOP = 1066,
    
    /**
     * 
     */
    ACT_MP_RELOAD_STAND_PRIMARY_END = 1067,
    
    /**
     * 
     */
    ACT_MP_RELOAD_CROUCH_PRIMARY = 1068,
    
    /**
     * 
     */
    ACT_MP_RELOAD_CROUCH_PRIMARY_LOOP = 1069,
    
    /**
     * 
     */
    ACT_MP_RELOAD_CROUCH_PRIMARY_END = 1070,
    
    /**
     * 
     */
    ACT_MP_RELOAD_SWIM_PRIMARY = 1071,
    
    /**
     * 
     */
    ACT_MP_RELOAD_SWIM_PRIMARY_LOOP = 1072,
    
    /**
     * 
     */
    ACT_MP_RELOAD_SWIM_PRIMARY_END = 1073,
    
    /**
     * 
     */
    ACT_MP_RELOAD_AIRWALK_PRIMARY = 1074,
    
    /**
     * 
     */
    ACT_MP_RELOAD_AIRWALK_PRIMARY_LOOP = 1075,
    
    /**
     * 
     */
    ACT_MP_RELOAD_AIRWALK_PRIMARY_END = 1076,
    
    /**
     * 
     */
    ACT_MP_ATTACK_STAND_GRENADE_PRIMARY = 1105,
    
    /**
     * 
     */
    ACT_MP_ATTACK_CROUCH_GRENADE_PRIMARY = 1106,
    
    /**
     * 
     */
    ACT_MP_ATTACK_SWIM_GRENADE_PRIMARY = 1107,
    
    /**
     * 
     */
    ACT_MP_ATTACK_AIRWALK_GRENADE_PRIMARY = 1108,
    
    /**
     * 
     */
    ACT_MP_STAND_SECONDARY = 1109,
    
    /**
     * 
     */
    ACT_MP_CROUCH_SECONDARY = 1110,
    
    /**
     * 
     */
    ACT_MP_RUN_SECONDARY = 1111,
    
    /**
     * 
     */
    ACT_MP_WALK_SECONDARY = 1112,
    
    /**
     * 
     */
    ACT_MP_AIRWALK_SECONDARY = 1113,
    
    /**
     * 
     */
    ACT_MP_CROUCHWALK_SECONDARY = 1114,
    
    /**
     * 
     */
    ACT_MP_JUMP_SECONDARY = 1115,
    
    /**
     * 
     */
    ACT_MP_JUMP_START_SECONDARY = 1116,
    
    /**
     * 
     */
    ACT_MP_JUMP_FLOAT_SECONDARY = 1117,
    
    /**
     * 
     */
    ACT_MP_JUMP_LAND_SECONDARY = 1118,
    
    /**
     * 
     */
    ACT_MP_SWIM_SECONDARY = 1119,
    
    /**
     * 
     */
    ACT_MP_ATTACK_STAND_SECONDARY = 1120,
    
    /**
     * 
     */
    ACT_MP_ATTACK_CROUCH_SECONDARY = 1121,
    
    /**
     * 
     */
    ACT_MP_ATTACK_SWIM_SECONDARY = 1122,
    
    /**
     * 
     */
    ACT_MP_ATTACK_AIRWALK_SECONDARY = 1123,
    
    /**
     * 
     */
    ACT_MP_RELOAD_STAND_SECONDARY = 1124,
    
    /**
     * 
     */
    ACT_MP_RELOAD_STAND_SECONDARY_LOOP = 1125,
    
    /**
     * 
     */
    ACT_MP_RELOAD_STAND_SECONDARY_END = 1126,
    
    /**
     * 
     */
    ACT_MP_RELOAD_CROUCH_SECONDARY = 1127,
    
    /**
     * 
     */
    ACT_MP_RELOAD_CROUCH_SECONDARY_LOOP = 1128,
    
    /**
     * 
     */
    ACT_MP_RELOAD_CROUCH_SECONDARY_END = 1129,
    
    /**
     * 
     */
    ACT_MP_RELOAD_SWIM_SECONDARY = 1130,
    
    /**
     * 
     */
    ACT_MP_RELOAD_SWIM_SECONDARY_LOOP = 1131,
    
    /**
     * 
     */
    ACT_MP_RELOAD_SWIM_SECONDARY_END = 1132,
    
    /**
     * 
     */
    ACT_MP_RELOAD_AIRWALK_SECONDARY = 1133,
    
    /**
     * 
     */
    ACT_MP_RELOAD_AIRWALK_SECONDARY_LOOP = 1134,
    
    /**
     * 
     */
    ACT_MP_RELOAD_AIRWALK_SECONDARY_END = 1135,
    
    /**
     * 
     */
    ACT_MP_ATTACK_STAND_GRENADE_SECONDARY = 1140,
    
    /**
     * 
     */
    ACT_MP_ATTACK_CROUCH_GRENADE_SECONDARY = 1141,
    
    /**
     * 
     */
    ACT_MP_ATTACK_SWIM_GRENADE_SECONDARY = 1142,
    
    /**
     * 
     */
    ACT_MP_ATTACK_AIRWALK_GRENADE_SECONDARY = 1143,
    
    /**
     * 
     */
    ACT_MP_STAND_MELEE = 1171,
    
    /**
     * 
     */
    ACT_MP_CROUCH_MELEE = 1172,
    
    /**
     * 
     */
    ACT_MP_RUN_MELEE = 1173,
    
    /**
     * 
     */
    ACT_MP_WALK_MELEE = 1174,
    
    /**
     * 
     */
    ACT_MP_AIRWALK_MELEE = 1175,
    
    /**
     * 
     */
    ACT_MP_CROUCHWALK_MELEE = 1176,
    
    /**
     * 
     */
    ACT_MP_JUMP_MELEE = 1177,
    
    /**
     * 
     */
    ACT_MP_JUMP_START_MELEE = 1178,
    
    /**
     * 
     */
    ACT_MP_JUMP_FLOAT_MELEE = 1179,
    
    /**
     * 
     */
    ACT_MP_JUMP_LAND_MELEE = 1180,
    
    /**
     * 
     */
    ACT_MP_SWIM_MELEE = 1181,
    
    /**
     * 
     */
    ACT_MP_ATTACK_STAND_MELEE = 1182,
    
    /**
     * 
     */
    ACT_MP_ATTACK_STAND_MELEE_SECONDARY = 1183,
    
    /**
     * 
     */
    ACT_MP_ATTACK_CROUCH_MELEE = 1184,
    
    /**
     * 
     */
    ACT_MP_ATTACK_CROUCH_MELEE_SECONDARY = 1185,
    
    /**
     * 
     */
    ACT_MP_ATTACK_SWIM_MELEE = 1186,
    
    /**
     * 
     */
    ACT_MP_ATTACK_AIRWALK_MELEE = 1187,
    
    /**
     * 
     */
    ACT_MP_ATTACK_STAND_GRENADE_MELEE = 1188,
    
    /**
     * 
     */
    ACT_MP_ATTACK_CROUCH_GRENADE_MELEE = 1189,
    
    /**
     * 
     */
    ACT_MP_ATTACK_SWIM_GRENADE_MELEE = 1190,
    
    /**
     * 
     */
    ACT_MP_ATTACK_AIRWALK_GRENADE_MELEE = 1191,
    
    /**
     * 
     */
    ACT_MP_GESTURE_FLINCH = 1258,
    
    /**
     * 
     */
    ACT_MP_GESTURE_FLINCH_PRIMARY = 1259,
    
    /**
     * 
     */
    ACT_MP_GESTURE_FLINCH_SECONDARY = 1260,
    
    /**
     * 
     */
    ACT_MP_GESTURE_FLINCH_MELEE = 1261,
    
    /**
     * 
     */
    ACT_MP_GESTURE_FLINCH_HEAD = 1264,
    
    /**
     * 
     */
    ACT_MP_GESTURE_FLINCH_CHEST = 1265,
    
    /**
     * 
     */
    ACT_MP_GESTURE_FLINCH_STOMACH = 1266,
    
    /**
     * 
     */
    ACT_MP_GESTURE_FLINCH_LEFTARM = 1267,
    
    /**
     * 
     */
    ACT_MP_GESTURE_FLINCH_RIGHTARM = 1268,
    
    /**
     * 
     */
    ACT_MP_GESTURE_FLINCH_LEFTLEG = 1269,
    
    /**
     * 
     */
    ACT_MP_GESTURE_FLINCH_RIGHTLEG = 1270,
    
    /**
     * 
     */
    ACT_MP_GRENADE1_DRAW = 1271,
    
    /**
     * 
     */
    ACT_MP_GRENADE1_IDLE = 1272,
    
    /**
     * 
     */
    ACT_MP_GRENADE1_ATTACK = 1273,
    
    /**
     * 
     */
    ACT_MP_GRENADE2_DRAW = 1274,
    
    /**
     * 
     */
    ACT_MP_GRENADE2_IDLE = 1275,
    
    /**
     * 
     */
    ACT_MP_GRENADE2_ATTACK = 1276,
    
    /**
     * 
     */
    ACT_MP_PRIMARY_GRENADE1_DRAW = 1277,
    
    /**
     * 
     */
    ACT_MP_PRIMARY_GRENADE1_IDLE = 1278,
    
    /**
     * 
     */
    ACT_MP_PRIMARY_GRENADE1_ATTACK = 1279,
    
    /**
     * 
     */
    ACT_MP_PRIMARY_GRENADE2_DRAW = 1280,
    
    /**
     * 
     */
    ACT_MP_PRIMARY_GRENADE2_IDLE = 1281,
    
    /**
     * 
     */
    ACT_MP_PRIMARY_GRENADE2_ATTACK = 1282,
    
    /**
     * 
     */
    ACT_MP_SECONDARY_GRENADE1_DRAW = 1283,
    
    /**
     * 
     */
    ACT_MP_SECONDARY_GRENADE1_IDLE = 1284,
    
    /**
     * 
     */
    ACT_MP_SECONDARY_GRENADE1_ATTACK = 1285,
    
    /**
     * 
     */
    ACT_MP_SECONDARY_GRENADE2_DRAW = 1286,
    
    /**
     * 
     */
    ACT_MP_SECONDARY_GRENADE2_IDLE = 1287,
    
    /**
     * 
     */
    ACT_MP_SECONDARY_GRENADE2_ATTACK = 1288,
    
    /**
     * 
     */
    ACT_MP_MELEE_GRENADE1_DRAW = 1289,
    
    /**
     * 
     */
    ACT_MP_MELEE_GRENADE1_IDLE = 1290,
    
    /**
     * 
     */
    ACT_MP_MELEE_GRENADE1_ATTACK = 1291,
    
    /**
     * 
     */
    ACT_MP_MELEE_GRENADE2_DRAW = 1292,
    
    /**
     * 
     */
    ACT_MP_MELEE_GRENADE2_IDLE = 1293,
    
    /**
     * 
     */
    ACT_MP_MELEE_GRENADE2_ATTACK = 1294,
    
    /**
     * 
     */
    ACT_MP_STAND_BUILDING = 1307,
    
    /**
     * 
     */
    ACT_MP_CROUCH_BUILDING = 1308,
    
    /**
     * 
     */
    ACT_MP_RUN_BUILDING = 1309,
    
    /**
     * 
     */
    ACT_MP_WALK_BUILDING = 1310,
    
    /**
     * 
     */
    ACT_MP_AIRWALK_BUILDING = 1311,
    
    /**
     * 
     */
    ACT_MP_CROUCHWALK_BUILDING = 1312,
    
    /**
     * 
     */
    ACT_MP_JUMP_BUILDING = 1313,
    
    /**
     * 
     */
    ACT_MP_JUMP_START_BUILDING = 1314,
    
    /**
     * 
     */
    ACT_MP_JUMP_FLOAT_BUILDING = 1315,
    
    /**
     * 
     */
    ACT_MP_JUMP_LAND_BUILDING = 1316,
    
    /**
     * 
     */
    ACT_MP_SWIM_BUILDING = 1317,
    
    /**
     * 
     */
    ACT_MP_ATTACK_STAND_BUILDING = 1318,
    
    /**
     * 
     */
    ACT_MP_ATTACK_CROUCH_BUILDING = 1319,
    
    /**
     * 
     */
    ACT_MP_ATTACK_SWIM_BUILDING = 1320,
    
    /**
     * 
     */
    ACT_MP_ATTACK_AIRWALK_BUILDING = 1321,
    
    /**
     * 
     */
    ACT_MP_ATTACK_STAND_GRENADE_BUILDING = 1322,
    
    /**
     * 
     */
    ACT_MP_ATTACK_CROUCH_GRENADE_BUILDING = 1323,
    
    /**
     * 
     */
    ACT_MP_ATTACK_SWIM_GRENADE_BUILDING = 1324,
    
    /**
     * 
     */
    ACT_MP_ATTACK_AIRWALK_GRENADE_BUILDING = 1325,
    
    /**
     * 
     */
    ACT_MP_STAND_PDA = 1345,
    
    /**
     * 
     */
    ACT_MP_CROUCH_PDA = 1346,
    
    /**
     * 
     */
    ACT_MP_RUN_PDA = 1347,
    
    /**
     * 
     */
    ACT_MP_WALK_PDA = 1348,
    
    /**
     * 
     */
    ACT_MP_AIRWALK_PDA = 1349,
    
    /**
     * 
     */
    ACT_MP_CROUCHWALK_PDA = 1350,
    
    /**
     * 
     */
    ACT_MP_JUMP_PDA = 1351,
    
    /**
     * 
     */
    ACT_MP_JUMP_START_PDA = 1352,
    
    /**
     * 
     */
    ACT_MP_JUMP_FLOAT_PDA = 1353,
    
    /**
     * 
     */
    ACT_MP_JUMP_LAND_PDA = 1354,
    
    /**
     * 
     */
    ACT_MP_SWIM_PDA = 1355,
    
    /**
     * 
     */
    ACT_MP_ATTACK_STAND_PDA = 1356,
    
    /**
     * 
     */
    ACT_MP_ATTACK_SWIM_PDA = 1357,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_HANDMOUTH = 1377,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_FINGERPOINT = 1378,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_FISTPUMP = 1379,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_THUMBSUP = 1380,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_NODYES = 1381,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_NODNO = 1382,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_HANDMOUTH_PRIMARY = 1383,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_FINGERPOINT_PRIMARY = 1384,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_FISTPUMP_PRIMARY = 1385,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_THUMBSUP_PRIMARY = 1386,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_NODYES_PRIMARY = 1387,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_NODNO_PRIMARY = 1388,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_HANDMOUTH_SECONDARY = 1389,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_FINGERPOINT_SECONDARY = 1390,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_FISTPUMP_SECONDARY = 1391,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_THUMBSUP_SECONDARY = 1392,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_NODYES_SECONDARY = 1393,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_NODNO_SECONDARY = 1394,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_HANDMOUTH_MELEE = 1395,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_FINGERPOINT_MELEE = 1396,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_FISTPUMP_MELEE = 1397,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_THUMBSUP_MELEE = 1398,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_NODYES_MELEE = 1399,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_NODNO_MELEE = 1400,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_HANDMOUTH_BUILDING = 1413,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_FINGERPOINT_BUILDING = 1414,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_FISTPUMP_BUILDING = 1415,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_THUMBSUP_BUILDING = 1416,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_NODYES_BUILDING = 1417,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_NODNO_BUILDING = 1418,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_HANDMOUTH_PDA = 1419,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_FINGERPOINT_PDA = 1420,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_FISTPUMP_PDA = 1421,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_THUMBSUP_PDA = 1422,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_NODYES_PDA = 1423,
    
    /**
     * 
     */
    ACT_MP_GESTURE_VC_NODNO_PDA = 1424,
    
    /**
     * 
     */
    ACT_VM_UNUSABLE = 1428,
    
    /**
     * 
     */
    ACT_VM_UNUSABLE_TO_USABLE = 1429,
    
    /**
     * 
     */
    ACT_VM_USABLE_TO_UNUSABLE = 1430,
    
    /**
     * 
     */
    ACT_GMOD_GESTURE_AGREE = 1610,
    
    /**
     * 
     */
    ACT_GMOD_GESTURE_BECON = 1611,
    
    /**
     * 
     */
    ACT_GMOD_GESTURE_BOW = 1612,
    
    /**
     * 
     */
    ACT_GMOD_GESTURE_DISAGREE = 1613,
    
    /**
     * 
     */
    ACT_GMOD_TAUNT_SALUTE = 1614,
    
    /**
     * 
     */
    ACT_GMOD_GESTURE_WAVE = 1615,
    
    /**
     * 
     */
    ACT_GMOD_TAUNT_PERSISTENCE = 1616,
    
    /**
     * 
     */
    ACT_GMOD_TAUNT_MUSCLE = 1617,
    
    /**
     * 
     */
    ACT_GMOD_TAUNT_LAUGH = 1618,
    
    /**
     * 
     */
    ACT_GMOD_GESTURE_POINT = 1619,
    
    /**
     * 
     */
    ACT_GMOD_TAUNT_CHEER = 1620,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_FAST = 1621,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_CHARGING = 1622,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_PANICKED = 1623,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_PROTECTED = 1624,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_MELEE_ANGRY = 1625,
    
    /**
     * 
     */
    ACT_HL2MP_ZOMBIE_SLUMP_IDLE = 1626,
    
    /**
     * 
     */
    ACT_HL2MP_ZOMBIE_SLUMP_RISE = 1627,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_ZOMBIE_01 = 1628,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_ZOMBIE_02 = 1629,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_ZOMBIE_03 = 1630,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_ZOMBIE_04 = 1631,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_ZOMBIE_05 = 1632,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_ZOMBIE_01 = 1633,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_ZOMBIE_02 = 1634,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_ZOMBIE_03 = 1635,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_ZOMBIE_04 = 1636,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_ZOMBIE_05 = 1637,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_ZOMBIE_01 = 1638,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_ZOMBIE_02 = 1639,
    
    /**
     * 
     */
    ACT_GMOD_GESTURE_RANGE_ZOMBIE = 1640,
    
    /**
     * 
     */
    ACT_GMOD_GESTURE_TAUNT_ZOMBIE = 1641,
    
    /**
     * 
     */
    ACT_GMOD_TAUNT_DANCE = 1642,
    
    /**
     * 
     */
    ACT_GMOD_TAUNT_ROBOT = 1643,
    
    /**
     * 
     */
    ACT_GMOD_GESTURE_RANGE_ZOMBIE_SPECIAL = 1644,
    
    /**
     * 
     */
    ACT_GMOD_GESTURE_RANGE_FRENZY = 1645,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_ZOMBIE_FAST = 1646,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_ZOMBIE_06 = 1647,
    
    /**
     * 
     */
    ACT_ZOMBIE_LEAP_START = 1648,
    
    /**
     * 
     */
    ACT_ZOMBIE_LEAPING = 1649,
    
    /**
     * 
     */
    ACT_ZOMBIE_CLIMB_UP = 1650,
    
    /**
     * 
     */
    ACT_ZOMBIE_CLIMB_START = 1651,
    
    /**
     * 
     */
    ACT_ZOMBIE_CLIMB_END = 1652,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_MAGIC = 1653,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_MAGIC = 1654,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_MAGIC = 1655,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_MAGIC = 1656,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_MAGIC = 1657,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_MAGIC = 1658,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD_MAGIC = 1659,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP_MAGIC = 1660,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE_MAGIC = 1661,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_MAGIC = 1662,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_REVOLVER = 1663,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_REVOLVER = 1664,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_REVOLVER = 1665,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_REVOLVER = 1666,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_REVOLVER = 1667,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_REVOLVER = 1668,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD_REVOLVER = 1669,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP_REVOLVER = 1670,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE_REVOLVER = 1671,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_REVOLVER = 1672,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CAMERA = 1673,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CAMERA = 1674,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_CAMERA = 1675,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_CAMERA = 1676,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_CAMERA = 1677,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_CAMERA = 1678,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD_CAMERA = 1679,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP_CAMERA = 1680,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE_CAMERA = 1681,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_CAMERA = 1682,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_ANGRY = 1683,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_ANGRY = 1684,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_ANGRY = 1685,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_ANGRY = 1686,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_ANGRY = 1687,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_ANGRY = 1688,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD_ANGRY = 1689,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP_ANGRY = 1690,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE_ANGRY = 1691,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_ANGRY = 1692,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_SCARED = 1693,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_SCARED = 1694,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_SCARED = 1695,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_SCARED = 1696,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_SCARED = 1697,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_SCARED = 1698,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD_SCARED = 1699,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP_SCARED = 1700,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE_SCARED = 1701,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_SCARED = 1702,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_ZOMBIE = 1703,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_ZOMBIE = 1704,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_ZOMBIE = 1705,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_ZOMBIE = 1706,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_ZOMBIE = 1707,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_ZOMBIE = 1708,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD_ZOMBIE = 1709,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP_ZOMBIE = 1710,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE_ZOMBIE = 1711,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_ZOMBIE = 1712,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_SUITCASE = 1713,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_SUITCASE = 1714,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_SUITCASE = 1715,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_SUITCASE = 1716,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_SUITCASE = 1717,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_SUITCASE = 1718,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD_SUITCASE = 1719,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP_SUITCASE = 1720,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE_SUITCASE = 1721,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_SUITCASE = 1722,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE = 1777,
    
    /**
     * 
     */
    ACT_HL2MP_WALK = 1778,
    
    /**
     * 
     */
    ACT_HL2MP_RUN = 1779,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH = 1780,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH = 1781,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK = 1782,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD = 1783,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP = 1784,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM = 1786,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_PISTOL = 1787,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_PISTOL = 1788,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_PISTOL = 1789,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_PISTOL = 1790,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_PISTOL = 1791,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_PISTOL = 1792,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD_PISTOL = 1793,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP_PISTOL = 1794,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE_PISTOL = 1795,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_PISTOL = 1796,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_SMG1 = 1797,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_SMG1 = 1798,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_SMG1 = 1799,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_SMG1 = 1800,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_SMG1 = 1801,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_SMG1 = 1802,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD_SMG1 = 1803,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP_SMG1 = 1804,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE_SMG1 = 1805,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_SMG1 = 1806,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_AR2 = 1807,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_AR2 = 1808,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_AR2 = 1809,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_AR2 = 1810,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_AR2 = 1811,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2 = 1812,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD_AR2 = 1813,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP_AR2 = 1814,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE_AR2 = 1815,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_AR2 = 1816,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_SHOTGUN = 1817,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_SHOTGUN = 1818,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_SHOTGUN = 1819,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_SHOTGUN = 1820,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_SHOTGUN = 1821,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN = 1822,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD_SHOTGUN = 1823,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP_SHOTGUN = 1824,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE_SHOTGUN = 1825,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_SHOTGUN = 1826,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_RPG = 1827,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_RPG = 1828,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_RPG = 1829,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_RPG = 1830,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_RPG = 1831,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_RPG = 1832,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD_RPG = 1833,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP_RPG = 1834,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE_RPG = 1835,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_RPG = 1836,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_GRENADE = 1837,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_GRENADE = 1838,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_GRENADE = 1839,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_GRENADE = 1840,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_GRENADE = 1841,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_GRENADE = 1842,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD_GRENADE = 1843,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP_GRENADE = 1844,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE_GRENADE = 1845,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_GRENADE = 1846,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_DUEL = 1847,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_DUEL = 1848,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_DUEL = 1849,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_DUEL = 1850,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_DUEL = 1851,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_DUEL = 1852,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD_DUEL = 1853,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP_DUEL = 1854,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE_DUEL = 1855,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_DUEL = 1856,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_PHYSGUN = 1857,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_PHYSGUN = 1858,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_PHYSGUN = 1859,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_PHYSGUN = 1860,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_PHYSGUN = 1861,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_PHYSGUN = 1862,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD_PHYSGUN = 1863,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP_PHYSGUN = 1864,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE_PHYSGUN = 1865,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_PHYSGUN = 1866,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROSSBOW = 1867,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROSSBOW = 1868,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_CROSSBOW = 1869,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_CROSSBOW = 1870,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_CROSSBOW = 1871,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_CROSSBOW = 1872,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD_CROSSBOW = 1873,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP_CROSSBOW = 1874,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE_CROSSBOW = 1875,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_CROSSBOW = 1876,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_MELEE = 1877,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_MELEE = 1878,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_MELEE = 1879,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_MELEE = 1880,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_MELEE = 1881,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE = 1882,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD_MELEE = 1883,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP_MELEE = 1884,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE_MELEE = 1885,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_MELEE = 1886,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_SLAM = 1887,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_SLAM = 1888,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_SLAM = 1889,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_SLAM = 1890,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_SLAM = 1891,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_SLAM = 1892,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD_SLAM = 1893,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP_SLAM = 1894,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE_SLAM = 1895,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_SLAM = 1896,
    
    /**
     * 
     */
    ACT_VM_CRAWL = 1897,
    
    /**
     * 
     */
    ACT_VM_CRAWL_EMPTY = 1898,
    
    /**
     * 
     */
    ACT_VM_HOLSTER_EMPTY = 1899,
    
    /**
     * 
     */
    ACT_VM_DOWN = 1900,
    
    /**
     * 
     */
    ACT_VM_DOWN_EMPTY = 1901,
    
    /**
     * 
     */
    ACT_VM_READY = 1902,
    
    /**
     * 
     */
    ACT_VM_ISHOOT = 1903,
    
    /**
     * 
     */
    ACT_VM_IIN = 1904,
    
    /**
     * 
     */
    ACT_VM_IIN_EMPTY = 1905,
    
    /**
     * 
     */
    ACT_VM_IIDLE = 1906,
    
    /**
     * 
     */
    ACT_VM_IIDLE_EMPTY = 1907,
    
    /**
     * 
     */
    ACT_VM_IOUT = 1908,
    
    /**
     * 
     */
    ACT_VM_IOUT_EMPTY = 1909,
    
    /**
     * 
     */
    ACT_VM_PULLBACK_HIGH_BAKE = 1910,
    
    /**
     * 
     */
    ACT_VM_HITKILL = 1911,
    
    /**
     * 
     */
    ACT_VM_DEPLOYED_IN = 1912,
    
    /**
     * 
     */
    ACT_VM_DEPLOYED_IDLE = 1913,
    
    /**
     * 
     */
    ACT_VM_DEPLOYED_FIRE = 1914,
    
    /**
     * 
     */
    ACT_VM_DEPLOYED_DRYFIRE = 1915,
    
    /**
     * 
     */
    ACT_VM_DEPLOYED_RELOAD = 1916,
    
    /**
     * 
     */
    ACT_VM_DEPLOYED_RELOAD_EMPTY = 1917,
    
    /**
     * 
     */
    ACT_VM_DEPLOYED_OUT = 1918,
    
    /**
     * 
     */
    ACT_VM_DEPLOYED_IRON_IN = 1919,
    
    /**
     * 
     */
    ACT_VM_DEPLOYED_IRON_IDLE = 1920,
    
    /**
     * 
     */
    ACT_VM_DEPLOYED_IRON_FIRE = 1921,
    
    /**
     * 
     */
    ACT_VM_DEPLOYED_IRON_DRYFIRE = 1922,
    
    /**
     * 
     */
    ACT_VM_DEPLOYED_IRON_OUT = 1923,
    
    /**
     * 
     */
    ACT_VM_DEPLOYED_LIFTED_IN = 1924,
    
    /**
     * 
     */
    ACT_VM_DEPLOYED_LIFTED_IDLE = 1925,
    
    /**
     * 
     */
    ACT_VM_DEPLOYED_LIFTED_OUT = 1926,
    
    /**
     * 
     */
    ACT_VM_RELOADEMPTY = 1927,
    
    /**
     * 
     */
    ACT_VM_IRECOIL1 = 1928,
    
    /**
     * 
     */
    ACT_VM_IRECOIL2 = 1929,
    
    /**
     * 
     */
    ACT_VM_FIREMODE = 1930,
    
    /**
     * 
     */
    ACT_VM_ISHOOT_LAST = 1931,
    
    /**
     * 
     */
    ACT_VM_IFIREMODE = 1932,
    
    /**
     * 
     */
    ACT_VM_DFIREMODE = 1933,
    
    /**
     * 
     */
    ACT_VM_DIFIREMODE = 1934,
    
    /**
     * 
     */
    ACT_VM_SHOOTLAST = 1935,
    
    /**
     * 
     */
    ACT_VM_ISHOOTDRY = 1936,
    
    /**
     * 
     */
    ACT_VM_DRAW_M203 = 1937,
    
    /**
     * 
     */
    ACT_VM_DRAWFULL_M203 = 1938,
    
    /**
     * 
     */
    ACT_VM_READY_M203 = 1939,
    
    /**
     * 
     */
    ACT_VM_IDLE_M203 = 1940,
    
    /**
     * 
     */
    ACT_VM_RELOAD_M203 = 1941,
    
    /**
     * 
     */
    ACT_VM_HOLSTER_M203 = 1942,
    
    /**
     * 
     */
    ACT_VM_HOLSTERFULL_M203 = 1943,
    
    /**
     * 
     */
    ACT_VM_IIN_M203 = 1944,
    
    /**
     * 
     */
    ACT_VM_IIDLE_M203 = 1945,
    
    /**
     * 
     */
    ACT_VM_IOUT_M203 = 1946,
    
    /**
     * 
     */
    ACT_VM_CRAWL_M203 = 1947,
    
    /**
     * 
     */
    ACT_VM_DOWN_M203 = 1948,
    
    /**
     * 
     */
    ACT_VM_ISHOOT_M203 = 1949,
    
    /**
     * 
     */
    ACT_VM_RELOAD_INSERT = 1950,
    
    /**
     * 
     */
    ACT_VM_RELOAD_INSERT_PULL = 1951,
    
    /**
     * 
     */
    ACT_VM_RELOAD_END = 1952,
    
    /**
     * 
     */
    ACT_VM_RELOAD_END_EMPTY = 1953,
    
    /**
     * 
     */
    ACT_VM_RELOAD_INSERT_EMPTY = 1954,
    
    /**
     * 
     */
    ACT_CROSSBOW_HOLSTER_UNLOADED = 1955,
    
    /**
     * 
     */
    ACT_VM_FIRE_TO_EMPTY = 1956,
    
    /**
     * 
     */
    ACT_VM_UNLOAD = 1957,
    
    /**
     * 
     */
    ACT_VM_RELOAD2 = 1958,
    
    /**
     * 
     */
    ACT_GMOD_NOCLIP_LAYER = 1959,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_FIST = 1960,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_FIST = 1961,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_FIST = 1962,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_FIST = 1963,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_FIST = 1964,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_FIST = 1965,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD_FIST = 1966,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP_FIST = 1967,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE_FIST = 1968,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_FIST = 1969,
    
    /**
     * 
     */
    ACT_HL2MP_SIT = 1970,
    
    /**
     * 
     */
    ACT_HL2MP_FIST_BLOCK = 1971,
    
    /**
     * 
     */
    ACT_DRIVE_AIRBOAT = 1972,
    
    /**
     * 
     */
    ACT_DRIVE_JEEP = 1973,
    
    /**
     * 
     */
    ACT_GMOD_SIT_ROLLERCOASTER = 1974,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_KNIFE = 1975,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_KNIFE = 1976,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_KNIFE = 1977,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_KNIFE = 1978,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_KNIFE = 1979,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_KNIFE = 1980,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD_KNIFE = 1981,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP_KNIFE = 1982,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE_KNIFE = 1983,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_KNIFE = 1984,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_PASSIVE = 1985,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_PASSIVE = 1986,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_PASSIVE = 1987,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_PASSIVE = 1988,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_PASSIVE = 1989,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_PASSIVE = 1990,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD_PASSIVE = 1991,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP_PASSIVE = 1992,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_PASSIVE = 1993,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE_PASSIVE = 1994,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_MELEE2 = 1995,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_MELEE2 = 1996,
    
    /**
     * 
     */
    ACT_HL2MP_RUN_MELEE2 = 1997,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_CROUCH_MELEE2 = 1998,
    
    /**
     * 
     */
    ACT_HL2MP_WALK_CROUCH_MELEE2 = 1999,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE2 = 2000,
    
    /**
     * 
     */
    ACT_HL2MP_GESTURE_RELOAD_MELEE2 = 2001,
    
    /**
     * 
     */
    ACT_HL2MP_JUMP_MELEE2 = 2002,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE_MELEE2 = 2003,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_MELEE2 = 2004,
    
    /**
     * 
     */
    ACT_HL2MP_SIT_PISTOL = 2005,
    
    /**
     * 
     */
    ACT_HL2MP_SIT_SHOTGUN = 2006,
    
    /**
     * 
     */
    ACT_HL2MP_SIT_SMG1 = 2007,
    
    /**
     * 
     */
    ACT_HL2MP_SIT_AR2 = 2008,
    
    /**
     * 
     */
    ACT_HL2MP_SIT_PHYSGUN = 2009,
    
    /**
     * 
     */
    ACT_HL2MP_SIT_GRENADE = 2010,
    
    /**
     * 
     */
    ACT_HL2MP_SIT_RPG = 2011,
    
    /**
     * 
     */
    ACT_HL2MP_SIT_CROSSBOW = 2012,
    
    /**
     * 
     */
    ACT_HL2MP_SIT_MELEE = 2013,
    
    /**
     * 
     */
    ACT_HL2MP_SIT_SLAM = 2014,
    
    /**
     * 
     */
    ACT_HL2MP_SIT_FIST = 2015,
    
    /**
     * 
     */
    ACT_GMOD_IN_CHAT = 2019,
    
    /**
     * 
     */
    ACT_GMOD_GESTURE_ITEM_GIVE = 2020,
    
    /**
     * 
     */
    ACT_GMOD_GESTURE_ITEM_DROP = 2021,
    
    /**
     * 
     */
    ACT_GMOD_GESTURE_ITEM_PLACE = 2022,
    
    /**
     * 
     */
    ACT_GMOD_GESTURE_ITEM_THROW = 2023,
    
    /**
     * 
     */
    ACT_GMOD_GESTURE_MELEE_SHOVE_2HAND = 2024,
    
    /**
     * 
     */
    ACT_GMOD_GESTURE_MELEE_SHOVE_1HAND = 2025,
    
    /**
     * 
     */
    ACT_HL2MP_SWIM_IDLE = 2026,
    
    /**
     * 
     */
    ACT_HL2MP_IDLE_COWER = 2027,
    
    /**
     * 
     */
    ACT_GMOD_DEATH = 2028,
    
    /**
     * 
     */
    ACT_DRIVE_POD = 2029,
    
    /**
     * 
     */
    ACT_FLINCH = 2030,
    
    /**
     * 
     */
    ACT_FLINCH_BACK = 2031,
    
    /**
     * 
     */
    ACT_FLINCH_SHOULDER_LEFT = 2032,
    
    /**
     * 
     */
    ACT_FLINCH_SHOULDER_RIGHT = 2033,
    
    /**
     * 
     */
    ACT_HL2MP_SIT_CAMERA = 2034,
    
    /**
     * 
     */
    ACT_HL2MP_SIT_PASSIVE = 2035,
    
    /**
     * 
     */
    ACT_HL2MP_ZOMBIE_SLUMP_ALT_IDLE = 2036,
    
    /**
     * 
     */
    ACT_HL2MP_ZOMBIE_SLUMP_ALT_RISE_FAST = 2037,
    
    /**
     * 
     */
    ACT_HL2MP_ZOMBIE_SLUMP_ALT_RISE_SLOW = 2038,
    
    /**
     * 
     */
    ACT_GMOD_SHOWOFF_STAND_01 = 2039,
    
    /**
     * 
     */
    ACT_GMOD_SHOWOFF_STAND_02 = 2040,
    
    /**
     * 
     */
    ACT_GMOD_SHOWOFF_STAND_03 = 2041,
    
    /**
     * 
     */
    ACT_GMOD_SHOWOFF_STAND_04 = 2042,
    
    /**
     * 
     */
    ACT_GMOD_SHOWOFF_DUCK_01 = 2043,
    
    /**
     * 
     */
    ACT_GMOD_SHOWOFF_DUCK_02 = 2044,
    
    /**
     * The largest activity number
     */
    LAST_SHARED_ACTIVITY = 2045,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum AIMR {
    /**
     * Move is illegal for some reason.
     */
    AIMR_ILLEGAL = -4,
    
    /**
     * Move was blocked by an NPC.
     */
    AIMR_BLOCKED_NPC = -3,
    
    /**
     * Move was blocked by the world.
     */
    AIMR_BLOCKED_WORLD = -2,
    
    /**
     * Move was blocked by an entity.
     */
    AIMR_BLOCKED_ENTITY = -1,
    
    /**
     * Move op was ok.
     */
    AIMR_OK = 0,
    
    /**
     * Locomotion method has changed.
     */
    AIMR_CHANGE_TYPE = 1,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum AMMO {
    /**
     * Forces player to drop the object they are carrying if the object was hit by this ammo type.
     */
    AMMO_FORCE_DROP_IF_CARRIED = 1,
    
    /**
     * Uses <page text="AmmoData">Structures/AmmoData</page>.plydmg of the ammo type as the damage to deal to shot players instead of <page text="Bullet">Structures/Bullet</page>.Damage.
     */
    AMMO_INTERPRET_PLRDAMAGE_AS_DAMAGE_TO_PLAYER = 2,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum ANALOG {
    /**
     * 
     */
    ANALOG_MOUSE_X = 0,
    
    /**
     * 
     */
    ANALOG_MOUSE_Y = 1,
    
    /**
     * 
     */
    ANALOG_MOUSE_WHEEL = 3,
    
    /**
     * 
     */
    ANALOG_JOY_X = 4,
    
    /**
     * 
     */
    ANALOG_JOY_Y = 5,
    
    /**
     * 
     */
    ANALOG_JOY_Z = 6,
    
    /**
     * 
     */
    ANALOG_JOY_R = 7,
    
    /**
     * 
     */
    ANALOG_JOY_U = 8,
    
    /**
     * 
     */
    ANALOG_JOY_V = 9,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum BLEND {
    /**
     * 
     */
    BLEND_ZERO = 0,
    
    /**
     * 
     */
    BLEND_ONE = 1,
    
    /**
     * 
     */
    BLEND_DST_COLOR = 2,
    
    /**
     * 
     */
    BLEND_ONE_MINUS_DST_COLOR = 3,
    
    /**
     * 
     */
    BLEND_SRC_ALPHA = 4,
    
    /**
     * 
     */
    BLEND_ONE_MINUS_SRC_ALPHA = 5,
    
    /**
     * 
     */
    BLEND_DST_ALPHA = 6,
    
    /**
     * 
     */
    BLEND_ONE_MINUS_DST_ALPHA = 7,
    
    /**
     * 
     */
    BLEND_SRC_ALPHA_SATURATE = 8,
    
    /**
     * 
     */
    BLEND_SRC_COLOR = 9,
    
    /**
     * 
     */
    BLEND_ONE_MINUS_SRC_COLOR = 10,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum BLENDFUNC {
    /**
     * 
     */
    BLENDFUNC_ADD = 0,
    
    /**
     * 
     */
    BLENDFUNC_SUBTRACT = 1,
    
    /**
     * 
     */
    BLENDFUNC_REVERSE_SUBTRACT = 2,
    
    /**
     * 
     */
    BLENDFUNC_MIN = 3,
    
    /**
     * 
     */
    BLENDFUNC_MAX = 4,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum BLOOD_COLOR {
    /**
     * No blood
     */
    DONT_BLEED = -1,
    
    /**
     * Normal red blood
     */
    BLOOD_COLOR_RED = 0,
    
    /**
     * Yellow blood
     */
    BLOOD_COLOR_YELLOW = 1,
    
    /**
     * Green-red blood
     */
    BLOOD_COLOR_GREEN = 2,
    
    /**
     * Sparks
     */
    BLOOD_COLOR_MECH = 3,
    
    /**
     * Yellow blood
     */
    BLOOD_COLOR_ANTLION = 4,
    
    /**
     * Green-red blood
     */
    BLOOD_COLOR_ZOMBIE = 5,
    
    /**
     * Bright green blood
     */
    BLOOD_COLOR_ANTLION_WORKER = 6,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum BONE {
    /**
     * Bone is physically simulated when physics are active
     */
    BONE_PHYSICALLY_SIMULATED = 1,
    
    /**
     * Procedural when physics is active
     */
    BONE_PHYSICS_PROCEDURAL = 2,
    
    /**
     * Bone is always procedurally animated
     */
    BONE_ALWAYS_PROCEDURAL = 4,
    
    /**
     * Bone aligns to the screen, not constrained in motion.
     */
    BONE_SCREEN_ALIGN_SPHERE = 8,
    
    /**
     * Bone aligns to the screen, constrained by it's own axis.
     */
    BONE_SCREEN_ALIGN_CYLINDER = 16,
    
    /**
     * 
     */
    BONE_CALCULATE_MASK = 31,
    
    /**
     * A hitbox is attached to this bone
     */
    BONE_USED_BY_HITBOX = 256,
    
    /**
     * An attachment is attached to this bone
     */
    BONE_USED_BY_ATTACHMENT = 512,
    
    /**
     * 
     */
    BONE_USED_BY_VERTEX_LOD0 = 1024,
    
    /**
     * 
     */
    BONE_USED_BY_VERTEX_LOD1 = 2048,
    
    /**
     * 
     */
    BONE_USED_BY_VERTEX_LOD2 = 4096,
    
    /**
     * 
     */
    BONE_USED_BY_VERTEX_LOD3 = 8192,
    
    /**
     * 
     */
    BONE_USED_BY_VERTEX_LOD4 = 16384,
    
    /**
     * 
     */
    BONE_USED_BY_VERTEX_LOD5 = 32768,
    
    /**
     * 
     */
    BONE_USED_BY_VERTEX_LOD6 = 65536,
    
    /**
     * 
     */
    BONE_USED_BY_VERTEX_LOD7 = 131072,
    
    /**
     * 
     */
    BONE_USED_BY_VERTEX_MASK = 261120,
    
    /**
     * Bone is available for bone merge to occur against it
     */
    BONE_USED_BY_BONE_MERGE = 262144,
    
    /**
     * Is this bone used by anything?
     * 
     * ( If any BONE_USED_BY_* flags are true )
     */
    BONE_USED_BY_ANYTHING = 524032,
    
    /**
     * 
     */
    BONE_USED_MASK = 524032,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum BOUNDS {
    /**
     * Sets the bounds in relation to the entity's collision bounds.
     */
    BOUNDS_COLLISION = 0,
    
    /**
     * Sets the bounds to fit all hitboxes of the entity's model.
     */
    BOUNDS_HITBOXES = 2,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum BOX {
    /**
     * Place the light from the front
     */
    BOX_FRONT = 0,
    
    /**
     * Place the light behind
     */
    BOX_BACK = 1,
    
    /**
     * Place the light to the right
     */
    BOX_RIGHT = 2,
    
    /**
     * Place the light to the left
     */
    BOX_LEFT = 3,
    
    /**
     * Place the light to the top
     */
    BOX_TOP = 4,
    
    /**
     * Place the light to the bottom
     */
    BOX_BOTTOM = 5,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum BUTTON_CODE {
    /**
     * 
     */
    BUTTON_CODE_INVALID = -1,
    
    /**
     * 
     */
    BUTTON_CODE_NONE = 0,
    
    /**
     * 
     */
    BUTTON_CODE_LAST = 171,
    
    /**
     * 
     */
    BUTTON_CODE_COUNT = 172,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum CAP {
    /**
     * When hit by an explosion, we'll simply block it instead of spilling it to entities behind us, the sv_robust_explosions cvar can also enable this globally when set to 0
     */
    CAP_SIMPLE_RADIUS_DAMAGE = -2147483648,
    
    /**
     * Walk/Run
     */
    CAP_MOVE_GROUND = 1,
    
    /**
     * Jump/Leap
     */
    CAP_MOVE_JUMP = 2,
    
    /**
     * Can fly  move all around
     */
    CAP_MOVE_FLY = 4,
    
    /**
     * climb ladders
     */
    CAP_MOVE_CLIMB = 8,
    
    /**
     * 
     */
    CAP_MOVE_SWIM = 16,
    
    /**
     * 
     */
    CAP_MOVE_CRAWL = 32,
    
    /**
     * Tries to shoot weapon while moving
     */
    CAP_MOVE_SHOOT = 64,
    
    /**
     * 
     */
    CAP_SKIP_NAV_GROUND_CHECK = 128,
    
    /**
     * Open doors/push buttons/pull levers
     */
    CAP_USE = 256,
    
    /**
     * Can trigger auto doors
     */
    CAP_AUTO_DOORS = 1024,
    
    /**
     * Can open manual doors
     */
    CAP_OPEN_DOORS = 2048,
    
    /**
     * Can turn head  always bone controller 0
     */
    CAP_TURN_HEAD = 4096,
    
    /**
     * 
     */
    CAP_WEAPON_RANGE_ATTACK1 = 8192,
    
    /**
     * 
     */
    CAP_WEAPON_RANGE_ATTACK2 = 16384,
    
    /**
     * 
     */
    CAP_WEAPON_MELEE_ATTACK1 = 32768,
    
    /**
     * 
     */
    CAP_WEAPON_MELEE_ATTACK2 = 65536,
    
    /**
     * 
     */
    CAP_INNATE_RANGE_ATTACK1 = 131072,
    
    /**
     * 
     */
    CAP_INNATE_RANGE_ATTACK2 = 262144,
    
    /**
     * 
     */
    CAP_INNATE_MELEE_ATTACK1 = 524288,
    
    /**
     * 
     */
    CAP_INNATE_MELEE_ATTACK2 = 1048576,
    
    /**
     * 
     */
    CAP_USE_WEAPONS = 2097152,
    
    /**
     * 
     */
    CAP_USE_SHOT_REGULATOR = 16777216,
    
    /**
     * Has animated eyes/face
     */
    CAP_ANIMATEDFACE = 8388608,
    
    /**
     * Don't take damage from npc's that are D_LI
     */
    CAP_FRIENDLY_DMG_IMMUNE = 33554432,
    
    /**
     * Can form squads
     */
    CAP_SQUAD = 67108864,
    
    /**
     * Cover and Reload ducking
     */
    CAP_DUCK = 134217728,
    
    /**
     * Don't hit players
     */
    CAP_NO_HIT_PLAYER = 268435456,
    
    /**
     * Use arms to aim gun, not just body
     */
    CAP_AIM_GUN = 536870912,
    
    /**
     * 
     */
    CAP_NO_HIT_SQUADMATES = 1073741824,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum CHAN {
    /**
     * Used when playing sounds through console commands.
     */
    CHAN_REPLACE = -1,
    
    /**
     * Automatic channel
     */
    CHAN_AUTO = 0,
    
    /**
     * Channel for weapon sounds
     */
    CHAN_WEAPON = 1,
    
    /**
     * Channel for NPC voices
     */
    CHAN_VOICE = 2,
    
    /**
     * Channel for items ( Health kits, etc )
     */
    CHAN_ITEM = 3,
    
    /**
     * Clothing, ragdoll impacts, footsteps, knocking/pounding/punching etc.
     */
    CHAN_BODY = 4,
    
    /**
     * Stream channel from the static or dynamic area
     */
    CHAN_STREAM = 5,
    
    /**
     * A constant/background sound that doesn't require any reaction.<br/><br/>
     * **This channel allows same sounds files to play multiple times without cutting out.**
     */
    CHAN_STATIC = 6,
    
    /**
     * TF2s Announcer dialogue channel
     */
    CHAN_VOICE2 = 7,
    
    /**
     * Channels 8-135 (128 channels) are allocated for player voice chat<br/><br/>
     * **This channel allows same sounds files to play multiple times without cutting out.**
     */
    CHAN_VOICE_BASE = 8,
    
    /**
     * Channels from this and onwards are allocated to game code
     */
    CHAN_USER_BASE = 136,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum CLASS {
    /**
     * None - default class for entities.
     */
    CLASS_NONE = 0,
    
    /**
     * Players.
     */
    CLASS_PLAYER = 1,
    
    /**
     * HL2 player allies - monster_barney, npc_citizen, hacked npc_manhack, and friendly npc_turret_floor.
     */
    CLASS_PLAYER_ALLY = 2,
    
    /**
     * HL2 vital player allies - npc_magnusson, npc_gman, npc_fisherman, npc_eli, npc_barney, npc_kleiner, npc_mossman, npc_alyx, npc_monk, npc_dog, and npc_vortigaunt at the end of EP2 (controlled by "MakeGameEndAlly" input).
     */
    CLASS_PLAYER_ALLY_VITAL = 3,
    
    /**
     * HL2 antlions - npc_antlion, npc_antlionguard, and npc_ichthyosaur.
     */
    CLASS_ANTLION = 4,
    
    /**
     * HL2 barnacles - npc_barnacle.
     */
    CLASS_BARNACLE = 5,
    
    /**
     * HL2 bullseyes - npc_bullseye.
     */
    CLASS_BULLSEYE = 6,
    
    /**
     * HL2 passive/non-rebel citizens - npc_citizen in the beginning of HL2.
     */
    CLASS_CITIZEN_PASSIVE = 7,
    
    /**
     * HL2 unused.
     */
    CLASS_CITIZEN_REBEL = 8,
    
    /**
     * HL2 combine troops - npc_combine, npc_advisor, apc_missile, npc_apcdriver, hostile npc_turret_floor, hostile npc_rollermine, npc_turret_ground when active, npc_turret_ceiling when active, and npc_strider when active (not being carried by the gunship).
     */
    CLASS_COMBINE = 9,
    
    /**
     * HL2 combine aircrafts - npc_combinegunship, npc_combinedropship, and npc_helicopter.
     */
    CLASS_COMBINE_GUNSHIP = 10,
    
    /**
     * HL2 unused.
     */
    CLASS_CONSCRIPT = 11,
    
    /**
     * HL2 headcrabs - visible npc_headcrab.
     */
    CLASS_HEADCRAB = 12,
    
    /**
     * HL2 manhacks - hostile npc_manhack not held by the gravity gun.
     */
    CLASS_MANHACK = 13,
    
    /**
     * HL2 metro police - npc_metropolice and npc_vehicledriver.
     */
    CLASS_METROPOLICE = 14,
    
    /**
     * HL2 combine military objects - func_guntarget, npc_spotlight, and active npc_combine_camera.
     */
    CLASS_MILITARY = 15,
    
    /**
     * HL2 combine scanners - npc_cscanner and npc_clawscanner.
     */
    CLASS_SCANNER = 16,
    
    /**
     * HL2 stalkers - npc_stalker.
     */
    CLASS_STALKER = 17,
    
    /**
     * HL2 vortigaunts - npc_vortigaunt before the end of EP2 (controlled by "MakeGameEndAlly" input).
     */
    CLASS_VORTIGAUNT = 18,
    
    /**
     * HL2 zombies - unslumped npc_zombie, npc_poisonzombie, npc_fastzombie, npc_fastzombie_torso, and npc_zombine.
     */
    CLASS_ZOMBIE = 19,
    
    /**
     * HL2 snipers - npc_sniper and proto_sniper.
     */
    CLASS_PROTOSNIPER = 20,
    
    /**
     * HL2 missiles - rpg_missile, apc_missile, and grenade_pathfollower.
     */
    CLASS_MISSILE = 21,
    
    /**
     * HL2 flares - env_flare.
     */
    CLASS_FLARE = 22,
    
    /**
     * HL2 animals - npc_crow, npc_seagull, and npc_pigeon.
     */
    CLASS_EARTH_FAUNA = 23,
    
    /**
     * HL2 friendly rollermines - hacked npc_rollermine.
     */
    CLASS_HACKED_ROLLERMINE = 24,
    
    /**
     * HL2 hunters - npc_hunter.
     */
    CLASS_COMBINE_HUNTER = 25,
    
    /**
     * HL:S turrets - monster_turret, monster_miniturret, monster_sentry.
     */
    CLASS_MACHINE = 26,
    
    /**
     * HL:S friendly humans - monster_scientist.
     */
    CLASS_HUMAN_PASSIVE = 27,
    
    /**
     * HL:S human military - monster_human_grunt and monster_apache.
     */
    CLASS_HUMAN_MILITARY = 28,
    
    /**
     * HL:S alien military - monster_alien_controller, monster_vortigaunt, monster_alien_grunt, monster_nihilanth, and monster_snark if it has an enemy of class CLASS_PLAYER, CLASS_HUMAN_PASSIVE, or CLASS_HUMAN_MILITARY.
     */
    CLASS_ALIEN_MILITARY = 29,
    
    /**
     * HL:S monsters - monster_tentacle, monster_barnacle, monster_zombie, monster_gargantua, monster_houndeye, monster_ichthyosaur, and monster_bigmomma.
     */
    CLASS_ALIEN_MONSTER = 30,
    
    /**
     * HL:S headcrabs - monster_headcrab.
     */
    CLASS_ALIEN_PREY = 31,
    
    /**
     * HL:S alien predators - monster_bullsquid, xen_tree, and xen_hull.
     */
    CLASS_ALIEN_PREDATOR = 32,
    
    /**
     * HL:S insects - montser_roach and monster_leech.
     */
    CLASS_INSECT = 33,
    
    /**
     * HL:S player bioweapons - hornet fired by a player.
     */
    CLASS_PLAYER_BIOWEAPON = 34,
    
    /**
     * HL:S enemy bioweapons - hornet fired by anyone but a player, or monster_snark with no enemy or an enemy without the class CLASS_PLAYER, CLASS_HUMAN_PASSIVE, or CLASS_HUMAN_MILITARY.
     */
    CLASS_ALIEN_BIOWEAPON = 35,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum COLLISION_GROUP {
    /**
     * Normal
     */
    COLLISION_GROUP_NONE = 0,
    
    /**
     * Collides with nothing but world and static stuff
     */
    COLLISION_GROUP_DEBRIS = 1,
    
    /**
     * Same as debris, but hits triggers. Useful for an item that can be shot, but doesn't collide.
     */
    COLLISION_GROUP_DEBRIS_TRIGGER = 2,
    
    /**
     * Collides with everything except other interactive debris or debris
     */
    COLLISION_GROUP_INTERACTIVE_DEBRIS = 3,
    
    /**
     * Collides with everything except interactive debris or debris
     */
    COLLISION_GROUP_INTERACTIVE = 4,
    
    /**
     * 
     */
    COLLISION_GROUP_PLAYER = 5,
    
    /**
     * NPCs can see straight through an Entity with this applied.
     */
    COLLISION_GROUP_BREAKABLE_GLASS = 6,
    
    /**
     * 
     */
    COLLISION_GROUP_VEHICLE = 7,
    
    /**
     * For HL2, same as Collision_Group_Player, for TF2, this filters out other players and CBaseObjects
     */
    COLLISION_GROUP_PLAYER_MOVEMENT = 8,
    
    /**
     * Generic NPC group
     */
    COLLISION_GROUP_NPC = 9,
    
    /**
     * Doesn't collide with anything, no traces
     */
    COLLISION_GROUP_IN_VEHICLE = 10,
    
    /**
     * Doesn't collide with players and vehicles
     */
    COLLISION_GROUP_WEAPON = 11,
    
    /**
     * Only collides with vehicles
     */
    COLLISION_GROUP_VEHICLE_CLIP = 12,
    
    /**
     * 
     */
    COLLISION_GROUP_PROJECTILE = 13,
    
    /**
     * Blocks entities not permitted to get near moving doors
     */
    COLLISION_GROUP_DOOR_BLOCKER = 14,
    
    /**
     * Lets the Player through, nothing else.
     */
    COLLISION_GROUP_PASSABLE_DOOR = 15,
    
    /**
     * Things that are dissolving are in this group
     */
    COLLISION_GROUP_DISSOLVING = 16,
    
    /**
     * Nonsolid on client and server, pushaway in player code
     */
    COLLISION_GROUP_PUSHAWAY = 17,
    
    /**
     * Used so NPCs in scripts ignore the player
     */
    COLLISION_GROUP_NPC_ACTOR = 18,
    
    /**
     * Used for NPCs in scripts that should not collide with each other
     */
    COLLISION_GROUP_NPC_SCRIPTED = 19,
    
    /**
     * Doesn't collide with players/props
     */
    COLLISION_GROUP_WORLD = 20,
    
    /**
     * Amount of COLLISION_GROUP_ enumerations
     */
    LAST_SHARED_COLLISION_GROUP = 21,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum COND {
    /**
     * 
     */
    CONDBEHIND_ENEMY = 29,
    
    /**
     * 
     */
    CONDBETTER_WEAPON_AVAILABLE = 46,
    
    /**
     * 
     */
    CONDCAN_MELEE_ATTACK1 = 23,
    
    /**
     * 
     */
    CONDCAN_MELEE_ATTACK2 = 24,
    
    /**
     * 
     */
    CONDCAN_RANGE_ATTACK1 = 21,
    
    /**
     * 
     */
    CONDCAN_RANGE_ATTACK2 = 22,
    
    /**
     * 
     */
    CONDENEMY_DEAD = 30,
    
    /**
     * 
     */
    CONDENEMY_FACING_ME = 28,
    
    /**
     * 
     */
    CONDENEMY_OCCLUDED = 13,
    
    /**
     * 
     */
    CONDENEMY_TOO_FAR = 27,
    
    /**
     * 
     */
    CONDENEMY_UNREACHABLE = 31,
    
    /**
     * 
     */
    CONDENEMY_WENT_NULL = 12,
    
    /**
     * 
     */
    CONDFLOATING_OFF_GROUND = 61,
    
    /**
     * 
     */
    CONDGIVE_WAY = 48,
    
    /**
     * 
     */
    CONDHAVE_ENEMY_LOS = 15,
    
    /**
     * 
     */
    CONDHAVE_TARGET_LOS = 16,
    
    /**
     * 
     */
    CONDHEALTH_ITEM_AVAILABLE = 47,
    
    /**
     * 
     */
    CONDHEAR_BUGBAIT = 52,
    
    /**
     * 
     */
    CONDHEAR_BULLET_IMPACT = 56,
    
    /**
     * 
     */
    CONDHEAR_COMBAT = 53,
    
    /**
     * 
     */
    CONDHEAR_DANGER = 50,
    
    /**
     * 
     */
    CONDHEAR_MOVE_AWAY = 58,
    
    /**
     * 
     */
    CONDHEAR_PHYSICS_DANGER = 57,
    
    /**
     * 
     */
    CONDHEAR_PLAYER = 55,
    
    /**
     * 
     */
    CONDHEAR_SPOOKY = 59,
    
    /**
     * 
     */
    CONDHEAR_THUMPER = 51,
    
    /**
     * 
     */
    CONDHEAR_WORLD = 54,
    
    /**
     * 
     */
    CONDHEAVY_DAMAGE = 18,
    
    /**
     * 
     */
    CONDIDLE_INTERRUPT = 2,
    
    /**
     * 
     */
    CONDIN_PVS = 1,
    
    /**
     * 
     */
    CONDLIGHT_DAMAGE = 17,
    
    /**
     * 
     */
    CONDLOST_ENEMY = 11,
    
    /**
     * 
     */
    CONDLOST_PLAYER = 33,
    
    /**
     * 
     */
    CONDLOW_PRIMARY_AMMO = 3,
    
    /**
     * 
     */
    CONDMOBBED_BY_ENEMIES = 62,
    
    /**
     * 
     */
    CONDNEW_ENEMY = 26,
    
    /**
     * 
     */
    CONDNO_CUSTOM_INTERRUPTS = 70,
    
    /**
     * 
     */
    CONDNO_HEAR_DANGER = 60,
    
    /**
     * 
     */
    CONDNO_PRIMARY_AMMO = 4,
    
    /**
     * 
     */
    CONDNO_SECONDARY_AMMO = 5,
    
    /**
     * 
     */
    CONDNO_WEAPON = 6,
    
    /**
     * No additional conditions are being played
     */
    CONDNONE = 0,
    
    /**
     * 
     */
    CONDNOT_FACING_ATTACK = 40,
    
    /**
     * Freezes NPC movement
     */
    CONDNPC_FREEZE = 67,
    
    /**
     * Unfreezes NPC movement
     */
    CONDNPC_UNFREEZE = 68,
    
    /**
     * 
     */
    CONDPHYSICS_DAMAGE = 19,
    
    /**
     * 
     */
    CONDPLAYER_ADDED_TO_SQUAD = 64,
    
    /**
     * 
     */
    CONDPLAYER_PUSHING = 66,
    
    /**
     * 
     */
    CONDPLAYER_REMOVED_FROM_SQUAD = 65,
    
    /**
     * 
     */
    CONDPROVOKED = 25,
    
    /**
     * 
     */
    CONDRECEIVED_ORDERS = 63,
    
    /**
     * 
     */
    CONDREPEATED_DAMAGE = 20,
    
    /**
     * 
     */
    CONDSCHEDULE_DONE = 36,
    
    /**
     * 
     */
    CONDSEE_DISLIKE = 9,
    
    /**
     * 
     */
    CONDSEE_ENEMY = 10,
    
    /**
     * 
     */
    CONDSEE_FEAR = 8,
    
    /**
     * 
     */
    CONDSEE_HATE = 7,
    
    /**
     * 
     */
    CONDSEE_NEMESIS = 34,
    
    /**
     * 
     */
    CONDSEE_PLAYER = 32,
    
    /**
     * 
     */
    CONDSMELL = 37,
    
    /**
     * 
     */
    CONDTALKER_RESPOND_TO_QUESTION = 69,
    
    /**
     * 
     */
    CONDTARGET_OCCLUDED = 14,
    
    /**
     * 
     */
    CONDTASK_FAILED = 35,
    
    /**
     * 
     */
    CONDTOO_CLOSE_TO_ATTACK = 38,
    
    /**
     * 
     */
    CONDTOO_FAR_TO_ATTACK = 39,
    
    /**
     * 
     */
    CONDWAY_CLEAR = 49,
    
    /**
     * 
     */
    CONDWEAPON_BLOCKED_BY_FRIEND = 42,
    
    /**
     * 
     */
    CONDWEAPON_HAS_LOS = 41,
    
    /**
     * 
     */
    CONDWEAPON_PLAYER_IN_SPREAD = 43,
    
    /**
     * 
     */
    CONDWEAPON_PLAYER_NEAR_TARGET = 44,
    
    /**
     * 
     */
    CONDWEAPON_SIGHT_OCCLUDED = 45,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum CONTENTS {
    /**
     * Things that are not solid
     */
    CONTENTS_EMPTY = 0,
    
    /**
     * Things that are solid
     */
    CONTENTS_SOLID = 1,
    
    /**
     * Glass
     */
    CONTENTS_WINDOW = 2,
    
    /**
     * 
     */
    CONTENTS_AUX = 4,
    
    /**
     * Bullets go through, solids don't
     */
    CONTENTS_GRATE = 8,
    
    /**
     * 
     */
    CONTENTS_SLIME = 16,
    
    /**
     * Hits world but not skybox
     */
    CONTENTS_WATER = 32,
    
    /**
     * Things that block line of sight
     */
    CONTENTS_BLOCKLOS = 64,
    
    /**
     * Things that block light
     */
    CONTENTS_OPAQUE = 128,
    
    /**
     * 
     */
    CONTENTS_TESTFOGVOLUME = 256,
    
    /**
     * 
     */
    CONTENTS_TEAM4 = 512,
    
    /**
     * 
     */
    CONTENTS_TEAM3 = 1024,
    
    /**
     * 
     */
    CONTENTS_TEAM1 = 2048,
    
    /**
     * 
     */
    CONTENTS_TEAM2 = 4096,
    
    /**
     * 
     */
    CONTENTS_IGNORE_NODRAW_OPAQUE = 8192,
    
    /**
     * 
     */
    CONTENTS_MOVEABLE = 16384,
    
    /**
     * 
     */
    CONTENTS_AREAPORTAL = 32768,
    
    /**
     * 
     */
    CONTENTS_PLAYERCLIP = 65536,
    
    /**
     * 
     */
    CONTENTS_MONSTERCLIP = 131072,
    
    /**
     * 
     */
    CONTENTS_CURRENT_0 = 262144,
    
    /**
     * 
     */
    CONTENTS_CURRENT_180 = 1048576,
    
    /**
     * 
     */
    CONTENTS_CURRENT_270 = 2097152,
    
    /**
     * 
     */
    CONTENTS_CURRENT_90 = 524288,
    
    /**
     * 
     */
    CONTENTS_CURRENT_DOWN = 8388608,
    
    /**
     * 
     */
    CONTENTS_CURRENT_UP = 4194304,
    
    /**
     * 
     */
    CONTENTS_DEBRIS = 67108864,
    
    /**
     * 
     */
    CONTENTS_DETAIL = 134217728,
    
    /**
     * Hitbox
     */
    CONTENTS_HITBOX = 1073741824,
    
    /**
     * Ladder
     */
    CONTENTS_LADDER = 536870912,
    
    /**
     * NPCs
     */
    CONTENTS_MONSTER = 33554432,
    
    /**
     * 
     */
    CONTENTS_ORIGIN = 16777216,
    
    /**
     * Hits world but not skybox
     */
    CONTENTS_TRANSLUCENT = 268435456,
    
    /**
     * Last visible contents enumeration
     */
    LAST_VISIBLE_CONTENTS = 128,
    
    /**
     * Sum of all the visible contents enumerations
     */
    ALL_VISIBLE_CONTENTS = 255,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum CREATERENDERTARGETFLAGS {
    /**
     * Makes this render target an HDR render target if the current system supports HDR.
     */
    CREATERENDERTARGETFLAGS_HDR = 1,
    
    /**
     * Does nothing.
     */
    CREATERENDERTARGETFLAGS_AUTOMIPMAP = 2,
    
    /**
     * Does nothing
     */
    CREATERENDERTARGETFLAGS_UNFILTERABLE_OK = 4,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum CT {
    /**
     * Default citizen
     */
    CT_DEFAULT = 0,
    
    /**
     * Default citizen(?)
     */
    CT_DOWNTRODDEN = 1,
    
    /**
     * Refugee
     */
    CT_REFUGEE = 2,
    
    /**
     * Rebel
     */
    CT_REBEL = 3,
    
    /**
     * Odessa?
     */
    CT_UNIQUE = 4,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum D {
    /**
     * Error
     */
    D_ER = 0,
    
    /**
     * Hate
     */
    D_HT = 1,
    
    /**
     * Frightened / Fear
     */
    D_FR = 2,
    
    /**
     * Like
     */
    D_LI = 3,
    
    /**
     * Neutral
     */
    D_NU = 4,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum DISPSURF {
    /**
     * 
     */
    DISPSURF_SURFACE = 1,
    
    /**
     * 
     */
    DISPSURF_WALKABLE = 2,
    
    /**
     * 
     */
    DISPSURF_BUILDABLE = 4,
    
    /**
     * 
     */
    DISPSURF_SURFPROP1 = 8,
    
    /**
     * 
     */
    DISPSURF_SURFPROP2 = 16,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum DMG {
    /**
     * Generic damage (used by weapon_fists)
     */
    DMG_GENERIC = 0,
    
    /**
     * Caused by physics interaction and ignored by airboat drivers. This is used by the Rollermine and an unused animation attack called 'Fireattack' by the Antlion Guard [ACT_RANGE_ATTACK1](https://wiki.facepunch.com/gmod/Enums/ACT)
     */
    DMG_CRUSH = 1,
    
    /**
     * Bullet damage from Ceiling Turrets, the Strider, Turrets and most guns.
     */
    DMG_BULLET = 2,
    
    /**
     * Used by the Stunstick, Manhacks, Antlions, Antlion Guards, Headcrabs, Fast Headcrabs, all Zombies types, Hunter, and potentially other NPCs attacks
     */
    DMG_SLASH = 4,
    
    /**
     * Damage from fire
     */
    DMG_BURN = 8,
    
    /**
     * Hit by a vehicle (This will need to be set for passengers of some vehicle to receive damage)
     */
    DMG_VEHICLE = 16,
    
    /**
     * Fall damage
     */
    DMG_FALL = 32,
    
    /**
     * Explosion damage like grenades, helicopter bombs, combine mines, Will be ignored by most vehicle passengers.
     */
    DMG_BLAST = 64,
    
    /**
     * Blunt attacks such as from the Crowbar, Antlion Guard & Hunter
     */
    DMG_CLUB = 128,
    
    /**
     * Electrical damage, shows smoke at the damage position and its used by Stalkers & Vortigaunts
     */
    DMG_SHOCK = 256,
    
    /**
     * Sonic damage, used by the Gargantua and Houndeye NPCs
     */
    DMG_SONIC = 512,
    
    /**
     * Laser damage
     */
    DMG_ENERGYBEAM = 1024,
    
    /**
     * Prevent a physics force.
     */
    DMG_PREVENT_PHYSICS_FORCE = 2048,
    
    /**
     * Crossbow damage, never creates gibs.
     */
    DMG_NEVERGIB = 4096,
    
    /**
     * Always create gibs
     */
    DMG_ALWAYSGIB = 8192,
    
    /**
     * Drown damage
     */
    DMG_DROWN = 16384,
    
    /**
     * Same as DMG_POISON
     */
    DMG_PARALYZE = 32768,
    
    /**
     * Neurotoxin damage
     */
    DMG_NERVEGAS = 65536,
    
    /**
     * Poison damage used by Antlion Workers & Poison Headcrabs.
     */
    DMG_POISON = 131072,
    
    /**
     * Radiation damage & it will be ignored by most vehicle passengers
     */
    DMG_RADIATION = 262144,
    
    /**
     * Damage applied to the player to restore health after drowning
     */
    DMG_DROWNRECOVER = 524288,
    
    /**
     * Toxic chemical or acid burn damage used by the Antlion Workers
     */
    DMG_ACID = 1048576,
    
    /**
     * In an oven
     */
    DMG_SLOWBURN = 2097152,
    
    /**
     * Don't create a ragdoll on death
     */
    DMG_REMOVENORAGDOLL = 4194304,
    
    /**
     * Damage done by the gravity gun.
     */
    DMG_PHYSGUN = 8388608,
    
    /**
     * Plasma damage
     */
    DMG_PLASMA = 16777216,
    
    /**
     * Airboat gun damage
     */
    DMG_AIRBOAT = 33554432,
    
    /**
     * Forces the entity to dissolve on death. This is what the combine ball uses when it hits a target.
     */
    DMG_DISSOLVE = 67108864,
    
    /**
     * This won't hurt the player underwater
     */
    DMG_BLAST_SURFACE = 134217728,
    
    /**
     * Direct damage to the entity that does not go through any damage value modifications
     */
    DMG_DIRECT = 268435456,
    
    /**
     * The pellets fired from a shotgun
     */
    DMG_BUCKSHOT = 536870912,
    
    /**
     * Damage from SniperRound/SniperPenetratedRound ammo types
     */
    DMG_SNIPER = 1073741824,
    
    /**
     * Damage from npc_missiledefense, npc_combinegunship, or monster_mortar
     */
    DMG_MISSILEDEFENSE = 2147483648,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum DOCK {
    /**
     * Don't dock
     */
    NODOCK = 0,
    
    /**
     * Fill parent
     */
    FILL = 1,
    
    /**
     * Dock to the left
     */
    LEFT = 2,
    
    /**
     * Dock to the right
     */
    RIGHT = 3,
    
    /**
     * Dock to the top
     */
    TOP = 4,
    
    /**
     * Dock to the bottom
     */
    BOTTOM = 5,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum DOF {
    /**
     * 
     */
    DOF_OFFSET = 256,
    
    /**
     * 
     */
    DOF_SPACING = 512,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum EF {
    /**
     * Performs bone merge on client side
     */
    EF_BONEMERGE = 1,
    
    /**
     * For use with EF_BONEMERGE. If this is set, then it places this ents origin at its parent and uses the parent's bbox + the max extents of the aiment. Otherwise, it sets up the parent's bones every frame to figure out where to place the aiment, which is inefficient because it'll setup the parent's bones even if the parent is not in the PVS.
     */
    EF_BONEMERGE_FASTCULL = 128,
    
    /**
     * DLIGHT centered at entity origin
     */
    EF_BRIGHTLIGHT = 2,
    
    /**
     * Player flashlight
     */
    EF_DIMLIGHT = 4,
    
    /**
     * Don't interpolate the next frame
     */
    EF_NOINTERP = 8,
    
    /**
     * Disables shadow
     */
    EF_NOSHADOW = 16,
    
    /**
     * Prevents the entity from drawing and networking.
     */
    EF_NODRAW = 32,
    
    /**
     * Don't receive shadows
     */
    EF_NORECEIVESHADOW = 64,
    
    /**
     * Makes the entity blink
     */
    EF_ITEM_BLINK = 256,
    
    /**
     * Always assume that the parent entity is animating.
     */
    EF_PARENT_ANIMATES = 512,
    
    /**
     * Internal flag that is set by [Entity:FollowBone](https://wiki.facepunch.com/gmod/Entity:FollowBone).
     */
    EF_FOLLOWBONE = 1024,
    
    /**
     * Makes the entity not accept being lit by projected textures, including the player's flashlight.
     */
    EF_NOFLASHLIGHT = 8192,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum EFL {
    /**
     * This entity is marked for death -- This allows the game to actually delete ents at a safe time.
     * 
     * **Warning:**
     * >You should never set this flag manually.
     * 
     */
    EFL_KILLME = 1,
    
    /**
     * Entity is dormant, no updates to client
     */
    EFL_DORMANT = 2,
    
    /**
     * Lets us know when the noclip command is active
     */
    EFL_NOCLIP_ACTIVE = 4,
    
    /**
     * Set while a model is setting up its bones
     */
    EFL_SETTING_UP_BONES = 8,
    
    /**
     * This is a special entity that should not be deleted when we respawn entities via [game.CleanUpMap](https://wiki.facepunch.com/gmod/game.CleanUpMap).
     */
    EFL_KEEP_ON_RECREATE_ENTITIES = 16,
    
    /**
     * One of the child entities is a player
     */
    EFL_HAS_PLAYER_CHILD = 16,
    
    /**
     * (Client only) need shadow manager to update the shadow
     */
    EFL_DIRTY_SHADOWUPDATE = 32,
    
    /**
     * Another entity is watching events on this entity (used by teleport)
     */
    EFL_NOTIFY = 64,
    
    /**
     * The default behavior in ShouldTransmit is to not send an entity if it doesn't have a model. Certain entities want to be sent anyway because all the drawing logic is in the client DLL. They can set this flag and the engine will transmit them even if they don't have model
     */
    EFL_FORCE_CHECK_TRANSMIT = 128,
    
    /**
     * This is set on bots that are frozen
     */
    EFL_BOT_FROZEN = 256,
    
    /**
     * Non-networked entity
     */
    EFL_SERVER_ONLY = 512,
    
    /**
     * Don't attach the edict
     */
    EFL_NO_AUTO_EDICT_ATTACH = 1024,
    
    /**
     * 
     */
    EFL_DIRTY_ABSTRANSFORM = 2048,
    
    /**
     * 
     */
    EFL_DIRTY_ABSVELOCITY = 4096,
    
    /**
     * Some dirty bits with respect to abs computations
     */
    EFL_DIRTY_ABSANGVELOCITY = 8192,
    
    /**
     * 
     */
    EFL_DIRTY_SURROUNDING_COLLISION_BOUNDS = 16384,
    
    /**
     * 
     */
    EFL_DIRTY_SPATIAL_PARTITION = 32768,
    
    /**
     * This is set if the entity detects that it's in the skybox. This forces it to pass the "in PVS" for transmission
     */
    EFL_IN_SKYBOX = 131072,
    
    /**
     * Entities with this flag set show up in the partition even when not solid
     */
    EFL_USE_PARTITION_WHEN_NOT_SOLID = 262144,
    
    /**
     * Used to determine if an entity is floating
     */
    EFL_TOUCHING_FLUID = 524288,
    
    /**
     * 
     */
    EFL_IS_BEING_LIFTED_BY_BARNACLE = 1048576,
    
    /**
     * 
     */
    EFL_NO_ROTORWASH_PUSH = 2097152,
    
    /**
     * Avoid executing the entity's Think
     */
    EFL_NO_THINK_FUNCTION = 4194304,
    
    /**
     * 
     */
    EFL_NO_GAME_PHYSICS_SIMULATION = 8388608,
    
    /**
     * 
     */
    EFL_CHECK_UNTOUCH = 16777216,
    
    /**
     * Entity shouldn't block NPC line-of-sight
     */
    EFL_DONTBLOCKLOS = 33554432,
    
    /**
     * NPCs should not walk on this entity
     */
    EFL_DONTWALKON = 67108864,
    
    /**
     * The entity shouldn't dissolve
     */
    EFL_NO_DISSOLVE = 134217728,
    
    /**
     * Mega physcannon can't ragdoll these guys
     */
    EFL_NO_MEGAPHYSCANNON_RAGDOLL = 268435456,
    
    /**
     * Don't adjust this entity's velocity when transitioning into water
     */
    EFL_NO_WATER_VELOCITY_CHANGE = 536870912,
    
    /**
     * Physcannon can't pick these up or punt them
     */
    EFL_NO_PHYSCANNON_INTERACTION = 1073741824,
    
    /**
     * Doesn't accept forces from physics damage
     */
    EFL_NO_DAMAGE_FORCES = -2147483648,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum FCVAR {
    /**
     * Save the [ConVar](https://wiki.facepunch.com/gmod/ConVar) value into client.vdf
     * 
     * Reported as "a" by `cvarlist`, except Lua [ConVar](https://wiki.facepunch.com/gmod/ConVar)s
     */
    FCVAR_ARCHIVE = 128,
    
    /**
     * Save the [ConVar](https://wiki.facepunch.com/gmod/ConVar) value into config.vdf on XBox
     */
    FCVAR_ARCHIVE_XBOX = 16777216,
    
    /**
     * Requires sv_cheats to be enabled to change the [ConVar](https://wiki.facepunch.com/gmod/ConVar) or run the command
     * 
     * Reported as "cheat" by `cvarlist`
     */
    FCVAR_CHEAT = 16384,
    
    /**
     * IVEngineClient::ClientCmd is allowed to execute this command
     * 
     * Reported as "clientcmd_can_execute" by `cvarlist`
     */
    FCVAR_CLIENTCMD_CAN_EXECUTE = 1073741824,
    
    /**
     * [ConVar](https://wiki.facepunch.com/gmod/ConVar) is defined by the client DLL.
     * 
     * This flag is set automatically
     * 
     * Reported as "cl" by `cvarlist`
     */
    FCVAR_CLIENTDLL = 8,
    
    /**
     * Force the [ConVar](https://wiki.facepunch.com/gmod/ConVar) to be recorded by demo recordings.
     * 
     * Reported as "demo" by `cvarlist`
     */
    FCVAR_DEMO = 65536,
    
    /**
     * Opposite of FCVAR_DEMO, ensures the [ConVar](https://wiki.facepunch.com/gmod/ConVar) is not recorded in demos
     * 
     * Reported as "norecord" by `cvarlist`
     */
    FCVAR_DONTRECORD = 131072,
    
    /**
     * [ConVar](https://wiki.facepunch.com/gmod/ConVar) is defined by the game DLL.
     * 
     * This flag is set automatically
     * 
     * Reported as "sv" by `cvarlist`
     */
    FCVAR_GAMEDLL = 4,
    
    /**
     * Set automatically on all ConVars and console commands created by the client Lua state.
     * 
     * Reported as "lua_client" by `cvarlist`
     */
    FCVAR_LUA_CLIENT = 262144,
    
    /**
     * Set automatically on all ConVars and console commands created by the server Lua state.
     * 
     * Reported as "lua_server" by `cvarlist`
     */
    FCVAR_LUA_SERVER = 524288,
    
    /**
     * Tells the engine to never print this variable as a string. This is used for variables which may contain control characters.
     * 
     * Reported as "numeric" by `cvarlist`
     */
    FCVAR_NEVER_AS_STRING = 4096,
    
    /**
     * No flags
     */
    FCVAR_NONE = 0,
    
    /**
     * For serverside [ConVar](https://wiki.facepunch.com/gmod/ConVar)s, notifies all players with blue chat text when the value gets changed
     * 
     * Reported as "nf" by `cvarlist`
     */
    FCVAR_NOTIFY = 256,
    
    /**
     * Makes the [ConVar](https://wiki.facepunch.com/gmod/ConVar) not changeable while connected to a server or in singleplayer
     */
    FCVAR_NOT_CONNECTED = 4194304,
    
    /**
     * Forces the [ConVar](https://wiki.facepunch.com/gmod/ConVar) to only have printable characters ( No control characters )
     * 
     * Reported as "print" by `cvarlist`
     */
    FCVAR_PRINTABLEONLY = 1024,
    
    /**
     * Makes the [ConVar](https://wiki.facepunch.com/gmod/ConVar) value hidden from all clients ( For example sv_password )
     * 
     * Reported as "prot" by `cvarlist`
     */
    FCVAR_PROTECTED = 32,
    
    /**
     * For serverside [ConVar](https://wiki.facepunch.com/gmod/ConVar)s, it will send its value to all clients. The [ConVar](https://wiki.facepunch.com/gmod/ConVar) with the same name must also exist on the client!
     * 
     * Reported as "rep" by `cvarlist`
     */
    FCVAR_REPLICATED = 8192,
    
    /**
     * Prevents the server from querying value of this [ConVar](https://wiki.facepunch.com/gmod/ConVar)
     */
    FCVAR_SERVER_CANNOT_QUERY = 536870912,
    
    /**
     * The server is allowed to execute this command on clients.
     * 
     * Reported as "server_can_execute" by `cvarlist`
     */
    FCVAR_SERVER_CAN_EXECUTE = 268435456,
    
    /**
     * Executing the command or changing the [ConVar](https://wiki.facepunch.com/gmod/ConVar) is only allowed in singleplayer
     * 
     * Reported as "sp" by `cvarlist`
     */
    FCVAR_SPONLY = 64,
    
    /**
     * Don't log the [ConVar](https://wiki.facepunch.com/gmod/ConVar) changes to console/log files/users
     * 
     * Reported as "log" by `cvarlist`
     */
    FCVAR_UNLOGGED = 2048,
    
    /**
     * If this is set, the convar will become anonymous and won't show up in the 'find' results.
     */
    FCVAR_UNREGISTERED = 1,
    
    /**
     * For clientside commands, sends the value to the server
     * 
     * Reported as "user" by `cvarlist`
     */
    FCVAR_USERINFO = 512,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum FFT {
    /**
     * 128 levels
     */
    FFT_256 = 0,
    
    /**
     * 256 levels
     */
    FFT_512 = 1,
    
    /**
     * 512 levels
     */
    FFT_1024 = 2,
    
    /**
     * 1024 levels
     */
    FFT_2048 = 3,
    
    /**
     * 2048 levels
     */
    FFT_4096 = 4,
    
    /**
     * 4096 levels
     */
    FFT_8192 = 5,
    
    /**
     * 8192 levels
     */
    FFT_16384 = 6,
    
    /**
     * 16384 levels
     */
    FFT_32768 = 7,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum FL {
    /**
     * Is the entity on ground or not
     */
    FL_ONGROUND = 1,
    
    /**
     * Is player ducking or not
     */
    FL_DUCKING = 2,
    
    /**
     * Is the player in the process of ducking or standing up
     */
    FL_ANIMDUCKING = 4,
    
    /**
     * The player is jumping out of water
     */
    FL_WATERJUMP = 8,
    
    /**
     * This player is controlling a func_train
     */
    FL_ONTRAIN = 16,
    
    /**
     * Indicates the entity is standing in rain
     */
    FL_INRAIN = 32,
    
    /**
     * Completely freezes the player
     * 
     * **Bug :**
     * >Bots will still be able to look around.
     * 
     */
    FL_FROZEN = 64,
    
    /**
     * This player is controlling something UI related in the world, this prevents his movement, but doesn't freeze mouse movement, jumping, etc.
     */
    FL_ATCONTROLS = 128,
    
    /**
     * Is this entity a player or not
     */
    FL_CLIENT = 256,
    
    /**
     * Bots have this flag
     */
    FL_FAKECLIENT = 512,
    
    /**
     * Is the player in water or not
     */
    FL_INWATER = 1024,
    
    /**
     * This entity can fly
     */
    FL_FLY = 2048,
    
    /**
     * This entity can swim
     */
    FL_SWIM = 4096,
    
    /**
     * This entity is a func_conveyor
     */
    FL_CONVEYOR = 8192,
    
    /**
     * NPCs have this flag (NPC: Ignore player push)
     */
    FL_NPC = 16384,
    
    /**
     * Whether the player has god mode enabled
     */
    FL_GODMODE = 32768,
    
    /**
     * Makes the entity invisible to AI
     */
    FL_NOTARGET = 65536,
    
    /**
     * This entity can be aimed at
     */
    FL_AIMTARGET = 131072,
    
    /**
     * Not all corners are valid
     */
    FL_PARTIALGROUND = 262144,
    
    /**
     * It's a static prop
     */
    FL_STATICPROP = 524288,
    
    /**
     * worldgraph has this ent listed as something that blocks a connection
     */
    FL_GRAPHED = 1048576,
    
    /**
     * This entity is a grenade, unused
     */
    FL_GRENADE = 2097152,
    
    /**
     * Changes the SV_Movestep() behavior to not do any processing
     */
    FL_STEPMOVEMENT = 4194304,
    
    /**
     * Doesn't generate touch functions, calls [ENTITY:EndTouch](https://wiki.facepunch.com/gmod/ENTITY:EndTouch) when this flag gets set during a touch callback
     */
    FL_DONTTOUCH = 8388608,
    
    /**
     * Base velocity has been applied this frame (used to convert base velocity into momentum)
     */
    FL_BASEVELOCITY = 16777216,
    
    /**
     * This entity is a brush and part of the world
     */
    FL_WORLDBRUSH = 33554432,
    
    /**
     * This entity can be seen by NPCs
     */
    FL_OBJECT = 67108864,
    
    /**
     * This entity is about to get removed
     */
    FL_KILLME = 134217728,
    
    /**
     * This entity is on fire
     */
    FL_ONFIRE = 268435456,
    
    /**
     * The entity is currently dissolving
     */
    FL_DISSOLVING = 536870912,
    
    /**
     * This entity is about to become a ragdoll
     */
    FL_TRANSRAGDOLL = 1073741824,
    
    /**
     * This moving door can't be blocked by the player
     */
    FL_UNBLOCKABLE_BY_PLAYER = -2147483648,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum FORCE {
    /**
     * Forces the function to take [string](https://wiki.facepunch.com/gmod/string)s only
     */
    FORCE_STRING = 1,
    
    /**
     * Forces the function to take [number](https://wiki.facepunch.com/gmod/number)s only
     */
    FORCE_NUMBER = 2,
    
    /**
     * Forces the function to take [boolean](https://wiki.facepunch.com/gmod/boolean)s only
     */
    FORCE_BOOL = 3,
    
    /**
     * Forces the function to take [Angle](https://wiki.facepunch.com/gmod/Angle)s only
     */
    FORCE_ANGLE = 4,
    
    /**
     * Forces the function to take [Color](https://wiki.facepunch.com/gmod/Color)s only
     */
    FORCE_COLOR = 5,
    
    /**
     * Forces the function to take [Vector](https://wiki.facepunch.com/gmod/Vector)s only
     */
    FORCE_VECTOR = 6,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum FSASYNC {
    /**
     * 
     */
    FSASYNC_ERR_NOT_MINE = -8,
    
    /**
     * 
     */
    FSASYNC_ERR_RETRY_LATER = -7,
    
    /**
     * 
     */
    FSASYNC_ERR_ALIGNMENT = -6,
    
    /**
     * 
     */
    FSASYNC_ERR_FAILURE = -5,
    
    /**
     * 
     */
    FSASYNC_ERR_READING = -4,
    
    /**
     * 
     */
    FSASYNC_ERR_NOMEMORY = -3,
    
    /**
     * 
     */
    FSASYNC_ERR_UNKNOWNID = -2,
    
    /**
     * 
     */
    FSASYNC_ERR_FILEOPEN = -1,
    
    /**
     * 
     */
    FSASYNC_OK = 0,
    
    /**
     * 
     */
    FSASYNC_STATUS_PENDING = 1,
    
    /**
     * 
     */
    FSASYNC_STATUS_INPROGRESS = 2,
    
    /**
     * 
     */
    FSASYNC_STATUS_ABORTED = 3,
    
    /**
     * 
     */
    FSASYNC_STATUS_UNSERVICED = 4,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum FSOLID {
    /**
     * Ignore solid type + always call into the entity for ray tests
     */
    FSOLID_CUSTOMRAYTEST = 1,
    
    /**
     * Ignore solid type + always call into the entity for swept box tests
     */
    FSOLID_CUSTOMBOXTEST = 2,
    
    /**
     * The object is currently not solid
     */
    FSOLID_NOT_SOLID = 4,
    
    /**
     * This is something may be collideable but fires touch functions even when it's not collideable (when the FSOLID_NOT_SOLID flag is set)
     */
    FSOLID_TRIGGER = 8,
    
    /**
     * The player can't stand on this
     */
    FSOLID_NOT_STANDABLE = 16,
    
    /**
     * Contains volumetric contents (like water)
     */
    FSOLID_VOLUME_CONTENTS = 32,
    
    /**
     * Forces the collision representation to be world-aligned even if it's SOLID_BSP or SOLID_VPHYSICS
     */
    FSOLID_FORCE_WORLD_ALIGNED = 64,
    
    /**
     * Uses a special trigger bounds separate from the normal OBB
     */
    FSOLID_USE_TRIGGER_BOUNDS = 128,
    
    /**
     * Collisions are defined in root parent's local coordinate space
     */
    FSOLID_ROOT_PARENT_ALIGNED = 256,
    
    /**
     * This trigger will touch debris objects
     */
    FSOLID_TRIGGER_TOUCH_DEBRIS = 512,
    
    /**
     * The amount of bits needed to store the all the flags in a variable/sent over network.
     */
    FSOLID_MAX_BITS = 10,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum FVPHYSICS {
    /**
     * Won't receive physics forces from collisions and won't collide with other [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) with the same flag set.
     */
    FVPHYSICS_CONSTRAINT_STATIC = 2,
    
    /**
     * Colliding with entities will cause 1000 damage with DMG_DISSOLVE as the damage type, but only if EFL_NO_DISSOLVE is not set.
     */
    FVPHYSICS_DMG_DISSOLVE = 512,
    
    /**
     * Does slice damage, not just blunt damage.
     */
    FVPHYSICS_DMG_SLICE = 1,
    
    /**
     * Will deal high physics damage even with a small mass.
     */
    FVPHYSICS_HEAVY_OBJECT = 32,
    
    /**
     * This [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) is part of an entity with multiple [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) , such as a ragdoll or a vehicle , and will be considered during collision damage events.
     */
    FVPHYSICS_MULTIOBJECT_ENTITY = 16,
    
    /**
     * Colliding with entities won't cause physics damage.
     */
    FVPHYSICS_NO_IMPACT_DMG = 1024,
    
    /**
     * Like FVPHYSICS_NO_NPC_IMPACT_DMG, but only checks for NPCs. Usually set on Combine Balls fired by Combine Soldiers.
     */
    FVPHYSICS_NO_NPC_IMPACT_DMG = 2048,
    
    /**
     * Doesn't allow the player to pick this [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) with the Gravity Gun or +use pickup.
     */
    FVPHYSICS_NO_PLAYER_PICKUP = 128,
    
    /**
     * We won't collide with other [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) associated to the same entity, only used for vehicles and ragdolls held by the Super Gravity Gun.
     */
    FVPHYSICS_NO_SELF_COLLISIONS = 32768,
    
    /**
     * This [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) is part of a ragdoll.
     */
    FVPHYSICS_PART_OF_RAGDOLL = 8,
    
    /**
     * Set by the physics engine when two [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) are penetrating each other. This is only automatically updated for non-static physics objects.
     */
    FVPHYSICS_PENETRATING = 64,
    
    /**
     * Set when the player is holding this [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) with the Physics Gun, Gravity Gun or +use pickup.
     */
    FVPHYSICS_PLAYER_HELD = 4,
    
    /**
     * This object was thrown by the Gravity Gun , stuns Antlion guards, Hunters, and squashes Antlion grubs.
     */
    FVPHYSICS_WAS_THROWN = 256,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum GESTURE_SLOT {
    /**
     * Slot for weapon gestures
     */
    GESTURE_SLOT_ATTACK_AND_RELOAD = 0,
    
    /**
     * 
     */
    GESTURE_SLOT_GRENADE = 1,
    
    /**
     * Slot for jump gestures
     */
    GESTURE_SLOT_JUMP = 2,
    
    /**
     * Slot for swimming gestures
     */
    GESTURE_SLOT_SWIM = 3,
    
    /**
     * Slot for flinching gestures
     */
    GESTURE_SLOT_FLINCH = 4,
    
    /**
     * 
     */
    GESTURE_SLOT_VCD = 5,
    
    /**
     * Slot for custom gestures
     */
    GESTURE_SLOT_CUSTOM = 6,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum GLOBAL {
    /**
     * Initial state, the global state is off.
     */
    GLOBAL_OFF = 0,
    
    /**
     * The global state is enabled.
     */
    GLOBAL_ON = 1,
    
    /**
     * The global state is dead and is no longer active. It will be cleared.
     */
    GLOBAL_DEAD = 2,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum GMOD_CHANNEL {
    /**
     * The channel is stopped
     */
    GMOD_CHANNEL_STOPPED = 0,
    
    /**
     * The channel is playing
     */
    GMOD_CHANNEL_PLAYING = 1,
    
    /**
     * The channel is paused
     */
    GMOD_CHANNEL_PAUSED = 2,
    
    /**
     * The channel is buffering
     */
    GMOD_CHANNEL_STALLED = 3,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum GOALTYPE {
    /**
     * No goal type.
     */
    GOALTYPE_NONE = 0,
    
    /**
     * The goal type is an entity.
     */
    GOALTYPE_TARGETENT = 1,
    
    /**
     * The goal type is the enemy entity.
     */
    GOALTYPE_ENEMY = 2,
    
    /**
     * The goal type is a path corner.
     */
    GOALTYPE_PATHCORNER = 3,
    
    /**
     * The goal type is a position.
     */
    GOALTYPE_LOCATION = 4,
    
    /**
     * The goal type is a node nearest to a certain position.
     */
    GOALTYPE_LOCATION_NEAREST_NODE = 5,
    
    /**
     * Goal type is a flank location.
     */
    GOALTYPE_FLANK = 6,
    
    /**
     * Goal type is a cover spot.
     */
    GOALTYPE_COVER = 7,
    
    /**
     * Invalid goal type.
     */
    GOALTYPE_INVALID = 8,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum HITGROUP {
    /**
     * 1:1 damage. Melee weapons and fall damage typically hit this hitgroup.
     * This hitgroup is not present on default player models.
     * 
     * It is unknown how this is generated in [GM:ScalePlayerDamage](https://wiki.facepunch.com/gmod/GM:ScalePlayerDamage), but it occurs when shot by NPCs ( npc_combine_s ) for example.
     */
    HITGROUP_GENERIC = 0,
    
    /**
     * Head
     */
    HITGROUP_HEAD = 1,
    
    /**
     * Chest
     */
    HITGROUP_CHEST = 2,
    
    /**
     * Stomach
     */
    HITGROUP_STOMACH = 3,
    
    /**
     * Left arm
     */
    HITGROUP_LEFTARM = 4,
    
    /**
     * Right arm
     */
    HITGROUP_RIGHTARM = 5,
    
    /**
     * Left leg
     */
    HITGROUP_LEFTLEG = 6,
    
    /**
     * Right leg
     */
    HITGROUP_RIGHTLEG = 7,
    
    /**
     * Gear. Supposed to be belt area.
     * 
     * This hitgroup is not present on default player models.
     * 
     * Alerts NPC, but doesn't do damage or bleed (1/100th damage)
     */
    HITGROUP_GEAR = 10,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum HUD {
    /**
     * No longer works; now same as HUD_PRINTCONSOLE
     */
    HUD_PRINTNOTIFY = 1,
    
    /**
     * Console
     */
    HUD_PRINTCONSOLE = 2,
    
    /**
     * Chat, also prints to console
     */
    HUD_PRINTTALK = 3,
    
    /**
     * Center of the screen, nothing on client
     */
    HUD_PRINTCENTER = 4,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum HULL {
    /**
     * Hull of a Citizen
     */
    HULL_HUMAN = 0,
    
    /**
     * 
     */
    HULL_SMALL_CENTERED = 1,
    
    /**
     * 
     */
    HULL_WIDE_HUMAN = 2,
    
    /**
     * 
     */
    HULL_TINY = 3,
    
    /**
     * 
     */
    HULL_WIDE_SHORT = 4,
    
    /**
     * 
     */
    HULL_MEDIUM = 5,
    
    /**
     * 
     */
    HULL_TINY_CENTERED = 6,
    
    /**
     * 
     */
    HULL_LARGE = 7,
    
    /**
     * 
     */
    HULL_LARGE_CENTERED = 8,
    
    /**
     * 
     */
    HULL_MEDIUM_TALL = 9,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum IMAGE_FORMAT {
    /**
     * 
     */
    IMAGE_FORMAT_DEFAULT = -1,
    
    /**
     * 
     */
    IMAGE_FORMAT_RGBA8888 = 0,
    
    /**
     * 
     */
    IMAGE_FORMAT_ABGR8888 = 1,
    
    /**
     * 
     */
    IMAGE_FORMAT_RGB888 = 2,
    
    /**
     * 
     */
    IMAGE_FORMAT_BGR888 = 3,
    
    /**
     * 
     */
    IMAGE_FORMAT_RGB565 = 4,
    
    /**
     * 
     */
    IMAGE_FORMAT_ARGB8888 = 11,
    
    /**
     * 
     */
    IMAGE_FORMAT_BGRA8888 = 12,
    
    /**
     * 
     */
    IMAGE_FORMAT_RGBA16161616 = 25,
    
    /**
     * 
     */
    IMAGE_FORMAT_RGBA16161616F = 24,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum IN {
    /**
     * +attack bound key ( Default: Left Mouse Button )
     */
    IN_ATTACK = 1,
    
    /**
     * +jump bound key ( Default: Space )
     */
    IN_JUMP = 2,
    
    /**
     * +duck bound key ( Default: CTRL )
     */
    IN_DUCK = 4,
    
    /**
     * +forward bound key ( Default: W )
     */
    IN_FORWARD = 8,
    
    /**
     * +back bound key ( Default: S )
     */
    IN_BACK = 16,
    
    /**
     * +use bound key ( Default: E )
     */
    IN_USE = 32,
    
    /**
     * 
     */
    IN_CANCEL = 64,
    
    /**
     * +left bound key ( Look left )
     */
    IN_LEFT = 128,
    
    /**
     * +right bound key ( Look right )
     */
    IN_RIGHT = 256,
    
    /**
     * +moveleft bound key ( Default: A )
     */
    IN_MOVELEFT = 512,
    
    /**
     * +moveright bound key ( Default: D )
     */
    IN_MOVERIGHT = 1024,
    
    /**
     * +attack2 bound key ( Default: Right Mouse Button )
     */
    IN_ATTACK2 = 2048,
    
    /**
     * 
     */
    IN_RUN = 4096,
    
    /**
     * +reload bound key ( Default: R )
     */
    IN_RELOAD = 8192,
    
    /**
     * +alt1 bound key
     */
    IN_ALT1 = 16384,
    
    /**
     * +alt2 bound key
     */
    IN_ALT2 = 32768,
    
    /**
     * +showscores bound key ( Default: Tab )
     */
    IN_SCORE = 65536,
    
    /**
     * +speed bound key ( Default: Shift )
     */
    IN_SPEED = 131072,
    
    /**
     * +walk bound key ( Slow walk )
     */
    IN_WALK = 262144,
    
    /**
     * +zoom bound key ( Suit Zoom )
     */
    IN_ZOOM = 524288,
    
    /**
     * For use in weapons. Set in the physgun when scrolling an object away from you.
     */
    IN_WEAPON1 = 1048576,
    
    /**
     * For use in weapons. Set in the physgun when scrolling an object towards you.
     */
    IN_WEAPON2 = 2097152,
    
    /**
     * 
     */
    IN_BULLRUSH = 4194304,
    
    /**
     * +grenade1 bound key
     */
    IN_GRENADE1 = 8388608,
    
    /**
     * +grenade2 bound key
     */
    IN_GRENADE2 = 16777216,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum JOYSTICK {
    /**
     * 
     */
    JOYSTICK_FIRST = 114,
    
    /**
     * Joystick buttons are in this range, but don't have individual enum names.
     */
    JOYSTICK_FIRST_BUTTON = 114,
    
    /**
     * 
     */
    JOYSTICK_LAST_BUTTON = 145,
    
    /**
     * Joystick POV buttons are in this range, but don't have individual enum names.
     */
    JOYSTICK_FIRST_POV_BUTTON = 146,
    
    /**
     * 
     */
    JOYSTICK_LAST_POV_BUTTON = 149,
    
    /**
     * Joystick axis buttons are in this range, but don't have individual enum names.
     */
    JOYSTICK_FIRST_AXIS_BUTTON = 150,
    
    /**
     * 
     */
    JOYSTICK_LAST_AXIS_BUTTON = 161,
    
    /**
     * 
     */
    JOYSTICK_LAST = 161,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum KEY {
    /**
     * 
     */
    KEY_FIRST = 0,
    
    /**
     * 
     */
    KEY_NONE = 0,
    
    /**
     * Normal number 0 key
     */
    KEY_0 = 1,
    
    /**
     * Normal number 1 key
     */
    KEY_1 = 2,
    
    /**
     * Normal number 2 key
     */
    KEY_2 = 3,
    
    /**
     * Normal number 3 key
     */
    KEY_3 = 4,
    
    /**
     * Normal number 4 key
     */
    KEY_4 = 5,
    
    /**
     * Normal number 5 key
     */
    KEY_5 = 6,
    
    /**
     * Normal number 6 key
     */
    KEY_6 = 7,
    
    /**
     * Normal number 7 key
     */
    KEY_7 = 8,
    
    /**
     * Normal number 8 key
     */
    KEY_8 = 9,
    
    /**
     * Normal number 9 key
     */
    KEY_9 = 10,
    
    /**
     * 
     */
    KEY_A = 11,
    
    /**
     * 
     */
    KEY_B = 12,
    
    /**
     * 
     */
    KEY_C = 13,
    
    /**
     * 
     */
    KEY_D = 14,
    
    /**
     * 
     */
    KEY_E = 15,
    
    /**
     * 
     */
    KEY_F = 16,
    
    /**
     * 
     */
    KEY_G = 17,
    
    /**
     * 
     */
    KEY_H = 18,
    
    /**
     * 
     */
    KEY_I = 19,
    
    /**
     * 
     */
    KEY_J = 20,
    
    /**
     * 
     */
    KEY_K = 21,
    
    /**
     * 
     */
    KEY_L = 22,
    
    /**
     * 
     */
    KEY_M = 23,
    
    /**
     * 
     */
    KEY_N = 24,
    
    /**
     * 
     */
    KEY_O = 25,
    
    /**
     * 
     */
    KEY_P = 26,
    
    /**
     * 
     */
    KEY_Q = 27,
    
    /**
     * 
     */
    KEY_R = 28,
    
    /**
     * 
     */
    KEY_S = 29,
    
    /**
     * 
     */
    KEY_T = 30,
    
    /**
     * 
     */
    KEY_U = 31,
    
    /**
     * 
     */
    KEY_V = 32,
    
    /**
     * 
     */
    KEY_W = 33,
    
    /**
     * 
     */
    KEY_X = 34,
    
    /**
     * 
     */
    KEY_Y = 35,
    
    /**
     * 
     */
    KEY_Z = 36,
    
    /**
     * Keypad number 0 key
     */
    KEY_PAD_0 = 37,
    
    /**
     * Keypad number 1 key
     */
    KEY_PAD_1 = 38,
    
    /**
     * Keypad number 2 key
     */
    KEY_PAD_2 = 39,
    
    /**
     * Keypad number 3 key
     */
    KEY_PAD_3 = 40,
    
    /**
     * Keypad number 4 key
     */
    KEY_PAD_4 = 41,
    
    /**
     * Keypad number 5 key
     */
    KEY_PAD_5 = 42,
    
    /**
     * Keypad number 6 key
     */
    KEY_PAD_6 = 43,
    
    /**
     * Keypad number 7 key
     */
    KEY_PAD_7 = 44,
    
    /**
     * Keypad number 8 key
     */
    KEY_PAD_8 = 45,
    
    /**
     * Keypad number 9 key
     */
    KEY_PAD_9 = 46,
    
    /**
     * Keypad division/slash key (/)
     */
    KEY_PAD_DIVIDE = 47,
    
    /**
     * Keypad asterisk key (*)
     */
    KEY_PAD_MULTIPLY = 48,
    
    /**
     * Keypad minus key
     */
    KEY_PAD_MINUS = 49,
    
    /**
     * Keypad plus key
     */
    KEY_PAD_PLUS = 50,
    
    /**
     * Keypad enter key
     */
    KEY_PAD_ENTER = 51,
    
    /**
     * Keypad dot key (.)
     */
    KEY_PAD_DECIMAL = 52,
    
    /**
     * 
     */
    KEY_LBRACKET = 53,
    
    /**
     * 
     */
    KEY_RBRACKET = 54,
    
    /**
     * 
     */
    KEY_SEMICOLON = 55,
    
    /**
     * 
     */
    KEY_APOSTROPHE = 56,
    
    /**
     * 
     */
    KEY_BACKQUOTE = 57,
    
    /**
     * 
     */
    KEY_COMMA = 58,
    
    /**
     * 
     */
    KEY_PERIOD = 59,
    
    /**
     * 
     */
    KEY_SLASH = 60,
    
    /**
     * 
     */
    KEY_BACKSLASH = 61,
    
    /**
     * 
     */
    KEY_MINUS = 62,
    
    /**
     * 
     */
    KEY_EQUAL = 63,
    
    /**
     * 
     */
    KEY_ENTER = 64,
    
    /**
     * 
     */
    KEY_SPACE = 65,
    
    /**
     * 
     */
    KEY_BACKSPACE = 66,
    
    /**
     * 
     */
    KEY_TAB = 67,
    
    /**
     * 
     */
    KEY_CAPSLOCK = 68,
    
    /**
     * 
     */
    KEY_NUMLOCK = 69,
    
    /**
     * 
     */
    KEY_ESCAPE = 70,
    
    /**
     * 
     */
    KEY_SCROLLLOCK = 71,
    
    /**
     * 
     */
    KEY_INSERT = 72,
    
    /**
     * 
     */
    KEY_DELETE = 73,
    
    /**
     * 
     */
    KEY_HOME = 74,
    
    /**
     * 
     */
    KEY_END = 75,
    
    /**
     * 
     */
    KEY_PAGEUP = 76,
    
    /**
     * 
     */
    KEY_PAGEDOWN = 77,
    
    /**
     * 
     */
    KEY_BREAK = 78,
    
    /**
     * The left Shift key, has been seen to be triggered by Right Shift in [PANEL:OnKeyCodePressed](https://wiki.facepunch.com/gmod/PANEL:OnKeyCodePressed)
     */
    KEY_LSHIFT = 79,
    
    /**
     * 
     */
    KEY_RSHIFT = 80,
    
    /**
     * 
     */
    KEY_LALT = 81,
    
    /**
     * 
     */
    KEY_RALT = 82,
    
    /**
     * 
     */
    KEY_LCONTROL = 83,
    
    /**
     * 
     */
    KEY_RCONTROL = 84,
    
    /**
     * The left Windows key or the Command key on Mac OSX
     */
    KEY_LWIN = 85,
    
    /**
     * The right Windows key or the Command key on Mac OSX
     */
    KEY_RWIN = 86,
    
    /**
     * 
     */
    KEY_APP = 87,
    
    /**
     * 
     */
    KEY_UP = 88,
    
    /**
     * 
     */
    KEY_LEFT = 89,
    
    /**
     * 
     */
    KEY_DOWN = 90,
    
    /**
     * 
     */
    KEY_RIGHT = 91,
    
    /**
     * 
     */
    KEY_F1 = 92,
    
    /**
     * 
     */
    KEY_F2 = 93,
    
    /**
     * 
     */
    KEY_F3 = 94,
    
    /**
     * 
     */
    KEY_F4 = 95,
    
    /**
     * 
     */
    KEY_F5 = 96,
    
    /**
     * 
     */
    KEY_F6 = 97,
    
    /**
     * 
     */
    KEY_F7 = 98,
    
    /**
     * 
     */
    KEY_F8 = 99,
    
    /**
     * 
     */
    KEY_F9 = 100,
    
    /**
     * 
     */
    KEY_F10 = 101,
    
    /**
     * 
     */
    KEY_F11 = 102,
    
    /**
     * 
     */
    KEY_F12 = 103,
    
    /**
     * 
     */
    KEY_CAPSLOCKTOGGLE = 104,
    
    /**
     * 
     */
    KEY_NUMLOCKTOGGLE = 105,
    
    /**
     * 
     */
    KEY_LAST = 106,
    
    /**
     * 
     */
    KEY_SCROLLLOCKTOGGLE = 106,
    
    /**
     * 
     */
    KEY_COUNT = 107,
    
    /**
     * 
     */
    KEY_XBUTTON_A = 114,
    
    /**
     * 
     */
    KEY_XBUTTON_B = 115,
    
    /**
     * 
     */
    KEY_XBUTTON_X = 116,
    
    /**
     * 
     */
    KEY_XBUTTON_Y = 117,
    
    /**
     * 
     */
    KEY_XBUTTON_LEFT_SHOULDER = 118,
    
    /**
     * 
     */
    KEY_XBUTTON_RIGHT_SHOULDER = 119,
    
    /**
     * 
     */
    KEY_XBUTTON_BACK = 120,
    
    /**
     * 
     */
    KEY_XBUTTON_START = 121,
    
    /**
     * 
     */
    KEY_XBUTTON_STICK1 = 122,
    
    /**
     * 
     */
    KEY_XBUTTON_STICK2 = 123,
    
    /**
     * 
     */
    KEY_XBUTTON_UP = 146,
    
    /**
     * 
     */
    KEY_XBUTTON_RIGHT = 147,
    
    /**
     * 
     */
    KEY_XBUTTON_DOWN = 148,
    
    /**
     * 
     */
    KEY_XBUTTON_LEFT = 149,
    
    /**
     * 
     */
    KEY_XSTICK1_RIGHT = 150,
    
    /**
     * 
     */
    KEY_XSTICK1_LEFT = 151,
    
    /**
     * 
     */
    KEY_XSTICK1_DOWN = 152,
    
    /**
     * 
     */
    KEY_XSTICK1_UP = 153,
    
    /**
     * 
     */
    KEY_XBUTTON_LTRIGGER = 154,
    
    /**
     * 
     */
    KEY_XBUTTON_RTRIGGER = 155,
    
    /**
     * 
     */
    KEY_XSTICK2_RIGHT = 156,
    
    /**
     * 
     */
    KEY_XSTICK2_LEFT = 157,
    
    /**
     * 
     */
    KEY_XSTICK2_DOWN = 158,
    
    /**
     * 
     */
    KEY_XSTICK2_UP = 159,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum kRenderFx {
    /**
     * None. No change.
     */
    kRenderFxNone = 0,
    
    /**
     * Slowly pulses the entitys transparency, +-15 to the current alpha.
     */
    kRenderFxPulseSlow = 1,
    
    /**
     * Quickly pulses the entitys transparency, +-15 to the current alpha.
     */
    kRenderFxPulseFast = 2,
    
    /**
     * Slowly pulses the entitys transparency, +-60 to the current alpha.
     */
    kRenderFxPulseSlowWide = 3,
    
    /**
     * Quickly pulses the entitys transparency, +-60 to the current alpha.
     */
    kRenderFxPulseFastWide = 4,
    
    /**
     * Slowly fades away the entity, making it completely invisible.
     * 
     * Starts from whatever alpha the entity currently has set.
     */
    kRenderFxFadeSlow = 5,
    
    /**
     * Quickly fades away the entity, making it completely invisible.
     * 
     * Starts from whatever alpha the entity currently has set.
     */
    kRenderFxFadeFast = 6,
    
    /**
     * Slowly solidifies the entity, making it fully opaque.
     * 
     * Starts from whatever alpha the entity currently has set.
     */
    kRenderFxSolidSlow = 7,
    
    /**
     * Quickly solidifies the entity, making it fully opaque.
     * 
     * Starts from whatever alpha the entity currently has set.
     */
    kRenderFxSolidFast = 8,
    
    /**
     * Slowly switches the entitys transparency between its alpha and 0.
     */
    kRenderFxStrobeSlow = 9,
    
    /**
     * Quickly switches the entitys transparency between its alpha and 0.
     */
    kRenderFxStrobeFast = 10,
    
    /**
     * Very quickly switches the entitys transparency between its alpha and 0.
     */
    kRenderFxStrobeFaster = 11,
    
    /**
     * Same as Strobe Slow, but the interval is more randomized.
     */
    kRenderFxFlickerSlow = 12,
    
    /**
     * Same as Strobe Fast, but the interval is more randomized.
     */
    kRenderFxFlickerFast = 13,
    
    /**
     * 
     */
    kRenderFxNoDissipation = 14,
    
    /**
     * Flickers ( randomizes ) the entitys transparency
     */
    kRenderFxDistort = 15,
    
    /**
     * Same as Distort, but fades the entity away the farther you are from it.
     */
    kRenderFxHologram = 16,
    
    /**
     * 
     */
    kRenderFxExplode = 17,
    
    /**
     * 
     */
    kRenderFxGlowShell = 18,
    
    /**
     * 
     */
    kRenderFxClampMinScale = 19,
    
    /**
     * 
     */
    kRenderFxEnvRain = 20,
    
    /**
     * 
     */
    kRenderFxEnvSnow = 21,
    
    /**
     * 
     */
    kRenderFxSpotlight = 22,
    
    /**
     * 
     */
    kRenderFxRagdoll = 23,
    
    /**
     * Quickly pulses the entitys transparency, from 0 to 255.
     */
    kRenderFxPulseFastWider = 24,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum MASK {
    /**
     * Anything that is not empty space
     */
    MASK_ALL = 4294967295,
    
    /**
     * Anything that blocks line of sight for AI
     */
    MASK_BLOCKLOS = 16449,
    
    /**
     * Anything that blocks line of sight for AI or NPCs
     */
    MASK_BLOCKLOS_AND_NPCS = 33570881,
    
    /**
     * Water that is moving (may not work)
     */
    MASK_CURRENT = 16515072,
    
    /**
     * Anything that blocks corpse movement
     */
    MASK_DEADSOLID = 65547,
    
    /**
     * Anything that blocks NPC movement
     */
    MASK_NPCSOLID = 33701899,
    
    /**
     * Anything that blocks NPC movement, except other NPCs
     */
    MASK_NPCSOLID_BRUSHONLY = 147467,
    
    /**
     * The world entity
     */
    MASK_NPCWORLDSTATIC = 131083,
    
    /**
     * Anything that blocks lighting
     */
    MASK_OPAQUE = 16513,
    
    /**
     * Anything that blocks lighting, including NPCs
     */
    MASK_OPAQUE_AND_NPCS = 33570945,
    
    /**
     * Anything that blocks player movement
     */
    MASK_PLAYERSOLID = 33636363,
    
    /**
     * World + Brushes + Player Clips
     */
    MASK_PLAYERSOLID_BRUSHONLY = 81931,
    
    /**
     * Anything that stops a bullet (including hitboxes)
     */
    MASK_SHOT = 1174421507,
    
    /**
     * Anything that stops a bullet (excluding hitboxes)
     */
    MASK_SHOT_HULL = 100679691,
    
    /**
     * Solids except for grates
     */
    MASK_SHOT_PORTAL = 33570819,
    
    /**
     * Anything that is (normally) solid
     */
    MASK_SOLID = 33570827,
    
    /**
     * World + Brushes
     */
    MASK_SOLID_BRUSHONLY = 16395,
    
    /**
     * Things that split area portals
     */
    MASK_SPLITAREAPORTAL = 48,
    
    /**
     * Anything that blocks line of sight for players
     */
    MASK_VISIBLE = 24705,
    
    /**
     * Anything that blocks line of sight for players, including NPCs
     */
    MASK_VISIBLE_AND_NPCS = 33579137,
    
    /**
     * Anything that has water-like physics
     */
    MASK_WATER = 16432,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum MAT {
    /**
     * Antlions
     */
    MAT_ANTLION = 65,
    
    /**
     * Similar to MAT_FLESH, only used by "bloodyflesh" surface property, has different impact sound
     */
    MAT_BLOODYFLESH = 66,
    
    /**
     * Concrete
     */
    MAT_CONCRETE = 67,
    
    /**
     * Dirt
     */
    MAT_DIRT = 68,
    
    /**
     * The egg sacs in the antlion tunnels in HL2: EP2
     */
    MAT_EGGSHELL = 69,
    
    /**
     * Flesh
     */
    MAT_FLESH = 70,
    
    /**
     * Grates, chainlink fences
     */
    MAT_GRATE = 71,
    
    /**
     * Alien flesh - headcrabs and vortigaunts
     */
    MAT_ALIENFLESH = 72,
    
    /**
     * Unused
     */
    MAT_CLIP = 73,
    
    /**
     * Snow
     */
    MAT_SNOW = 74,
    
    /**
     * Plastic
     */
    MAT_PLASTIC = 76,
    
    /**
     * Metal
     */
    MAT_METAL = 77,
    
    /**
     * Sand
     */
    MAT_SAND = 78,
    
    /**
     * Plants, only used by the "foliage" surface property
     */
    MAT_FOLIAGE = 79,
    
    /**
     * Electronics, only used by "computer" surface property
     */
    MAT_COMPUTER = 80,
    
    /**
     * Water, slime
     */
    MAT_SLOSH = 83,
    
    /**
     * Floor tiles
     */
    MAT_TILE = 84,
    
    /**
     * Grass
     */
    MAT_GRASS = 85,
    
    /**
     * Metallic vents
     */
    MAT_VENT = 86,
    
    /**
     * Wood
     */
    MAT_WOOD = 87,
    
    /**
     * Skybox or nodraw texture
     */
    MAT_DEFAULT = 88,
    
    /**
     * Glass
     */
    MAT_GLASS = 89,
    
    /**
     * "wierd-looking jello effect for advisor shield."
     */
    MAT_WARPSHIELD = 90,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum MATERIAL {
    /**
     * 
     */
    MATERIAL_LINES = 1,
    
    /**
     * 
     */
    MATERIAL_LINE_LOOP = 5,
    
    /**
     * 
     */
    MATERIAL_LINE_STRIP = 4,
    
    /**
     * 
     */
    MATERIAL_POINTS = 0,
    
    /**
     * 
     */
    MATERIAL_POLYGON = 6,
    
    /**
     * 
     */
    MATERIAL_QUADS = 7,
    
    /**
     * 
     */
    MATERIAL_TRIANGLES = 2,
    
    /**
     * 
     */
    MATERIAL_TRIANGLE_STRIP = 3,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum MATERIAL_CULLMODE {
    /**
     * Counter clock wise cull mode
     */
    MATERIAL_CULLMODE_CCW = 0,
    
    /**
     * Clock wise cull mode
     */
    MATERIAL_CULLMODE_CW = 1,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum MATERIAL_FOG {
    /**
     * No fog
     */
    MATERIAL_FOG_NONE = 0,
    
    /**
     * Linear fog
     */
    MATERIAL_FOG_LINEAR = 1,
    
    /**
     * For use in conjunction with [render.SetFogZ](https://wiki.facepunch.com/gmod/render.SetFogZ). Does not work if start distance is bigger than end distance. Ignores density setting. Seems to be broken? Used for underwater fog by the engine.
     */
    MATERIAL_FOG_LINEAR_BELOW_FOG_Z = 2,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum MATERIAL_LIGHT {
    /**
     * No light
     */
    MATERIAL_LIGHT_DISABLE = 0,
    
    /**
     * Point light
     */
    MATERIAL_LIGHT_POINT = 1,
    
    /**
     * Directional light
     */
    MATERIAL_LIGHT_DIRECTIONAL = 2,
    
    /**
     * Spot light
     */
    MATERIAL_LIGHT_SPOT = 3,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum MATERIAL_RT_DEPTH {
    /**
     * Do not create a depth-stencil buffer.<br/>Use the default depth-stencil buffer if used as render target 0.
     */
    MATERIAL_RT_DEPTH_SHARED = 0,
    
    /**
     * Create a depth-stencil buffer.<br/>Use the created depth-stencil buffer if used as render target 0.
     */
    MATERIAL_RT_DEPTH_SEPARATE = 1,
    
    /**
     * Do not create a depth-stencil buffer.<br/>Disable depth and stencil buffer usage if used as render target 0.
     */
    MATERIAL_RT_DEPTH_NONE = 2,
    
    /**
     * Create a depth-stencil buffer.<br/>Use the created depth-stencil buffer if used as render target 0.
     * 
     * Creates a color texture despite the name.<br/>
     * Seems to behave the same as MATERIAL_RT_DEPTH_SEPARATE.
     */
    MATERIAL_RT_DEPTH_ONLY = 3,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum MOUSE {
    /**
     * First mouse button
     */
    MOUSE_FIRST = 107,
    
    /**
     * Left mouse button
     */
    MOUSE_LEFT = 107,
    
    /**
     * Right mouse button
     */
    MOUSE_RIGHT = 108,
    
    /**
     * Middle mouse button, aka the wheel press
     */
    MOUSE_MIDDLE = 109,
    
    /**
     * Mouse 4 button ( Sometimes, mouse wheel tilt left )
     */
    MOUSE_4 = 110,
    
    /**
     * Mouse 5 button ( Sometimes, mouse wheel tilt right )
     */
    MOUSE_5 = 111,
    
    /**
     * Mouse wheel scroll up
     */
    MOUSE_WHEEL_UP = 112,
    
    /**
     * Mouse wheel scroll down
     */
    MOUSE_WHEEL_DOWN = 113,
    
    /**
     * Last mouse button
     */
    MOUSE_LAST = 113,
    
    /**
     * Mouse button count
     */
    MOUSE_COUNT = 7,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum MOVECOLLIDE {
    /**
     * Default behavior
     */
    MOVECOLLIDE_DEFAULT = 0,
    
    /**
     * Entity bounces, reflects, based on elasticity of surface and object - applies friction (adjust velocity)
     */
    MOVECOLLIDE_FLY_BOUNCE = 1,
    
    /**
     * [ENTITY:Touch](https://wiki.facepunch.com/gmod/ENTITY:Touch) will modify the velocity however it likes
     */
    MOVECOLLIDE_FLY_CUSTOM = 2,
    
    /**
     * Entity slides along surfaces (no bounce) - applies friciton (adjusts velocity)
     */
    MOVECOLLIDE_FLY_SLIDE = 3,
    
    /**
     * Number of different movecollides
     */
    MOVECOLLIDE_COUNT = 4,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum MOVETYPE {
    /**
     * Don't move
     */
    MOVETYPE_NONE = 0,
    
    /**
     * For players, in TF2 commander view, etc
     */
    MOVETYPE_ISOMETRIC = 1,
    
    /**
     * Player only, moving on the ground
     */
    MOVETYPE_WALK = 2,
    
    /**
     * Monster/NPC movement
     */
    MOVETYPE_STEP = 3,
    
    /**
     * Fly, no gravity
     */
    MOVETYPE_FLY = 4,
    
    /**
     * Fly, with gravity
     */
    MOVETYPE_FLYGRAVITY = 5,
    
    /**
     * Physics movetype
     */
    MOVETYPE_VPHYSICS = 6,
    
    /**
     * No clip to world, but pushes and crushes things. Need ent:SetSaveValue("m_flMoveDoneTime", somenumberbiggerthancurtime) or the entity won't move.
     */
    MOVETYPE_PUSH = 7,
    
    /**
     * Noclip
     */
    MOVETYPE_NOCLIP = 8,
    
    /**
     * For players, when moving on a ladder
     */
    MOVETYPE_LADDER = 9,
    
    /**
     * Spectator movetype. DO **NOT** use this to make player spectate
     */
    MOVETYPE_OBSERVER = 10,
    
    /**
     * Custom movetype, can be applied to the player to prevent the default movement code from running, while still calling the related hooks
     */
    MOVETYPE_CUSTOM = 11,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum NAV {
    /**
     * Error condition.
     */
    NAV_NONE = -1,
    
    /**
     * walk/run
     */
    NAV_GROUND = 0,
    
    /**
     * jump/leap
     */
    NAV_JUMP = 1,
    
    /**
     * can fly, move all around
     */
    NAV_FLY = 2,
    
    /**
     * climb ladders
     */
    NAV_CLIMB = 3,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum NAV_MESH {
    /**
     * The nav area is invalid.
     */
    NAV_MESH_INVALID = 0,
    
    /**
     * Must crouch to use this node/area
     */
    NAV_MESH_CROUCH = 1,
    
    /**
     * Must jump to traverse this area (only used during generation)
     */
    NAV_MESH_JUMP = 2,
    
    /**
     * Do not adjust for obstacles, just move along area
     */
    NAV_MESH_PRECISE = 4,
    
    /**
     * Inhibit discontinuity jumping
     */
    NAV_MESH_NO_JUMP = 8,
    
    /**
     * Must stop when entering this area
     */
    NAV_MESH_STOP = 16,
    
    /**
     * Must run to traverse this area
     */
    NAV_MESH_RUN = 32,
    
    /**
     * Must walk to traverse this area
     */
    NAV_MESH_WALK = 64,
    
    /**
     * Avoid this area unless alternatives are too dangerous
     */
    NAV_MESH_AVOID = 128,
    
    /**
     * Area may become blocked, and should be periodically checked
     */
    NAV_MESH_TRANSIENT = 256,
    
    /**
     * Area should not be considered for hiding spot generation
     */
    NAV_MESH_DONT_HIDE = 512,
    
    /**
     * Bots hiding in this area should stand
     */
    NAV_MESH_STAND = 1024,
    
    /**
     * Hostages shouldn't use this area
     */
    NAV_MESH_NO_HOSTAGES = 2048,
    
    /**
     * This area represents stairs, do not attempt to climb or jump them - just walk up
     */
    NAV_MESH_STAIRS = 4096,
    
    /**
     * Don't merge this area with adjacent areas
     */
    NAV_MESH_NO_MERGE = 8192,
    
    /**
     * This nav area is the climb point on the tip of an obstacle
     */
    NAV_MESH_OBSTACLE_TOP = 16384,
    
    /**
     * This nav area is adjacent to a drop of at least `CliffHeight` (300 hammer units). Unused by base game.
     */
    NAV_MESH_CLIFF = 32768,
    
    /**
     * Area has designer specified cost controlled by `func_nav_cost` entities
     */
    NAV_MESH_FUNC_COST = 536870912,
    
    /**
     * Whether the area has a `prop_door_rotating` that is blocking it (because the door is closed)
     */
    NAV_MESH_BLOCKED_PROPDOOR = 268435456,
    
    /**
     * Area is in an elevator's path
     */
    NAV_MESH_HAS_ELEVATOR = 1073741824,
    
    /**
     * Whether the area is blocked by a `func_nav_blocker` entity and is impassible.
     */
    NAV_MESH_NAV_BLOCKER = -2147483648,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum NavCorner {
    /**
     * North West Corner
     */
    NORTH_WEST = 0,
    
    /**
     * North East Corner
     */
    NORTH_EAST = 1,
    
    /**
     * South East Corner
     */
    SOUTH_EAST = 2,
    
    /**
     * South West Corner
     */
    SOUTH_WEST = 3,
    
    /**
     * Represents all corners, only applicable to certain functions, such as [CNavArea:PlaceOnGround](https://wiki.facepunch.com/gmod/CNavArea:PlaceOnGround).
     */
    NUM_CORNERS = 4,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum NavDir {
    /**
     * North from given [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)
     */
    NORTH = 0,
    
    /**
     * East from given [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)
     */
    EAST = 1,
    
    /**
     * South from given [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)
     */
    SOUTH = 2,
    
    /**
     * West from given [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)
     */
    WEST = 3,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum NavTraverseType {
    /**
     * 
     */
    GO_NORTH = 0,
    
    /**
     * 
     */
    GO_EAST = 1,
    
    /**
     * 
     */
    GO_SOUTH = 2,
    
    /**
     * 
     */
    GO_WEST = 3,
    
    /**
     * 
     */
    GO_LADDER_UP = 4,
    
    /**
     * 
     */
    GO_LADDER_DOWN = 5,
    
    /**
     * 
     */
    GO_JUMP = 6,
    
    /**
     * 
     */
    GO_ELEVATOR_UP = 7,
    
    /**
     * 
     */
    GO_ELEVATOR_DOWN = 8,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum NOTIFY {
    /**
     * <image src="NOTIFY_GENERIC_PREVIEW.png" alt="middle"/> Generic notification
     */
    NOTIFY_GENERIC = 0,
    
    /**
     * <image src="NOTIFY_ERROR_PREVIEW.png" alt="middle"/> Error notification
     */
    NOTIFY_ERROR = 1,
    
    /**
     * <image src="NOTIFY_UNDO_PREVIEW.png" alt="middle"/> Undo notification
     */
    NOTIFY_UNDO = 2,
    
    /**
     * <image src="NOTIFY_HINT_PREVIEW.png" alt="middle"/> Hint notification
     */
    NOTIFY_HINT = 3,
    
    /**
     * <image src="NOTIFY_CLEANUP_PREVIEW.png" alt="middle"/> Cleanup notification
     */
    NOTIFY_CLEANUP = 4,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum NPC_STATE {
    /**
     * Invalid state
     */
    NPC_STATE_INVALID = -1,
    
    /**
     * NPC default state
     */
    NPC_STATE_NONE = 0,
    
    /**
     * NPC is idle
     */
    NPC_STATE_IDLE = 1,
    
    /**
     * NPC is alert and searching for enemies
     */
    NPC_STATE_ALERT = 2,
    
    /**
     * NPC is in combat
     */
    NPC_STATE_COMBAT = 3,
    
    /**
     * NPC is executing scripted sequence
     */
    NPC_STATE_SCRIPT = 4,
    
    /**
     * NPC is playing dead (used for expressions)
     */
    NPC_STATE_PLAYDEAD = 5,
    
    /**
     * NPC is prone to death
     */
    NPC_STATE_PRONE = 6,
    
    /**
     * NPC is dead
     */
    NPC_STATE_DEAD = 7,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum NUM {
    /**
     * Amount of [Enums/CLASS](https://wiki.facepunch.com/gmod/Enums/CLASS). Used by [Global.Add_NPC_Class](https://wiki.facepunch.com/gmod/Global.Add_NPC_Class).
     */
    NUM_AI_CLASSES = 36,
    
    /**
     * Amount of [Enums/HULL](https://wiki.facepunch.com/gmod/Enums/HULL).
     */
    NUM_HULLS = 10,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum OBS_MODE {
    /**
     * Not spectating
     */
    OBS_MODE_NONE = 0,
    
    /**
     * 
     */
    OBS_MODE_DEATHCAM = 1,
    
    /**
     * TF2-like freezecam
     */
    OBS_MODE_FREEZECAM = 2,
    
    /**
     * Same as OBS_MODE_CHASE, but you can't rotate the view
     */
    OBS_MODE_FIXED = 3,
    
    /**
     * First person cam
     */
    OBS_MODE_IN_EYE = 4,
    
    /**
     * Chase cam, 3rd person cam, free rotation around the spectated target
     */
    OBS_MODE_CHASE = 5,
    
    /**
     * Free roam/noclip-alike. Does not work from [GM:PlayerDeath](https://wiki.facepunch.com/gmod/GM:PlayerDeath)
     */
    OBS_MODE_ROAMING = 6,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum PATTACH {
    /**
     * Particle spawns in entity's origin and does not follow it
     */
    PATTACH_ABSORIGIN = 0,
    
    /**
     * Particle attaches to entity's origin and follows the entity
     */
    PATTACH_ABSORIGIN_FOLLOW = 1,
    
    /**
     * Create at a custom origin, but don't follow
     */
    PATTACH_CUSTOMORIGIN = 2,
    
    /**
     * Particle attaches to passed to [Global.ParticleEffectAttach](https://wiki.facepunch.com/gmod/Global.ParticleEffectAttach) attachment id, but does not follow the entity
     */
    PATTACH_POINT = 3,
    
    /**
     * Particle attaches to passed to [Global.ParticleEffectAttach](https://wiki.facepunch.com/gmod/Global.ParticleEffectAttach) attachment id and follows the entity
     */
    PATTACH_POINT_FOLLOW = 4,
    
    /**
     * Particle spawns in the beginning of coordinates ( Vector( 0, 0, 0 ) ), used for control points that don't attach to an entity
     */
    PATTACH_WORLDORIGIN = 5,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum PLAYERANIM {
    /**
     * 
     */
    PLAYER_IDLE = 0,
    
    /**
     * 
     */
    PLAYER_WALK = 1,
    
    /**
     * 
     */
    PLAYER_JUMP = 2,
    
    /**
     * 
     */
    PLAYER_SUPERJUMP = 3,
    
    /**
     * 
     */
    PLAYER_DIE = 4,
    
    /**
     * Player attack according to current hold type, used in SWEPs
     */
    PLAYER_ATTACK1 = 5,
    
    /**
     * 
     */
    PLAYER_IN_VEHICLE = 6,
    
    /**
     * Player reload according to current hold type, used in SWEPs
     */
    PLAYER_RELOAD = 7,
    
    /**
     * 
     */
    PLAYER_START_AIMING = 8,
    
    /**
     * 
     */
    PLAYER_LEAVE_AIMING = 9,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum PLAYERANIMEVENT {
    /**
     * Primary attack
     */
    PLAYERANIMEVENT_ATTACK_PRIMARY = 0,
    
    /**
     * Secondary attack
     */
    PLAYERANIMEVENT_ATTACK_SECONDARY = 1,
    
    /**
     * Grenade throw
     */
    PLAYERANIMEVENT_ATTACK_GRENADE = 2,
    
    /**
     * Reload
     */
    PLAYERANIMEVENT_RELOAD = 3,
    
    /**
     * Looping reload (single-reload shotguns)
     */
    PLAYERANIMEVENT_RELOAD_LOOP = 4,
    
    /**
     * Looping reload end
     */
    PLAYERANIMEVENT_RELOAD_END = 5,
    
    /**
     * Jump
     */
    PLAYERANIMEVENT_JUMP = 6,
    
    /**
     * Swim
     */
    PLAYERANIMEVENT_SWIM = 7,
    
    /**
     * Die
     */
    PLAYERANIMEVENT_DIE = 8,
    
    /**
     * 
     */
    PLAYERANIMEVENT_FLINCH_CHEST = 9,
    
    /**
     * 
     */
    PLAYERANIMEVENT_FLINCH_HEAD = 10,
    
    /**
     * 
     */
    PLAYERANIMEVENT_FLINCH_LEFTARM = 11,
    
    /**
     * 
     */
    PLAYERANIMEVENT_FLINCH_RIGHTARM = 12,
    
    /**
     * 
     */
    PLAYERANIMEVENT_FLINCH_LEFTLEG = 13,
    
    /**
     * 
     */
    PLAYERANIMEVENT_FLINCH_RIGHTLEG = 14,
    
    /**
     * 
     */
    PLAYERANIMEVENT_DOUBLEJUMP = 15,
    
    /**
     * 
     */
    PLAYERANIMEVENT_CANCEL = 16,
    
    /**
     * Spawn
     */
    PLAYERANIMEVENT_SPAWN = 17,
    
    /**
     * 
     */
    PLAYERANIMEVENT_SNAP_YAW = 18,
    
    /**
     * Custom activity
     */
    PLAYERANIMEVENT_CUSTOM = 19,
    
    /**
     * Play activity in gesture slot
     */
    PLAYERANIMEVENT_CUSTOM_GESTURE = 20,
    
    /**
     * Play sequence
     */
    PLAYERANIMEVENT_CUSTOM_SEQUENCE = 21,
    
    /**
     * Play sequence in gesture slot
     */
    PLAYERANIMEVENT_CUSTOM_GESTURE_SEQUENCE = 22,
    
    /**
     * Cancel reload animation
     */
    PLAYERANIMEVENT_CANCEL_RELOAD = 23,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum RENDERGROUP {
    /**
     * Huge static prop, possibly leftover from goldsrc
     */
    RENDERGROUP_STATIC_HUGE = 0,
    
    /**
     * Huge opaque entity, possibly leftover from goldsrc
     */
    RENDERGROUP_OPAQUE_HUGE = 1,
    
    /**
     * Static props?
     */
    RENDERGROUP_STATIC = 6,
    
    /**
     * For non transparent/solid entities.
     * 
     * For scripted entities, this will have [ENTITY:Draw](https://wiki.facepunch.com/gmod/ENTITY:Draw) called
     */
    RENDERGROUP_OPAQUE = 7,
    
    /**
     * For translucent/transparent entities
     * 
     * For scripted entities, this will have [ENTITY:DrawTranslucent](https://wiki.facepunch.com/gmod/ENTITY:DrawTranslucent) called
     */
    RENDERGROUP_TRANSLUCENT = 8,
    
    /**
     * For both translucent/transparent and opaque/solid anim entities
     * 
     * For scripted entities, this will have both, [ENTITY:Draw](https://wiki.facepunch.com/gmod/ENTITY:Draw) and [ENTITY:DrawTranslucent](https://wiki.facepunch.com/gmod/ENTITY:DrawTranslucent) called
     */
    RENDERGROUP_BOTH = 9,
    
    /**
     * Solid weapon view models
     */
    RENDERGROUP_VIEWMODEL = 10,
    
    /**
     * Transparent overlays etc
     */
    RENDERGROUP_VIEWMODEL_TRANSLUCENT = 11,
    
    /**
     * For brush entities
     */
    RENDERGROUP_OPAQUE_BRUSH = 12,
    
    /**
     * Unclassfied. Won't get drawn.
     */
    RENDERGROUP_OTHER = 13,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum RENDERMODE {
    /**
     * Default render mode. Transparently has no effect.
     */
    RENDERMODE_NORMAL = 0,
    
    /**
     * Supports transparency.
     * 
     * Use this to make alpha of [Global.Color](https://wiki.facepunch.com/gmod/Global.Color) work for your entity. For players, it must be set for their active weapon aswell.
     */
    RENDERMODE_TRANSCOLOR = 1,
    
    /**
     * 
     */
    RENDERMODE_TRANSTEXTURE = 2,
    
    /**
     * Intended for glowing sprites. Allows transparency, and forces the sprite or model to be rendered unlit.
     * 
     * The size of a sprite rendered with Glow is consistent with the screen size (unlike the alternative World Space Glow), making it appear larger at a distance, in comparison to the world.
     * 
     * The GlowProxySize keyvalue affects this Render Mode on sprites.
     */
    RENDERMODE_GLOW = 3,
    
    /**
     * Enables Alphatesting. Legacy port from Goldsource. Obsolete in Source due to Alphatesting being handled in materials. Does not allow transparency.
     */
    RENDERMODE_TRANSALPHA = 4,
    
    /**
     * Add the material's color values to the existing image, instead of performing a multiplication. Sprites will appear through world geometry and the sprite/model will always brighten the world. Allows transparency.
     */
    RENDERMODE_TRANSADD = 5,
    
    /**
     * Causes the material to be not be drawn at all, similarly to Don't Render.
     */
    RENDERMODE_ENVIROMENTAL = 6,
    
    /**
     * Functions like Additive, but also blends between animation frames. Requires the material to have a functioning animating texture. Allows transparency.
     */
    RENDERMODE_TRANSADDFRAMEBLEND = 7,
    
    /**
     * Functions similarly to Additive, except that the alpha channel controls the opacity of the sprite. An example of use is for dark sprites, with an example material being sprites/strider_blackball.vmt.
     */
    RENDERMODE_TRANSALPHADD = 8,
    
    /**
     * Functions similarly to Glow, with the exception that the size of the sprite is relative to the world rather than the screen.
     * 
     * The GlowProxySize keyvalue affects this Render Mode on sprites.
     */
    RENDERMODE_WORLDGLOW = 9,
    
    /**
     * The entity is still being drawn and networked albeit invisible, therefore not making this Render Mode ideal for performance reasons.
     * 
     * To completely avoid drawing and networking an entity, see EF_NODRAW.
     */
    RENDERMODE_NONE = 10,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum RT_SIZE {
    /**
     * Only allowed for render targets that don't want a depth buffer (because if they have a depth buffer, the render target must be less than or equal to the size of the framebuffer).
     */
    RT_SIZE_NO_CHANGE = 0,
    
    /**
     * Don't play with the specified width and height other than making sure it fits in the framebuffer.
     */
    RT_SIZE_DEFAULT = 1,
    
    /**
     * Apply picmip to the render target's width and height.
     */
    RT_SIZE_PICMIP = 2,
    
    /**
     * frame_buffer_width / 4
     */
    RT_SIZE_HDR = 3,
    
    /**
     * Same size as frame buffer, or next lower power of 2 if we can't do that.
     */
    RT_SIZE_FULL_FRAME_BUFFER = 4,
    
    /**
     * Target of specified size, don't mess with dimensions
     */
    RT_SIZE_OFFSCREEN = 5,
    
    /**
     * Same size as the frame buffer, rounded up if necessary for systems that can't do non-power of two textures.
     */
    RT_SIZE_FULL_FRAME_BUFFER_ROUNDED_UP = 6,
    
    /**
     * Rounded down to power of 2, essentially
     */
    RT_SIZE_REPLAY_SCREENSHOT = 7,
    
    /**
     * Use the size passed in. Don't clamp it to the frame buffer size. Really.
     */
    RT_SIZE_LITERAL = 8,
    
    /**
     * 
     */
    RT_SIZE_LITERAL_PICMIP = 9,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum SCHED {
    /**
     * The schedule enum limit
     */
    LAST_SHARED_SCHEDULE = 88,
    
    /**
     * Begins AI script based on NPC's `m_hCine` save value.
     */
    SCHED_AISCRIPT = 56,
    
    /**
     * Idle stance and face ideal yaw angles.
     */
    SCHED_ALERT_FACE = 5,
    
    /**
     * 
     */
    SCHED_ALERT_FACE_BESTSOUND = 6,
    
    /**
     * 
     */
    SCHED_ALERT_REACT_TO_COMBAT_SOUND = 7,
    
    /**
     * Rotate 180 degrees and back to check for enemies.
     */
    SCHED_ALERT_SCAN = 8,
    
    /**
     * Remain idle until an enemy is heard or found.
     */
    SCHED_ALERT_STAND = 9,
    
    /**
     * Walk until an enemy is heard or found.
     */
    SCHED_ALERT_WALK = 10,
    
    /**
     * Remain idle until provoked or an enemy is found.
     */
    SCHED_AMBUSH = 52,
    
    /**
     * Performs ACT_ARM.
     */
    SCHED_ARM_WEAPON = 48,
    
    /**
     * Back away from enemy. If not possible to back away then go behind enemy.
     */
    SCHED_BACK_AWAY_FROM_ENEMY = 24,
    
    /**
     * Requires valid enemy, backs away from SaveValue: m_vSavePosition
     */
    SCHED_BACK_AWAY_FROM_SAVE_POSITION = 26,
    
    /**
     * Heavy damage was taken for the first time in a while.
     */
    SCHED_BIG_FLINCH = 23,
    
    /**
     * Begin chasing an enemy.
     */
    SCHED_CHASE_ENEMY = 17,
    
    /**
     * Failed to chase enemy.
     */
    SCHED_CHASE_ENEMY_FAILED = 18,
    
    /**
     * Face current enemy.
     */
    SCHED_COMBAT_FACE = 12,
    
    /**
     * Will walk around patrolling an area until an enemy is found.
     */
    SCHED_COMBAT_PATROL = 75,
    
    /**
     * 
     */
    SCHED_COMBAT_STAND = 15,
    
    /**
     * 
     */
    SCHED_COMBAT_SWEEP = 13,
    
    /**
     * 
     */
    SCHED_COMBAT_WALK = 16,
    
    /**
     * When not moving, will perform ACT_COWER.
     */
    SCHED_COWER = 40,
    
    /**
     * Regular NPC death.
     */
    SCHED_DIE = 53,
    
    /**
     * Plays NPC death sound (doesn't kill NPC).
     */
    SCHED_DIE_RAGDOLL = 54,
    
    /**
     * Holsters active weapon. (Only works with NPC's that can holster weapons)
     */
    SCHED_DISARM_WEAPON = 49,
    
    /**
     * 
     */
    SCHED_DROPSHIP_DUSTOFF = 79,
    
    /**
     * Preform Ducking animation. (Only works with npc_alyx)
     */
    SCHED_DUCK_DODGE = 84,
    
    /**
     * Search for a place to shoot current enemy.
     */
    SCHED_ESTABLISH_LINE_OF_FIRE = 35,
    
    /**
     * Fallback from an established line of fire.
     */
    SCHED_ESTABLISH_LINE_OF_FIRE_FALLBACK = 36,
    
    /**
     * Failed doing current schedule.
     */
    SCHED_FAIL = 81,
    
    /**
     * Failed to establish a line of fire.
     */
    SCHED_FAIL_ESTABLISH_LINE_OF_FIRE = 38,
    
    /**
     * 
     */
    SCHED_FAIL_NOSTOP = 82,
    
    /**
     * Failed to take cover.
     */
    SCHED_FAIL_TAKE_COVER = 31,
    
    /**
     * Fall to ground when in the air.
     */
    SCHED_FALL_TO_GROUND = 78,
    
    /**
     * Will express fear face. (Only works on NPCs with expressions)
     */
    SCHED_FEAR_FACE = 14,
    
    /**
     * 
     */
    SCHED_FLEE_FROM_BEST_SOUND = 29,
    
    /**
     * Plays ACT_FLINCH_PHYSICS.
     */
    SCHED_FLINCH_PHYSICS = 80,
    
    /**
     * Force walk to SaveValue: m_vecLastPosition (debug).
     */
    SCHED_FORCED_GO = 71,
    
    /**
     * Force run to SaveValue: m_vecLastPosition (debug).
     */
    SCHED_FORCED_GO_RUN = 72,
    
    /**
     * Pick up item if within a radius of 5 units.
     */
    SCHED_GET_HEALTHKIT = 66,
    
    /**
     * Take cover and reload weapon.
     */
    SCHED_HIDE_AND_RELOAD = 50,
    
    /**
     * Idle stance
     */
    SCHED_IDLE_STAND = 1,
    
    /**
     * Walk to position.
     */
    SCHED_IDLE_WALK = 2,
    
    /**
     * Walk to random position within a radius of 200 units.
     */
    SCHED_IDLE_WANDER = 3,
    
    /**
     * 
     */
    SCHED_INTERACTION_MOVE_TO_PARTNER = 85,
    
    /**
     * 
     */
    SCHED_INTERACTION_WAIT_FOR_PARTNER = 86,
    
    /**
     * 
     */
    SCHED_INVESTIGATE_SOUND = 11,
    
    /**
     * 
     */
    SCHED_MELEE_ATTACK1 = 41,
    
    /**
     * 
     */
    SCHED_MELEE_ATTACK2 = 42,
    
    /**
     * Move away from player.
     */
    SCHED_MOVE_AWAY = 68,
    
    /**
     * Stop moving and continue enemy scan.
     */
    SCHED_MOVE_AWAY_END = 70,
    
    /**
     * Failed to move away; stop moving.
     */
    SCHED_MOVE_AWAY_FAIL = 69,
    
    /**
     * Move away from enemy while facing it and checking for new enemies.
     */
    SCHED_MOVE_AWAY_FROM_ENEMY = 25,
    
    /**
     * Move to the range the weapon is preferably used at.
     */
    SCHED_MOVE_TO_WEAPON_RANGE = 34,
    
    /**
     * Pick up a new weapon if within a radius of 5 units.
     */
    SCHED_NEW_WEAPON = 63,
    
    /**
     * Fail safe: Create the weapon that the NPC went to pick up if it was removed during pick up schedule.
     */
    SCHED_NEW_WEAPON_CHEAT = 64,
    
    /**
     * No schedule is being performed.
     */
    SCHED_NONE = 0,
    
    /**
     * Prevents movement until COND.NPC_UNFREEZE(68) is set.
     */
    SCHED_NPC_FREEZE = 73,
    
    /**
     * Run to random position and stop if enemy is heard or found.
     */
    SCHED_PATROL_RUN = 76,
    
    /**
     * Walk to random position and stop if enemy is heard or found.
     */
    SCHED_PATROL_WALK = 74,
    
    /**
     * 
     */
    SCHED_PRE_FAIL_ESTABLISH_LINE_OF_FIRE = 37,
    
    /**
     * 
     */
    SCHED_RANGE_ATTACK1 = 43,
    
    /**
     * 
     */
    SCHED_RANGE_ATTACK2 = 44,
    
    /**
     * Stop moving and reload until danger is heard.
     */
    SCHED_RELOAD = 51,
    
    /**
     * Retreat from the established enemy.
     */
    SCHED_RUN_FROM_ENEMY = 32,
    
    /**
     * 
     */
    SCHED_RUN_FROM_ENEMY_FALLBACK = 33,
    
    /**
     * 
     */
    SCHED_RUN_FROM_ENEMY_MOB = 83,
    
    /**
     * Run to random position within a radius of 500 units.
     */
    SCHED_RUN_RANDOM = 77,
    
    /**
     * 
     */
    SCHED_SCENE_GENERIC = 62,
    
    /**
     * 
     */
    SCHED_SCRIPTED_CUSTOM_MOVE = 59,
    
    /**
     * 
     */
    SCHED_SCRIPTED_FACE = 61,
    
    /**
     * 
     */
    SCHED_SCRIPTED_RUN = 58,
    
    /**
     * 
     */
    SCHED_SCRIPTED_WAIT = 60,
    
    /**
     * 
     */
    SCHED_SCRIPTED_WALK = 57,
    
    /**
     * Shoot cover that the enemy is behind.
     */
    SCHED_SHOOT_ENEMY_COVER = 39,
    
    /**
     * Sets the NPC to a sleep-like state.
     */
    SCHED_SLEEP = 87,
    
    /**
     * 
     */
    SCHED_SMALL_FLINCH = 22,
    
    /**
     * 
     */
    SCHED_SPECIAL_ATTACK1 = 45,
    
    /**
     * 
     */
    SCHED_SPECIAL_ATTACK2 = 46,
    
    /**
     * 
     */
    SCHED_STANDOFF = 47,
    
    /**
     * 
     */
    SCHED_SWITCH_TO_PENDING_WEAPON = 65,
    
    /**
     * 
     */
    SCHED_TAKE_COVER_FROM_BEST_SOUND = 28,
    
    /**
     * Take cover from current enemy.
     */
    SCHED_TAKE_COVER_FROM_ENEMY = 27,
    
    /**
     * Flee from SaveValue: vLastKnownLocation
     */
    SCHED_TAKE_COVER_FROM_ORIGIN = 30,
    
    /**
     * Chase set NPC target.
     */
    SCHED_TARGET_CHASE = 21,
    
    /**
     * Face NPC target.
     */
    SCHED_TARGET_FACE = 20,
    
    /**
     * Human victory dance.
     */
    SCHED_VICTORY_DANCE = 19,
    
    /**
     * 
     */
    SCHED_WAIT_FOR_SCRIPT = 55,
    
    /**
     * 
     */
    SCHED_WAIT_FOR_SPEAK_FINISH = 67,
    
    /**
     * Spot an enemy and go from an idle state to combat state.
     */
    SCHED_WAKE_ANGRY = 4,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum SCREENFADE {
    /**
     * Fade out after the hold time has passed
     */
    SCREENFADEIN = 1,
    
    /**
     * Fade in, hold time passes, disappear
     */
    SCREENFADEOUT = 2,
    
    /**
     * With white color, turns the screen black
     */
    SCREENFADEMODULATE = 4,
    
    /**
     * No effects, never disappear
     */
    SCREENFADESTAYOUT = 8,
    
    /**
     * Appear, Disappear, no effects
     */
    SCREENFADEPURGE = 16,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum SENSORBONE {
    /**
     * 
     */
    SENSORBONESHOULDER_RIGHT = 8,
    
    /**
     * 
     */
    SENSORBONESHOULDER_LEFT = 4,
    
    /**
     * 
     */
    SENSORBONEHIP = 0,
    
    /**
     * 
     */
    SENSORBONEELBOW_RIGHT = 9,
    
    /**
     * 
     */
    SENSORBONEKNEE_RIGHT = 17,
    
    /**
     * 
     */
    SENSORBONEWRIST_RIGHT = 10,
    
    /**
     * 
     */
    SENSORBONEANKLE_LEFT = 14,
    
    /**
     * 
     */
    SENSORBONEFOOT_LEFT = 15,
    
    /**
     * 
     */
    SENSORBONEWRIST_LEFT = 6,
    
    /**
     * 
     */
    SENSORBONEFOOT_RIGHT = 19,
    
    /**
     * 
     */
    SENSORBONEHAND_RIGHT = 11,
    
    /**
     * 
     */
    SENSORBONESHOULDER = 2,
    
    /**
     * 
     */
    SENSORBONEHIP_LEFT = 12,
    
    /**
     * 
     */
    SENSORBONEHIP_RIGHT = 16,
    
    /**
     * 
     */
    SENSORBONEHAND_LEFT = 7,
    
    /**
     * 
     */
    SENSORBONEANKLE_RIGHT = 18,
    
    /**
     * 
     */
    SENSORBONESPINE = 1,
    
    /**
     * 
     */
    SENSORBONEELBOW_LEFT = 5,
    
    /**
     * 
     */
    SENSORBONEKNEE_LEFT = 13,
    
    /**
     * 
     */
    SENSORBONEHEAD = 3,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum SF {
    /**
     * Citizen that resupplies ammo
     */
    SF_CITIZEN_AMMORESUPPLIER = 524288,
    
    /**
     * "Follow the player as soon as I spawn"
     */
    SF_CITIZEN_FOLLOW = 65536,
    
    /**
     * "Work outside the speech semaphore system"
     */
    SF_CITIZEN_IGNORE_SEMAPHORE = 2097152,
    
    /**
     * Makes the citizen a medic
     */
    SF_CITIZEN_MEDIC = 131072,
    
    /**
     * Citizen cannot join players squad, and will not able to be commanded by the Half-Life 2 command system for Citizens
     */
    SF_CITIZEN_NOT_COMMANDABLE = 1048576,
    
    /**
     * Gives the citizen a random head
     */
    SF_CITIZEN_RANDOM_HEAD = 262144,
    
    /**
     * Gives the citizen a random female head
     */
    SF_CITIZEN_RANDOM_HEAD_FEMALE = 8388608,
    
    /**
     * Gives the citizen a random male head
     */
    SF_CITIZEN_RANDOM_HEAD_MALE = 4194304,
    
    /**
     * "Use render bounds instead of human hull for guys sitting in chairs, etc". Must be set before Spawn() is called to take effect
     */
    SF_CITIZEN_USE_RENDER_BOUNDS = 16777216,
    
    /**
     * Makes the floor turret friendly
     */
    SF_FLOOR_TURRET_CITIZEN = 512,
    
    /**
     * Do Alternate collision for this NPC (player avoidance)
     */
    SF_NPC_ALTCOLLISION = 4096,
    
    /**
     * [Think outside PVS](https://developer.valvesoftware.com/wiki/NPC_Sensing)
     */
    SF_NPC_ALWAYSTHINK = 1024,
    
    /**
     * NPC Drops health kit when it dies
     */
    SF_NPC_DROP_HEALTHKIT = 8,
    
    /**
     * Fade Corpse
     */
    SF_NPC_FADE_CORPSE = 512,
    
    /**
     * If not set, means *teleport* to ground
     */
    SF_NPC_FALL_TO_GROUND = 4,
    
    /**
     * No IDLE sounds until angry
     */
    SF_NPC_GAG = 2,
    
    /**
     * Long Visibility/Shoot
     */
    SF_NPC_LONG_RANGE = 256,
    
    /**
     * Ignore player push - Don't give way to player
     */
    SF_NPC_NO_PLAYER_PUSHAWAY = 16384,
    
    /**
     * NPC Doesn't drop weapon on death
     */
    SF_NPC_NO_WEAPON_DROP = 8192,
    
    /**
     * Don't acquire enemies or avoid obstacles
     */
    SF_NPC_START_EFFICIENT = 16,
    
    /**
     * This entity is a template for the [npc_template_maker](https://developer.valvesoftware.com/wiki/Npc_template_maker). It will not spawn automatically and cannot be used with [point_template](https://developer.valvesoftware.com/wiki/Point_template).
     */
    SF_NPC_TEMPLATE = 2048,
    
    /**
     * Wait for script
     */
    SF_NPC_WAIT_FOR_SCRIPT = 128,
    
    /**
     * Wait till seen
     */
    SF_NPC_WAIT_TILL_SEEN = 1,
    
    /**
     * If set, calls [PhysObj:EnableMotion](https://wiki.facepunch.com/gmod/PhysObj:EnableMotion)( false ) on the func_physbox when the physics are created
     */
    SF_PHYSBOX_MOTIONDISABLED = 32768,
    
    /**
     * Gravity gun is ALWAYS allowed to pick this up.
     */
    SF_PHYSBOX_ALWAYS_PICK_UP = 1048576,
    
    /**
     * Gravity gun is NOT allowed to pick this up.
     */
    SF_PHYSBOX_NEVER_PICK_UP = 2097152,
    
    /**
     * Gravity gun is NOT allowed to punt this entity.
     */
    SF_PHYSBOX_NEVER_PUNT = 4194304,
    
    /**
     * If set, calls [PhysObj:EnableMotion](https://wiki.facepunch.com/gmod/PhysObj:EnableMotion)( false ) on the func_physbox when the physics are created. See [Physics optimization](https://developer.valvesoftware.com/wiki/Physics_optimization).
     */
    SF_PHYSPROP_MOTIONDISABLED = 8,
    
    /**
     * Prevent that physbox from being picked up.
     */
    SF_PHYSPROP_PREVENT_PICKUP = 512,
    
    /**
     * This flag is set if the entity is gib.
     */
    SF_PHYSPROP_IS_GIB = 4194304,
    
    /**
     * Makes the rollermine friendly.
     */
    SF_ROLLERMINE_FRIENDLY = 65536,
    
    /**
     * If set before [Entity:Spawn](https://wiki.facepunch.com/gmod/Entity:Spawn), the weapon will be constrained and will not simply fall to the ground.
     */
    SF_WEAPON_START_CONSTRAINED = 1,
    
    /**
     * Player is NOT allowed to pick this up.
     */
    SF_WEAPON_NO_PLAYER_PICKUP = 2,
    
    /**
     * Physgun is NOT allowed to pick this up.
     */
    SF_WEAPON_NO_PHYSCANNON_PUNT = 4,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum SIGNONSTATE {
    /**
     * 
     */
    SIGNONSTATE_NONE = 0,
    
    /**
     * 
     */
    SIGNONSTATE_CHALLENGE = 1,
    
    /**
     * 
     */
    SIGNONSTATE_CONNECTED = 2,
    
    /**
     * 
     */
    SIGNONSTATE_NEW = 3,
    
    /**
     * 
     */
    SIGNONSTATE_PRESPAWN = 4,
    
    /**
     * 
     */
    SIGNONSTATE_SPAWN = 5,
    
    /**
     * 
     */
    SIGNONSTATE_FULL = 6,
    
    /**
     * 
     */
    SIGNONSTATE_CHANGELEVEL = 7,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum SIM {
    /**
     * Don't simulate physics
     */
    SIM_NOTHING = 0,
    
    /**
     * Vectors in local coordinate system
     */
    SIM_LOCAL_ACCELERATION = 1,
    
    /**
     * Vectors in local coordinate system
     */
    SIM_LOCAL_FORCE = 2,
    
    /**
     * Vectors in world coordinate system
     */
    SIM_GLOBAL_ACCELERATION = 3,
    
    /**
     * Vectors in world coordinate system
     */
    SIM_GLOBAL_FORCE = 4,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum SND {
    /**
     * To keep the compiler happy
     */
    SND_NOFLAGS = 0,
    
    /**
     * Change sound vol
     */
    SND_CHANGE_VOL = 1,
    
    /**
     * Change sound pitch
     */
    SND_CHANGE_PITCH = 2,
    
    /**
     * Stop the sound
     */
    SND_STOP = 4,
    
    /**
     * We're spawning, used in some cases for ambients. Not sent over net, only a param between dll and server.
     */
    SND_SPAWNING = 8,
    
    /**
     * Sound has an initial delay
     */
    SND_DELAY = 16,
    
    /**
     * Stop all looping sounds on the entity.
     */
    SND_STOP_LOOPING = 32,
    
    /**
     * This sound should be paused if the game is paused
     */
    SND_SHOULDPAUSE = 128,
    
    /**
     * 
     */
    SND_IGNORE_PHONEMES = 256,
    
    /**
     * Used to change all sounds emitted by an entity, regardless of scriptname
     */
    SND_IGNORE_NAME = 512,
    
    /**
     * 
     */
    SND_DO_NOT_OVERWRITE_EXISTING_ON_CHANNEL = 1024,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum SNDLVL {
    /**
     * Sound plays everywhere
     */
    SNDLVL_NONE = 0,
    
    /**
     * Rustling leaves
     */
    SNDLVL_20dB = 20,
    
    /**
     * Whispering
     */
    SNDLVL_25dB = 25,
    
    /**
     * Library
     */
    SNDLVL_30dB = 30,
    
    /**
     * 
     */
    SNDLVL_35dB = 35,
    
    /**
     * 
     */
    SNDLVL_40dB = 40,
    
    /**
     * Refrigerator
     */
    SNDLVL_45dB = 45,
    
    /**
     * Average home
     */
    SNDLVL_50dB = 50,
    
    /**
     * 
     */
    SNDLVL_55dB = 55,
    
    /**
     * Normal conversation, clothes dryer
     */
    SNDLVL_60dB = 60,
    
    /**
     * *The same as SNDLVL_60dB*
     */
    SNDLVL_IDLE = 60,
    
    /**
     * Washing machine, dishwasher
     */
    SNDLVL_65dB = 65,
    
    /**
     * 
     */
    SNDLVL_STATIC = 66,
    
    /**
     * Car, vacuum cleaner, mixer, electric sewing machine
     */
    SNDLVL_70dB = 70,
    
    /**
     * Busy traffic
     */
    SNDLVL_75dB = 75,
    
    /**
     * *The same as SNDLVL_75dB*
     */
    SNDLVL_NORM = 75,
    
    /**
     * Mini-bike, alarm clock, noisy restaurant, office tabulator, outboard motor, passing snowmobile
     */
    SNDLVL_80dB = 80,
    
    /**
     * *The same as SNDLVL_80dB*
     */
    SNDLVL_TALKING = 80,
    
    /**
     * Average factory, electric shaver
     */
    SNDLVL_85dB = 85,
    
    /**
     * Screaming child, passing motorcycle, convertible ride on freeway
     */
    SNDLVL_90dB = 90,
    
    /**
     * 
     */
    SNDLVL_95dB = 95,
    
    /**
     * Subway train, diesel truck, woodworking shop, pneumatic drill, boiler shop, jackhammer
     */
    SNDLVL_100dB = 100,
    
    /**
     * Helicopter, power mower
     */
    SNDLVL_105dB = 105,
    
    /**
     * Snowmobile (drivers seat), inboard motorboat, sandblasting
     */
    SNDLVL_110dB = 110,
    
    /**
     * Car horn, propeller aircraft
     */
    SNDLVL_120dB = 120,
    
    /**
     * Air raid siren
     */
    SNDLVL_130dB = 130,
    
    /**
     * Threshold of pain, gunshot, jet engine
     */
    SNDLVL_140dB = 140,
    
    /**
     * *The same as SNDLVL_140dB*
     */
    SNDLVL_GUNFIRE = 140,
    
    /**
     * 
     */
    SNDLVL_150dB = 150,
    
    /**
     * Rocket launching
     */
    SNDLVL_180dB = 180,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum SOLID {
    /**
     * Does not collide with anything.
     * 
     * **Note:**
     * >No physics object will be created when using this with [Entity:PhysicsInit](https://wiki.facepunch.com/gmod/Entity:PhysicsInit).
     * 
     */
    SOLID_NONE = 0,
    
    /**
     * The entity has a brush model defined by the map. Does not collide with other SOLID_BSP entities.
     */
    SOLID_BSP = 1,
    
    /**
     * Uses the entity's axis-aligned bounding box for collisions.
     */
    SOLID_BBOX = 2,
    
    /**
     * Uses the entity's object-aligned bounding box for collisions.
     */
    SOLID_OBB = 3,
    
    /**
     * Same as SOLID_OBB but restricts orientation to the Z-axis.
     * 
     * **Note:**
     * >Seems to be broken.
     * 
     */
    SOLID_OBB_YAW = 4,
    
    /**
     * Always call the entity's `ICollideable::TestCollision` method for traces regardless of the presence of `FSOLID_CUSTOMRAYTEST` or `FSOLID_CUSTOMBOXTEST`. This will only be called back to Lua as [ENTITY:TestCollision](https://wiki.facepunch.com/gmod/ENTITY:TestCollision) for `"anim"` type SENTs.
     */
    SOLID_CUSTOM = 5,
    
    /**
     * Uses the [PhysObj](https://wiki.facepunch.com/gmod/PhysObj)ects of the entity.
     */
    SOLID_VPHYSICS = 6,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum SOUND {
    /**
     * 
     */
    SOUND_NONE = 0,
    
    /**
     * 
     */
    SOUND_COMBAT = 1,
    
    /**
     * 
     */
    SOUND_WORLD = 2,
    
    /**
     * 
     */
    SOUND_PLAYER = 4,
    
    /**
     * 
     */
    SOUND_DANGER = 8,
    
    /**
     * 
     */
    SOUND_BULLET_IMPACT = 16,
    
    /**
     * Considered a scent.
     */
    SOUND_CARCASS = 32,
    
    /**
     * Considered a scent.
     */
    SOUND_MEAT = 64,
    
    /**
     * Considered a scent.
     */
    SOUND_GARBAGE = 128,
    
    /**
     * Keeps certain creatures at bay, such as Antlions.
     */
    SOUND_THUMPER = 256,
    
    /**
     * Gets the antlion's attention.
     */
    SOUND_BUGBAIT = 512,
    
    /**
     * 
     */
    SOUND_PHYSICS_DANGER = 1024,
    
    /**
     * Only scares the sniper NPC.
     */
    SOUND_DANGER_SNIPERONLY = 2048,
    
    /**
     * 
     */
    SOUND_MOVE_AWAY = 4096,
    
    /**
     * 
     */
    SOUND_PLAYER_VEHICLE = 8192,
    
    /**
     * Changes listener's readiness (Player Companion only)
     */
    SOUND_READINESS_LOW = 16384,
    
    /**
     * 
     */
    SOUND_READINESS_MEDIUM = 32768,
    
    /**
     * 
     */
    SOUND_READINESS_HIGH = 65536,
    
    /**
     * Additional context for SOUND_DANGER
     */
    SOUND_CONTEXT_FROM_SNIPER = 1048576,
    
    /**
     * Added to SOUND_COMBAT
     */
    SOUND_CONTEXT_GUNFIRE = 2097152,
    
    /**
     * Explosion going to happen here.
     */
    SOUND_CONTEXT_MORTAR = 4194304,
    
    /**
     * Only combine can hear sounds marked this way.
     */
    SOUND_CONTEXT_COMBINE_ONLY = 8388608,
    
    /**
     * React to sound source's origin, not sound's location
     */
    SOUND_CONTEXT_REACT_TO_SOURCE = 16777216,
    
    /**
     * Context added to SOUND_COMBAT, usually.
     */
    SOUND_CONTEXT_EXPLOSION = 33554432,
    
    /**
     * Combine do NOT hear this
     */
    SOUND_CONTEXT_EXCLUDE_COMBINE = 67108864,
    
    /**
     * Treat as a normal danger sound if you see the source, otherwise turn to face source.
     */
    SOUND_CONTEXT_DANGER_APPROACH = 134217728,
    
    /**
     * Only player allies can hear this sound.
     */
    SOUND_CONTEXT_ALLIES_ONLY = 268435456,
    
    /**
     * HACK: need this because we're not treating the SOUND_xxx values as true bit values! See switch in OnListened.
     */
    SOUND_CONTEXT_PLAYER_VEHICLE = 536870912,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum STENCIL {
    /**
     * Never passes.
     */
    STENCIL_NEVER = 1,
    
    /**
     * Passes where the reference value is less than the stencil value.
     */
    STENCIL_LESS = 2,
    
    /**
     * Passes where the reference value is equal to the stencil value.
     */
    STENCIL_EQUAL = 3,
    
    /**
     * Passes where the reference value is less than or equal to the stencil value.
     */
    STENCIL_LESSEQUAL = 4,
    
    /**
     * Passes where the reference value is greater than the stencil value.
     */
    STENCIL_GREATER = 5,
    
    /**
     * Passes where the reference value is not equal to the stencil value.
     */
    STENCIL_NOTEQUAL = 6,
    
    /**
     * Passes where the reference value is greater than or equal to the stencil value.
     */
    STENCIL_GREATEREQUAL = 7,
    
    /**
     * Always passes.
     */
    STENCIL_ALWAYS = 8,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum STENCILCOMPARISONFUNCTION {
    /**
     * Never passes.
     */
    STENCILCOMPARISONFUNCTION_NEVER = 1,
    
    /**
     * Passes where the reference value is less than the stencil value.
     */
    STENCILCOMPARISONFUNCTION_LESS = 2,
    
    /**
     * Passes where the reference value is equal to the stencil value.
     */
    STENCILCOMPARISONFUNCTION_EQUAL = 3,
    
    /**
     * Passes where the reference value is less than or equal to the stencil value.
     */
    STENCILCOMPARISONFUNCTION_LESSEQUAL = 4,
    
    /**
     * Passes where the reference value is greater than the stencil value.
     */
    STENCILCOMPARISONFUNCTION_GREATER = 5,
    
    /**
     * Passes where the reference value is not equal to the stencil value.
     */
    STENCILCOMPARISONFUNCTION_NOTEQUAL = 6,
    
    /**
     * Passes where the reference value is greater than or equal to the stencil value.
     */
    STENCILCOMPARISONFUNCTION_GREATEREQUAL = 7,
    
    /**
     * Always passes.
     */
    STENCILCOMPARISONFUNCTION_ALWAYS = 8,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum STENCILOPERATION {
    /**
     * Preserves the existing stencil buffer value.
     */
    STENCILOPERATION_KEEP = 1,
    
    /**
     * Sets the value in the stencil buffer to 0.
     */
    STENCILOPERATION_ZERO = 2,
    
    /**
     * Sets the value in the stencil buffer to the reference value, set using [render.SetStencilReferenceValue](https://wiki.facepunch.com/gmod/render.SetStencilReferenceValue).
     */
    STENCILOPERATION_REPLACE = 3,
    
    /**
     * Increments the value in the stencil buffer by 1, clamping the result.
     */
    STENCILOPERATION_INCRSAT = 4,
    
    /**
     * Decrements the value in the stencil buffer by 1, clamping the result.
     */
    STENCILOPERATION_DECRSAT = 5,
    
    /**
     * Inverts the value in the stencil buffer.
     */
    STENCILOPERATION_INVERT = 6,
    
    /**
     * Increments the value in the stencil buffer by 1, wrapping around on overflow.
     */
    STENCILOPERATION_INCR = 7,
    
    /**
     * Decrements the value in the stencil buffer by 1, wrapping around on overflow.
     */
    STENCILOPERATION_DECR = 8,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum STEPSOUNDTIME {
    /**
     * Normal step
     */
    STEPSOUNDTIME_NORMAL = 0,
    
    /**
     * Step on ladder
     */
    STEPSOUNDTIME_ON_LADDER = 1,
    
    /**
     * Step in water, with water reaching knee
     */
    STEPSOUNDTIME_WATER_KNEE = 2,
    
    /**
     * Step in water, with water reaching foot
     */
    STEPSOUNDTIME_WATER_FOOT = 3,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum STUDIO {
    /**
     * The current render is for opaque renderables only
     */
    STUDIO_RENDER = 1,
    
    /**
     * 
     */
    STUDIO_VIEWXFORMATTACHMENTS = 2,
    
    /**
     * The current render is for translucent renderables only
     */
    STUDIO_DRAWTRANSLUCENTSUBMODELS = 4,
    
    /**
     * The current render is for both opaque and translucent renderables
     */
    STUDIO_TWOPASS = 8,
    
    /**
     * 
     */
    STUDIO_STATIC_LIGHTING = 16,
    
    /**
     * 
     */
    STUDIO_WIREFRAME = 32,
    
    /**
     * 
     */
    STUDIO_ITEM_BLINK = 64,
    
    /**
     * 
     */
    STUDIO_NOSHADOWS = 128,
    
    /**
     * 
     */
    STUDIO_WIREFRAME_VCOLLIDE = 256,
    
    /**
     * Not a studio flag, but used to flag when we want studio stats
     */
    STUDIO_GENERATE_STATS = 16777216,
    
    /**
     * Not a studio flag, but used to flag model as using shadow depth material override
     */
    STUDIO_SSAODEPTHTEXTURE = 134217728,
    
    /**
     * Not a studio flag, but used to flag model as using shadow depth material override
     */
    STUDIO_SHADOWDEPTHTEXTURE = 1073741824,
    
    /**
     * Not a studio flag, but used to flag model as a non-sorting brush model
     */
    STUDIO_TRANSPARENCY = 2147483648,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum SURF {
    /**
     * Value will hold the light strength
     */
    SURF_LIGHT = 1,
    
    /**
     * The surface is a 2D skybox
     */
    SURF_SKY2D = 2,
    
    /**
     * This surface is a skybox, equivalent to HitSky in [Structures/TraceResult](https://wiki.facepunch.com/gmod/Structures/TraceResult)
     */
    SURF_SKY = 4,
    
    /**
     * This surface is animated water
     */
    SURF_WARP = 8,
    
    /**
     * This surface is translucent
     */
    SURF_TRANS = 16,
    
    /**
     * This surface cannot have portals placed on, used by Portal's gun
     */
    SURF_NOPORTAL = 32,
    
    /**
     * This surface is a trigger
     */
    SURF_TRIGGER = 64,
    
    /**
     * This surface is an invisible entity, equivalent to HitNoDraw in [Structures/TraceResult](https://wiki.facepunch.com/gmod/Structures/TraceResult)
     */
    SURF_NODRAW = 128,
    
    /**
     * Make a primary bsp splitter
     */
    SURF_HINT = 256,
    
    /**
     * This surface can be ignored by impact effects
     */
    SURF_SKIP = 512,
    
    /**
     * This surface has no lights calculated
     */
    SURF_NOLIGHT = 1024,
    
    /**
     * Calculate three lightmaps for the surface for bumpmapping
     */
    SURF_BUMPLIGHT = 2048,
    
    /**
     * No shadows are cast on this surface
     */
    SURF_NOSHADOWS = 4096,
    
    /**
     * No decals are applied to this surface
     */
    SURF_NODECALS = 8192,
    
    /**
     * Don't subdivide patches on this surface
     */
    SURF_NOCHOP = 16384,
    
    /**
     * This surface is part of an entity's hitbox
     */
    SURF_HITBOX = 32768,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum TASKSTATUS {
    /**
     * Just started
     */
    TASKSTATUS_NEW = 0,
    
    /**
     * Running task & movement.
     */
    TASKSTATUS_RUN_MOVE_AND_TASK = 1,
    
    /**
     * Just running movement.
     */
    TASKSTATUS_RUN_MOVE = 2,
    
    /**
     * Just running task.
     */
    TASKSTATUS_RUN_TASK = 3,
    
    /**
     * Completed, get next task.
     */
    TASKSTATUS_COMPLETE = 4,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum TEAM {
    /**
     * Connecting team ID, set when player connects to the server
     */
    TEAM_CONNECTING = 0,
    
    /**
     * Unassigned team ID, set right after player connected
     */
    TEAM_UNASSIGNED = 1001,
    
    /**
     * Spectator team ID
     */
    TEAM_SPECTATOR = 1002,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum TEXFILTER {
    /**
     * 
     */
    TEXFILTERNONE = 0,
    
    /**
     * 
     */
    TEXFILTERPOINT = 1,
    
    /**
     * 
     */
    TEXFILTERLINEAR = 2,
    
    /**
     * 
     */
    TEXFILTERANISOTROPIC = 3,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum TEXT_ALIGN {
    /**
     * Align the text on the left
     */
    TEXT_ALIGN_LEFT = 0,
    
    /**
     * Align the text in center
     */
    TEXT_ALIGN_CENTER = 1,
    
    /**
     * Align the text on the right
     */
    TEXT_ALIGN_RIGHT = 2,
    
    /**
     * Align the text on the top
     */
    TEXT_ALIGN_TOP = 3,
    
    /**
     * Align the text on the bottom
     */
    TEXT_ALIGN_BOTTOM = 4,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum TEXT_FILTER {
    /**
     * Unknown context.
     */
    TEXT_FILTER_UNKNOWN = 0,
    
    /**
     * Game content, only legally required filtering is performed.
     */
    TEXT_FILTER_GAME_CONTENT = 1,
    
    /**
     * Chat from another player.
     */
    TEXT_FILTER_CHAT = 2,
    
    /**
     * Character or item name.
     */
    TEXT_FILTER_NAME = 3,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum TEXTUREFLAGS {
    /**
     * Low quality, "pixel art" texture filtering.
     */
    TEXTUREFLAGS_POINTSAMPLE = 1,
    
    /**
     * Medium quality texture filtering.
     */
    TEXTUREFLAGS_TRILINEAR = 2,
    
    /**
     * Clamp S coordinates.
     */
    TEXTUREFLAGS_CLAMPS = 4,
    
    /**
     * Clamp T coordinates.
     */
    TEXTUREFLAGS_CLAMPT = 8,
    
    /**
     * High quality texture filtering.
     */
    TEXTUREFLAGS_ANISOTROPIC = 16,
    
    /**
     * Used in skyboxes. Makes sure edges are seamless.
     */
    TEXTUREFLAGS_HINT_DXT5 = 32,
    
    /**
     * Purpose unknown.
     */
    TEXTUREFLAGS_PWL_CORRECTED = 64,
    
    /**
     * Texture is a normal map.
     */
    TEXTUREFLAGS_NORMAL = 128,
    
    /**
     * Render largest mipmap only. (Does not delete existing mipmaps, just disables them.)
     */
    TEXTUREFLAGS_NOMIP = 256,
    
    /**
     * Not affected by texture resolution settings.
     */
    TEXTUREFLAGS_NOLOD = 512,
    
    /**
     * No Minimum Mipmap
     */
    TEXTUREFLAGS_ALL_MIPS = 1024,
    
    /**
     * Texture is an procedural texture (code can modify it).
     */
    TEXTUREFLAGS_PROCEDURAL = 2048,
    
    /**
     * One bit alpha channel used.
     */
    TEXTUREFLAGS_ONEBITALPHA = 4096,
    
    /**
     * Eight bit alpha channel used.
     */
    TEXTUREFLAGS_EIGHTBITALPHA = 8192,
    
    /**
     * Texture is an environment map.
     */
    TEXTUREFLAGS_ENVMAP = 16384,
    
    /**
     * Texture is a render target.
     */
    TEXTUREFLAGS_RENDERTARGET = 32768,
    
    /**
     * Texture is a depth render target.
     */
    TEXTUREFLAGS_DEPTHRENDERTARGET = 65536,
    
    /**
     * 
     */
    TEXTUREFLAGS_NODEBUGOVERRIDE = 131072,
    
    /**
     * 
     */
    TEXTUREFLAGS_SINGLECOPY = 262144,
    
    /**
     * 
     */
    TEXTUREFLAGS_UNUSED_00080000 = 524288,
    
    /**
     * Immediately destroy this texture when its reference count hits zero
     * 
     * (aka TEXTUREFLAGS_UNUSED_00100000)
     * 
     * @deprecated [object Object]
     * 
     */
    TEXTUREFLAGS_IMMEDIATE_CLEANUP = 1048576,
    
    /**
     * 
     */
    TEXTUREFLAGS_UNUSED_00200000 = 2097152,
    
    /**
     * 
     */
    TEXTUREFLAGS_UNUSED_00400000 = 4194304,
    
    /**
     * Do not buffer for Video Processing, generally render distance.
     */
    TEXTUREFLAGS_NODEPTHBUFFER = 8388608,
    
    /**
     * 
     */
    TEXTUREFLAGS_UNUSED_01000000 = 16777216,
    
    /**
     * Clamp U coordinates (for volumetric textures).
     */
    TEXTUREFLAGS_CLAMPU = 33554432,
    
    /**
     * Usable as a vertex texture
     */
    TEXTUREFLAGS_VERTEXTEXTURE = 67108864,
    
    /**
     * Texture is a SSBump. (SSB)
     */
    TEXTUREFLAGS_SSBUMP = 134217728,
    
    /**
     * 
     */
    TEXTUREFLAGS_UNUSED_10000000 = 268435456,
    
    /**
     * Clamp to border colour on all texture coordinates
     */
    TEXTUREFLAGS_BORDER = 536870912,
    
    /**
     * 
     */
    TEXTUREFLAGS_UNUSED_40000000 = 1073741824,
    
    /**
     * 
     */
    TEXTUREFLAGS_UNUSED_80000000 = 2147483648,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum TRACER {
    /**
     * Generates no tracer effects
     */
    TRACER_NONE = 0,
    
    /**
     * Generates tracer effects
     */
    TRACER_LINE = 1,
    
    /**
     * Unused.
     */
    TRACER_RAIL = 2,
    
    /**
     * Unused.
     */
    TRACER_BEAM = 3,
    
    /**
     * Generates tracer and makes whizzing noises if the bullet flies past the player being shot at
     */
    TRACER_LINE_AND_WHIZ = 4,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum TRANSMIT {
    /**
     * Always transmit the entity
     */
    TRANSMIT_ALWAYS = 0,
    
    /**
     * Never transmit the entity, default for point entities
     */
    TRANSMIT_NEVER = 1,
    
    /**
     * Transmit when entity is in players [PVS (Potential Visibility Set)](https://developer.valvesoftware.com/wiki/PVS "PVS - Valve Developer Community")
     */
    TRANSMIT_PVS = 2,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum TYPE {
    /**
     * Invalid type
     */
    TYPE_NONE = -1,
    
    /**
     * 
     * 
     * @deprecated Use TYPE_NONE
     * 
     */
    TYPE_INVALID = -1,
    
    /**
     * [nil](https://wiki.facepunch.com/gmod/nil)
     */
    TYPE_NIL = 0,
    
    /**
     * [boolean](https://wiki.facepunch.com/gmod/boolean)
     */
    TYPE_BOOL = 1,
    
    /**
     * [light userdata](https://wiki.facepunch.com/gmod/light_userdata)
     */
    TYPE_LIGHTUSERDATA = 2,
    
    /**
     * [number](https://wiki.facepunch.com/gmod/number)
     */
    TYPE_NUMBER = 3,
    
    /**
     * [string](https://wiki.facepunch.com/gmod/string)
     */
    TYPE_STRING = 4,
    
    /**
     * [table](https://wiki.facepunch.com/gmod/table)
     */
    TYPE_TABLE = 5,
    
    /**
     * [function](https://wiki.facepunch.com/gmod/function)
     */
    TYPE_FUNCTION = 6,
    
    /**
     * [userdata](https://wiki.facepunch.com/gmod/userdata)
     */
    TYPE_USERDATA = 7,
    
    /**
     * [thread](https://wiki.facepunch.com/gmod/thread)
     */
    TYPE_THREAD = 8,
    
    /**
     * [Entity](https://wiki.facepunch.com/gmod/Entity) and entity sub-classes including [Player](https://wiki.facepunch.com/gmod/Player), [Weapon](https://wiki.facepunch.com/gmod/Weapon), [NPC](https://wiki.facepunch.com/gmod/NPC), [Vehicle](https://wiki.facepunch.com/gmod/Vehicle), [CSEnt](https://wiki.facepunch.com/gmod/CSEnt), and [NextBot](https://wiki.facepunch.com/gmod/NextBot)
     */
    TYPE_ENTITY = 9,
    
    /**
     * [Vector](https://wiki.facepunch.com/gmod/Vector)
     */
    TYPE_VECTOR = 10,
    
    /**
     * [Angle](https://wiki.facepunch.com/gmod/Angle)
     */
    TYPE_ANGLE = 11,
    
    /**
     * [PhysObj](https://wiki.facepunch.com/gmod/PhysObj)
     */
    TYPE_PHYSOBJ = 12,
    
    /**
     * [ISave](https://wiki.facepunch.com/gmod/ISave)
     */
    TYPE_SAVE = 13,
    
    /**
     * [IRestore](https://wiki.facepunch.com/gmod/IRestore)
     */
    TYPE_RESTORE = 14,
    
    /**
     * [CTakeDamageInfo](https://wiki.facepunch.com/gmod/CTakeDamageInfo)
     */
    TYPE_DAMAGEINFO = 15,
    
    /**
     * [CEffectData](https://wiki.facepunch.com/gmod/CEffectData)
     */
    TYPE_EFFECTDATA = 16,
    
    /**
     * [CMoveData](https://wiki.facepunch.com/gmod/CMoveData)
     */
    TYPE_MOVEDATA = 17,
    
    /**
     * [CRecipientFilter](https://wiki.facepunch.com/gmod/CRecipientFilter)
     */
    TYPE_RECIPIENTFILTER = 18,
    
    /**
     * [CUserCmd](https://wiki.facepunch.com/gmod/CUserCmd)
     */
    TYPE_USERCMD = 19,
    
    /**
     * 
     * 
     * @deprecated Leftover from GMod 13 Beta
     * 
     */
    TYPE_SCRIPTEDVEHICLE = 20,
    
    /**
     * [IMaterial](https://wiki.facepunch.com/gmod/IMaterial)
     */
    TYPE_MATERIAL = 21,
    
    /**
     * [Panel](https://wiki.facepunch.com/gmod/Panel)
     */
    TYPE_PANEL = 22,
    
    /**
     * [CLuaParticle](https://wiki.facepunch.com/gmod/CLuaParticle)
     */
    TYPE_PARTICLE = 23,
    
    /**
     * [CLuaEmitter](https://wiki.facepunch.com/gmod/CLuaEmitter)
     */
    TYPE_PARTICLEEMITTER = 24,
    
    /**
     * [ITexture](https://wiki.facepunch.com/gmod/ITexture)
     */
    TYPE_TEXTURE = 25,
    
    /**
     * [bf_read](https://wiki.facepunch.com/gmod/bf_read)
     */
    TYPE_USERMSG = 26,
    
    /**
     * [ConVar](https://wiki.facepunch.com/gmod/ConVar)
     */
    TYPE_CONVAR = 27,
    
    /**
     * [IMesh](https://wiki.facepunch.com/gmod/IMesh)
     */
    TYPE_IMESH = 28,
    
    /**
     * [VMatrix](https://wiki.facepunch.com/gmod/VMatrix)
     */
    TYPE_MATRIX = 29,
    
    /**
     * [CSoundPatch](https://wiki.facepunch.com/gmod/CSoundPatch)
     */
    TYPE_SOUND = 30,
    
    /**
     * [pixelvis_handle_t](https://wiki.facepunch.com/gmod/pixelvis_handle_t)
     */
    TYPE_PIXELVISHANDLE = 31,
    
    /**
     * dlight_t. Metatable of a [Structures/DynamicLight](https://wiki.facepunch.com/gmod/Structures/DynamicLight)
     */
    TYPE_DLIGHT = 32,
    
    /**
     * [IVideoWriter](https://wiki.facepunch.com/gmod/IVideoWriter)
     */
    TYPE_VIDEO = 33,
    
    /**
     * [File](https://wiki.facepunch.com/gmod/File)
     */
    TYPE_FILE = 34,
    
    /**
     * [CLuaLocomotion](https://wiki.facepunch.com/gmod/CLuaLocomotion)
     */
    TYPE_LOCOMOTION = 35,
    
    /**
     * [PathFollower](https://wiki.facepunch.com/gmod/PathFollower)
     */
    TYPE_PATH = 36,
    
    /**
     * [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)
     */
    TYPE_NAVAREA = 37,
    
    /**
     * [IGModAudioChannel](https://wiki.facepunch.com/gmod/IGModAudioChannel)
     */
    TYPE_SOUNDHANDLE = 38,
    
    /**
     * [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder)
     */
    TYPE_NAVLADDER = 39,
    
    /**
     * [CNewParticleEffect](https://wiki.facepunch.com/gmod/CNewParticleEffect)
     */
    TYPE_PARTICLESYSTEM = 40,
    
    /**
     * [ProjectedTexture](https://wiki.facepunch.com/gmod/ProjectedTexture)
     */
    TYPE_PROJECTEDTEXTURE = 41,
    
    /**
     * [PhysCollide](https://wiki.facepunch.com/gmod/PhysCollide)
     */
    TYPE_PHYSCOLLIDE = 42,
    
    /**
     * [SurfaceInfo](https://wiki.facepunch.com/gmod/SurfaceInfo)
     */
    TYPE_SURFACEINFO = 43,
    
    /**
     * Amount of TYPE_* enums
     */
    TYPE_COUNT = 44,
    
    /**
     * Metatable of a [Color](https://wiki.facepunch.com/gmod/Color).
     * 
     * **Note:**
     * >This doesn't actually represent a unique type returned by [Global.TypeID](https://wiki.facepunch.com/gmod/Global.TypeID), but instead is a hack for networking colors with [net.WriteType](https://wiki.facepunch.com/gmod/net.WriteType).
     * 
     */
    TYPE_COLOR = 255,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum USE {
    /**
     * 
     */
    USE_OFF = 0,
    
    /**
     * 
     */
    USE_ON = 1,
    
    /**
     * 
     */
    USE_SET = 2,
    
    /**
     * 
     */
    USE_TOGGLE = 3,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum VIEW {
    /**
     * Default value
     */
    VIEW_MAIN = 0,
    
    /**
     * 3D skybox
     */
    VIEW_3DSKY = 1,
    
    /**
     * Rendering for `_rt_Camera` base texture material (`func_monitor`, `info_camera_link`).
     */
    VIEW_MONITOR = 2,
    
    /**
     * Water reflection
     */
    VIEW_REFLECTION = 3,
    
    /**
     * Water refraction
     */
    VIEW_REFRACTION = 4,
    
    /**
     * Used by `script_intro` entity.
     */
    VIEW_INTRO_PLAYER = 5,
    
    /**
     * Used by `script_intro` entity.
     */
    VIEW_INTRO_CAMERA = 6,
    
    /**
     * Internally used for [Global.ProjectedTexture](https://wiki.facepunch.com/gmod/Global.ProjectedTexture) and flashlight.
     */
    VIEW_SHADOW_DEPTH_TEXTURE = 7,
    
    /**
     * For SSAO depth. Can be accessed via [render.GetResolvedFullFrameDepth](https://wiki.facepunch.com/gmod/render.GetResolvedFullFrameDepth).
     */
    VIEW_SSAO = 8,
}

/**
 * 
 * @compileMembersOnly
 */
declare enum WEAPON_PROFICIENCY {
    /**
     * The NPC will miss a large majority of their shots.
     */
    WEAPON_PROFICIENCY_POOR = 0,
    
    /**
     * The NPC will miss about half of their shots.
     */
    WEAPON_PROFICIENCY_AVERAGE = 1,
    
    /**
     * The NPC will sometimes miss their shots.
     */
    WEAPON_PROFICIENCY_GOOD = 2,
    
    /**
     * The NPC will rarely miss their shots.
     */
    WEAPON_PROFICIENCY_VERY_GOOD = 3,
    
    /**
     * The NPC will almost never miss their shots.
     */
    WEAPON_PROFICIENCY_PERFECT = 4,
}

/**
 * [Shared and Menu]
 * 
 * Adds simple Get/Set accessor functions on the specified table.
 * Can also force the value to be set to a number, bool or string.
 * @param tab - The table to add the accessor functions to.
 * @param key - The key of the table to be get/set.
 * @param name - The name of the functions (will be prefixed with Get and Set).
 * @param [force = nil] - The type the setter should force to (uses [Enums/FORCE](https://wiki.facepunch.com/gmod/Enums/FORCE)).
 */
declare function AccessorFunc(tab: any, key: any, name: string, force?: FORCE): void;

/**
 * [Shared and Menu]
 * 
 * Defines a global entity class variable with an automatic value. In order to prevent collisions with other [Enums/CLASS](https://wiki.facepunch.com/gmod/Enums/CLASS). You should prefix your variable with CLASS_ for consistency.
 * @param name - The name of the new enum/global variable.
 */
declare function Add_NPC_Class(name: string): void;

/**
 * [Menu]
 * 
 * Adds the specified image path to the main menu background pool. Image can be png or jpeg.
 * @param path - Path to the image.
 */
declare function AddBackgroundImage(path: string): void;

/**
 * [Shared and Menu]
 * 
 * **.**Tells the engine to register a console command. If the command was ran, the engine calls [concommand.Run](https://wiki.facepunch.com/gmod/concommand.Run).
 * @param name - The name of the console command to add.
 * @param helpText - The help text.
 * @param flags - Concommand flags using [Enums/FCVAR](https://wiki.facepunch.com/gmod/Enums/FCVAR)
 */
declare function AddConsoleCommand(name: string, helpText: string, flags: FCVAR): void;

/**
 * [Shared]
 * 
 * Marks a Lua file to be sent to clients when they join the server. Doesn't do anything on the client - this means you can use it in a shared file without problems.
 * 
 * **Warning:**
 * >If the file trying to be added is empty, an error will occur, and the file will not be sent to the client
 * 		
 * 		The string cannot have whitespace.
 * 
 * **Note:**
 * >This function is not needed for scripts located in these paths because they are automatically sent to clients.  
 * 			**lua/matproxy/*  
 * 			**lua/postprocess/*  
 * 			**lua/vgui/*  
 * 			**lua/skins/*  
 * 			**lua/autorun/*  
 * 			**lua/autorun/client/*  
 * 			
 * 			You can add up to **8192** files. Each file can be up to **64KB** compressed (LZMA)
 * 
 * @param [file = current file] - The name/path to the Lua file that should be sent, **relative to the garrysmod/lua folder**. If no parameter is specified, it sends the current file.
 * The file path can be relative to the script it's ran from. For example, if your script is in `lua/myfolder/stuff.lua`, calling [Global.AddCSLuaFile](https://wiki.facepunch.com/gmod/Global.AddCSLuaFile)("otherstuff.lua") and [Global.AddCSLuaFile](https://wiki.facepunch.com/gmod/Global.AddCSLuaFile)("myfolder/otherstuff.lua") is the same thing.
 * **Note:**
 * >Please make sure your file names are unique, the filesystem is shared across all addons, so a file named `lua/config.lua` in your addon may be overwritten by the same file in another addon.
 * 
 */
declare function AddCSLuaFile(file?: string): void;

/**
 * [Client and Menu]
 * 
 * Loads the specified image from the `/cache` folder, used in combination [steamworks.Download](https://wiki.facepunch.com/gmod/steamworks.Download). Most addons will provide a 512x512 png image.
 * @param name - The name of the file.
 */
declare function AddonMaterial(name: string): IMaterial;

/**
 * [Server]
 * 
 * Adds the specified vector to the PVS which is currently building. This allows all objects in visleafs visible from that vector to be drawn.
 * @param position - The origin to add.
 */
declare function AddOriginToPVS(position: Vector): void;

/**
 * [Client]
 * 
 * This function creates a Custom Category in the Spawnlist. Use [Global.GenerateSpawnlistFromPath](https://wiki.facepunch.com/gmod/Global.GenerateSpawnlistFromPath) if you want to create a category with the contents of a folder.
 * 
 * **Warning:**
 * >Using this function before [SANDBOX:PopulateContent](https://wiki.facepunch.com/gmod/SANDBOX:PopulateContent) has been called will result in an error
 * 
 * @param pnlContent - The SMContentPanel of the Node
 * @param node - The Node
 * @param parentid - The ParentID to use
 * @param customProps - The Table with the Contents of the new Category
 */
declare function AddPropsOfParent(pnlContent: Panel, node: Panel, parentid: number, customProps: any): void;

/**
 * [Client]
 * 
 * This function creates a World Tip, similar to the one shown when aiming at a Thruster where it shows you its force.
 * 
 * This function will make a World Tip that will only last 50 milliseconds (1/20th of a second), so you must call it continuously as long as you want the World Tip to be shown. It is common to call it inside a Think hook.
 * 
 * Contrary to what the function's name implies, it is impossible to create more than one World Tip at the same time. A new World Tip will overwrite the old one, so only use this function when you know nothing else will also be using it.
 * 
 * See [SANDBOX:PaintWorldTips](https://wiki.facepunch.com/gmod/SANDBOX:PaintWorldTips) for more information.
 * 
 * **Note:**
 * >This function is only available in Sandbox and its derivatives
 * 
 * @param [entindex = nil] - **This argument is no longer used**; it has no effect on anything. You can use nil in this argument.
 * @param text - The text for the world tip to display.
 * @param [dieTime = SysTime() + 0.05] - **This argument is no longer used**; when you add a World Tip it will always last only 0.05 seconds. You can use nil in this argument.
 * @param [pos = ent:GetPos()] - Where in the world you want the World Tip to be drawn. If you add a valid Entity in the next argument, this argument will have no effect on the actual World Tip.
 * @param [ent = nil] - Which entity you want to associate with the World Tip. This argument is optional. If set to a valid entity, this will override the position set in `pos` with the Entity's position.
 */
declare function AddWorldTip(entindex?: number, text: string, dieTime?: number, pos?: Vector, ent?: Entity): void;

/**
 * [Shared and Menu]
 * 
 * Creates an [Angle](https://wiki.facepunch.com/gmod/Angle) object.
 * 
 * **Warning:**
 * >This function is very expensive when used in often running hooks or in operations requiring very frequent calls (like loops for example). It is better to store the angle in a variable or to use the [default angle](https://wiki.facepunch.com/gmod/Global_Variables#misc) available.
 * 
 * @param [pitch = 0] - The pitch value of the angle.
 * If this is an [Angle](https://wiki.facepunch.com/gmod/Angle), this function will return a copy of the given angle.
 * If this is a [string](https://wiki.facepunch.com/gmod/string), this function will try to parse the string as a angle. If it fails, it returns a 0 angle.
 * (See examples)
 * @param [yaw = 0] - The yaw value of the angle.
 * @param [roll = 0] - The roll value of the angle.
 */
declare function Angle(pitch = 0, yaw = 0, roll = 0): Angle;

/**
 * [Shared and Menu]
 * 
 * Returns an angle with a randomized pitch, yaw, and roll between min(inclusive), max(exclusive).
 * @param [min = -90 for pitch, -180 for yaw and roll] - Min bound inclusive.
 * @param [max = 90 for pitch, 180 for yaw and roll] - Max bound exclusive.
 */
declare function AngleRand(min?: number, max?: number): Angle;

/**
 * [Shared and Menu]
 * 
 * If the result of the first argument is false or nil, an error is thrown with the second argument as the message.
 * @param expression - The expression to assert.
 * @param [errorMessage = assertion failed!] - The error message to throw when assertion fails. This is only type-checked if the assertion fails.
 * @param [returns = nil] - Any arguments past the error message will be returned by a successful assert.
 */
declare function assert(expression: any, errorMessage?: string, ...returns?: any[]): LuaMultiReturn<[any, any, any[]]>;

/**
 * [Shared]
 * 
 * `BRANCH` is a variable containing a string indicating which (Beta) Branch of the game you are using.
 * 
 * This variable is only setup in **Client and Menu** There is no steam client context on a dedicated server.
 * 
 * For more information on beta branches, see# UsageThe possible outputs are `unknown` (None), `dev`, `prerelease` and `x86-64`
 * 
 */
declare function undefined(): void;

/**
 * [Shared]
 * 
 * Sends the specified Lua code to all connected clients and executes it.
 * 
 * **Note:**
 * >If you need to use this function more than once, consider using [net](https://wiki.facepunch.com/gmod/net) library.
 * 			Send net message and make the entire code you want to execute in [net.Receive](https://wiki.facepunch.com/gmod/net.Receive) on client.  
 * 			If executed **clientside** it won't do anything.
 * 
 * @param code - The code to be executed. Capped at length of 254 characters.
 */
declare function BroadcastLua(code: string): void;

/**
 * [Shared]
 * 
 * Dumps the networked variables of all entities into one table and returns it.
 * 
 */
declare function BuildNetworkedVarsTable(): any;

/**
 * [Menu]
 * 
 * Used internally to check if the current server the player is on can be added to favorites or not. Does not check if the server is ALREADY in the favorites.
 * 
 */
declare function CanAddServerToFavorites(): boolean;

/**
 * [Menu]
 * 
 * Aborts joining of the server you are currently joining.
 * 
 */
declare function CancelLoading(): void;

/**
 * [Menu]
 * 
 * Sets the active main menu background image to a random entry from the background images pool. Images are added with [Global.AddBackgroundImage](https://wiki.facepunch.com/gmod/Global.AddBackgroundImage).
 * @param currentgm - Apparently does nothing.
 */
declare function ChangeBackground(currentgm: string): void;

/**
 * [Client and Menu]
 * 
 * Automatically called by the engine when a panel is hovered over with the mouse
 * @param panel - Panel that has been hovered over
 */
declare function ChangeTooltip(panel: Panel): void;

/**
 * [Menu]
 * 
 * Empties the pool of main menu background images.
 * 
 */
declare function ClearBackgroundImages(): void;

/**
 * [Menu]
 * 
 * Clears all Lua Errors with the given group id.
 * @param group_id - group_id to remove. Will be "[addon-name]-0" or "Other-"
 */
declare function ClearLuaErrorGroup(group_id: string): void;

/**
 * [Menu]
 * 
 * Removes the given Problem from the Problems table and refreshes the Problems panel.
 * @param id - The Problem ID to remove
 */
declare function ClearProblem(id: string): void;

/**
 * [Client]
 * 
 * Creates a non physical entity that only exists on the client. See also [ents.CreateClientProp](https://wiki.facepunch.com/gmod/ents.CreateClientProp).
 * 
 * **Bug [#861](https://github.com/Facepunch/garrysmod-issues/issues/861):**
 * >Parented clientside models will become detached if the parent entity leaves the PVS. **A workaround is available on its github page.**
 * 
 * **Bug [#1387](https://github.com/Facepunch/garrysmod-issues/issues/1387):**
 * >Clientside entities are not garbage-collected, thus you must store a reference to the object and call [CSEnt:Remove](https://wiki.facepunch.com/gmod/CSEnt:Remove) manually. **To workaround this bug, you need to hold a reference (in a variable) to the entity and remove it when necessary.**
 * 
 * **Bug [#3184](https://github.com/Facepunch/garrysmod-issues/issues/3184):**
 * >Clientside models will occasionally delete themselves during high server lag.
 * 
 * @param model - The file path to the model.
 * **Warning:**
 * >Model must be precached with [util.PrecacheModel](https://wiki.facepunch.com/gmod/util.PrecacheModel) on the server before usage.
 * 
 * @param [renderGroup = RENDERGROUP_OTHER] - The render group of the entity for the clientside leaf system, see [Enums/RENDERGROUP](https://wiki.facepunch.com/gmod/Enums/RENDERGROUP).
 */
declare function ClientsideModel(model: string, renderGroup?: RENDERGROUP): CSEnt;

/**
 * [Client]
 * 
 * Creates a fully clientside ragdoll.
 * 
 * **Bug [#1387](https://github.com/Facepunch/garrysmod-issues/issues/1387):**
 * >Clientside entities are not garbage-collected, thus you must store a reference to the object and call [CSEnt:Remove](https://wiki.facepunch.com/gmod/CSEnt:Remove) manually.
 * 
 * **Note:**
 * >The ragdoll initially starts as hidden and with shadows disabled, see the example for how to enable it.
 * 
 * There's no need to call [Entity:Spawn](https://wiki.facepunch.com/gmod/Entity:Spawn) on this entity.
 * 
 * The physics won't initialize at all if the model hasn't been precached serverside first.
 * 
 * @param model - The file path to the model.
 * **Warning:**
 * >Model must be precached with [util.PrecacheModel](https://wiki.facepunch.com/gmod/util.PrecacheModel) on the server before usage.
 * 
 * @param [renderGroup = RENDERGROUP_OPAQUE] - The [Enums/RENDERGROUP](https://wiki.facepunch.com/gmod/Enums/RENDERGROUP) to assign.
 */
declare function ClientsideRagdoll(model: string, renderGroup?: RENDERGROUP): CSEnt;

/**
 * [Client]
 * 
 * Creates a scene entity based on the scene name and the entity.
 * @param name - The name of the scene.
 * @param targetEnt - The entity to play the scene on.
 */
declare function ClientsideScene(name: string, targetEnt: Entity): CSEnt;

/**
 * [Client and Menu]
 * 
 * Closes all Derma menus that have been passed to [Global.RegisterDermaMenuForClose](https://wiki.facepunch.com/gmod/Global.RegisterDermaMenuForClose) and calls [GM:CloseDermaMenus](https://wiki.facepunch.com/gmod/GM:CloseDermaMenus)
 * 
 */
declare function CloseDermaMenus(): void;

/**
 * [Shared and Menu]
 * 
 * Executes the specified action on the garbage collector.
 * @param [action = collect] - The action to run.
 * Valid actions are `collect`, `stop`, `restart`, `count`, `step`, `setpause`, `setstepmul` and `isrunning`.
 * **Note:**
 * >`isrunning` is only available on the x86-64 versions, because of the difference in the LuaJIT version. [See here](jit.version)
 * 
 * @param arg - The argument of the specified action, only applicable for `step`, `setpause` and `setstepmul`.
 */
declare function collectgarbage(action?: string, arg: number): any;

/**
 * [Shared and Menu]
 * 
 * Creates a [Color](https://wiki.facepunch.com/gmod/Color).
 * 
 * **Warning:**
 * >This function is very expensive when used in rendering hooks or in operations requiring very frequent calls (like loops for example). It is better to store the color in a variable or to use the [default colors](https://wiki.facepunch.com/gmod/Global_Variables#misc) available.
 * 
 * @param r - An integer from `0-255` describing the red value of the color.
 * @param g - An integer from `0-255` describing the green value of the color.
 * @param b - An integer from `0-255` describing the blue value of the color.
 * @param [a = 255] - An integer from `0-255` describing the alpha (transparency) of the color.
 */
declare function Color(r: number, g: number, b: number, a = 255): Color;

/**
 * [Shared and Menu]
 * 
 * Returns a new [Color](https://wiki.facepunch.com/gmod/Color) with the RGB components of the given [Color](https://wiki.facepunch.com/gmod/Color) and the alpha value specified.
 * @param color - The [Color](https://wiki.facepunch.com/gmod/Color) from which to take RGB values. This color will not be modified.
 * @param alpha - The new alpha value, a number between 0 and 255. Values above 255 will be clamped.
 */
declare function ColorAlpha(color: Color, alpha: number): Color;

/**
 * [Shared and Menu]
 * 
 * Creates a [Color](https://wiki.facepunch.com/gmod/Color) with randomized red, green, and blue components. If the alpha argument is true, alpha will also be randomized.
 * @param [a = false] - Should alpha be randomized.
 */
declare function ColorRand(a = false): Color;

/**
 * [Shared and Menu]
 * 
 * Converts a [Color](https://wiki.facepunch.com/gmod/Color) into HSL color space.
 * @param color - The [Color](https://wiki.facepunch.com/gmod/Color).
 */
declare function ColorToHSL(color: Color): LuaMultiReturn<[number, number, number]>;

/**
 * [Shared and Menu]
 * 
 * Converts a [Color](https://wiki.facepunch.com/gmod/Color) into HSV color space.
 * @param color - The [Color](https://wiki.facepunch.com/gmod/Color).
 */
declare function ColorToHSV(color: Color): LuaMultiReturn<[number, number, number]>;

/**
 * [Shared]
 * 
 * Attempts to compile the given file. If successful, returns a function that can be called to perform the actual execution of the script.
 * @param path - Path to the file, relative to the `garrysmod/lua/` directory.
 */
declare function CompileFile(path: string): Function;

/**
 * [Shared and Menu]
 * 
 * This function will compile the code argument as lua code and return a function that will execute that code. 
 * 
 * Please note that this function will not automatically execute the given code after compiling it.
 * @param code - The code to compile.
 * @param identifier - An identifier in case an error is thrown. (The same identifier can be used multiple times)
 * @param [HandleError = true] - If false this function will return an error string instead of throwing an error.
 */
declare function CompileString(code: string, identifier: string, HandleError = true): Function;

/**
 * [Shared and Menu]
 * 
 * Returns whether a [ConVar](https://wiki.facepunch.com/gmod/ConVar) with the given name exists or not
 * @param name - Name of the [ConVar](https://wiki.facepunch.com/gmod/ConVar).
 */
declare function ConVarExists(name: string): boolean;

/**
 * [Shared and Menu]
 * 
 * Makes a clientside-only console variable
 * 
 * Although this function is shared, it should only be used clientside.
 * 
 * **Note:**
 * >This function is a wrapper of [Global.CreateConVar](https://wiki.facepunch.com/gmod/Global.CreateConVar), with the difference being that FCVAR_ARCHIVE and FCVAR_USERINFO are added automatically when **shouldsave** and **userinfo** are true, respectively.
 * 
 * @param name - Name of the ConVar to be created and able to be accessed.
 * This cannot be a name of existing console command or console variable. It will silently fail if it is.
 * @param default_ - Default value of the ConVar.
 * @param [shouldsave = true] - Should the ConVar be saved across sessions in the cfg/client.vdf file.
 * @param [userinfo = false] - Should the ConVar and its containing data be sent to the server when it has changed. This makes the convar accessible from server using [Player:GetInfoNum](https://wiki.facepunch.com/gmod/Player:GetInfoNum) and similar functions.
 * @param [helptext = ] - Help text to display in the console.
 * @param [min = nil] - If set, the convar cannot be changed to a number lower than this value.
 * @param [max = nil] - If set, the convar cannot be changed to a number higher than this value.
 */
declare function CreateClientConVar(name: string, default_: string, shouldsave = true, userinfo = false, helptext?: string, min?: number, max?: number): ConVar;

/**
 * [Client]
 * 
 * Creates a ContextMenu.
 * 
 */
declare function CreateContextMenu(): void;

/**
 * [Shared and Menu]
 * 
 * Creates a console variable ([ConVar](https://wiki.facepunch.com/gmod/ConVar)), in general these are for things like gamemode/server settings.
 * 
 * **Warning:**
 * >Do not use the FCVAR_NEVER_AS_STRING and FCVAR_REPLICATED flags together, as this can cause the console variable to have strange values on the client.
 * 
 * @param name - Name of the [ConVar](https://wiki.facepunch.com/gmod/ConVar).
 * This cannot be a name of an engine console command or console variable. It will throw an error if it is. If it is the same name as another lua ConVar, it will return that ConVar object.
 * @param value - Default value of the convar. Can also be a number.
 * @param [flags = FCVAR_NONE] - Flags of the convar, see [Enums/FCVAR](https://wiki.facepunch.com/gmod/Enums/FCVAR), either as bitflag or as table.
 * @param [helptext = ] - The help text to show in the console.
 * @param [min = nil] - If set, the ConVar cannot be changed to a number lower than this value.
 * @param [max = nil] - If set, the ConVar cannot be changed to a number higher than this value.
 */
declare function CreateConVar(name: string, value: string, flags?: FCVAR, helptext?: string, min?: number, max?: number): ConVar;

/**
 * [Client and Menu]
 * 
 * Creates a new material with the specified name and shader.
 * 
 * Materials created with this function can be used in [Entity:SetMaterial](https://wiki.facepunch.com/gmod/Entity:SetMaterial) and [Entity:SetSubMaterial](https://wiki.facepunch.com/gmod/Entity:SetSubMaterial) by prepending a `!` to their material name argument.
 * 
 * This will not create a new material if another material object with the same name already exists. All Materials created by this functions are cleaned up on map shutdown.
 * 
 * **Bug [#1531](https://github.com/Facepunch/garrysmod-issues/issues/1531):**
 * >.pngs must be loaded with [Global.Material](https://wiki.facepunch.com/gmod/Global.Material) before being used with this function.
 * 
 * **Note:**
 * >This does not work with [patch materials](https://developer.valvesoftware.com/wiki/Patch).
 * 
 * @param name - The material name. Must be unique.
 * @param shaderName - The shader name. See [Shaders](https://wiki.facepunch.com/gmod/Shaders).
 * @param materialData - Key-value table that contains shader parameters and proxies.
 * * See: [List of Shader Parameters on Valve Developers Wiki](https://developer.valvesoftware.com/wiki/Category:List_of_Shader_Parameters) and each shader's page from .
 * **Note:**
 * >Unlike [IMaterial:SetTexture](https://wiki.facepunch.com/gmod/IMaterial:SetTexture), this table will not accept [ITexture](https://wiki.facepunch.com/gmod/ITexture) values. Instead, use the texture's name (see [ITexture:GetName](https://wiki.facepunch.com/gmod/ITexture:GetName)).
 * 
 */
declare function CreateMaterial(name: string, shaderName: string, materialData: any): IMaterial;

/**
 * [Menu]
 * 
 * Creates a new Preset from the given JSON string.
 * @param data - A JSON string containing all necessary informations.
 * 			JSON structue should be [Structures/Preset](https://wiki.facepunch.com/gmod/Structures/Preset)
 */
declare function CreateNewAddonPreset(data: Preset): void;

/**
 * [Client]
 * 
 * Creates a new particle system. See also [Entity:CreateParticleEffect](https://wiki.facepunch.com/gmod/Entity:CreateParticleEffect)
 * 
 * **Note:**
 * >The particle effect must be precached with [Global.PrecacheParticleSystem](https://wiki.facepunch.com/gmod/Global.PrecacheParticleSystem) and the file its from must be added via [game.AddParticles](https://wiki.facepunch.com/gmod/game.AddParticles) before it can be used!
 * 
 * @param ent - The entity to attach the control point to.
 * @param effect - The name of the effect to create. It must be precached.
 * @param partAttachment - See [Enums/PATTACH](https://wiki.facepunch.com/gmod/Enums/PATTACH).
 * @param [entAttachment = 0] - The attachment ID on the entity to attach the particle system to
 * @param [offset = Vector( 0, 0, 0 )] - The offset from the [Entity:GetPos](https://wiki.facepunch.com/gmod/Entity:GetPos) of the entity we are attaching this CP to.
 */
declare function CreateParticleSystem(ent: Entity, effect: string, partAttachment: PATTACH, entAttachment = 0, offset?: Vector): CNewParticleEffect;

/**
 * [Client]
 * 
 * Creates a new particle system, and sets control points 0 and 1 to given position, as well as optionally orientation of CP0 to the given angles. See also [Global.CreateParticleSystem](https://wiki.facepunch.com/gmod/Global.CreateParticleSystem)
 * 
 * **Note:**
 * >The particle effect must be precached with [Global.PrecacheParticleSystem](https://wiki.facepunch.com/gmod/Global.PrecacheParticleSystem) and the file its from must be added via [game.AddParticles](https://wiki.facepunch.com/gmod/game.AddParticles) before it can be used!
 * 
 * @param effect - The name of the effect to create. It must be precached.
 * @param pos - The position for the particle system.
 * @param [ang = Angle( 0, 0, 0 )] - The orientation of the particle system.
 */
declare function CreateParticleSystemNoEntity(effect: string, pos: Vector, ang?: Angle): CNewParticleEffect;

/**
 * [Shared]
 * 
 * Creates a new [PhysCollide](https://wiki.facepunch.com/gmod/PhysCollide) from the given bounds.
 * 
 * **Bug [#3568](https://github.com/Facepunch/garrysmod-issues/issues/3568):**
 * >This fails to create planes or points - no components of the mins or maxs can be the same.
 * 
 * @param mins - Min corner of the box. This is not automatically ordered with the maxs and must contain the smallest vector components. See [Global.OrderVectors](https://wiki.facepunch.com/gmod/Global.OrderVectors).
 * @param maxs - Max corner of the box. This is not automatically ordered with the mins and must contain the largest vector components.
 */
declare function CreatePhysCollideBox(mins: Vector, maxs: Vector): PhysCollide;

/**
 * [Shared]
 * 
 * Creates [PhysCollide](https://wiki.facepunch.com/gmod/PhysCollide) objects for every physics object the model has. The model must be precached with [util.PrecacheModel](https://wiki.facepunch.com/gmod/util.PrecacheModel) before being used with this function.
 * @param modelName - Model path to get the collision objects of.
 */
declare function CreatePhysCollidesFromModel(modelName: string): any;

/**
 * [Shared]
 * 
 * Returns a sound parented to the specified entity.
 * 
 * **Note:**
 * >You can only create one CSoundPatch per audio file, per entity at the same time.
 * 
 * **Note:**
 * >Valid sample rates: **11025 Hz, 22050 Hz and 44100 Hz**, otherwise you may see this kind of message:
 * 
 * `Unsupported 32-bit wave file your_sound.wav` and 
 * `Invalid sample rate (48000) for sound 'your_sound.wav'`
 * 
 * @param targetEnt - The target entity.
 * @param soundName - The sound to play.
 * @param [filter = nil] - A [CRecipientFilter](https://wiki.facepunch.com/gmod/CRecipientFilter) of the players that will have this sound networked to them.
 * If not set, the default is a [CPASAttenuationFilter](https://developer.valvesoftware.com/wiki/CRecipientFilter#Derived_classes).
 * **Note:**
 * >This argument only works serverside.
 * 
 */
declare function CreateSound(targetEnt: Entity, soundName: string, filter?: CRecipientFilter): CSoundPatch;

/**
 * [Client]
 * 
 * Creates and returns a new [DSprite](https://wiki.facepunch.com/gmod/DSprite) element with the supplied material.
 * @param material - Material the sprite should draw.
 */
declare function CreateSprite(material: IMaterial): Panel;

/**
 * [Shared and Menu]
 * 
 * Returns the uptime of the server in seconds (to at least 4 decimal places)
 * 
 * This is a synchronised value and affected by various factors such as host_timescale (or [game.GetTimeScale](https://wiki.facepunch.com/gmod/game.GetTimeScale)) and the server being paused - either by sv_pausable or all players disconnecting.
 * 
 * You should use this function for timing in-game events but not for real-world events.
 * 
 * See also: [Global.RealTime](https://wiki.facepunch.com/gmod/Global.RealTime), [Global.SysTime](https://wiki.facepunch.com/gmod/Global.SysTime)
 * 
 * **Bug [#3026](https://github.com/Facepunch/garrysmod-issues/issues/3026):**
 * >This returns 0 in [GM:PlayerAuthed](https://wiki.facepunch.com/gmod/GM:PlayerAuthed).
 * 
 * **Note:**
 * >This is internally defined as a float, and as such it will be affected by precision loss if your server uptime is more than 6 hours, which will cause jittery movement of players and props and inaccuracy of timers, it is highly encouraged to refresh or change the map when that happens (a server restart is not necessary).
 * 
 * This is **NOT** easy as it sounds to fix in the engine, so please refrain from posting issues about this
 * 
 * 
 */
declare function CurTime(): number;

/**
 * [Shared]
 * 
 * Returns an [CTakeDamageInfo](https://wiki.facepunch.com/gmod/CTakeDamageInfo) object.
 * 
 * **Bug [#2771](https://github.com/Facepunch/garrysmod-issues/issues/2771):**
 * >This does not create a unique object, but instead returns a shared reference. That means you cannot use two or more of these objects at once.
 * 
 * 
 */
declare function DamageInfo(): CTakeDamageInfo;

/**
 * [Shared and Menu]
 * 
 * Writes text to the right hand side of the screen, like the old error system. Messages disappear after a couple of seconds.
 * @param slot - The location on the right hand screen to write the debug info to. Starts at 0, no upper limit
 * @param info - The debugging information to be written to the screen
 */
declare function DebugInfo(slot: number, info: string): void;

/**
 * [Shared and Menu]
 * 
 * This is not a function. This is a preprocessor keyword that translates to:
 * ```
 * local BaseClass = baseclass.Get( "my_weapon" )
 * ```
 * If you type `DEFINE_BASECLASS( "my_weapon" )` in your script.
 * 
 * See [baseclass.Get](https://wiki.facepunch.com/gmod/baseclass.Get) for more information.
 * 
 * **Warning:**
 * >The preprocessor is not smart enough to know when substitution doesn't make sense, such as: table keys and strings.  
 * 
 * Running `print("DEFINE_BASECLASS")` will result in `local BaseClass = baseclass.Get`
 * 
 * @param value - Baseclass name
 */
declare function DEFINE_BASECLASS(value: string): void;

/**
 * [Menu]
 * 
 * Deletes the given Preset.
 * @param name - The name of the Preset to delete.
 */
declare function DeleteAddonPreset(name: string): void;

/**
 * [Shared]
 * 
 * Loads and registers the specified gamemode, setting the GM table's DerivedFrom field to the value provided, if the table exists. The DerivedFrom field is used post-gamemode-load as the "derived" parameter for [gamemode.Register](https://wiki.facepunch.com/gmod/gamemode.Register).
 * @param base - Gamemode name to derive from.
 */
declare function DeriveGamemode(base: string): void;

/**
 * [Client and Menu]
 * 
 * Creates a new derma animation.
 * @param name - Name of the animation to create
 * @param panel - Panel to run the animation on
 * @param func - Function to call to process the animation
 * Arguments:
 * * [Panel](https://wiki.facepunch.com/gmod/Panel) pnl - the panel passed to Derma_Anim
 * * [table](https://wiki.facepunch.com/gmod/table) anim - the anim table
 * * [number](https://wiki.facepunch.com/gmod/number) delta - the fraction of the progress through the animation
 * * [any](https://wiki.facepunch.com/gmod/any) data - optional data passed to the run metatable method
 */
declare function Derma_Anim(name: string, panel: Panel, func: Function): any;

/**
 * [Client and Menu]
 * 
 * Draws background blur around the given panel.
 * 
 * **Note:**
 * >Calling this on the same [Panel](https://wiki.facepunch.com/gmod/Panel) multiple times makes the blur darker.
 * 
 * @param panel - Panel to draw the background blur around
 * @param startTime - Time that the blur began being painted
 */
declare function Derma_DrawBackgroundBlur(panel: Panel, startTime: number): void;

/**
 * [Client and Menu]
 * 
 * Creates panel method that calls the supplied Derma skin hook via [derma.SkinHook](https://wiki.facepunch.com/gmod/derma.SkinHook)
 * @param panel - Panel to add the hook to
 * @param functionName - Name of panel function to create
 * @param hookName - Name of Derma skin hook to call within the function
 * @param typeName - Type of element to call Derma skin hook for
 */
declare function Derma_Hook(panel: Panel, functionName: string, hookName: string, typeName: string): void;

/**
 * [Client and Menu]
 * 
 * Makes the panel (usually an input of sorts) respond to changes in console variables by adding next functions to the panel:
 * * [Panel:SetConVar](https://wiki.facepunch.com/gmod/Panel:SetConVar)
 * * [Panel:ConVarChanged](https://wiki.facepunch.com/gmod/Panel:ConVarChanged)
 * * [Panel:ConVarStringThink](https://wiki.facepunch.com/gmod/Panel:ConVarStringThink)
 * * [Panel:ConVarNumberThink](https://wiki.facepunch.com/gmod/Panel:ConVarNumberThink)
 * 
 * The console variable value is saved in the `m_strConVar` property of the panel.
 * 
 * The panel should call
 * [Panel:ConVarStringThink](https://wiki.facepunch.com/gmod/Panel:ConVarStringThink) or 
 * [Panel:ConVarNumberThink](https://wiki.facepunch.com/gmod/Panel:ConVarNumberThink) 
 * in its [PANEL:Think](https://wiki.facepunch.com/gmod/PANEL:Think) hook and should call [Panel:ConVarChanged](https://wiki.facepunch.com/gmod/Panel:ConVarChanged) when the panel's value has changed.
 * @param target - The panel the functions should be added to.
 */
declare function Derma_Install_Convar_Functions(target: Panel): void;

/**
 * [Client and Menu]
 * 
 * Creates a derma window to display information
 * @param Text - The text within the created panel.
 * @param Title - The title of the created panel.
 * @param Button - The text of the button to close the panel.
 */
declare function Derma_Message(Text: string, Title: string, Button: string): Panel;

/**
 * [Client and Menu]
 * 
 * Shows a message box in the middle of the screen, with up to 4 buttons they can press.
 * @param [text = Message Text (Second Parameter)] - The message to display.
 * @param [title = Message Title (First Parameter)] - The title to give the message box.
 * @param btn1text - The text to display on the first button.
 * @param [btn1func = nil] - The function to run if the user clicks the first button.
 * @param [btn2text = nil] - The text to display on the second button.
 * @param [btn2func = nil] - The function to run if the user clicks the second button.
 * @param [btn3text = nil] - The text to display on the third button
 * @param [btn3func = nil] - The function to run if the user clicks the third button.
 * @param [btn4text = nil] - The text to display on the fourth button
 * @param [btn4func = nil] - The function to run if the user clicks the fourth button.
 */
declare function Derma_Query(text?: string, title?: string, btn1text: string, btn1func?: Function, btn2text?: string, btn2func?: Function, btn3text?: string, btn3func?: Function, btn4text?: string, btn4func?: Function): Panel;

/**
 * [Client and Menu]
 * 
 * Creates a derma window asking players to input a string.
 * @param title - The title of the created panel.
 * @param subtitle - The text above the input box
 * @param default_ - The default text for the input box.
 * @param confirm - The function to be called once the user has confirmed their input.
 * @param [cancel = nil] - The function to be called once the user has cancelled their input
 * @param [confirmText = OK] - Allows you to override text of the "OK" button
 * @param [cancelText = Cancel] - Allows you to override text of the "Cancel" button
 */
declare function Derma_StringRequest(title: string, subtitle: string, default_: string, confirm: Function, cancel?: Function, confirmText?: string, cancelText?: string): Panel;

/**
 * [Client and Menu]
 * 
 * Creates a [DMenu](https://wiki.facepunch.com/gmod/DMenu) and closes any current menus.
 * @param [keepOpen = false] - If we should keep other [DMenu](https://wiki.facepunch.com/gmod/DMenu)s open (`true`) or not (`false`).
 * @param [parent = nil] - The panel to parent the created menu to.
 */
declare function DermaMenu(keepOpen = false, parent?: Panel): Panel;

/**
 * [Client and Menu]
 * 
 * Sets whether rendering should be limited to being inside a panel or not.
 * 
 * See also [Panel:NoClipping](https://wiki.facepunch.com/gmod/Panel:NoClipping).
 * @param disable - Whether or not clipping should be disabled
 */
declare function DisableClipping(disable: boolean): boolean;

/**
 * [Client]
 * 
 * Cancels current DOF post-process effect started with [Global.DOF_Start](https://wiki.facepunch.com/gmod/Global.DOF_Start)
 * 
 */
declare function DOF_Kill(): void;

/**
 * [Client]
 * 
 * Cancels any existing DOF post-process effects.
 * Begins the DOF post-process effect.
 * 
 */
declare function DOF_Start(): void;

/**
 * [Client]
 * 
 * A hacky method used to fix some bugs regarding DoF. What this basically does it force all `C_BaseAnimating` entities to have the translucent <page text="rendergroup">Enums/RENDERGROUP</page>, even if they use opaque or two-pass models.
 * @param enable - Enables or disables depth-of-field mode
 */
declare function DOFModeHack(enable: boolean): void;

/**
 * [Menu]
 * 
 * Stops searching for new servers in the given category
 * @param category - The category to stop searching in. **Working Values: internet, favorite, history, lan**
 */
declare function DoStopServers(category: string): void;

/**
 * [Menu]
 * 
 * Draws the currently active main menu background image and handles transitioning between background images.
 * 
 * This is called by default in the menu panel's Paint hook.
 * 
 */
declare function DrawBackground(): void;

/**
 * [Client]
 * 
 * Draws the bloom shader, which creates a glowing effect from bright objects.
 * @param Darken - Determines how much to darken the effect. A lower number will make the glow come from lower light levels. A value of `1` will make the bloom effect unnoticeable. Negative values will make even pitch black areas glow.
 * @param Multiply - Will affect how bright the glowing spots are. A value of `0` will make the bloom effect unnoticeable.
 * @param SizeX - The size of the bloom effect along the horizontal axis.
 * @param SizeY - The size of the bloom effect along the vertical axis.
 * @param Passes - Determines how much to exaggerate the effect.
 * @param ColorMultiply - Will multiply the colors of the glowing spots, making them more vivid.
 * @param Red - How much red to multiply with the glowing color. Should be between `0` and `1`.
 * @param Green - How much green to multiply with the glowing color. Should be between `0` and `1`.
 * @param Blue - How much blue to multiply with the glowing color. Should be between `0` and `1`.
 */
declare function DrawBloom(Darken: number, Multiply: number, SizeX: number, SizeY: number, Passes: number, ColorMultiply: number, Red: number, Green: number, Blue: number): void;

/**
 * [Client]
 * 
 * Draws the Bokeh Depth Of Field effect .
 * @param intensity - Intensity of the effect.
 * @param distance - **Not worldspace distance**. Value range is from `0` to `1`.
 * @param focus - Focus. Recommended values are from 0 to 12.
 */
declare function DrawBokehDOF(intensity: number, distance: number, focus: number): void;

/**
 * [Client]
 * 
 * Draws the Color Modify shader, which can be used to adjust colors on screen.
 * @param modifyParameters - Color modification parameters. See [Shaders/g_colourmodify](https://wiki.facepunch.com/gmod/Shaders/g_colourmodify) and the example below. Note that if you leave out a field, it will retain its last value which may have changed if another caller uses this function.
 */
declare function DrawColorModify(modifyParameters: any): void;

/**
 * [Client]
 * 
 * Draws a material overlay on the screen.
 * @param Material - This will be the material that is drawn onto the screen.
 * @param RefractAmount - This will adjust how much the material will refract your screen.
 */
declare function DrawMaterialOverlay(Material: string, RefractAmount: number): void;

/**
 * [Client]
 * 
 * Creates a motion blur effect by drawing your screen multiple times.
 * @param AddAlpha - How much alpha to change per frame.
 * @param DrawAlpha - How much alpha the frames will have. A value of 0 will not render the motion blur effect.
 * @param Delay - Determines the amount of time between frames to capture.
 */
declare function DrawMotionBlur(AddAlpha: number, DrawAlpha: number, Delay: number): void;

/**
 * [Client]
 * 
 * Draws the sharpen shader, which creates more contrast.
 * @param Contrast - How much contrast to create.
 * @param Distance - How large the contrast effect will be.
 */
declare function DrawSharpen(Contrast: number, Distance: number): void;

/**
 * [Client]
 * 
 * Draws the sobel shader, which detects edges and draws a black border.
 * @param Threshold - Determines the threshold of edges. A value of `0` will make your screen completely black.
 */
declare function DrawSobel(Threshold: number): void;

/**
 * [Client]
 * 
 * Renders the post-processing effect of beams of light originating from the map's sun. Utilises the `pp/sunbeams` material.
 * @param darken - `$darken` property for sunbeams material.
 * @param multiplier - `$multiply` property for sunbeams material.
 * @param sunSize - `$sunsize` property for sunbeams material.
 * @param sunX - `$sunx` property for sunbeams material.
 * @param sunY - `$suny` property for sunbeams material.
 */
declare function DrawSunbeams(darken: number, multiplier: number, sunSize: number, sunX: number, sunY: number): void;

/**
 * [Client]
 * 
 * Draws the texturize shader, which replaces each pixel on your screen with a different part of the texture depending on its brightness. See <page text="g_texturize">Shaders/g_texturize</page> for information on making the texture.
 * @param Scale - Scale of the texture. A smaller number creates a larger texture.
 * @param BaseTexture - This will be the texture to use in the effect. Make sure you use [Global.Material](https://wiki.facepunch.com/gmod/Global.Material) to get the texture number.
 */
declare function DrawTexturize(Scale: number, BaseTexture: number): void;

/**
 * [Client]
 * 
 * Draws the toy town shader, which blurs the top and bottom of your screen. This can make very large objects look like toys, hence the name.
 * @param Passes - An integer determining how many times to draw the effect. A higher number creates more blur.
 * @param Height - The amount of screen which should be blurred on the top and bottom.
 */
declare function DrawToyTown(Passes: number, Height: number): void;

/**
 * [Server]
 * 
 * Drops the specified entity if it is being held by any player with Gravity Gun or +use pickup.
 * @param ent - The entity to drop.
 */
declare function DropEntityIfHeld(ent: Entity): void;

/**
 * [Shared]
 * 
 * Calls all NetworkVarNotify functions of the given entity with the given new value, but doesn't change the real value.  
 * internally uses [Entity:CallDTVarProxies](https://wiki.facepunch.com/gmod/Entity:CallDTVarProxies)
 * @param entity - The Entity to run the NetworkVarNotify functions from.
 * @param Type - The NetworkVar Type.
 * * `String`
 * * `Bool`
 * * `Float`
 * * `Int` (32-bit signed integer)
 * * `Vector`
 * * `Angle`
 * * `Entity`
 * @param index - The NetworkVar index.
 * @param new_value - The new value.
 */
declare function DTVar_ReceiveProxyGL(entity: Entity, Type: string, index: number, new_value: any): void;

/**
 * [Client]
 * 
 * Creates or replaces a dynamic light with the given id.
 * 
 * **Warning:**
 * >It is not safe to hold a reference to this object after creation since its data can be replaced by another dlight at any time.
 * 
 * **Bug [#3798](https://github.com/Facepunch/garrysmod-issues/issues/3798):**
 * >The minlight parameter affects the world and entities differently.
 * 
 * **Note:**
 * >Only 32 dlights and 64 elights can be active at once.
 * 
 * @param index - An unsigned Integer. Usually an <page text="entity index">Entity:EntIndex</page> is used here.
 * @param [elight = false] - Allocates an elight instead of a dlight. Elights have a higher light limit and do not light the world (making the "noworld" parameter have no effect).
 */
declare function DynamicLight(index: number, elight = false): DynamicLight;

/**
 * [Menu]
 * 
 * Creates a dynamic Material from the given materialPath
 * 
 * **Warning:**
 * >This function should never be used in a Rendering Hook because it creates a new dynamic material every time and can fill up your vram.
 * 
 * @param materialPath - The material with path. The path is relative to the `materials/` folder.
 * @param [flags = nil] - Some bind of bits / byte.
 * 		<validate>What does this argument do / use.</validate> Currently working value: "0100010" --nocull smooth
 */
declare function DynamicMaterial(materialPath: string, flags?: string): IMaterial;

/**
 * [Shared]
 * 
 * Returns a [CEffectData](https://wiki.facepunch.com/gmod/CEffectData) object to be used with [util.Effect](https://wiki.facepunch.com/gmod/util.Effect).
 * 
 * **Bug [#2771](https://github.com/Facepunch/garrysmod-issues/issues/2771):**
 * >This does not create a unique object, but instead returns a shared reference. That means you cannot use two or more of these objects at once.
 * 
 * 
 */
declare function EffectData(): CEffectData;

/**
 * [Shared and Menu]
 * 
 * An [eagerly evaluated](https://en.wikipedia.org/wiki/Eager_evaluation) [ternary operator](https://en.wikipedia.org/wiki/%3F:), or, in layman's terms, a compact "if then else" statement.
 * 
 * In most cases, you should just use Lua's ["pseudo" ternary operator](https://en.wikipedia.org/wiki/%3F:#Lua), like this:
 * 
 * ```
 * local myCondition = true
 * local consequent = "myCondition is true"
 * local alternative = "myCondition is false"
 * 
 * print(myCondition and consequent or alternative)
 * ```
 * 
 * In the above example, due to [short-circuit evaluation](https://en.wikipedia.org/wiki/Short-circuit_evaluation), `consequent` would be "skipped" and ignored (not evaluated) by Lua due to `myCondition` being `true`, and only `alternative` would be evaluated. However, when using `Either`, both `consequent` and `alternative` would be evaluated. A practical example of this can be found at the bottom of the page.
 * 
 * # Falsey values
 * 
 * If `consequent` is "falsey" (Lua considers both `false` and `nil` as false), this will not work. For example:
 * 
 * ```
 * local X = true
 * local Y = false
 * local Z = "myCondition is false"
 * 
 * print(X and Y or Z)
 * ```
 * 
 * This will actually print the value of `Z`.
 * 
 * In the above case, and other very rare cases, you may find `Either` useful.
 * @param condition - The condition to check if true or false.
 * @param truevar - If the condition isn't nil/false, returns this value.
 * @param falsevar - If the condition is nil/false, returns this value.
 */
declare function Either(condition: any, truevar: any, falsevar: any): any;

/**
 * [Shared]
 * 
 * Plays a sentence from `scripts/sentences.txt`
 * @param soundName - The sound to play
 * @param position - The position to play at
 * @param entity - The entity to emit the sound from. Must be [Entity:EntIndex](https://wiki.facepunch.com/gmod/Entity:EntIndex)
 * @param [channel = CHAN_AUTO] - The sound channel, see [Enums/CHAN](https://wiki.facepunch.com/gmod/Enums/CHAN).
 * @param [volume = 1] - The volume of the sound, from 0 to 1
 * @param [soundLevel = 75] - The sound level of the sound, see [Enums/SNDLVL](https://wiki.facepunch.com/gmod/Enums/SNDLVL)
 * @param [soundFlags = 0] - The flags of the sound, see [Enums/SND](https://wiki.facepunch.com/gmod/Enums/SND)
 * @param [pitch = 100] - The pitch of the sound, 0-255
 */
declare function EmitSentence(soundName: string, position: Vector, entity: number, channel?: CHAN, volume = 1, soundLevel = 75, soundFlags = 0, pitch = 100): void;

/**
 * [Shared]
 * 
 * Emits the specified sound at the specified position. See also [Entity:EmitSound](https://wiki.facepunch.com/gmod/Entity:EmitSound) if you wish to play sounds on a specific entity.
 * 
 * **Note:**
 * >Valid sample rates: **11025 Hz, 22050 Hz and 44100 Hz**, otherwise you may see this kind of message:
 * 
 * `Unsupported 32-bit wave file your_sound.wav` and 
 * `Invalid sample rate (48000) for sound 'your_sound.wav'`
 * 
 * @param soundName - The sound to play
 * This should either be a sound script name ([sound.Add](https://wiki.facepunch.com/gmod/sound.Add)) or a file path relative to the `sound/` folder. (Make note that it's not sound**s**)
 * @param position - The position where the sound is meant to play, which is also used for a network filter (`CPASAttenuationFilter`) to decide which players will hear the sound.
 * @param [entity = 0] - The entity to emit the sound from. Can be an [Entity:EntIndex](https://wiki.facepunch.com/gmod/Entity:EntIndex) or one of the following:
 * * `0` - Plays sound on the world (position set to `0,0,0`)
 * * `-1` - Plays sound on the local player (on server acts as `0`)
 * * `-2` - Plays UI sound (position set to `0,0,0`, no spatial sound, on server acts as `0`)
 * @param [channel = CHAN_AUTO] - The sound channel, see [Enums/CHAN](https://wiki.facepunch.com/gmod/Enums/CHAN).
 * @param [volume = 1] - The volume of the sound, from 0 to 1
 * @param [soundLevel = 75] - The sound level of the sound, see [Enums/SNDLVL](https://wiki.facepunch.com/gmod/Enums/SNDLVL)
 * @param [soundFlags = 0] - The flags of the sound, see [Enums/SND](https://wiki.facepunch.com/gmod/Enums/SND)
 * @param [pitch = 100] - The pitch of the sound, 0-255
 * @param [dsp = 0] - The DSP preset for this sound. [List of DSP presets](https://developer.valvesoftware.com/wiki/Dsp_presets)
 * @param [filter = nil] - If set serverside, the sound will only be networked to the clients in the filter.
 */
declare function EmitSound(soundName: string, position: Vector, entity = 0, channel?: CHAN, volume = 1, soundLevel = 75, soundFlags = 0, pitch = 100, dsp = 0, filter?: CRecipientFilter): void;

/**
 * [Client and Menu]
 * 
 * Removes the currently active tool tip from the screen.
 * @param panel - This is the panel that has a tool tip.
 */
declare function EndTooltip(panel: Panel): void;

/**
 * [Shared]
 * 
 * Returns the entity with the matching [Entity:EntIndex](https://wiki.facepunch.com/gmod/Entity:EntIndex).
 * 
 * Indices `1` through [game.MaxPlayers](https://wiki.facepunch.com/gmod/game.MaxPlayers)() are always reserved for players.
 * 
 * **Note:**
 * >In examples on this wiki, `Entity( 1 )` is used when a player entity is needed (see ). In singleplayer and listen servers, `Entity( 1 )` will always be the first player. In dedicated servers, however, `Entity( 1 )` won't always be a valid player if there is no one currently on the server.
 * 
 * @param entityIndex - The entity index.
 */
declare function Entity(entityIndex: number): Entity;

/**
 * [Shared and Menu]
 * 
 * Throws a Lua error and breaks out of the current call stack.
 * @param message - The error message to throw
 * @param [errorLevel = 1] - The level to throw the error at.
 */
declare function error(message: string, errorLevel = 1): void;

/**
 * [Shared and Menu]
 * 
 * Throws an error. This is currently an alias of [Global.ErrorNoHalt](https://wiki.facepunch.com/gmod/Global.ErrorNoHalt) despite it once throwing a halting error like <page text="error">Global.error(lowercase)</page> without the stack trace appended.
 * 
 * **Bug [#2113](https://github.com/Facepunch/garrysmod-issues/issues/2113):**
 * >This function throws a non-halting error instead of a halting error.
 * 
 * @param arguments - Converts all arguments to strings and prints them with no spacing or line breaks.
 */
declare function Error(...arguments: any[]): void;

/**
 * [Shared and Menu]
 * 
 * Throws a Lua error but does not break out of the current call stack.
 * This function will not print a stack trace like a normal error would.
 * Essentially similar if not equivalent to [Global.Msg](https://wiki.facepunch.com/gmod/Global.Msg).
 * @param arguments - Converts all arguments to strings and prints them with no spacing.
 */
declare function ErrorNoHalt(...arguments: any[]): void;

/**
 * [Shared and Menu]
 * 
 * Throws a Lua error but does not break out of the current call stack.
 * 
 * This function will print a stack trace like a normal error would.
 * @param arguments - Converts all arguments to strings and prints them with no spacing.
 */
declare function ErrorNoHaltWithStack(...arguments: any[]): void;

/**
 * [Client]
 * 
 * Returns the angles of the current render context as calculated by [GM:CalcView](https://wiki.facepunch.com/gmod/GM:CalcView).
 * 
 * **Bug [#2516](https://github.com/Facepunch/garrysmod-issues/issues/2516):**
 * >This function is only reliable inside rendering hooks.
 * 
 * 
 */
declare function EyeAngles(): Angle;

/**
 * [Client]
 * 
 * Returns the origin of the current render context as calculated by [GM:CalcView](https://wiki.facepunch.com/gmod/GM:CalcView).
 * 
 * **Bug [#2516](https://github.com/Facepunch/garrysmod-issues/issues/2516):**
 * >This function is only reliable inside rendering hooks.
 * 
 * 
 */
declare function EyePos(): Vector;

/**
 * [Client]
 * 
 * Returns the normal vector of the current render context as calculated by [GM:CalcView](https://wiki.facepunch.com/gmod/GM:CalcView), similar to [Global.EyeAngles](https://wiki.facepunch.com/gmod/Global.EyeAngles).
 * 
 * **Bug [#2516](https://github.com/Facepunch/garrysmod-issues/issues/2516):**
 * >This function is only reliable inside rendering hooks.
 * 
 * 
 */
declare function EyeVector(): Vector;

/**
 * [Shared and Menu]
 * 
 * Returns the meta table for the class with the matching name.
 * 
 * Internally returns [debug.getregistry](https://wiki.facepunch.com/gmod/debug.getregistry)()[metaName]
 * 
 * You can learn more about meta tables on the [Meta Tables](https://wiki.facepunch.com/gmod/Meta_Tables) page.
 * 
 * You can find a list of meta tables that can be retrieved with this function on [Enums/TYPE](https://wiki.facepunch.com/gmod/Enums/TYPE). The name in the description is the string to use with this function.
 * @param metaName - The object type to retrieve the meta table of.
 */
declare function FindMetaTable(metaName: string): any;

/**
 * [Client and Menu]
 * 
 * Returns the tool-tip text and tool-tip-panel (if any) of the given panel as well as itself
 * @param panel - Panel to find tool-tip of
 */
declare function FindTooltip(panel: Panel): LuaMultiReturn<[string, Panel, Panel]>;

/**
 * [Menu]
 * 
 * Refreshes all Addon Conflicts and Fires a Problem. Internally uses [Global.FireProblem](https://wiki.facepunch.com/gmod/Global.FireProblem)
 * 
 */
declare function FireAddonConflicts(): void;

/**
 * [Menu]
 * 
 * Fires a Problem with the given Data.
 * @param prob - The Problem table. See [Structures/Problem](https://wiki.facepunch.com/gmod/Structures/Problem)
 */
declare function FireProblem(prob: Problem): void;

/**
 * [Menu]
 * 
 * **.**
 * 		This function is called from the engine to notify the player about a problem in a more user friendly way compared to a console message.
 * @param id - The Problem ID.
 * @param severity - The Problem severity.
 * @param params - Additional Parameters.
 */
declare function FireProblemFromEngine(id: string, severity: number, params: string): void;

/**
 * [Shared and Menu]
 * 
 * Formats the specified values into the string given. Same as [string.format](https://wiki.facepunch.com/gmod/string.format).
 * @param format - The string to be formatted.
 * Follows this format: http://www.cplusplus.com/reference/cstdio/printf/
 * @param formatParameters - Values to be formatted into the string.
 */
declare function Format(format: string, ...formatParameters: any[]): string;

/**
 * [Shared]
 * 
 * Returns the number of frames rendered since the game was launched.
 * 
 */
declare function FrameNumber(): void;

/**
 * [Shared and Menu]
 * 
 * Returns the [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime)-based time in seconds it took to render the last frame.
 * 
 * This should be used for frame/tick based timing, such as movement prediction or animations.
 * 
 * For real-time-based frame time that isn't affected by `host_timescale`, use [Global.RealFrameTime](https://wiki.facepunch.com/gmod/Global.RealFrameTime). RealFrameTime is more suited for things like GUIs or HUDs.
 * 
 */
declare function FrameTime(): number;

/**
 * [Menu]
 * 
 * Callback function for when the client has joined a server. This function shows the server's loading URL by default.
 * @param servername - Server's name.
 * @param serverurl - Server's loading screen URL, or "" if the URL is not set.
 * @param mapname - Server's current map's name.
 * @param maxplayers - Max player count of server.
 * @param steamid - The local player's [Player:SteamID64](https://wiki.facepunch.com/gmod/Player:SteamID64).
 * @param gamemode - Server's current gamemode's folder name.
 */
declare function GameDetails(servername: string, serverurl: string, mapname: string, maxplayers: number, steamid: string, gamemode: string): void;

/**
 * [Shared and Menu]
 * 
 * Returns the current floored dynamic memory usage of Lua in kilobytes.
 * 
 * @deprecated This function was deprecated in Lua 5.1 and is removed in Lua 5.2. Use [Global.collectgarbage](https://wiki.facepunch.com/gmod/Global.collectgarbage)( "count" ) instead.
 * 
 * 
 */
declare function gcinfo(): number;

/**
 * [Client]
 * 
 * This function adds all models from a specified folder to a custom Spawnlist category. Internally uses [Global.AddPropsOfParent](https://wiki.facepunch.com/gmod/Global.AddPropsOfParent)
 * 
 * **Warning:**
 * >Using this function before [SANDBOX:PopulateContent](https://wiki.facepunch.com/gmod/SANDBOX:PopulateContent) has been called will result in an error
 * 
 * @param folder - the folder to search for models
 * @param path - The path to look for the files and directories in. See <page text="this list">File_Search_Paths</page> for a list of valid paths.
 * @param name - The Spawnmenu Category name
 * @param [icon = icon16/page.png] - The Spawnmenu Category Icon to use
 * @param appid - The AppID which is needed for the Content
 */
declare function GenerateSpawnlistFromPath(folder: string, path: string, name: string, icon?: string, appid: number): void;

/**
 * [Menu]
 * 
 * Returns if the game was started with either -noaddons or -noworkshop
 * 
 */
declare function GetAddonStatus(): LuaMultiReturn<[boolean, boolean]>;

/**
 * [Menu]
 * 
 * Gets miscellaneous information from Facepunches API.
 * 
 * **Note:**
 * >All dates are in [WDDX](https://www.php.net/manual/en/datetime.formats.compound.php) format
 * 
 * @param callback - Callback to be called when the API request is done.
 * 			Callback is called with one argument, a JSON which when converted into a table using [util.JSONToTable](https://wiki.facepunch.com/gmod/util.JSONToTable) contains the following:
 * ```js
 * {
 * 	"ManifestVersion": 	number - Version of the manifest
 * 	"Date": 			string - Date in WDDX format
 * 	// Contains all the blog posts, the things in the top right of the menu
 * 	"News": {
 * 		"Blogs": [
 * 			// Structure of blog posts
 * 			{ 
 * 				"Date": 		string - Date in WDDX format of the post
 * 				"ShortName": 	string - Short name of the post, identifier of it on the blog website
 * 				"Title": 		string - Title of the post
 * 				"HeaderImage": 	string - Main image of the post, showed in the top right
 * 				"SummaryHtml": 	string - Summary of the blogpost, text thats shown
 * 				"Url": 			string - URL to the post on the blog
 * 				"Tags": 		string - String of the posts tag
 * 			}
 * 		]
 * 	}
 * 	
 * 	// Array of Facepunches Mods, Admins and Devs
 * 	"Administrators": [
 * 		{
 * 			"UserId": 		string - SteamID64 of the person
 * 			"Level": 		string - Level of the user (Administrator, Developer or Moderator)
 * 		}
 * 	]
 * 	// Unused and contains nothing useful
 * 	"Heroes": {}
 * 	"SentryUrl": 		string - Nothing
 * 	"DatabaseUrl" 		string - URL to the Facepunch API (/database/{action}/)
 * 	"FeedbackUrl" 		string - URL to the Facepunch API (/feedback/add/)
 * 	"ReportUrl" 		string - URL to the Facepunch API (/feedback/report/)
 * 	"LeaderboardUrl" 	string - URL to the Facepunch API (/leaderboard/{action}/)
 * 	"BenchmarkUrl" 		string - URL to the Facepunch API (/benchmark/add/)
 * 	"AccountUrl" 		string - URL to the Facepunch API (/account/{action}/)
 * 	"Servers": {
 * 		"Official": [] // Nothing
 * 		
 * 		// List of blacklisted servers
 * 		"Banned": [
 * 			string 	- IP of the blacklisted server
 * 		]
 * 	}
 * }
 * ```
 */
declare function GetAPIManifest(callback: Function): void;

/**
 * [Shared and Menu]
 * 
 * Gets the [ConVar](https://wiki.facepunch.com/gmod/ConVar) with the specified name.
 * 
 * **Warning:**
 * >Due to this function using [Global.GetConVar_Internal](https://wiki.facepunch.com/gmod/Global.GetConVar_Internal) internally it tends to be relatively slow. Please attempt to 'cache' the return of what you used to make it instead of using this function. 
 * 
 * Example:
 * ```
 * local exampleConvar = CreateClientConVar("exampleConvar", "hi")
 * 
 * print(exampleConvar:GetString())
 * ```
 * 
 * **Note:**
 * >This function uses [Global.GetConVar_Internal](https://wiki.facepunch.com/gmod/Global.GetConVar_Internal) internally, but caches the result in Lua for quicker lookups.
 * 
 * @param name - Name of the ConVar to get
 */
declare function GetConVar(name: string): ConVar;

/**
 * [Shared and Menu]
 * 
 * Gets the ConVar with the specified name. This function doesn't cache the convar.
 * 
 * **Warning:**
 * >This function is very slow and not recommended. See [Global.GetConVar](https://wiki.facepunch.com/gmod/Global.GetConVar) for an example on how to properly store the return of what your using so you can avoid using this function as much as possible.
 * 
 * @param name - Name of the ConVar to get
 */
declare function GetConVar_Internal(name: string): ConVar;

/**
 * [Shared and Menu]
 * 
 * Gets the numeric value ConVar with the specified name.
 * 
 * @deprecated Store the [ConVar](https://wiki.facepunch.com/gmod/ConVar) object retrieved with [Global.GetConVar](https://wiki.facepunch.com/gmod/Global.GetConVar) and call [ConVar:GetInt](https://wiki.facepunch.com/gmod/ConVar:GetInt) or [ConVar:GetFloat](https://wiki.facepunch.com/gmod/ConVar:GetFloat) on it.
 * 
 * @param name - Name of the ConVar to get.
 */
declare function GetConVarNumber(name: string): number;

/**
 * [Shared and Menu]
 * 
 * Gets the string value ConVar with the specified name.
 * 
 * @deprecated Store the [ConVar](https://wiki.facepunch.com/gmod/ConVar) object retrieved with [Global.GetConVar](https://wiki.facepunch.com/gmod/Global.GetConVar) and call [ConVar:GetString](https://wiki.facepunch.com/gmod/ConVar:GetString) on it.
 * 
 * @param name - Name of the ConVar to get.
 */
declare function GetConVarString(name: string): string;

/**
 * [Menu]
 * 
 * Returns the default loading screen URL (asset://garrysmod/html/loading.html)
 * 
 */
declare function GetDefaultLoadingHTML(): string;

/**
 * [Menu]
 * 
 * Retrieves data about the demo with the specified filename. Similar to [Global.GetSaveFileDetails](https://wiki.facepunch.com/gmod/Global.GetSaveFileDetails).
 * @param filename - The file name of the demo.
 */
declare function GetDemoFileDetails(filename: string): any;

/**
 * [Menu]
 * 
 * Returns a table with the names of files needed from the server you are currently joining.
 * 
 */
declare function GetDownloadables(): any;

/**
 * [Shared and Menu]
 * 
 * Returns the environment table of either the stack level or the function specified.
 * @param [location = 1] - The object to get the enviroment from. Can also be a number that specifies the function at that stack level: Level 1 is the function calling getfenv.
 */
declare function getfenv(location = 1): any;

/**
 * [Shared]
 * 
 * Returns an angle that is shared between the server and all clients.
 * @param index - The unique index to identify the global value with.
 * @param [default_ = Angle( 0, 0, 0 )] - The value to return if the global value is not set.
 */
declare function GetGlobal2Angle(index: string, default_?: Angle): Angle;

/**
 * [Shared]
 * 
 * Returns a boolean that is shared between the server and all clients.
 * @param index - The unique index to identify the global value with.
 * @param [default_ = false] - The value to return if the global value is not set.
 */
declare function GetGlobal2Bool(index: string, default_ = false): boolean;

/**
 * [Shared]
 * 
 * Returns an entity that is shared between the server and all clients.
 * @param index - The unique index to identify the global value with.
 * @param [default_ = NULL] - The value to return if the global value is not set.
 */
declare function GetGlobal2Entity(index: string, default_?: Entity): Entity;

/**
 * [Shared]
 * 
 * Returns a float that is shared between the server and all clients.
 * @param index - The unique index to identify the global value with.
 * @param [default_ = 0] - The value to return if the global value is not set.
 */
declare function GetGlobal2Float(index: string, default_ = 0): number;

/**
 * [Shared]
 * 
 * Returns an integer that is shared between the server and all clients.
 * 
 * **Warning:**
 * >The integer has a 32 bit limit. Use [Global.GetGlobalInt](https://wiki.facepunch.com/gmod/Global.GetGlobalInt) for a higher limit
 * 
 * @param index - The unique index to identify the global value with.
 * @param [default_ = 0] - The value to return if the global value is not set.
 */
declare function GetGlobal2Int(index: string, default_ = 0): number;

/**
 * [Shared]
 * 
 * Returns a string that is shared between the server and all clients.
 * @param index - The unique index to identify the global value with.
 * @param [default_ = ] - The value to return if the global value is not set.
 */
declare function GetGlobal2String(index: string, default_?: string): string;

/**
 * [Shared]
 * 
 * Returns a value that is shared between the server and all clients.
 * @param index - The unique index to identify the global value with.
 * @param [default_ = nil] - The value to return if the global value is not set.
 */
declare function GetGlobal2Var(index: string, default_?: any): any;

/**
 * [Shared]
 * 
 * Returns a vector that is shared between the server and all clients.
 * @param Index - The unique index to identify the global value with.
 * @param Default - The value to return if the global value is not set.
 */
declare function GetGlobal2Vector(Index: string, Default: Vector): Vector;

/**
 * [Shared]
 * 
 * Returns an angle that is shared between the server and all clients.
 * @param index - The unique index to identify the global value with.
 * @param default_ - The value to return if the global value is not set.
 */
declare function GetGlobalAngle(index: string, default_: Angle): Angle;

/**
 * [Shared]
 * 
 * Returns a boolean that is shared between the server and all clients.
 * @param index - The unique index to identify the global value with.
 * @param [default_ = false] - The value to return if the global value is not set.
 */
declare function GetGlobalBool(index: string, default_ = false): boolean;

/**
 * [Shared]
 * 
 * Returns an entity that is shared between the server and all clients.
 * @param index - The unique index to identify the global value with.
 * @param [default_ = NULL] - The value to return if the global value is not set.
 */
declare function GetGlobalEntity(index: string, default_?: Entity): Entity;

/**
 * [Shared]
 * 
 * Returns a float that is shared between the server and all clients.
 * @param index - The unique index to identify the global value with.
 * @param [default_ = 0] - The value to return if the global value is not set.
 */
declare function GetGlobalFloat(index: string, default_ = 0): number;

/**
 * [Shared]
 * 
 * Returns an integer that is shared between the server and all clients.
 * 
 * **Bug [#3374](https://github.com/Facepunch/garrysmod-issues/issues/3374):**
 * >This function will not round decimal values as it actually networks a float internally.
 * 
 * @param index - The unique index to identify the global value with.
 * @param [default_ = 0] - The value to return if the global value is not set.
 */
declare function GetGlobalInt(index: string, default_ = 0): number;

/**
 * [Shared]
 * 
 * Returns a string that is shared between the server and all clients.
 * @param index - The unique index to identify the global value with.
 * @param [default_ = ] - The value to return if the global value is not set.
 */
declare function GetGlobalString(index: string, default_?: string): string;

/**
 * [Shared]
 * 
 * Returns a value that is shared between the server and all clients.
 * @param index - The unique index to identify the global value with.
 * @param [default_ = nil] - The value to return if the global value is not set.
 */
declare function GetGlobalVar(index: string, default_?: any): any;

/**
 * [Shared]
 * 
 * Returns a vector that is shared between the server and all clients.
 * @param Index - The unique index to identify the global value with.
 * @param Default - The value to return if the global value is not set.
 */
declare function GetGlobalVector(Index: string, Default: Vector): Vector;

/**
 * [Shared]
 * 
 * Returns the name of the current server.
 * 
 */
declare function GetHostName(): string;

/**
 * [Client]
 * 
 * Returns the panel that is used as a wrapper for the HUD. If you want your panel to be hidden when the main menu is opened, parent it to this. Child panels will also have their controls disabled.
 * 
 * See also [vgui.GetWorldPanel](https://wiki.facepunch.com/gmod/vgui.GetWorldPanel)
 * 
 */
declare function GetHUDPanel(): Panel;

/**
 * [Menu]
 * 
 * Returns the loading screen panel and creates it if it doesn't exist.
 * 
 */
declare function GetLoadPanel(): Panel;

/**
 * [Menu]
 * 
 * Returns the current status of the server join progress.
 * 
 */
declare function GetLoadStatus(): string;

/**
 * [Menu]
 * 
 * Returns a table with the names of all maps and categories that you have on your client.
 * 
 */
declare function GetMapList(): any;

/**
 * [Shared and Menu]
 * 
 * Returns the metatable of an object. This function obeys the metatable's __metatable field, and will return that field if the metatable has it set.
 * 
 * Use [debug.getmetatable](https://wiki.facepunch.com/gmod/debug.getmetatable) if you want the true metatable of the object.
 * 
 * If you want to modify the metatable, check out [Global.FindMetaTable](https://wiki.facepunch.com/gmod/Global.FindMetaTable)
 * @param object - The value to return the metatable of.
 */
declare function getmetatable(object: any): any;

/**
 * [Menu]
 * 
 * Returns the menu overlay panel, a container for panels like the error panel created in [GM:OnLuaError](https://wiki.facepunch.com/gmod/GM:OnLuaError).
 * 
 */
declare function GetOverlayPanel(): Panel;

/**
 * [Menu]
 * 
 * Updates the PlayerList for the Currently Viewed Server. Internally uses [serverlist.PlayerList](https://wiki.facepunch.com/gmod/serverlist.PlayerList) to retrieve the PlayerList.
 * @param serverip - The ServerIP to retrieve the PlayerList from.
 */
declare function GetPlayerList(serverip: string): void;

/**
 * [Shared]
 * 
 * Returns the player whose movement commands are currently being processed. The player this returns can safely have [Player:GetCurrentCommand](https://wiki.facepunch.com/gmod/Player:GetCurrentCommand)() called on them. See [Prediction](https://wiki.facepunch.com/gmod/Prediction).
 * 
 */
declare function GetPredictionPlayer(): Player;

/**
 * [Client]
 * 
 * Creates or gets the rendertarget with the given name.
 * 
 * See [Global.GetRenderTargetEx](https://wiki.facepunch.com/gmod/Global.GetRenderTargetEx) for an advanced version of this function with more options.
 * 
 * **Warning:**
 * >Rendertargets are not garbage-collected, which means they will remain in memory until you disconnect. So make sure to avoid creating new ones unecessarily and re-use as many of your existing rendertargets as possible to avoid filling up all your memory.
 * 
 * **Bug [#2885](https://github.com/Facepunch/garrysmod-issues/issues/2885):**
 * >This crashes when used on a cubemap texture.
 * 
 * **Note:**
 * >Calling this function is equivalent to
 * ```lua
 * GetRenderTargetEx(name,
 * 	width, height,
 * 	RT_SIZE_NO_CHANGE,
 * 	MATERIAL_RT_DEPTH_SEPARATE,
 * 	bit.bor(2, 256),
 * 	0,
 * 	IMAGE_FORMAT_BGRA8888
 * )
 * ```
 * 
 * @param name - The internal name of the render target.
 * @param width - The width of the render target, must be power of 2. If not set to PO2, the size will be automatically converted to the nearest PO2 size.
 * @param height - The height of the render target, must be power of 2. If not set to PO2, the size will be automatically converted to the nearest PO2 size.
 */
declare function GetRenderTarget(name: string, width: number, height: number): ITexture;

/**
 * [Client]
 * 
 * Gets (or creates if it does not exist) the rendertarget with the given name, this function allows to adjust the creation of a rendertarget more than [Global.GetRenderTarget](https://wiki.facepunch.com/gmod/Global.GetRenderTarget).
 * 
 * See also [render.PushRenderTarget](https://wiki.facepunch.com/gmod/render.PushRenderTarget) and [render.SetRenderTarget](https://wiki.facepunch.com/gmod/render.SetRenderTarget).
 * @param name - The internal name of the render target.
 * **Warning:**
 * >The name is treated like a path and gets its extension discarded."name.1" and "name.2" are considered the same name and will result in the same render target being reused.
 * 
 * @param width - The width of the render target, must be power of 2.
 * @param height - The height of the render target, must be power of 2.
 * @param sizeMode - Bitflag that influences the sizing of the render target, see [Enums/RT_SIZE](https://wiki.facepunch.com/gmod/Enums/RT_SIZE).
 * @param depthMode - Bitflag that determines the depth buffer usage of the render target [Enums/MATERIAL_RT_DEPTH](https://wiki.facepunch.com/gmod/Enums/MATERIAL_RT_DEPTH).
 * @param textureFlags - Bitflag that configurates the texture, see [Enums/TEXTUREFLAGS](https://wiki.facepunch.com/gmod/Enums/TEXTUREFLAGS).
 * List of flags can also be found on the Valve's Developer Wiki:
 * https://developer.valvesoftware.com/wiki/Valve_Texture_Format
 * @param rtFlags - Flags that controll the HDR behaviour of the render target, see [Enums/CREATERENDERTARGETFLAGS](https://wiki.facepunch.com/gmod/Enums/CREATERENDERTARGETFLAGS).
 * @param imageFormat - Image format, see [Enums/IMAGE_FORMAT](https://wiki.facepunch.com/gmod/Enums/IMAGE_FORMAT).
 * **Note:**
 * >Some additional image formats are accepted, but don't have enums. See [VTF Enumerations.](https://developer.valvesoftware.com/wiki/Valve_Texture_Format#VTF_enumerations)
 * 
 */
declare function GetRenderTargetEx(name: string, width: number, height: number, sizeMode: RT_SIZE, depthMode: MATERIAL_RT_DEPTH, textureFlags: TEXTUREFLAGS, rtFlags: CREATERENDERTARGETFLAGS, imageFormat: IMAGE_FORMAT): ITexture;

/**
 * [Menu]
 * 
 * Retrieves data about the save with the specified filename. Similar to [Global.GetDemoFileDetails](https://wiki.facepunch.com/gmod/Global.GetDemoFileDetails).
 * @param filename - The file name of the save.
 */
declare function GetSaveFileDetails(filename: string): any;

/**
 * [Menu]
 * 
 * Starts Searching for Servers in the given Category. Can be stopped with [Global.DoStopServers](https://wiki.facepunch.com/gmod/Global.DoStopServers).  
 * 		Internally uses [serverlist.Query](https://wiki.facepunch.com/gmod/serverlist.Query) to search for Servers.
 * @param category - The Category to start searching the Servers in. **Working Values: internet, favorite, history, lan**
 * @param id - Some ID. can be a random number?
 */
declare function GetServers(category: string, id: number): void;

/**
 * [Client]
 * 
 * Returns if the client is timing out, and time since last ping from the server. Similar to the server side [Player:IsTimingOut](https://wiki.facepunch.com/gmod/Player:IsTimingOut).
 * 
 */
declare function GetTimeoutInfo(): LuaMultiReturn<[boolean, number]>;

/**
 * [Client]
 * 
 * Returns the entity the client is using to see from (such as the player itself, the camera, or another entity).
 * 
 */
declare function GetViewEntity(): Entity;

/**
 * [Menu]
 * 
 * Opens the given URL in a [HTML](https://wiki.facepunch.com/gmod/HTML) panel.
 * @param url - The url to open.
 */
declare function GMOD_OpenURLNoOverlay(url: string): void;

/**
 * [Shared and Menu]
 * 
 * Converts a color from [HSL color space](https://en.wikipedia.org/wiki/HSL_and_HSV) into RGB color space and returns a [Color](https://wiki.facepunch.com/gmod/Color).
 * 
 * **Bug [#2407](https://github.com/Facepunch/garrysmod-issues/issues/2407):**
 * >The returned color will not have the color metatable.
 * 
 * @param hue - The hue in degrees from 0-360.
 * @param saturation - The saturation from 0-1.
 * @param value - The lightness from 0-1.
 */
declare function HSLToColor(hue: number, saturation: number, value: number): Color;

/**
 * [Shared and Menu]
 * 
 * Converts a color from [HSV color space](https://en.wikipedia.org/wiki/HSL_and_HSV) into RGB color space and returns a [Color](https://wiki.facepunch.com/gmod/Color).
 * 
 * **Bug [#2407](https://github.com/Facepunch/garrysmod-issues/issues/2407):**
 * >The returned color will not have the color metatable.
 * 
 * @param hue - The hue in degrees from 0-360.
 * @param saturation - The saturation from 0-1.
 * @param value - The value from 0-1.
 */
declare function HSVToColor(hue: number, saturation: number, value: number): Color;

/**
 * [Shared and Menu]
 * 
 * Launches an asynchronous http request with the given parameters.
 * 
 * **Bug [#2232](https://github.com/Facepunch/garrysmod-issues/issues/2232):**
 * >This cannot send or receive multiple headers with the same name.
 * 
 * **Note:**
 * >HTTP-requests that respond with a large body may return an `unsuccessful` error. Try using the [Range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range) header to download the file in chunks.
 * 
 * **Note:**
 * >HTTP-requests to destinations on private networks (such as `192.168.0.1`) won't work.To enable HTTP-requests to destinations on private networks use [Command Line Parameters](https://wiki.facepunch.com/gmod/Command_Line_Parameters) `-allowlocalhttp`.
 * 
 * @param parameters - The request parameters. See [Structures/HTTPRequest](https://wiki.facepunch.com/gmod/Structures/HTTPRequest).
 */
declare function HTTP(parameters: HTTPRequest): boolean;

/**
 * [Shared and Menu]
 * 
 * Executes a Lua script.
 * 
 * **Warning:**
 * >The file you are attempting to include **MUST NOT** be empty or the include will fail. Files over a certain size may fail as well.
 * 
 * If the file you are including is clientside or shared, it **must** be [Global.AddCSLuaFile](https://wiki.facepunch.com/gmod/Global.AddCSLuaFile)'d or this function will error saying the file doesn't exist.
 * 
 * **Note:**
 * >Addon files (.gma files) do not support relative parent folders (`..` notation).
 * 
 * This function will try to load local client file if `sv_allowcslua` is **1**.
 * 
 * @param fileName - The name of the script to be executed. The path must be either relative to the current file, or be an absolute path (relative to and excluding the **lua/* folder).
 * **Note:**
 * >Please make sure your file names are unique, the filesystem is shared across all addons, so a file named `lua/config.lua` in your addon may be overwritten by the same file in another addon.
 * 
 */
declare function include(fileName: string): any[];

/**
 * [Shared and Menu]
 * 
 * This function works exactly the same as [Global.include](https://wiki.facepunch.com/gmod/Global.include) both clientside and serverside.
 * 
 * The only difference is that on the serverside it also calls [Global.AddCSLuaFile](https://wiki.facepunch.com/gmod/Global.AddCSLuaFile) on the filename, so that it gets sent to the client.
 * 
 * @deprecated To send the target file to the client simply call AddCSLuaFile() in the target file itself.
 * 
 * @param filename - The filename of the Lua file you want to include.
 */
declare function IncludeCS(filename: string): any[];

/**
 * [Shared and Menu]
 * 
 * Returns an iterator function for a for loop, to return ordered key-value pairs from a table.
 * 
 * This will only iterate though **numerical** keys, and these must also be **sequential**; starting at 1 with no gaps.
 * 
 * For unordered pairs, see [Global.pairs](https://wiki.facepunch.com/gmod/Global.pairs).
 * 
 * For pairs sorted by key in alphabetical order, see [Global.SortedPairs](https://wiki.facepunch.com/gmod/Global.SortedPairs).
 * @param tab - The table to iterate over.
 */
declare function ipairs(tab: any): LuaMultiReturn<[Function, any, number]>;

/**
 * [Shared and Menu]
 * 
 * Returns if the passed object is an [Angle](https://wiki.facepunch.com/gmod/Angle).
 * @param variable - The variable to perform the type check for.
 */
declare function isangle(variable: any): boolean;

/**
 * [Shared and Menu]
 * 
 * Returns if the passed object is a [boolean](https://wiki.facepunch.com/gmod/boolean).
 * @param variable - The variable to perform the type check for.
 */
declare function isbool(variable: any): boolean;

/**
 * [Shared and Menu]
 * 
 * Returns whether the given object does or doesn't have a `metatable` of a color.
 * 
 * **Bug [#2407](https://github.com/Facepunch/garrysmod-issues/issues/2407):**
 * >Engine functions (i.e. those not written in plain Lua) that return color objects do not currently set the color metatable and this function will return false if you use it on them.
 * 
 * @param Object - The object to be tested
 */
declare function IsColor(Object: any): boolean;

/**
 * [Shared and Menu]
 * 
 * Determines whether or not the provided console command will be blocked if it's ran through Lua functions, such as [Global.RunConsoleCommand](https://wiki.facepunch.com/gmod/Global.RunConsoleCommand) or [Player:ConCommand](https://wiki.facepunch.com/gmod/Player:ConCommand).
 * 
 * 		For more info on blocked console commands, check out <page text="Blocked ConCommands">Blocked_ConCommands</page>.
 * @param name - The console command to test.
 */
declare function IsConCommandBlocked(name: string): boolean;

/**
 * [Shared and Menu]
 * 
 * Returns if the given NPC class name is an enemy. Returns `true` if the entity name is one of the following:
 * * `monster_alien_grunt`
 * * `monster_nihilanth`
 * * `monster_tentacle`
 * * `monster_alien_slave`
 * * `monster_bigmomma`
 * * `monster_bullchicken`
 * * `monster_gargantua`
 * * `monster_human_assassin`
 * * `monster_babycrab`
 * * `monster_human_grunt`
 * * `monster_cockroach`
 * * `monster_houndeye`
 * * `monster_zombie`
 * * `monster_headcrab`
 * * `monster_alien_controller`
 * * `monster_turret`
 * * `monster_miniturret`
 * * `monster_sentry`
 * * `npc_antlion`
 * * `npc_antlionguard`
 * * `npc_antlionguardian`
 * * `npc_barnacle`
 * * `npc_breen`
 * * `npc_clawscanner`
 * * `npc_combine_s`
 * * `npc_cscanner`
 * * `npc_fastzombie`
 * * `npc_fastzombie_torso`
 * * `npc_headcrab`
 * * `npc_headcrab_fast`
 * * `npc_headcrab_poison`
 * * `npc_hunter`
 * * `npc_metropolice`
 * * `npc_manhack`
 * * `npc_poisonzombie`
 * * `npc_strider`
 * * `npc_stalker`
 * * `npc_zombie`
 * * `npc_zombie_torso`
 * * `npc_zombine`
 * * `npc_combine_camera`
 * * `npc_turret_ceiling`
 * * `npc_combinedropship`
 * * `npc_combinegunship`
 * * `npc_helicopter`
 * * `npc_turret_floor`
 * * `npc_antlion_worker`
 * * `npc_headcrab_black`
 * @param className - Class name of the entity to check.
 */
declare function IsEnemyEntityName(className: string): boolean;

/**
 * [Shared and Menu]
 * 
 * Returns if the passed object is an [Entity](https://wiki.facepunch.com/gmod/Entity).
 * @param variable - The variable to check.
 */
declare function isentity(variable: any): boolean;

/**
 * [Shared]
 * 
 * Returns if this is the first time this hook was predicted.
 * 
 * This is useful for one-time logic in your SWEPs PrimaryAttack, SecondaryAttack and Reload and other  (to prevent those hooks from being called rapidly in succession). It's also useful in a Move hook for when the client predicts movement.
 * 
 * Visit [Prediction](https://wiki.facepunch.com/gmod/Prediction) for more information about this behavior.
 * 
 * **Note:**
 * >This is already used internally for [Entity:EmitSound](https://wiki.facepunch.com/gmod/Entity:EmitSound), [Weapon:SendWeaponAnim](https://wiki.facepunch.com/gmod/Weapon:SendWeaponAnim) and [Entity:FireBullets](https://wiki.facepunch.com/gmod/Entity:FireBullets), but NOT in  [util.Effect](https://wiki.facepunch.com/gmod/util.Effect).
 * 
 * 
 */
declare function IsFirstTimePredicted(): boolean;

/**
 * [Shared and Menu]
 * 
 * Returns if the given NPC class name is a friend. Returns `true` if the entity name is one of the following:
 * * `monster_scientist`
 * * `monster_barney`
 * * `npc_alyx`
 * * `npc_barney`
 * * `npc_citizen`
 * * `npc_dog`
 * * `npc_eli`
 * * `npc_fisherman`
 * * `npc_gman`
 * * `npc_kleiner`
 * * `npc_magnusson`
 * * `npc_monk`
 * * `npc_mossman`
 * * `npc_odessa`
 * * `npc_vortigaunt`
 * @param className - Class name of the entity to check
 */
declare function IsFriendEntityName(className: string): boolean;

/**
 * [Shared and Menu]
 * 
 * Returns if the passed object is a [function](https://wiki.facepunch.com/gmod/function).
 * @param variable - The variable to perform the type check for.
 */
declare function isfunction(variable: any): boolean;

/**
 * [Menu]
 * 
 * Returns true if the client is currently playing either a singleplayer or multiplayer game.
 * 
 */
declare function IsInGame(): boolean;

/**
 * [Menu]
 * 
 * Returns true when the loading panel is active.
 * 
 */
declare function IsInLoading(): boolean;

/**
 * [Shared and Menu]
 * 
 * Returns whether the passed object is a [VMatrix](https://wiki.facepunch.com/gmod/VMatrix).
 * @param variable - The variable to perform the type check for.
 */
declare function ismatrix(variable: any): boolean;

/**
 * [Shared and Menu]
 * 
 * Checks whether or not a game is currently mounted. Uses data given by [engine.GetGames](https://wiki.facepunch.com/gmod/engine.GetGames).
 * @param game - The game string/app ID to check.
 */
declare function IsMounted(game: string): boolean;

/**
 * [Shared and Menu]
 * 
 * Returns if the passed object is a [number](https://wiki.facepunch.com/gmod/number).
 * @param variable - The variable to perform the type check for.
 */
declare function isnumber(variable: any): boolean;

/**
 * [Shared and Menu]
 * 
 * Returns if the passed object is a [Panel](https://wiki.facepunch.com/gmod/Panel).
 * @param variable - The variable to perform the type check for.
 */
declare function ispanel(variable: any): boolean;

/**
 * [Menu]
 * 
 * Checks if the given server data is blacklisted or not.
 * @param address - Server ip. can end with *
 * @param hostname - Server name
 * @param description - description to check
 * @param gm - Gamemode name
 * @param map - Map name
 */
declare function IsServerBlacklisted(address: string, hostname: string, description: string, gm: string, map: string): string;

/**
 * [Shared and Menu]
 * 
 * Returns if the passed object is a [string](https://wiki.facepunch.com/gmod/string).
 * @param variable - The variable to perform the type check for.
 */
declare function isstring(variable: any): boolean;

/**
 * [Shared and Menu]
 * 
 * Returns if the passed object is a [table](https://wiki.facepunch.com/gmod/table).
 * 
 * **Note:**
 * >Will return TRUE for variables of type [Color](https://wiki.facepunch.com/gmod/Color)
 * 
 * @param variable - The variable to perform the type check for.
 */
declare function istable(variable: any): boolean;

/**
 * [Shared and Menu]
 * 
 * Returns whether or not every element within a table is a valid entity
 * @param table - Table containing entities to check
 */
declare function IsTableOfEntitiesValid(table: any): boolean;

/**
 * [Shared and Menu]
 * 
 * Returns whether or not a model is useless by checking that the file path is that of a proper model.
 * 
 * If the string ".mdl" is not found in the model name, the function will return true.
 * 
 * The function will also return true if any of the following strings are found in the given model name:
 * * "_gesture"
 * * "_anim"
 * * "_gst"
 * * "_pst"
 * * "_shd"
 * * "_ss"
 * * "_posture"
 * * "_anm"
 * * "ghostanim"
 * * "_paths"
 * * "_shared"
 * * "anim_"
 * * "gestures_"
 * * "shared_ragdoll_"
 * @param modelName - The model name to be checked
 */
declare function IsUselessModel(modelName: string): boolean;

/**
 * [Shared and Menu]
 * 
 * Returns whether an object is valid or not. (Such as <page text="entities">Entity</page>, [Panel](https://wiki.facepunch.com/gmod/Panel)s, custom [table](https://wiki.facepunch.com/gmod/table) objects and more).
 * 
 * Checks that an object is not [nil](https://wiki.facepunch.com/gmod/nil), has an `IsValid` method and if this method returns `true`. If the object has no `IsValid` method, it will return `false`.
 * 
 * **Note:**
 * >Due to vehicles being technically valid the moment they're spawned, also use [Vehicle:IsValidVehicle](https://wiki.facepunch.com/gmod/Vehicle:IsValidVehicle) to make sure they're fully initialized.
 * 
 * @param toBeValidated - The table or object to be validated.
 */
declare function IsValid(toBeValidated: any): boolean;

/**
 * [Shared and Menu]
 * 
 * Returns if the passed object is a [Vector](https://wiki.facepunch.com/gmod/Vector).
 * @param variable - The variable to perform the type check for.
 */
declare function isvector(variable: any): boolean;

/**
 * [Menu]
 * 
 * Joins the server with the specified IP.
 * @param IP - The IP of the server to join
 */
declare function JoinServer(IP: string): void;

/**
 * [Client and Menu]
 * 
 * Adds javascript function 'language.Update' to an HTML panel as a method to call Lua's [language.GetPhrase](https://wiki.facepunch.com/gmod/language.GetPhrase) function.
 * @param htmlPanel - Panel to add javascript function 'language.Update' to.
 */
declare function JS_Language(htmlPanel: Panel): void;

/**
 * [Client and Menu]
 * 
 * Adds javascript function 'util.MotionSensorAvailable' to an HTML panel as a method to call Lua's [motionsensor.IsAvailable](https://wiki.facepunch.com/gmod/motionsensor.IsAvailable) function.
 * @param htmlPanel - Panel to add javascript function 'util.MotionSensorAvailable' to.
 */
declare function JS_Utility(htmlPanel: Panel): void;

/**
 * [Client and Menu]
 * 
 * Adds workshop related javascript functions to an HTML panel, used by the "Dupes" and "Saves" tabs in the spawnmenu.
 * @param htmlPanel - Panel to add javascript functions to.
 */
declare function JS_Workshop(htmlPanel: Panel): void;

/**
 * [Client and Menu]
 * 
 * Convenience function that creates a [DLabel](https://wiki.facepunch.com/gmod/DLabel), sets the text, and returns it
 * @param text - The string to set the label's text to
 * @param [parent = nil] - Optional. The panel to parent the DLabel to
 */
declare function Label(text: string, parent?: Panel): Panel;

/**
 * [Menu]
 * 
 * Callback function for when the client's language changes. Called by the engine.
 * @param lang - The new language code.
 */
declare function LanguageChanged(lang: string): void;

/**
 * [Shared and Menu]
 * 
 * Performs a linear interpolation from the start number to the end number.
 * 
 * This function provides a very efficient and easy way to smooth out movements.
 * 
 * See also [math.ease](https://wiki.facepunch.com/gmod/math.ease) for functions that allow to have non linear animations using linear interpolation.
 * 
 * **Note:**
 * >This function is not meant to be used with constant value in the first argument if you're dealing with animation! Use a value that changes over time. See example for **proper** usage of Lerp for animations.
 * 
 * @param t - The fraction for finding the result. This number is clamped between 0 and 1. Shouldn't be a constant.
 * @param from - The starting number. The result will be equal to this if delta is 0.
 * @param to - The ending number. The result will be equal to this if delta is 1.
 */
declare function Lerp(t: number, from: number, to: number): number;

/**
 * [Shared and Menu]
 * 
 * Returns point between first and second angle using given fraction and linear interpolation
 * 
 * **Note:**
 * >This function is not meant to be used with constant value in the first argument, if you're dealing with animation! Use a value that changes over time
 * 
 * @param ratio - Ratio of progress through values
 * @param angleStart - Angle to begin from
 * @param angleEnd - Angle to end at
 */
declare function LerpAngle(ratio: number, angleStart: Angle, angleEnd: Angle): Angle;

/**
 * [Shared and Menu]
 * 
 * Linear interpolation between two vectors. It is commonly used to smooth movement between two vectors
 * 
 * **Note:**
 * >This function is not meant to be used with constant value in the first argument, if you're dealing with animation! Use a value that changes over time
 * 
 * @param fraction - Fraction ranging from 0 to 1
 * @param from - The initial Vector
 * @param to - The desired Vector
 */
declare function LerpVector(fraction: number, from: Vector, to: Vector): Vector;

/**
 * [Menu]
 * 
 * Loads all Addon Presets and updates the Preset list.
 * 
 */
declare function ListAddonPresets(): void;

/**
 * [Menu]
 * 
 * Returns the contents of `addonpresets.txt` located in the `garrysmod/settings` folder. By default, this file stores your addon presets as JSON.
 * 
 * You can use [Global.SaveAddonPresets](https://wiki.facepunch.com/gmod/Global.SaveAddonPresets) to modify this file.
 * 
 */
declare function LoadAddonPresets(): string;

/**
 * [Menu]
 * 
 * This function is used to get the last map and category to which the map belongs from the cookie saved with [Global.SaveLastMap](https://wiki.facepunch.com/gmod/Global.SaveLastMap).
 * 
 */
declare function LoadLastMap(): void;

/**
 * [Menu]
 * 
 * Updates the News List
 * 
 */
declare function LoadNewsList(): void;

/**
 * [Client]
 * 
 * Loads all preset settings for the [presets](https://wiki.facepunch.com/gmod/presets) and returns them in a table
 * 
 */
declare function LoadPresets(): any;

/**
 * [Client and Menu]
 * 
 * Returns a localisation for the given token, if none is found it will return the default (second) parameter.
 * @param localisationToken - The token to find a translation for.
 * @param default_ - The default value to be returned if no translation was found.
 */
declare function Localize(localisationToken: string, default_: string): void;

/**
 * [Client]
 * 
 * Returns the player object of the current client.
 * 
 * **Note:**
 * >LocalPlayer() will return NULL until all entities have been initialized. See [GM:InitPostEntity](https://wiki.facepunch.com/gmod/GM:InitPostEntity).
 * 
 * 
 */
declare function LocalPlayer(): Player;

/**
 * [Shared]
 * 
 * Translates the specified position and angle from the specified local coordinate system into worldspace coordinates.
 * 
 * If you're working with an entity's local vectors, use [Entity:LocalToWorld](https://wiki.facepunch.com/gmod/Entity:LocalToWorld) and/or [Entity:LocalToWorldAngles](https://wiki.facepunch.com/gmod/Entity:LocalToWorldAngles) instead.
 * 
 * See also: [Global.WorldToLocal](https://wiki.facepunch.com/gmod/Global.WorldToLocal), the reverse of this function.
 * @param localPos - The position vector in the source coordinate system, that should be translated to world coordinates
 * @param localAng - The angle in the source coordinate system, that should be converted to a world angle. If you don't need to convert an angle, you can supply an arbitrary valid angle (e.g. [Global.Angle](https://wiki.facepunch.com/gmod/Global.Angle)()).
 * @param originPos - The origin point of the source coordinate system, in world coordinates
 * @param originAngle - The angles of the source coordinate system, as a world angle
 */
declare function LocalToWorld(localPos: Vector, localAng: Angle, originPos: Vector, originAngle: Angle): LuaMultiReturn<[Vector, Angle]>;

/**
 * [Shared and Menu]
 * 
 * Either returns the material with the given name, or loads the material interpreting the first argument as the path.
 * 
 * **Warning:**
 * >This function is very expensive when used in rendering hooks or in operations requiring very frequent calls. It is better to store the Material in a variable (like in the examples).
 * 
 * **Note:**
 * >When using .png or .jpg textures, try to make their sizes Power Of 2 (1, 2, 4, 8, 16, 32, 64, etc). While images are no longer scaled to Power of 2 sizes since February 2019, it is a good practice for things like icons, etc.
 * 
 * **Note:**
 * >Server-side, the Material function can consistently return an invalid material (with '__error') depending on the file type loaded; however, .vtf and .vmt files appear unaffected.
 * 
 * @param materialName - The material name or path. The path is relative to the `materials/` folder. You do not need to add `materials/` to your path.
 * To retrieve a Lua material created with [Global.CreateMaterial](https://wiki.facepunch.com/gmod/Global.CreateMaterial), just prepend a `!` to the material name.
 * .
 * **Note:**
 * >Since paths are relative to the materials folder, resource paths like ../data/MyImage.jpg will work since `..` translates to moving up a parent directory in the file tree.
 * 
 * @param [pngParameters = nil] - A string containing space separated keywords which will be used to add material parameters.
 * See [Material Parameters](https://wiki.facepunch.com/gmod/Material_Parameters) for more information.
 * **Note:**
 * >This feature only works when importing .png or .jpeg image files.
 * 
 */
declare function Material(materialName: string, pngParameters?: string): LuaMultiReturn<[IMaterial, number]>;

/**
 * [Shared]
 * 
 * Returns a [VMatrix](https://wiki.facepunch.com/gmod/VMatrix) object, a 4x4 matrix.
 * @param [data = {{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}}] - Initial data to initialize the matrix with. Leave empty to initialize an identity matrix. See examples for usage.
 * Can be a [VMatrix](https://wiki.facepunch.com/gmod/VMatrix) to copy its data.
 */
declare function Matrix(data?: any): VMatrix;

/**
 * [Menu]
 * 
 * **.**
 * 		This function retrieves the Addon data and passes it onto JS(JavaScript)
 * @param workshopItemID - The ID of Steam Workshop item.
 */
declare function MenuGetAddonData(workshopItemID: string): void;

/**
 * [Client]
 * 
 * Returns a new static mesh object.
 * @param [mat = nil] - The material the mesh is intended to be rendered with. It's merely a hint that tells that mesh what vertex format it should use.
 */
declare function Mesh(mat?: IMaterial): IMesh;

/**
 * [Shared and Menu]
 * 
 * Runs [util.PrecacheModel](https://wiki.facepunch.com/gmod/util.PrecacheModel) and returns the string.
 * @param model - The model to precache.
 */
declare function Model(model: string): string;

/**
 * [Shared and Menu]
 * 
 * Creates a table with the specified module name and sets the function environment for said table.
 * 
 * Any passed loaders are called with the table as an argument. An example of this is [package.seeall](https://wiki.facepunch.com/gmod/package.seeall).
 * @param name - The name of the module. This will be used to access the module table in the runtime environment.
 * @param loaders - Calls each function passed with the new table as an argument.
 */
declare function module(name: string, ...loaders: any[]): void;

/**
 * [Shared and Menu]
 * 
 * Writes every given argument to the console.
 * 
 * Automatically attempts to convert each argument to a string. (See [Global.tostring](https://wiki.facepunch.com/gmod/Global.tostring))
 * 
 * Unlike [Global.print](https://wiki.facepunch.com/gmod/Global.print), arguments are not separated by anything. They are simply concatenated.
 * 
 * Additionally, a newline isn't added automatically to the end, so subsequent Msg or print operations will continue the same line of text in the console. See [Global.MsgN](https://wiki.facepunch.com/gmod/Global.MsgN) for a version that does add a newline.
 * 
 * The text is blue on the server, orange on the client, and green on the menu: <image src="msg_server_client_colors.png"/>
 * @param args - List of values to print.
 */
declare function Msg(...args: any[]): void;

/**
 * [Shared]
 * 
 * Works exactly like [Global.Msg](https://wiki.facepunch.com/gmod/Global.Msg) except that, if called on the server, will print to all players consoles plus the server console.
 * @param args - List of values to print.
 */
declare function MsgAll(...args: any[]): void;

/**
 * [Shared and Menu]
 * 
 * Just like [Global.Msg](https://wiki.facepunch.com/gmod/Global.Msg), except it can also print colored text, just like [chat.AddText](https://wiki.facepunch.com/gmod/chat.AddText).
 * @param args - Values to print. If you put in a color, all text after that color will be printed in that color.
 */
declare function MsgC(...args: any[]): void;

/**
 * [Shared and Menu]
 * 
 * Same as [Global.print](https://wiki.facepunch.com/gmod/Global.print), except it concatinates the arguments without inserting any whitespace in between them.
 * 
 * See also [Global.Msg](https://wiki.facepunch.com/gmod/Global.Msg), which doesn't add a newline (`"\n"`) at the end.
 * @param args - List of values to print. They can be of any type and will be converted to strings with [Global.tostring](https://wiki.facepunch.com/gmod/Global.tostring).
 */
declare function MsgN(...args: any[]): void;

/**
 * [Client]
 * 
 * Returns named color defined in resource/ClientScheme.res.
 * @param name - Name of color
 */
declare function NamedColor(name: string): Color;

/**
 * [Shared and Menu]
 * 
 * Returns a new userdata object.
 * @param [addMetatable = false] - If true, the userdata will get its own metatable automatically. If another newproxy is passed, it will create new one and copy its metatable.
 */
declare function newproxy(addMetatable = false): userdata;

/**
 * [Shared and Menu]
 * 
 * Returns the next key and value pair in a table.
 * 
 * **Note:**
 * >Table keys in Lua have no specific order, and will be returned in whatever order they exist in memory. This may not always be in ascending order or alphabetical order. If you need to iterate over an array in order, use [Global.ipairs](https://wiki.facepunch.com/gmod/Global.ipairs).
 * 
 * @param tab - The table
 * @param [prevKey = nil] - The previous key in the table.
 */
declare function next(tab: any, prevKey?: any): LuaMultiReturn<[any, any]>;

/**
 * [Menu]
 * 
 * Returns the number of files needed from the server you are currently joining.
 * 
 */
declare function NumDownloadables(): number;

/**
 * [Client]
 * 
 * Returns the amount of skins the specified model has.
 * 
 * See also [Entity:SkinCount](https://wiki.facepunch.com/gmod/Entity:SkinCount) if you have an entity.
 * @param modelName - Model to return amount of skins of
 */
declare function NumModelSkins(modelName: string): number;

/**
 * [Client]
 * 
 * Called by the engine when a model has been loaded. Caches model information with the [sql](https://wiki.facepunch.com/gmod/sql).
 * @param modelName - Name of the model.
 * @param numPostParams - Number of pose parameters the model has.
 * @param numSeq - Number of sequences the model has.
 * @param numAttachments - Number of attachments the model has.
 * @param numBoneControllers - Number of bone controllers the model has.
 * @param numSkins - Number of skins that the model has.
 * @param size - Size of the model.
 */
declare function OnModelLoaded(modelName: string, numPostParams: number, numSeq: number, numAttachments: number, numBoneControllers: number, numSkins: number, size: number): void;

/**
 * [Menu]
 * 
 * Opens a folder with the given name in the garrysmod folder using the operating system's file browser.
 * 
 * **Bug [#1532](https://github.com/Facepunch/garrysmod-issues/issues/1532):**
 * >This does not work on OSX or Linux.
 * 
 * @param folder - The subdirectory to open in the garrysmod folder.
 */
declare function OpenFolder(folder: string): void;

/**
 * [Menu]
 * 
 * Opens the Problems Panel.
 * 
 */
declare function OpenProblemsPanel(): void;

/**
 * [Shared and Menu]
 * 
 * Modifies the given vectors so that all of vector2's axis are larger than vector1's by switching them around. Also known as ordering vectors.
 * 
 * **Note:**
 * >This function will irreversibly modify the given vectors
 * 
 * @param vector1 - Bounding box min resultant
 * @param vector2 - Bounding box max resultant
 */
declare function OrderVectors(vector1: Vector, vector2: Vector): void;

/**
 * [Shared and Menu]
 * 
 * Returns an iterator function([Global.next](https://wiki.facepunch.com/gmod/Global.next)) for a for loop that will return the values of the specified table in an arbitrary order.
 * 
 * * For alphabetical **key** order use [Global.SortedPairs](https://wiki.facepunch.com/gmod/Global.SortedPairs).
 * * For alphabetical **value** order use [Global.SortedPairsByValue](https://wiki.facepunch.com/gmod/Global.SortedPairsByValue).
 * @param tab - The table to iterate over.
 */
declare function pairs(tab: any): LuaMultiReturn<[Function, any, any]>;

/**
 * [Shared and Menu]
 * 
 * Calls [game.AddParticles](https://wiki.facepunch.com/gmod/game.AddParticles) and returns given string.
 * @param file - The particle file.
 */
declare function Particle(file: string): string;

/**
 * [Shared]
 * 
 * Creates a particle effect. See also [Global.CreateParticleSystem](https://wiki.facepunch.com/gmod/Global.CreateParticleSystem).
 * 
 * **Note:**
 * >The particle effect must be precached **serverside** with [Global.PrecacheParticleSystem](https://wiki.facepunch.com/gmod/Global.PrecacheParticleSystem) and the file its from must be added via [game.AddParticles](https://wiki.facepunch.com/gmod/game.AddParticles) before it can be used!
 * 
 * @param particleName - The name of the particle effect.
 * @param position - The start position of the effect.
 * @param angles - The orientation of the effect.
 * @param [parent = NULL] - If set, the particle will be parented to the entity.
 */
declare function ParticleEffect(particleName: string, position: Vector, angles: Angle, parent?: Entity): void;

/**
 * [Shared]
 * 
 * Creates a particle effect with specialized parameters.
 * 
 * **Note:**
 * >The particle effect must be precached **serverside** with [Global.PrecacheParticleSystem](https://wiki.facepunch.com/gmod/Global.PrecacheParticleSystem) and the file its from must be added via [game.AddParticles](https://wiki.facepunch.com/gmod/game.AddParticles) before it can be used!
 * 
 * @param particleName - The name of the particle effect.
 * @param attachType - Attachment type using [Enums/PATTACH](https://wiki.facepunch.com/gmod/Enums/PATTACH).
 * @param entity - The entity to be used in the way specified by the attachType.
 * @param attachmentID - The id of the attachment to be used in the way specified by the attachType.
 */
declare function ParticleEffectAttach(particleName: string, attachType: PATTACH, entity: Entity, attachmentID: number): void;

/**
 * [Client]
 * 
 * Creates a new [CLuaEmitter](https://wiki.facepunch.com/gmod/CLuaEmitter).
 * 
 * **Note:**
 * >Do not forget to delete the emitter with [CLuaEmitter:Finish](https://wiki.facepunch.com/gmod/CLuaEmitter:Finish) once you are done with it
 * 
 * @param position - The start position of the emitter.
 * This is only used to determine particle drawing order for translucent particles.
 * @param [use3D = false] - Whenever to render the particles in 2D or 3D mode. Supplying "true" will enable 3D (non-billboarded), otherwise it will default to 2D.
 */
declare function ParticleEmitter(position: Vector, use3D = false): CLuaEmitter;

/**
 * [Server]
 * 
 * Creates a path for the bot to follow
 * @param type - The name of the path to create.
 * This is going to be "Follow" or "Chase" right now.
 */
declare function Path(type: string): PathFollower;

/**
 * [Shared and Menu]
 * 
 * Calls a function and catches an error that can be thrown while the execution of the call.
 * 
 * **Bug [#2036](https://github.com/Facepunch/garrysmod-issues/issues/2036):**
 * >This cannot stop errors from hooks called from the engine.
 * 
 * **Bug [#2498](https://github.com/Facepunch/garrysmod-issues/issues/2498):**
 * >This does not stop [Global.Error](https://wiki.facepunch.com/gmod/Global.Error) and [Global.ErrorNoHalt](https://wiki.facepunch.com/gmod/Global.ErrorNoHalt) from sending error messages to the server (if called clientside) or calling the [GM:OnLuaError](https://wiki.facepunch.com/gmod/GM:OnLuaError) hook. The success boolean returned will always return true and thus you will not get the error message returned. [Global.error](https://wiki.facepunch.com/gmod/Global.error) does not exhibit these behaviours.
 * 
 * @param func - Function to be executed and of which the errors should be caught of
 * @param arguments - Arguments to call the function with.
 */
declare function pcall(func: Function, ...arguments: any[]): LuaMultiReturn<[boolean, any[]]>;

/**
 * [Shared]
 * 
 * Returns the player with the matching [Player:UserID](https://wiki.facepunch.com/gmod/Player:UserID).
 * 
 * For a function that returns a player based on their [Entity:EntIndex](https://wiki.facepunch.com/gmod/Entity:EntIndex), see [Global.Entity](https://wiki.facepunch.com/gmod/Global.Entity).
 * 
 * For a function that returns a player based on their connection ID, see [player.GetByID](https://wiki.facepunch.com/gmod/player.GetByID).
 * @param playerIndex - The player index.
 */
declare function Player(playerIndex: number): Player;

/**
 * [Client]
 * 
 * Moves the given model to the given position and calculates appropriate camera parameters for rendering the model to an icon.
 * 
 * The output table interacts nicely with [Panel:RebuildSpawnIconEx](https://wiki.facepunch.com/gmod/Panel:RebuildSpawnIconEx) with a few key renames.
 * @param model - Model that is being rendered to the spawn icon
 * @param position - Position that the model is being rendered at
 * @param noAngles - If true the function won't reset the angles to 0 for the model.
 */
declare function PositionSpawnIcon(model: Entity, position: Vector, noAngles: boolean): any;

/**
 * [Shared]
 * 
 * Precaches a particle system with the specified name. The particle system must come from a file that is loaded with [game.AddParticles](https://wiki.facepunch.com/gmod/game.AddParticles) beforehand.
 * 
 * When used on the server, it automatically precaches the particle on client.
 * 
 * **Warning:**
 * >There is a limit of 4096 precached particles on the server. So only precache particles that are actually going to be used.
 * 
 * @param particleSystemName - The name of the particle system.
 */
declare function PrecacheParticleSystem(particleSystemName: string): void;

/**
 * [Server]
 * 
 * Precaches a scene file.
 * @param scene - Path to the scene file to precache.
 */
declare function PrecacheScene(scene: string): void;

/**
 * [Shared]
 * 
 * Load and precache a custom sentence file.
 * @param filename - The path to the custom sentences.txt.
 */
declare function PrecacheSentenceFile(filename: string): void;

/**
 * [Server]
 * 
 * Precache a sentence group in a sentences.txt definition file.
 * @param group - The group to precache.
 */
declare function PrecacheSentenceGroup(group: string): void;

/**
 * [Shared and Menu]
 * 
 * Writes every given argument to the console.
 * Automatically attempts to convert each argument to a string. (See [Global.tostring](https://wiki.facepunch.com/gmod/Global.tostring))
 * 
 * Seperates lines with a line break (`"\n"`)
 * 
 * Separates arguments with a tab character (`"\t"`).
 * @param args - List of values to print.
 */
declare function print(...args: any[]): void;

/**
 * [Server]
 * 
 * Displays a message in the chat, console, or center of screen of every player.
 * 
 * This uses the archaic user message system ([umsg](https://wiki.facepunch.com/gmod/umsg)) and hence is limited to 255 characters.
 * @param type - Which type of message should be sent to the players (see [Enums/HUD](https://wiki.facepunch.com/gmod/Enums/HUD))
 * @param message - Message to be sent to the players
 */
declare function PrintMessage(type: HUD, message: string): void;

/**
 * [Shared and Menu]
 * 
 * Recursively prints the contents of a table to the console.
 * @param tableToPrint - The table to be printed
 * @param [indent = 0] - Number of tabs to start indenting at. Increases by 2 when entering another table.
 * @param [done = {}] - Internal argument, you shouldn't normally change this. Used to check if a nested table has already been printed so it doesn't get caught in a loop.
 */
declare function PrintTable(tableToPrint: any, indent = 0, done?: any): void;

/**
 * [Client]
 * 
 * Creates a new [ProjectedTexture](https://wiki.facepunch.com/gmod/ProjectedTexture).
 * 
 */
declare function ProjectedTexture(): ProjectedTexture;

/**
 * [Shared]
 * 
 * Runs a function without stopping the whole script on error.
 * 
 * This function is similar to [Global.pcall](https://wiki.facepunch.com/gmod/Global.pcall) and [Global.xpcall](https://wiki.facepunch.com/gmod/Global.xpcall) except the errors are still printed and sent to the error handler (i.e. sent to server console if clientside and [GM:OnLuaError](https://wiki.facepunch.com/gmod/GM:OnLuaError) called).
 * @param func - Function to run
 */
declare function ProtectedCall(func: Function): boolean;

/**
 * [Shared and Menu]
 * 
 * Returns an iterator function that can be used to loop through a table in random order
 * @param table - Table to create iterator for
 * @param [descending = nil] - Whether the iterator should iterate descending or not
 */
declare function RandomPairs(table: any, descending?: boolean): Function;

/**
 * [Shared and Menu]
 * 
 * Compares the two values without calling their __eq operator.
 * @param value1 - The first value to compare.
 * @param value2 - The second value to compare.
 */
declare function rawequal(value1: any, value2: any): boolean;

/**
 * [Shared and Menu]
 * 
 * Gets the value with the specified key from the table without calling the __index method.
 * @param table - Table to get the value from.
 * @param index - The index to get the value from.
 */
declare function rawget(table: any, index: any): any;

/**
 * [Shared and Menu]
 * 
 * Sets the value with the specified key from the table without calling the __newindex method.
 * @param table - Table to get the value from.
 * @param index - The index to get the value from.
 * @param value - The value to set for the specified key.
 */
declare function rawset(table: any, index: any, value: any): void;

/**
 * [Client]
 * 
 * Returns the real frame-time which is unaffected by host_timescale. To be used for GUI effects (for example)
 * 
 * **Note:**
 * >The returned number is clamped between `0` and `0.1`.
 * 
 * 
 */
declare function RealFrameTime(): number;

/**
 * [Shared]
 * 
 * Returns the uptime of the game/server in seconds (to at least **4** decimal places). This value updates itself once every time the realm thinks. For servers, this is the server tickrate. For clients, its their current FPS.
 * 
 * You should use this function (or [Global.SysTime](https://wiki.facepunch.com/gmod/Global.SysTime)) for timing real-world events such as user interaction, but not for timing game events such as animations.
 * 
 * See also: [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime), [Global.SysTime](https://wiki.facepunch.com/gmod/Global.SysTime)
 * 
 * **Note:**
 * >This is **not** synchronised or affected by the game.
 * 
 * This will be affected by precision loss if the uptime is more than 30+(?) days, and effectively cease to be functional after 50+(?) days.
 * 
 * Changing the map will **not** fix it like it does with [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime). A server restart is necessary.
 * 
 * 
 */
declare function RealTime(): number;

/**
 * [Server]
 * 
 * Creates a new [CRecipientFilter](https://wiki.facepunch.com/gmod/CRecipientFilter).
 * @param [unreliable = false] - If set to true, makes the filter unreliable. 
 * This means, when sending over the network in cases like [Global.CreateSound](https://wiki.facepunch.com/gmod/Global.CreateSound) (and its subsequent updates), the message is not guaranteed to reach all clients.
 */
declare function RecipientFilter(unreliable = false): CRecipientFilter;

/**
 * [Menu]
 * 
 * Adds a frame to the currently recording demo.
 * 
 */
declare function RecordDemoFrame(): void;

/**
 * [Menu]
 * 
 * Refreshes all Addon Conflicts after 1 Second. Internally uses [Global.FireAddonConflicts](https://wiki.facepunch.com/gmod/Global.FireAddonConflicts)
 * 
 */
declare function RefreshAddonConflicts(): void;

/**
 * [Client and Menu]
 * 
 * Registers a Derma element to be closed the next time [Global.CloseDermaMenus](https://wiki.facepunch.com/gmod/Global.CloseDermaMenus) is called
 * @param menu - Menu to be registered for closure
 */
declare function RegisterDermaMenuForClose(menu: Panel): void;

/**
 * [Client and Menu]
 * 
 * Saves position of your cursor on screen. You can restore it by using
 * [Global.RestoreCursorPosition](https://wiki.facepunch.com/gmod/Global.RestoreCursorPosition).
 * 
 */
declare function RememberCursorPosition(): void;

/**
 * [Client and Menu]
 * 
 * Does the removing of the tooltip panel. Called by [Global.EndTooltip](https://wiki.facepunch.com/gmod/Global.EndTooltip).
 * 
 */
declare function RemoveTooltip(): void;

/**
 * [Client]
 * 
 * Returns the angle that the clients view is being rendered at
 * 
 */
declare function RenderAngles(): Angle;

/**
 * [Client]
 * 
 * Renders a Depth of Field effect
 * @param origin - Origin to render the effect at
 * @param angle - Angle to render the effect at
 * @param usableFocusPoint - Point to focus the effect at
 * @param angleSize - Angle size of the effect
 * @param radialSteps - Amount of radial steps to render the effect with
 * @param passes - Amount of render passes
 * @param spin - Whether to cycle the frame or not
 * @param inView - Table of view data
 * @param fov - FOV to render the effect with
 */
declare function RenderDoF(origin: Vector, angle: Angle, usableFocusPoint: Vector, angleSize: number, radialSteps: number, passes: number, spin: boolean, inView: any, fov: number): void;

/**
 * [Client]
 * 
 * Renders the stereoscopic post-process effect
 * @param viewOrigin - Origin to render the effect at
 * @param viewAngles - Angles to render the effect at
 */
declare function RenderStereoscopy(viewOrigin: Vector, viewAngles: Angle): void;

/**
 * [Client]
 * 
 * Renders the Super Depth of Field post-process effect
 * @param viewOrigin - Origin to render the effect at
 * @param viewAngles - Angles to render the effect at
 * @param viewFOV - Field of View to render the effect at
 */
declare function RenderSuperDoF(viewOrigin: Vector, viewAngles: Angle, viewFOV: number): void;

/**
 * [Menu]
 * 
 * **)**
 * 		If the server has the permission "connect" granted, it will instantly connect you to the server.  
 * If the permission is not granted it will, it opens a confirmation window to connect to the server.
 * 		<image src="https://i.imgur.com/yJ2Q8o6.png"/>
 * @param serverip - The server ip to connect to
 */
declare function RequestConnectToServer(serverip: string): void;

/**
 * [Menu]
 * 
 * Opens a confirmation window to open the url.
 * 		<image src="https://i.imgur.com/nEB1k7N.png"/>
 * @param url - The Website URL to open.
 */
declare function RequestOpenURL(url: string): void;

/**
 * [Menu]
 * 
 * Opens a confirmation window to grant the requested permission.
 * 		<image src="https://i.imgur.com/jq5emwh.png"/>
 * @param permission - The permission to ask
 */
declare function RequestPermission(permission: string): void;

/**
 * [Shared and Menu]
 * 
 * First tries to load a binary module with the given name, if unsuccessful, it tries to load a Lua module with the given name.
 * 
 * **Bug [#1041](https://github.com/Facepunch/garrysmod-issues/issues/1041):**
 * >Running this function with [Global.pcall](https://wiki.facepunch.com/gmod/Global.pcall) or [Global.xpcall](https://wiki.facepunch.com/gmod/Global.xpcall) will still print an error that counts towards sv_kickerrornum.
 * 
 * **Note:**
 * >This function will try to load local client file if `sv_allowcslua` is set to `1`
 * 
 * **Note:**
 * >Binary modules can't be installed as part of an addon and have to be put directly into ``garrysmod/lua/bin/`` to be detected.
 * 	This is a safety measure, because modules can be malicious and harm the system.
 * 
 * @param name - The name of the module to be loaded.
 */
declare function require(name: string): void;

/**
 * [Client and Menu]
 * 
 * Restores position of your cursor on screen. You can save it by using [Global.RememberCursorPosition](https://wiki.facepunch.com/gmod/Global.RememberCursorPosition).
 * 
 */
declare function RestoreCursorPosition(): void;

/**
 * [Shared and Menu]
 * 
 * Executes the given console command with the parameters.
 * 
 * **Note:**
 * >Some commands/convars are blocked from being ran/changed using this function, usually to prevent harm/annoyance to clients. For a list of blocked commands, see [Blocked ConCommands](https://wiki.facepunch.com/gmod/Blocked_ConCommands).
 * 
 * @param command - The command to be executed.
 * @param arguments - The arguments. Note, that unlike [Player:ConCommand](https://wiki.facepunch.com/gmod/Player:ConCommand), you must pass each argument as a new string, not separating them with a space.
 */
declare function RunConsoleCommand(command: string, ...arguments: any[]): void;

/**
 * [Menu]
 * 
 * Runs a menu command. Equivalent to [Global.RunConsoleCommand](https://wiki.facepunch.com/gmod/Global.RunConsoleCommand)`( "gamemenucommand", command )` unless the command starts with the `"engine"` keyword in which case it is equivalent to [Global.RunConsoleCommand](https://wiki.facepunch.com/gmod/Global.RunConsoleCommand)`( command )`.
 * @param command - The menu command to run
 * Should be one of the following:
 * * `Disconnect` - Disconnects from the current server.
 * * `OpenBenchmarkDialog` - Opens the "Video Hardware Stress Test" dialog.
 * * `OpenChangeGameDialog` - Does not work in GMod.
 * * `OpenCreateMultiplayerGameDialog` - Opens the Source dialog for creating a listen server.
 * * `OpenCustomMapsDialog` - Does nothing.
 * * `OpenFriendsDialog` - Does nothing.
 * * `OpenGameMenu` - Does not work in GMod.
 * * `OpenLoadCommentaryDialog` - Opens the "Developer Commentary" selection dialog. Useless in GMod.
 * * `OpenLoadDemoDialog` - Does nothing.
 * * `OpenLoadGameDialog` - Opens the Source "Load Game" dialog.
 * * `OpenNewGameDialog` - Opens the "New Game" dialog. Useless in GMod.
 * * `OpenOptionsDialog` - Opens the options dialog.
 * * `OpenPlayerListDialog` - Opens the "Mute Players" dialog that shows all players connected to the server and allows to mute them.
 * * `OpenSaveGameDialog` - Opens the Source "Save Game" dialog.
 * * `OpenServerBrowser` - Opens the legacy server browser.
 * * `Quit` - Quits the game **without** confirmation (unlike other Source games).
 * * `QuitNoConfirm` - Quits the game without confirmation (like other Source games).
 * * `ResumeGame` - Closes the menu and returns to the game.
 * * `engine <concommand>` - Runs a console command. Unlike [Global.RunConsoleCommand](https://wiki.facepunch.com/gmod/Global.RunConsoleCommand)( <concommand> ) It will ignore [Blocked ConCommands](https://wiki.facepunch.com/gmod/Blocked_ConCommands)</arg>
 * 	</args>
 */
declare function RunGameUICommand(command: string): void;

/**
 * [Shared and Menu]
 * 
 * Evaluates and executes the given code, will throw an error on failure.
 * 
 * **Note:**
 * >Local variables are not passed to the given code.
 * 
 * @param code - The code to execute.
 * @param [identifier = RunString] - The name that should appear in any error messages caused by this code.
 * @param [handleError = true] - If false, this function will return a string containing any error messages instead of throwing an error.
 */
declare function RunString(code: string, identifier?: string, handleError = true): string;

/**
 * [Shared and Menu]
 * 
 * Alias of [Global.RunString](https://wiki.facepunch.com/gmod/Global.RunString).
 * 
 * @deprecated Use [Global.RunString](https://wiki.facepunch.com/gmod/Global.RunString) instead.
 * 
 * 
 */
declare function RunStringEx(): void;

/**
 * [Shared and Menu]
 * 
 * Removes the given entity unless it is a player or the world entity
 * @param ent - Entity to safely remove.
 */
declare function SafeRemoveEntity(ent: Entity): void;

/**
 * [Shared and Menu]
 * 
 * Removes entity after delay using [Global.SafeRemoveEntity](https://wiki.facepunch.com/gmod/Global.SafeRemoveEntity)
 * @param entity - Entity to be removed
 * @param delay - Delay for entity removal in seconds
 */
declare function SafeRemoveEntityDelayed(entity: Entity, delay: number): void;

/**
 * [Menu]
 * 
 * Sets the content of `addonpresets.txt` located in the `garrysmod/settings` folder. By default, this file stores your addon presets as JSON.
 * 
 * You can use [Global.LoadAddonPresets](https://wiki.facepunch.com/gmod/Global.LoadAddonPresets) to retrieve the data in this file.
 * @param JSON - The new contents of the file.
 */
declare function SaveAddonPresets(JSON: string): void;

/**
 * [Menu]
 * 
 * Hides the News List when set to true.
 * 
 * **Note:**
 * >If you call this don't forget to call [Global.LoadNewsList](https://wiki.facepunch.com/gmod/Global.LoadNewsList) to update the News List.
 * 
 * @param hide - true if it should hide the News.
 */
declare function SaveHideNews(hide: boolean): void;

/**
 * [Menu]
 * 
 * This function is used to save the last map and category to which the map belongs as a .
 * @param map - The name of the map.
 * @param category - The name of the category to which this map belongs.
 */
declare function SaveLastMap(map: string, category: string): void;

/**
 * [Client]
 * 
 * Overwrites all presets with the supplied table. Used by the [presets](https://wiki.facepunch.com/gmod/presets) for preset saving
 * @param presets - Presets to be saved
 */
declare function SavePresets(presets: any): void;

/**
 * [Client]
 * 
 * Returns a number based on the `size` argument and the players' screen width. The width is scaled in relation to `640x480` resolution.  This function is primarily used for scaling font sizes.
 * 
 * See [Global.ScreenScaleH](https://wiki.facepunch.com/gmod/Global.ScreenScaleH) for a function that scales from height.
 * @param size - The number you want to scale.
 */
declare function ScreenScale(size: number): number;

/**
 * [Client]
 * 
 * Returns a number based on the `size` argument and players' screen height. The height is scaled in relation to `640x480` resolution.  This function is primarily used for scaling font sizes.
 * 
 * See [Global.ScreenScale](https://wiki.facepunch.com/gmod/Global.ScreenScale) for a function that scales from width.
 * @param size - The number you want to scale.
 */
declare function ScreenScaleH(size: number): number;

/**
 * [Client and Menu]
 * 
 * Gets the height of the game's window (in pixels).
 * 
 */
declare function ScrH(): number;

/**
 * [Client and Menu]
 * 
 * Gets the width of the game's window (in pixels).
 * 
 */
declare function ScrW(): number;

/**
 * [Shared and Menu]
 * 
 * Used to select single values from a vararg or get the count of values in it.
 * @param parameter - Can be a [number](https://wiki.facepunch.com/gmod/number) or [string](https://wiki.facepunch.com/gmod/string).
 * * If it's a string and starts with "#", the function will return the amount of values in the vararg (ignoring the rest of the string).
 * * If it's a positive number, the function will return all values starting from the given index.
 * * If the number is negative, it will return the amount specified from the end instead of the beginning. This mode will not be compiled by LuaJIT.
 * @param vararg - The vararg. These are the values from which you want to select.
 */
declare function select(parameter: any, ...vararg: any[]): any;

/**
 * [Shared]
 * 
 * Send a usermessage
 * 
 * @deprecated This uses the [umsg](https://wiki.facepunch.com/gmod/umsg) internally, which has been deprecated. Use the [net](https://wiki.facepunch.com/gmod/net) instead.
 * 
 * **Note:**
 * >This does nothing clientside.
 * 
 * @param name - The name of the usermessage
 * @param recipients - Can be a [CRecipientFilter](https://wiki.facepunch.com/gmod/CRecipientFilter), [table](https://wiki.facepunch.com/gmod/table) or [Player](https://wiki.facepunch.com/gmod/Player) object.
 * @param args - Data to send in the usermessage
 */
declare function SendUserMessage(name: string, recipients: any, ...args: any[]): void;

/**
 * [Shared]
 * 
 * Returns approximate duration of a sentence by name. See [Global.EmitSentence](https://wiki.facepunch.com/gmod/Global.EmitSentence).
 * @param name - The sentence name.
 */
declare function SentenceDuration(name: string): number;

/**
 * [Server]
 * 
 * Prints `ServerLog: PARAM` without a newline, to the server log and console.
 * 
 * As of June 2022, if `sv_logecho` is set to `0` (defaults to `1`) the message will not print to console and will only be written to the server's log file.
 * @param parameter - The value to be printed to console.
 */
declare function ServerLog(parameter: string): void;

/**
 * [Client and Menu]
 * 
 * Adds the given string to the computers clipboard, which can then be pasted in or outside of GMod with Ctrl + V.
 * @param text - The text to add to the clipboard.
 */
declare function SetClipboardText(text: string): void;

/**
 * [Shared and Menu]
 * 
 * Sets the environment for a function or a stack level. Can be used to sandbox code.
 * @param location - The function to set the environment for, or a number representing stack level.
 * @param environment - Table to be used as the the environment.
 */
declare function setfenv(location: Function, environment: any): Function;

/**
 * [Shared]
 * 
 * Defines an angle to be automatically networked to clients
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on!
 * 
 * @param index - Index to identify the global angle with
 * @param angle - Angle to be networked
 */
declare function SetGlobal2Angle(index: any, angle: Angle): void;

/**
 * [Shared]
 * 
 * Defined a boolean to be automatically networked to clients
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on!
 * 
 * @param index - Index to identify the global boolean with
 * @param bool - Boolean to be networked
 */
declare function SetGlobal2Bool(index: any, bool: boolean): void;

/**
 * [Shared]
 * 
 * Defines an entity to be automatically networked to clients
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on!
 * 
 * @param index - Index to identify the global entity with
 * @param ent - Entity to be networked
 */
declare function SetGlobal2Entity(index: any, ent: Entity): void;

/**
 * [Shared]
 * 
 * Defines a floating point number to be automatically networked to clients
 * 
 * **Warning:**
 * >This function has a floating point precision error. Use [Global.SetGlobalFloat](https://wiki.facepunch.com/gmod/Global.SetGlobalFloat) instead
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on!
 * 
 * @param index - Index to identify the global float with
 * @param float - Float to be networked
 */
declare function SetGlobal2Float(index: any, float: number): void;

/**
 * [Shared]
 * 
 * Sets an integer that is shared between the server and all clients.
 * 
 * **Warning:**
 * >The integer has a 32 bit limit. Use [Global.SetGlobalInt](https://wiki.facepunch.com/gmod/Global.SetGlobalInt) instead
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on!
 * 
 * @param index - The unique index to identify the global value with.
 * @param value - The value to set the global value to
 */
declare function SetGlobal2Int(index: string, value: number): void;

/**
 * [Shared]
 * 
 * Defines a string with a maximum of 511 characters to be automatically networked to clients
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on!
 * 
 * @param index - Index to identify the global string with
 * @param string - String to be networked
 */
declare function SetGlobal2String(index: any, string: string): void;

/**
 * [Shared]
 * 
 * Defines a variable to be automatically networked to clients
 * 
 * | Allowed Types   |  
 * | --------------- |  
 * | Angle           |  
 * | Boolean         |  
 * | Entity          |  
 * | Float           |  
 * | Int             |  
 * | String          |  
 * | Vector          |
 * 
 * **Warning:**
 * >Trying to network a type that is not listed above will result in a nil value!
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on!
 * 
 * @param index - Index to identify the global vector with
 * @param value - Value to be networked
 */
declare function SetGlobal2Var(index: any, value: any): void;

/**
 * [Shared]
 * 
 * Defines a vector to be automatically networked to clients
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on!
 * 
 * @param index - Index to identify the global vector with
 * @param vec - Vector to be networked
 */
declare function SetGlobal2Vector(index: any, vec: Vector): void;

/**
 * [Shared]
 * 
 * Defines an angle to be automatically networked to clients
 * 
 * **Warning:**
 * >There's a 4095 slots Network limit. If you need more, consider using the [net](https://wiki.facepunch.com/gmod/net) library or [Global.SetGlobal2Angle](https://wiki.facepunch.com/gmod/Global.SetGlobal2Angle). You should also consider the fact that you have way too many variables. You can learn more about this limit here: [Networking_Usage](https://wiki.facepunch.com/gmod/Networking_Usage)
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on!
 * 
 * @param index - Index to identify the global angle with
 * @param angle - Angle to be networked
 */
declare function SetGlobalAngle(index: any, angle: Angle): void;

/**
 * [Shared]
 * 
 * Defined a boolean to be automatically networked to clients
 * 
 * **Warning:**
 * >There's a 4095 slots Network limit. If you need more, consider using the [net](https://wiki.facepunch.com/gmod/net) library or [Global.SetGlobal2Bool](https://wiki.facepunch.com/gmod/Global.SetGlobal2Bool). You should also consider the fact that you have way too many variables. You can learn more about this limit here: [Networking_Usage](https://wiki.facepunch.com/gmod/Networking_Usage)
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on!
 * 
 * @param index - Index to identify the global boolean with
 * @param bool - Boolean to be networked
 */
declare function SetGlobalBool(index: any, bool: boolean): void;

/**
 * [Shared]
 * 
 * Defines an entity to be automatically networked to clients
 * 
 * **Warning:**
 * >There's a 4095 slots Network limit. If you need more, consider using the [net](https://wiki.facepunch.com/gmod/net) library or [Global.SetGlobal2Entity](https://wiki.facepunch.com/gmod/Global.SetGlobal2Entity). You should also consider the fact that you have way too many variables. You can learn more about this limit here: [Networking_Usage](https://wiki.facepunch.com/gmod/Networking_Usage)
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on!
 * 
 * @param index - Index to identify the global entity with
 * @param ent - Entity to be networked
 */
declare function SetGlobalEntity(index: any, ent: Entity): void;

/**
 * [Shared]
 * 
 * Defines a floating point number to be automatically networked to clients
 * 
 * **Warning:**
 * >There's a 4095 slots Network limit. If you need more, consider using the [net](https://wiki.facepunch.com/gmod/net) library or [Global.SetGlobal2Float](https://wiki.facepunch.com/gmod/Global.SetGlobal2Float). You should also consider the fact that you have way too many variables. You can learn more about this limit here: [Networking_Usage](https://wiki.facepunch.com/gmod/Networking_Usage)
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on!
 * 
 * @param index - Index to identify the global float with
 * @param float - Float to be networked
 */
declare function SetGlobalFloat(index: any, float: number): void;

/**
 * [Shared]
 * 
 * Sets an integer that is shared between the server and all clients.
 * 
 * **Warning:**
 * >There's a 4095 slots Network limit. If you need more, consider using the [net](https://wiki.facepunch.com/gmod/net) library or [Global.SetGlobal2Int](https://wiki.facepunch.com/gmod/Global.SetGlobal2Int). You should also consider the fact that you have way too many variables. You can learn more about this limit here: [Networking_Usage](https://wiki.facepunch.com/gmod/Networking_Usage)
 * 
 * **Bug [#3374](https://github.com/Facepunch/garrysmod-issues/issues/3374):**
 * >This function will not round decimal values as it actually networks a float internally.
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on!
 * 
 * @param index - The unique index to identify the global value with.
 * @param value - The value to set the global value to
 */
declare function SetGlobalInt(index: string, value: number): void;

/**
 * [Shared]
 * 
 * Defines a string with a maximum of 199 characters to be automatically networked to clients
 * 
 * **Warning:**
 * >There's a 4095 slots Network limit. If you need more, consider using the [net](https://wiki.facepunch.com/gmod/net) library or [Global.SetGlobal2String](https://wiki.facepunch.com/gmod/Global.SetGlobal2String). You should also consider the fact that you have way too many variables. You can learn more about this limit here: [Networking_Usage](https://wiki.facepunch.com/gmod/Networking_Usage)
 * 
 * **Note:**
 * >If you want to have a higher characters limit use [Global.SetGlobal2String](https://wiki.facepunch.com/gmod/Global.SetGlobal2String)
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on!
 * 
 * @param index - Index to identify the global string with
 * @param string - String to be networked
 */
declare function SetGlobalString(index: any, string: string): void;

/**
 * [Shared]
 * 
 * Defines a variable to be automatically networked to clients
 * 
 * | Allowed Types   |  
 * | --------------- |  
 * | Angle           |  
 * | Boolean         |  
 * | Entity          |  
 * | Float           |  
 * | Int             |  
 * | String          |  
 * | Vector          |
 * 
 * **Warning:**
 * >Trying to network a type that is not listed above will result in an error!  
 * There's a 4095 slots Network limit. If you need more, consider using the [net](https://wiki.facepunch.com/gmod/net) library or [Global.SetGlobal2Var](https://wiki.facepunch.com/gmod/Global.SetGlobal2Var). You should also consider the fact that you have way too many variables. You can learn more about this limit here: [Networking_Usage](https://wiki.facepunch.com/gmod/Networking_Usage)
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on!
 * 
 * @param index - Index to identify the global vector with
 * @param value - Value to be networked
 */
declare function SetGlobalVar(index: any, value: any): void;

/**
 * [Shared]
 * 
 * Defines a vector to be automatically networked to clients
 * 
 * **Warning:**
 * >There's a 4095 slots Network limit. If you need more, consider using the [net](https://wiki.facepunch.com/gmod/net) library or [Global.SetGlobal2Vector](https://wiki.facepunch.com/gmod/Global.SetGlobal2Vector). You should also consider the fact that you have way too many variables. You can learn more about this limit here: [Networking_Usage](https://wiki.facepunch.com/gmod/Networking_Usage)
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on!
 * 
 * @param index - Index to identify the global vector with
 * @param vec - Vector to be networked
 */
declare function SetGlobalVector(index: any, vec: Vector): void;

/**
 * [Shared and Menu]
 * 
 * Sets, changes or removes a table's metatable. Returns Tab (the first argument).
 * @param Tab - The table who's metatable to change.
 * @param Metatable - The metatable to assign. <br/> If it's nil, the metatable will be removed.
 */
declare function setmetatable(Tab: any, Metatable: any): any;

/**
 * [Shared]
 * 
 * Called by the engine to set which [constraint system](https://developer.valvesoftware.com/wiki/Phys_constraintsystem) the next created constraints should use.
 * @param constraintSystem - Constraint system to use
 */
declare function SetPhysConstraintSystem(constraintSystem: Entity): void;

/**
 * [Shared and Menu]
 * 
 * This function can be used in a for loop instead of [Global.pairs](https://wiki.facepunch.com/gmod/Global.pairs). It sorts all **keys** alphabetically.
 * 
 * For sorting by specific **value member**, use [Global.SortedPairsByMemberValue](https://wiki.facepunch.com/gmod/Global.SortedPairsByMemberValue).
 * 
 * For sorting by **value**, use [Global.SortedPairsByValue](https://wiki.facepunch.com/gmod/Global.SortedPairsByValue).
 * @param table - The table to sort
 * @param [desc = false] - Reverse the sorting order
 */
declare function SortedPairs(table: any, desc = false): LuaMultiReturn<[Function, any]>;

/**
 * [Shared and Menu]
 * 
 * Returns an iterator function that can be used to loop through a table in order of member values, when the values of the table are also tables and contain that member.
 * 
 * To sort by **value**, use [Global.SortedPairsByValue](https://wiki.facepunch.com/gmod/Global.SortedPairsByValue).
 * 
 * To sort by **keys**, use [Global.SortedPairs](https://wiki.facepunch.com/gmod/Global.SortedPairs).
 * @param table - Table to create iterator for.
 * @param memberKey - Key of the value member to sort by.
 * @param [descending = false] - Whether the iterator should iterate in descending order or not.
 */
declare function SortedPairsByMemberValue(table: any, memberKey: any, descending = false): LuaMultiReturn<[Function, any]>;

/**
 * [Shared and Menu]
 * 
 * Returns an iterator function that can be used to loop through a table in order of its **values**.
 * 
 * To sort by specific **value member**, use [Global.SortedPairsByMemberValue](https://wiki.facepunch.com/gmod/Global.SortedPairsByMemberValue).
 * 
 * To sort by **keys**, use [Global.SortedPairs](https://wiki.facepunch.com/gmod/Global.SortedPairs).
 * @param table - Table to create iterator for
 * @param [descending = false] - Whether the iterator should iterate in descending order or not
 */
declare function SortedPairsByValue(table: any, descending = false): LuaMultiReturn<[Function, any]>;

/**
 * [Shared and Menu]
 * 
 * Runs [util.PrecacheSound](https://wiki.facepunch.com/gmod/util.PrecacheSound) and returns the string.
 * 
 * **Bug :**
 * >[util.PrecacheSound](https://wiki.facepunch.com/gmod/util.PrecacheSound) does nothing and therefore so does this function.
 * 
 * @param soundPath - The soundpath to precache.
 */
declare function Sound(soundPath: string): string;

/**
 * [Shared]
 * 
 * Returns the duration of the specified sound in seconds.
 * 
 * **Bug [#936](https://github.com/Facepunch/garrysmod-issues/issues/936):**
 * >This function does not return the correct duration on MacOS and Linux, or if the file is a non-.wav file on Windows.
 * 
 * @param soundName - The sound file path.
 */
declare function SoundDuration(soundName: string): number;

/**
 * [Shared and Menu]
 * 
 * Returns the input value in an escaped form so that it can safely be used inside of queries. The returned value is surrounded by quotes unless noQuotes is true. Alias of [sql.SQLStr](https://wiki.facepunch.com/gmod/sql.SQLStr)
 * @param input - String to be escaped
 * @param [noQuotes = false] - Whether the returned value should be surrounded in quotes or not
 */
declare function SQLStr(input: string, noQuotes = false): string;

/**
 * [Client]
 * 
 * Returns a number based on the Size argument and your screen's width. Alias of [Global.ScreenScale](https://wiki.facepunch.com/gmod/Global.ScreenScale).
 * 
 * @deprecated You should be using [Global.ScreenScale](https://wiki.facepunch.com/gmod/Global.ScreenScale) instead.
 * 
 * @param Size - The number you want to scale.
 */
declare function SScale(Size: number): void;

/**
 * [Shared and Menu]
 * 
 * Returns the ordinal suffix of a given number.
 * @param number - The number to find the ordinal suffix of.
 */
declare function STNDRD(number: number): string;

/**
 * [Server]
 * 
 * Suppress any networking from the server to the specified player. This is automatically called by the engine before/after a player fires their weapon, reloads, or causes any other similar shared-predicted event to occur.
 * @param suppressPlayer - The player to suppress any networking to.
 */
declare function SuppressHostEvents(suppressPlayer: Player): void;

/**
 * [Shared and Menu]
 * 
 * Returns a highly accurate time in seconds since the start up, ideal for benchmarking. Unlike [Global.RealTime](https://wiki.facepunch.com/gmod/Global.RealTime), this value will be updated any time the function is called, allowing for sub-think precision.
 * 
 */
declare function SysTime(): number;

/**
 * [Shared]
 * 
 * Returns a TauntCamera object
 * 
 */
declare function TauntCamera(): any;

/**
 * [Client and Menu]
 * 
 * Clears focus from any text entries player may have focused.
 * 
 */
declare function TextEntryLoseFocus(): void;

/**
 * [Shared and Menu]
 * 
 * Returns a cosine value that fluctuates based on the current time
 * @param frequency - The frequency of fluctuation
 * @param min - Minimum value
 * @param max - Maximum value
 * @param offset - Offset variable that doesn't affect the rate of change, but causes the returned value to be offset by time
 */
declare function TimedCos(frequency: number, min: number, max: number, offset: number): number;

/**
 * [Shared and Menu]
 * 
 * Returns a sine value that fluctuates based on [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime). The value returned will be between the start value plus/minus the range value.
 * 
 * **Bug :**
 * >The range arguments don't work as intended. The existing (bugged) behavior is documented below.
 * 
 * @param frequency - The frequency of fluctuation, in
 * @param origin - The center value of the sine wave.
 * @param max - This argument's distance from origin defines the size of the full range of the sine wave. For example, if origin is 3 and max is 5, then the full range of the sine wave is 5-3 = 2. 3 is the center point of the sine wave, so the sine wave will range between 2 and 4.
 * @param offset - Offset variable that doesn't affect the rate of change, but causes the returned value to be offset by time
 */
declare function TimedSin(frequency: number, origin: number, max: number, offset: number): number;

/**
 * [Shared and Menu]
 * 
 * Attempts to return an appropriate boolean for the given value
 * @param val - The object to be converted to a boolean
 */
declare function tobool(val: any): boolean;

/**
 * [Menu]
 * 
 * Toggles whether or not the named map is favorited in the new game list.
 * @param map - Map to toggle favorite.
 */
declare function ToggleFavourite(map: string): void;

/**
 * [Shared and Menu]
 * 
 * Attempts to convert the value to a number.
 * 
 * Returns nil on failure.
 * @param value - The value to convert. Can be a number or string.
 * @param [base = 10] - The base used in the string. Can be any integer between 2 and 36, inclusive.
 */
declare function tonumber(value: any, base = 10): number;

/**
 * [Shared and Menu]
 * 
 * Attempts to convert the value to a string. If the value is an object and its metatable has defined the __tostring metamethod, this will call that function.
 * 
 * [Global.print](https://wiki.facepunch.com/gmod/Global.print) also uses this functionality.
 * @param value - The object to be converted to a string.
 */
declare function tostring(value: any): string;

/**
 * [Menu]
 * 
 * Returns "Lua Cache File" if the given file name is in a certain string table, nothing otherwise.
 * @param filename - File name to test
 */
declare function TranslateDownloadableName(filename: string): string;

/**
 * [Shared and Menu]
 * 
 * Returns a string representing the name of the type of the passed object.
 * 
 * **Warning:**
 * >This will return `table` if the input is [Global.Color](https://wiki.facepunch.com/gmod/Global.Color), consider using [Global.IsColor](https://wiki.facepunch.com/gmod/Global.IsColor) in that case.
 * 
 * @param var_ - The object to get the type of.
 */
declare function type(var_: any): string;

/**
 * [Shared]
 * 
 * Gets the associated type ID of the variable. Unlike [Global.type](https://wiki.facepunch.com/gmod/Global.type), this does not work with [no value](https://wiki.facepunch.com/gmod/no_value) - an argument must be provided.
 * 
 * **Bug :**
 * >This returns garbage for _LOADLIB objects.
 * 
 * **Bug :**
 * >This returns TYPE_NIL for [proto](https://wiki.facepunch.com/gmod/proto)s.
 * 
 * @param variable - The variable to get the type ID of.
 */
declare function TypeID(variable: any): TYPE;

/**
 * [Shared and Menu]
 * 
 * This function takes a numeric indexed table and return all the members as a vararg. If specified, it will start at the given index and end at end index.
 * @param tbl - The table to generate the vararg from.
 * @param [startIndex = 1] - Which index to start from. Optional.
 * @param [endIndex = #tbl] - Which index to end at. Optional, even if you set StartIndex.
 */
declare function unpack(tbl: any, startIndex = 1, endIndex?: number): any[];

/**
 * [Shared and Menu]
 * 
 * Returns the current asynchronous in-game time.
 * 
 */
declare function UnPredictedCurTime(): number;

/**
 * [Menu]
 * 
 * This function retrieves the values from [Global.GetAddonStatus](https://wiki.facepunch.com/gmod/Global.GetAddonStatus) and passes them to JS(JavaScript).
 * 
 */
declare function UpdateAddonDisabledState(): void;

/**
 * [Menu]
 * 
 * This function is called by [Global.UpdateMapList](https://wiki.facepunch.com/gmod/Global.UpdateMapList) to pass the AddonMaps to JS to be used for the Search.
 * 
 */
declare function UpdateAddonMapList(): void;

/**
 * [Menu]
 * 
 * Updates the Gamelist.
 * 
 */
declare function UpdateGames(): void;

/**
 * [Menu]
 * 
 * This function searches for all available languages and passes them to JS(JavaScript). JS then updates the Language list with the given languages.
 * 
 */
declare function UpdateLanguages(): void;

/**
 * [Menu]
 * 
 * Runs JavaScript on the loading screen panel ([Global.GetLoadPanel](https://wiki.facepunch.com/gmod/Global.GetLoadPanel)).
 * @param javascript - JavaScript to run on the loading panel.
 */
declare function UpdateLoadPanel(javascript: string): void;

/**
 * [Menu]
 * 
 * **e**
 * 		This function updates the Map List
 * 
 */
declare function UpdateMapList(): void;

/**
 * [Menu]
 * 
 * **e**
 * 		Updates the Server Settings when called.
 * 
 */
declare function UpdateServerSettings(): void;

/**
 * [Menu]
 * 
 * Updates the Addons list.
 * 
 */
declare function UpdateSubscribedAddons(): void;

/**
 * [Shared and Menu]
 * 
 * Returns whether or not a model is useless by checking that the file path is that of a proper model.
 * 
 * If the string ".mdl" is not found in the model name, the function will return true.
 * 
 * The function will also return true if any of the following strings are found in the given model name:
 * * "_gesture"
 * * "_anim"
 * * "_gst"
 * * "_pst"
 * * "_shd"
 * * "_ss"
 * * "_posture"
 * * "_anm"
 * * "ghostanim"
 * * "_paths"
 * * "_shared"
 * * "anim_"
 * * "gestures_"
 * * "shared_ragdoll_"
 * 
 * @deprecated You should use [Global.IsUselessModel](https://wiki.facepunch.com/gmod/Global.IsUselessModel) instead.
 * 
 * @param modelName - The model name to be checked
 */
declare function UTIL_IsUselessModel(modelName: string): boolean;

/**
 * [Client and Menu]
 * 
 * Returns if a panel is safe to use.
 * 
 * @deprecated You should use [Global.IsValid](https://wiki.facepunch.com/gmod/Global.IsValid) instead
 * 
 * @param panel - The panel to validate.
 */
declare function ValidPanel(panel: Panel): void;

/**
 * [Shared and Menu]
 * 
 * Creates a [Vector](https://wiki.facepunch.com/gmod/Vector) object.
 * 
 * **Warning:**
 * >This function is very expensive when used in often running hooks or in operations requiring very frequent calls (like loops for example). It is better to store the vector in a variable or to use the [default vectors](https://wiki.facepunch.com/gmod/Global_Variables#misc) available.
 * 
 * @param [x = 0] - The x component of the vector.
 * If this is a [Vector](https://wiki.facepunch.com/gmod/Vector), this function will return a copy of the given vector.
 * If this is a [string](https://wiki.facepunch.com/gmod/string), this function will try to parse the string as a vector. If it fails, it returns a 0 vector.
 * (See examples)
 * @param [y = 0] - The y component of the vector.
 * @param [z = 0] - The z component of the vector.
 */
declare function Vector(x = 0, y = 0, z = 0): Vector;

/**
 * [Shared and Menu]
 * 
 * Returns a random vector whose components are each between min(inclusive), max(exclusive).
 * @param [min = -1] - Min bound inclusive.
 * @param [max = 1] - Max bound exclusive.
 */
declare function VectorRand(min = -1, max = 1): Vector;

/**
 * [Shared and Menu]
 * 
 * Returns the time in seconds it took to render the VGUI.
 * 
 */
declare function VGUIFrameTime(): void;

/**
 * [Client]
 * 
 * Creates and returns a [DShape](https://wiki.facepunch.com/gmod/DShape) rectangle GUI element with the given dimensions.
 * @param x - X position of the created element
 * @param y - Y position of the created element
 * @param w - Width of the created element
 * @param h - Height of the created element
 */
declare function VGUIRect(x: number, y: number, w: number, h: number): Panel;

/**
 * [Client and Menu]
 * 
 * **r**
 * Briefly displays layout details of the given panel on-screen
 * @param panel - Panel to display layout details of
 */
declare function VisualizeLayout(panel: Panel): void;

/**
 * [Client and Menu]
 * 
 * Returns a new WorkshopFileBase element
 * @param namespace - Namespace for the file base
 * @param requiredTags - Tags required for a Workshop submission to be interacted with by the filebase
 */
declare function WorkshopFileBase(namespace: string, requiredTags: any): any;

/**
 * [Shared]
 * 
 * Translates the specified position and angle into the specified coordinate system.
 * @param position - The position that should be translated from the current to the new system.
 * @param angle - The angles that should be translated from the current to the new system.
 * @param newSystemOrigin - The origin of the system to translate to.
 * @param newSystemAngles - The angles of the system to translate to.
 */
declare function WorldToLocal(position: Vector, angle: Angle, newSystemOrigin: Vector, newSystemAngles: Angle): LuaMultiReturn<[Vector, Angle]>;

/**
 * [Shared and Menu]
 * 
 * Attempts to call the first function. If the execution succeeds, this returns `true` followed by the returns of the function. If execution fails, this returns `false` and the second function is called with the error message. 
 * 
 * Unlike in [Global.pcall](https://wiki.facepunch.com/gmod/Global.pcall), the stack is not unwound and can therefore be used for stack analyses with the [debug](https://wiki.facepunch.com/gmod/debug).
 * 
 * **Bug [#2036](https://github.com/Facepunch/garrysmod-issues/issues/2036):**
 * >This cannot stop errors from hooks called from the engine.
 * 
 * **Bug [#2498](https://github.com/Facepunch/garrysmod-issues/issues/2498):**
 * >This does not stop [Global.Error](https://wiki.facepunch.com/gmod/Global.Error) and [Global.ErrorNoHalt](https://wiki.facepunch.com/gmod/Global.ErrorNoHalt) (As well as [Global.include](https://wiki.facepunch.com/gmod/Global.include)) from sending error messages to the server (if called clientside) or calling the [GM:OnLuaError](https://wiki.facepunch.com/gmod/GM:OnLuaError) hook. The success boolean returned will always return true and thus you will not get the error message returned. [Global.error](https://wiki.facepunch.com/gmod/Global.error) does not exhibit these behaviours.
 * 
 * @param func - The function to call initially.
 * @param errorCallback - The function to be called if execution of the first fails; the error message is passed as a string.
 * You cannot throw an [Global.error](https://wiki.facepunch.com/gmod/Global.error)() from this callback: it will have no effect (not even stopping the callback).
 * @param arguments - Arguments to pass to the initial function.
 */
declare function xpcall(func: Function, errorCallback: Function, ...arguments: any[]): LuaMultiReturn<[boolean, any[]]>;

/**
 * This library is used internally by Garry's Mod to help keep track of achievement progress and unlock the appropriate achievements once a certain number is reached.
 */
declare namespace achievements {
    

    /**
     * [Client]
     * 
     * Adds one to the count of balloons burst. Once this count reaches 1000, the 'Popper' achievement is unlocked.
     * 
     */
    function BalloonPopped(): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the amount of achievements in Garry's Mod.
     * 
     */
    function Count(): number;
    
    /**
     * [Client]
     * 
     * Adds one to the count of balls eaten. Once this count reaches 200, the 'Ball Eater' achievement is unlocked.
     * 
     */
    function EatBall(): void;
    
    /**
     * [Client and Menu]
     * 
     * Retrieves progress of given achievement
     * @param achievementID - The ID of achievement to retrieve progress of. Note: IDs start from 0, not 1.
     */
    function GetCount(achievementID: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Retrieves description of given achievement
     * @param achievementID - The ID of achievement to retrieve description of. Note: IDs start from 0, not 1.
     */
    function GetDesc(achievementID: number): string;
    
    /**
     * [Client and Menu]
     * 
     * Retrieves progress goal of given achievement
     * @param achievementID - The ID of achievement to retrieve goal of. Note: IDs start from 0, not 1.
     */
    function GetGoal(achievementID: number): number;
    
    /**
     * [Client and Menu]
     * 
     * Retrieves name of given achievement
     * @param achievementID - The ID of achievement to retrieve name of. Note: IDs start from 0, not 1.
     */
    function GetName(achievementID: number): string;
    
    /**
     * [Client]
     * 
     * Adds one to the count of baddies killed. Once this count reaches 1000, the 'War Zone' achievement is unlocked.
     * 
     */
    function IncBaddies(): void;
    
    /**
     * [Client]
     * 
     * Adds one to the count of innocent animals killed. Once this count reaches 1000, the 'Innocent Bystander' achievement is unlocked.
     * 
     */
    function IncBystander(): void;
    
    /**
     * [Client]
     * 
     * Adds one to the count of friendly NPCs killed. Once this count reaches 1000, the 'Bad Friend' achievement is unlocked.
     * 
     */
    function IncGoodies(): void;
    
    /**
     * [Client and Menu]
     * 
     * Used in GMod 12 in the achievements menu to show the user if they have unlocked certain achievements.
     * @param AchievementID - Internal Achievement ID number
     */
    function IsAchieved(AchievementID: number): boolean;
    
    /**
     * [Client]
     * 
     * Adds one to the count of things removed. Once this count reaches 5000, the 'Destroyer' achievement is unlocked.
     * 
     */
    function Remover(): void;
    
    /**
     * [Client]
     * 
     * Adds one to the count of NPCs spawned. Once this count reaches 1000, the 'Procreator' achievement is unlocked.
     * 
     */
    function SpawnedNPC(): void;
    
    /**
     * [Client]
     * 
     * Adds one to the count of props spawned. Once this count reaches 5000, the 'Creator' achievement is unlocked.
     * 
     */
    function SpawnedProp(): void;
    
    /**
     * [Client]
     * 
     * Adds one to the count of ragdolls spawned. Once this count reaches 2000, the 'Dollhouse' achievement is unlocked.
     * 
     */
    function SpawnedRagdoll(): void;
    
    /**
     * [Client]
     * 
     * Adds one to the count of how many times the spawnmenu has been opened. Once this count reaches 100,000, the 'Menu User' achievement is unlocked.
     * 
     */
    function SpawnMenuOpen(): void;

}

/**
 * The ai library.
 */
declare namespace ai {
    

    /**
     * [Server]
     * 
     * Translates a schedule name to its corresponding ID.
     * @param sched - Then schedule name. In most cases, this will be the same as the [Enums/SCHED](https://wiki.facepunch.com/gmod/Enums/SCHED) name.
     */
    function GetScheduleID(sched: SCHED): SCHED;
    
    /**
     * [Server]
     * 
     * Returns the squad leader of the given squad.
     * @param squad - The squad name.
     */
    function GetSquadLeader(squad: string): NPC;
    
    /**
     * [Server]
     * 
     * Returns the amount of members a given squad has. See also [ai.GetSquadMembers](https://wiki.facepunch.com/gmod/ai.GetSquadMembers).
     * @param squad - The squad name.
     */
    function GetSquadMemberCount(squad: string): number;
    
    /**
     * [Server]
     * 
     * Returns all members of a given squad. See also [ai.GetSquadMemberCount](https://wiki.facepunch.com/gmod/ai.GetSquadMemberCount) and [NPC:GetSquad](https://wiki.facepunch.com/gmod/NPC:GetSquad).
     * @param squad - The squad name.
     */
    function GetSquadMembers(squad: string): any;
    
    /**
     * [Server]
     * 
     * Translates a task name to its corresponding ID.
     * @param task - The task name.
     */
    function GetTaskID(task: string): number;

}

/**
 * Allows you to set up a schedule for NPCs to follow. This lets you dictate their actions.
 */
declare namespace ai_schedule {
    

    /**
     * [Server]
     * 
     * Creates a schedule for scripted NPC.
     * @param name - Name of the schedule.
     */
    function New(name: string): any;

}

/**
 * Used to create tasks for scripted NPCs.
 */
declare namespace ai_task {
    

    /**
     * [Server]
     * 
     * Create a new empty task. Used by [Schedule:AddTask](https://wiki.facepunch.com/gmod/Schedule:AddTask) and [Schedule:EngTask](https://wiki.facepunch.com/gmod/Schedule:EngTask).
     * 
     */
    function New(): Task;

}

/**
 * The baseclass library. Used to lookup a field from a metatable.
 */
declare namespace baseclass {
    

    /**
     * [Shared and Menu]
     * 
     * Gets the base class of an an object.
     * 
     * This is used not just by entities, but also by widgets, panels, drive modes, weapons and gamemodes (with "gamemode_" prefix).
     * 
     * The keyword **DEFINE_BASECLASS** translates into a call to this function. In the engine, it is replaced with:
     * 
     * ```
     * local BaseClass = baseclass.Get
     * ```
     * @param name - The child class.
     */
    function Get(name: string): any;
    
    /**
     * [Shared and Menu]
     * 
     * Add a new base class that can be derived by others. This is done automatically for:
     * * widgets
     * * panels
     * * drive modes
     * * entities
     * * weapons
     * * gamemodes (with prefix "gamemode_")
     * @param name - The name of this base class. Must be completely unique.
     * @param tab - The base class.
     */
    function Set(name: string, tab: any): void;

}

/**
 * The bitwise library contains useful functions for bitwise operations.
 * Make sure you're familiar with [Bitwise Operators](https://code.tutsplus.com/articles/understanding-bitwise-operators--active-11301)
 */
declare namespace bit {
    

    /**
     * [Shared and Menu]
     * 
     * Returns the arithmetically shifted value.
     * @param value - The value to be manipulated.
     * @param shiftCount - Amounts of bits to shift.
     */
    function arshift(value: number, shiftCount: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Performs the bitwise `and` for all values specified.
     * @param value - The value to be manipulated.
     * @param [otherValues = nil] - Values bit to perform bitwise "and" with. Optional.
     */
    function band(value: number, otherValues?: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the bitwise not of the value.
     * @param value - The value to be inverted.
     */
    function bnot(value: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the bitwise OR of all values specified.
     * @param value1 - The first value.
     * @param vararg - Extra values to be evaluated. (must all be numbers)
     */
    function bor(value1: number, ...vararg: any[]): number;
    
    /**
     * [Shared and Menu]
     * 
     * Swaps the byte order.
     * @param value - The value to be byte swapped.
     */
    function bswap(value: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the bitwise xor of all values specified.
     * @param value - The value to be manipulated.
     * @param [otherValues = nil] - Values bit xor with. Optional.
     */
    function bxor(value: number, otherValues?: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the left shifted value.
     * 
     * **Note:**
     * >The returned value will be clamped to a signed 32-bit integer, even on 64-bit builds.
     * 
     * @param value - The value to be manipulated.
     * @param shiftCount - Amounts of bits to shift left by.
     */
    function lshift(value: number, shiftCount: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the left rotated value.
     * @param value - The value to be manipulated.
     * @param shiftCount - Amounts of bits to rotate left by.
     */
    function rol(value: number, shiftCount: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the right rotated value.
     * @param value - The value to be manipulated.
     * @param shiftCount - Amounts of bits to rotate right by.
     */
    function ror(value: number, shiftCount: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the right shifted value.
     * 
     * **Note:**
     * >The returned value will be clamped to a signed 32-bit integer, even on 64-bit builds.
     * 
     * @param value - The value to be manipulated.
     * @param shiftCount - Amounts of bits to shift right by.
     */
    function rshift(value: number, shiftCount: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Normalizes the specified value and clamps it in the range of a signed 32bit integer.
     * @param value - The value to be normalized.
     */
    function tobit(value: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the hexadecimal representation of the number with the specified digits.
     * @param value - The value to be normalized.
     * @param [digits = 8] - The number of digits. Optional
     */
    function tohex(value: number, digits = 8): string;

}

/**
 * This directs all drawing to be done to a certain 2D or 3D plane or position, until the corresponding "End" function is called.
 * 
 * The matrix functions exist, but are mostly unusable unless you're familiar with the source engine's layout for each aspect.
 */
declare namespace cam {
    

    /**
     * [Client]
     * 
     * Shakes the screen at a certain position.
     * @param pos - Origin of the shake.
     * @param angles - Angles of the shake.
     * @param factor - The shake factor.
     */
    function ApplyShake(pos: Vector, angles: Angle, factor: number): void;
    
    /**
     * [Client]
     * 
     * Switches the renderer back to the previous drawing mode from a 3D context.
     * 
     * This function is an alias of [cam.End3D](https://wiki.facepunch.com/gmod/cam.End3D).
     * 
     */
    function End(): void;
    
    /**
     * [Client]
     * 
     * Switches the renderer back to the previous drawing mode from a 2D context.
     * 
     */
    function End2D(): void;
    
    /**
     * [Client]
     * 
     * Switches the renderer back to the previous drawing mode from a 3D context.
     * 
     */
    function End3D(): void;
    
    /**
     * [Client]
     * 
     * Switches the renderer back to the previous drawing mode from a 3D2D context.
     * 
     */
    function End3D2D(): void;
    
    /**
     * [Client]
     * 
     * Switches the renderer back to the previous drawing mode from a 3D orthographic rendering context.
     * 
     */
    function EndOrthoView(): void;
    
    /**
     * [Client]
     * 
     * Returns a copy of the model matrix that is at the top of the stack.
     * 
     * **Note:**
     * >Editing the matrix **will not** edit the current view. To do so, you will have to **push** it.
     * 
     * **Note:**
     * >This function essentially returns the copy of the last pushed model matrix.
     * 
     * 
     */
    function GetModelMatrix(): VMatrix;
    
    /**
     * [Client]
     * 
     * Tells the renderer to ignore the depth buffer and draw any upcoming operation "ontop" of everything that was drawn yet.
     * 
     * This is identical to calling `render.DepthRange( 0, 0.01 )` for `true` and  `render.DepthRange( 0, 1 )` for `false`. See [render.DepthRange](https://wiki.facepunch.com/gmod/render.DepthRange).
     * @param ignoreZ - Determines whenever to ignore the depth buffer or not.
     */
    function IgnoreZ(ignoreZ: boolean): void;
    
    /**
     * [Client]
     * 
     * Pops the current active rendering matrix from the stack and reinstates the previous one.
     * 
     */
    function PopModelMatrix(): void;
    
    /**
     * [Client]
     * 
     * Pushes the specified matrix onto the render matrix stack. Unlike opengl, this will replace the current model matrix.
     * 
     * **Warning:**
     * >When used in the Paint function of a panel, if you want to rely on the top-left position of the panel, you must use [VMatrix:Translate](https://wiki.facepunch.com/gmod/VMatrix:Translate) with the (0, 0) position of the panel relative to the screen.
     * 
     * **Note:**
     * >This does not work with [cam.Start3D2D](https://wiki.facepunch.com/gmod/cam.Start3D2D) if `multiply` is false.
     * 
     * @param matrix - The matrix to push.
     * @param [multiply = false] - If set, multiplies given matrix with currently active matrix ([cam.GetModelMatrix](https://wiki.facepunch.com/gmod/cam.GetModelMatrix)) before pushing.
     */
    function PushModelMatrix(matrix: VMatrix, multiply = false): void;
    
    /**
     * [Client]
     * 
     * Sets up a new rendering context. This is an extended version of [cam.Start3D](https://wiki.facepunch.com/gmod/cam.Start3D) and [cam.Start2D](https://wiki.facepunch.com/gmod/cam.Start2D). Must be finished by [cam.End3D](https://wiki.facepunch.com/gmod/cam.End3D) or [cam.End2D](https://wiki.facepunch.com/gmod/cam.End2D).
     * 
     * **Bug [#2682](https://github.com/Facepunch/garrysmod-issues/issues/2682):**
     * >This will not update current view properties for 3D contexts.
     * 
     * @param dataTbl - Render context config. See [Structures/RenderCamData](https://wiki.facepunch.com/gmod/Structures/RenderCamData)
     */
    function Start(dataTbl: RenderCamData): void;
    
    /**
     * [Client]
     * 
     * Sets up a new 2D rendering context. Must be finished by [cam.End2D](https://wiki.facepunch.com/gmod/cam.End2D).
     * 
     * This is almost always used with a render target from the [render](https://wiki.facepunch.com/gmod/render). To set its position use [render.SetViewPort](https://wiki.facepunch.com/gmod/render.SetViewPort) with a target already stored.
     * 
     * <rendercontext hook="true" type="2D"></rendercontext>
     * 
     * **Note:**
     * >This will put an identity matrix at the top of the model matrix stack. If you are trying to use [cam.PushModelMatrix](https://wiki.facepunch.com/gmod/cam.PushModelMatrix), call it after this function and not before.
     * 
     * 
     */
    function Start2D(): void;
    
    /**
     * [Client]
     * 
     * Sets up a new 3D rendering context. Must be finished by [cam.End3D](https://wiki.facepunch.com/gmod/cam.End3D).
     * 
     * For more advanced settings such as an orthographic view, use [cam.Start](https://wiki.facepunch.com/gmod/cam.Start) instead.
     * 
     * <rendercontext hook="true" type="3D"></rendercontext>
     * 
     * **Bug [#1995](https://github.com/Facepunch/garrysmod-issues/issues/1995):**
     * >Negative x/y values won't work.
     * 
     * **Bug [#2682](https://github.com/Facepunch/garrysmod-issues/issues/2682):**
     * >This will not update current view properties.
     * 
     * **Note:**
     * >Both zNear and zFar need a value before any of them work.
     * 
     * zNear also requires a value higher than 0.
     * 
     * @param [pos = EyePos()] - Render cam position.
     * @param [angles = EyeAngles()] - Render cam angles.
     * @param [fov = nil] - Field of view.
     * @param [x = 0] - X coordinate of where to start the new view port.
     * @param [y = 0] - Y coordinate of where to start the new view port.
     * @param [w = ScrW()] - Width of the new viewport.
     * @param [h = ScrH()] - Height of the new viewport.
     * @param [zNear = nil] - Distance to near clipping plane.
     * @param [zFar = nil] - Distance to far clipping plane.
     */
    function Start3D(pos?: Vector, angles?: Angle, fov?: number, x = 0, y = 0, w?: number, h?: number, zNear?: number, zFar?: number): void;
    
    /**
     * [Client]
     * 
     * Sets up a new 2D rendering context. Must be finished by [cam.End3D2D](https://wiki.facepunch.com/gmod/cam.End3D2D). This function pushes a new matrix onto the stack. ([cam.PushModelMatrix](https://wiki.facepunch.com/gmod/cam.PushModelMatrix))
     * 
     * Matrix formula:
     * ```
     * local m = Matrix()
     * m:SetAngles(angles)
     * m:SetTranslation(pos)
     * m:SetScale(Vector(scale, -scale, 1))
     * ```
     * 
     * <rendercontext hook="true" type="2D"></rendercontext>
     * <rendercontext hook="true" type="3D"></rendercontext>
     * 
     * **Warning:**
     * >This should be closed by [cam.End3D2D](https://wiki.facepunch.com/gmod/cam.End3D2D) otherwise the game crashes
     * 
     * @param pos - Origin of the 3D2D context, ie. the top left corner, (0, 0).
     * @param angles - Angles of the 3D2D context.
     * +x in the 2d context corresponds to +x of the angle (its forward direction).
     * +y in the 2d context corresponds to -y of the angle (its right direction).
     * If (dx, dy) are your desired (+x, +y) unit vectors, the angle you want is dx:AngleEx(dx:Cross(-dy)).
     * @param scale - The scale of the render context.
     * If scale is 1 then 1 pixel in 2D context will equal to 1 unit in 3D context.
     */
    function Start3D2D(pos: Vector, angles: Angle, scale: number): void;
    
    /**
     * [Client]
     * 
     * Sets up a new 3d context using orthographic projection.
     * @param leftOffset - The left plane offset.
     * @param topOffset - The top plane offset.
     * @param rightOffset - The right plane offset.
     * @param bottomOffset - The bottom plane offset.
     */
    function StartOrthoView(leftOffset: number, topOffset: number, rightOffset: number, bottomOffset: number): void;

}

/**
 * The chat library's purpose is to interface with the default chatbox.
 */
declare namespace chat {
    

    /**
     * [Client]
     * 
     * Adds text to the local player's chat box (which only they can read).
     * @param arguments - The arguments. Arguments can be:
     * * [table](https://wiki.facepunch.com/gmod/table) - [Color](https://wiki.facepunch.com/gmod/Color). Will set the color for all following strings until the next Color argument.
     * * [string](https://wiki.facepunch.com/gmod/string) - Text to be added to the chat box.
     * * [Player](https://wiki.facepunch.com/gmod/Player) - Adds the name of the player in the player's team color to the chat box.
     * * [any](https://wiki.facepunch.com/gmod/any) - Any other type, such as [Entity](https://wiki.facepunch.com/gmod/Entity) will be converted to string and added as text.
     */
    function AddText(...arguments: any[]): void;
    
    /**
     * [Client]
     * 
     * Closes the chat window.
     * 
     */
    function Close(): void;
    
    /**
     * [Client]
     * 
     * Returns the chatbox position.
     * 
     */
    function GetChatBoxPos(): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client]
     * 
     * Returns the chatbox size.
     * 
     */
    function GetChatBoxSize(): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client]
     * 
     * Opens the chat window.
     * @param mode - If equals 1, opens public chat, otherwise opens team chat
     */
    function Open(mode: number): void;
    
    /**
     * [Client]
     * 
     * Plays the chat "tick" sound.
     * 
     */
    function PlaySound(): void;

}

/**
 * The cleanup library allows you to control what happens to custom entities when the clean-up buttons are pressed in the Utilities tab of the Spawn menu (default Q).
 */
declare namespace cleanup {
    

    /**
     * [Server]
     * 
     * Adds an entity to a player's cleanup list.
     * @param pl - Who's cleanup list to add the entity to.
     * @param type - The type of cleanup.
     * @param ent - The entity to add to the player's cleanup list.
     */
    function Add(pl: Player, type: string, ent: Entity): void;
    
    /**
     * [Server]
     * 
     * Called by the `gmod_admin_cleanup` console command. Allows admins to clean up the server.
     * @param pl - The player that called the console command.
     * @param command - The console command that called this function.
     * @param args - First and only arg is the cleanup type.
     */
    function CC_AdminCleanup(pl: Player, command: string, args: any): void;
    
    /**
     * [Server]
     * 
     * Called by the `gmod_cleanup` console command. Allows players to cleanup their own props.
     * @param pl - The player that called the console command.
     * @param command - The console command that called this function.
     * @param args - First and only argument is the cleanup type.
     */
    function CC_Cleanup(pl: Player, command: string, args: any): void;
    
    /**
     * [Server]
     * 
     * Gets the cleanup list.
     * 
     */
    function GetList(): void;
    
    /**
     * [Shared]
     * 
     * Gets the table of cleanup types.
     * 
     */
    function GetTable(): any;
    
    /**
     * [Shared]
     * 
     * Registers a new cleanup type.
     * @param type - Name of type.
     */
    function Register(type: string): void;
    
    /**
     * [Server]
     * 
     * Replaces one entity in the cleanup module with another
     * @param from - Old entity
     * @param to - New entity
     */
    function ReplaceEntity(from: Entity, to: Entity): boolean;
    
    /**
     * [Client]
     * 
     * Repopulates the clients cleanup menu
     * 
     */
    function UpdateUI(): void;

}

/**
 * The concommand library is used to create console commands which can be used to network (basic) information & events between the client and the server.
 */
declare namespace concommand {
    

    /**
     * [Shared and Menu]
     * 
     * Creates a console command that runs a function in lua with optional autocompletion function and help text.
     * 
     * **Bug [#1183](https://github.com/Facepunch/garrysmod-issues/issues/1183):**
     * >This will fail if the concommand was previously removed with [concommand.Remove](https://wiki.facepunch.com/gmod/concommand.Remove) in a different realm (creating a command on the client that was removed from the server and vice-versa).
     * 
     * @param name - The command name to be used in console.
     * This cannot be a name of existing console command or console variable. It will silently fail if it is.
     * @param callback - The function to run when the concommand is executed. Arguments passed are:
     * * [Player](https://wiki.facepunch.com/gmod/Player) ply - The player that ran the concommand. NULL entity if command was entered with the dedicated server console.
     * * [string](https://wiki.facepunch.com/gmod/string) cmd - The concommand string (if one callback is used for several concommands).
     * * [table](https://wiki.facepunch.com/gmod/table) args - A table of all string arguments.
     * * [string](https://wiki.facepunch.com/gmod/string) argStr - The arguments as a string.
     * @param [autoComplete = nil] - The function to call which should return a table of options for autocompletion. (<page text="Autocompletion Tutorial">Console_Command_Auto-completion</page>)
     * This only properly works on the client since it is **not** networked. Arguments passed are:
     * * [string](https://wiki.facepunch.com/gmod/string) cmd - The concommand this autocompletion is for.
     * * [string](https://wiki.facepunch.com/gmod/string) args - The arguments typed so far.
     * @param [helpText = nil] - The text to display should a user run 'help cmdName'.
     * @param [flags = 0] - Concommand modifier flags. See [Enums/FCVAR](https://wiki.facepunch.com/gmod/Enums/FCVAR).
     */
    function Add(name: string, callback: Function, autoComplete?: Function, helpText?: string, flags = 0): void;
    
    /**
     * [Shared and Menu]
     * 
     * Used by the engine to call the autocomplete function for a console command, and retrieve returned options.
     * @param command - Name of command
     * @param arguments - Arguments given to the command
     */
    function AutoComplete(command: string, arguments: string): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the tables of all console command callbacks, and autocomplete functions, that were added to the game with [concommand.Add](https://wiki.facepunch.com/gmod/concommand.Add).
     * 
     */
    function GetTable(): LuaMultiReturn<[any, any]>;
    
    /**
     * [Shared and Menu]
     * 
     * Removes a console command.
     * 
     * **Bug [#1183](https://github.com/Facepunch/garrysmod-issues/issues/1183):**
     * >[concommand.Add](https://wiki.facepunch.com/gmod/concommand.Add) will fail if the concommand was previously removed with this function in a different realm (creating a command on the client that was removed from the server and vice-versa).
     * 
     * @param name - The name of the command to be removed.
     */
    function Remove(name: string): void;
    
    /**
     * [Shared and Menu]
     * 
     * **.**
     * 
     * Used by the engine to run a console command's callback function. This will only be called for commands that were added with [Global.AddConsoleCommand](https://wiki.facepunch.com/gmod/Global.AddConsoleCommand), which [concommand.Add](https://wiki.facepunch.com/gmod/concommand.Add) calls internally. An error is sent to the player's chat if no callback is found.
     * 
     * This will still be called for concommands removed with [concommand.Remove](https://wiki.facepunch.com/gmod/concommand.Remove) but will return false.
     * @param ply - Player to run concommand on
     * @param cmd - Command name
     * @param args - Command arguments.
     * Can be table or string
     * @param argumentString - string of all arguments sent to the command
     */
    function Run(ply: Player, cmd: string, args: any, argumentString: string): boolean;

}

/**
 * The constraint library allows you to control the constraint system built into the physics engine (rope, weld, ballsockets, etc).
 */
declare namespace constraint {
    

    /**
     * [Server]
     * 
     * Stores information about constraints in an entity's table.
     * @param ent1 - The entity to store the information on.
     * @param constrt - The constraint to store in the entity's table.
     * @param [ent2 = nil] - Optional. If different from `ent1`, the info will also be stored in the table for this entity.
     * @param [ent3 = nil] - Optional. Same as `ent2`.
     * @param [ent4 = nil] - Optional. Same as `ent2`.
     */
    function AddConstraintTable(ent1: Entity, constrt: Entity, ent2?: Entity, ent3?: Entity, ent4?: Entity): void;
    
    /**
     * [Server]
     * 
     * Stores info about the constraints on the entity's table. The only difference between this and [constraint.AddConstraintTable](https://wiki.facepunch.com/gmod/constraint.AddConstraintTable) is that the constraint does not get deleted when the entity is removed.
     * @param ent1 - The entity to store the information on.
     * @param constrt - The constraint to store in the entity's table.
     * @param [ent2 = nil] - Optional. If different from `ent1`, the info will also be stored in the table for this entity.
     * @param [ent3 = nil] - Optional. Same as `ent2`.
     * @param [ent4 = nil] - Optional. Same as `ent2`.
     */
    function AddConstraintTableNoDelete(ent1: Entity, constrt: Entity, ent2?: Entity, ent3?: Entity, ent4?: Entity): void;
    
    /**
     * [Server]
     * 
     * Creates an advanced ballsocket (ragdoll) constraint.
     * 
     * Uses a https://developer.valvesoftware.com/wiki/Phys_ragdollconstraint
     * @param Ent1 - First entity.
     * @param Ent2 - Second entity.
     * @param Bone1 - Bone of first entity (0 for non-ragdolls)
     * @param Bone2 - Bone of second entity (0 for non-ragdolls)
     * @param LPos1 - Position on the first entity, in its local space coordinates.
     * @param LPos2 - Position on the second entity, in its local space coordinates.
     * @param forcelimit - Amount of force until it breaks (0 = unbreakable)
     * @param torquelimit - Amount of torque (rotation speed) until it breaks (0 = unbreakable)
     * @param xmin - Minimum angle in rotations around the X axis local to the constraint.
     * @param ymin - Minimum angle in rotations around the Y axis local to the constraint.
     * @param zmin - Minimum angle in rotations around the Z axis local to the constraint.
     * @param xmax - Maximum angle in rotations around the X axis local to the constraint.
     * @param ymax - Maximum angle in rotations around the Y axis local to the constraint.
     * @param zmax - Maximum angle in rotations around the Z axis local to the constraint.
     * @param xfric - Rotational friction in the X axis local to the constraint.
     * @param yfric - Rotational friction in the Y axis local to the constraint.
     * @param zfric - Rotational friction in the Z axis local to the constraint.
     * @param onlyrotation - Only limit rotation, free movement.
     * @param nocollide - Whether the entities should be no-collided.
     */
    function AdvBallsocket(Ent1: Entity, Ent2: Entity, Bone1: number, Bone2: number, LPos1: Vector, LPos2: Vector, forcelimit: number, torquelimit: number, xmin: number, ymin: number, zmin: number, xmax: number, ymax: number, zmax: number, xfric: number, yfric: number, zfric: number, onlyrotation: number, nocollide: number): Entity;
    
    /**
     * [Server]
     * 
     * Creates an axis constraint.
     * @param Ent1 - First entity.
     * @param Ent2 - Second entity.
     * @param Bone1 - Bone of first entity (0 for non-ragdolls)
     * @param Bone2 - Bone of second entity (0 for non-ragdolls)
     * @param LPos1 - Position on the first entity, in its local space coordinates.
     * @param LPos2 - Position on the second entity, in its local space coordinates.
     * @param forcelimit - Amount of force until it breaks (0 = unbreakable)
     * @param torquelimit - Amount of torque (rotational force) until it breaks (0 = unbreakable)
     * @param friction - Constraint friction.
     * @param nocollide - Whether the entities should be no-collided.
     * @param LocalAxis - If you include the LocalAxis then LPos2 will not be used in the final constraint. However, LPos2 is still a required argument.
     * @param DontAddTable - Whether or not to add the constraint info on the entity table. See [constraint.AddConstraintTable](https://wiki.facepunch.com/gmod/constraint.AddConstraintTable).
     */
    function Axis(Ent1: Entity, Ent2: Entity, Bone1: number, Bone2: number, LPos1: Vector, LPos2: Vector, forcelimit: number, torquelimit: number, friction: number, nocollide: number, LocalAxis: Vector, DontAddTable: boolean): Entity;
    
    /**
     * [Server]
     * 
     * Creates a ballsocket joint.
     * @param Ent1 - First entity
     * @param Ent2 - Second entity
     * @param Bone1 - Bone of first entity (0 for non-ragdolls)
     * @param Bone2 - Bone of second entity (0 for non-ragdolls)
     * @param LocalPos - Centerposition of the joint, relative to the **second** entity.
     * @param forcelimit - Amount of force until it breaks (0 = unbreakable)
     * @param torquelimit - Amount of torque (rotation speed) until it breaks (0 = unbreakable)
     * @param nocollide - Whether the entities should be nocollided
     */
    function Ballsocket(Ent1: Entity, Ent2: Entity, Bone1: number, Bone2: number, LocalPos: Vector, forcelimit: number, torquelimit: number, nocollide: number): Entity;
    
    /**
     * [Server]
     * 
     * Basic checks to make sure that the specified entity and bone are valid. Returns false if we should not be constraining the entity.
     * @param ent - The entity to check
     * @param bone - The bone of the entity to check (use 0 for mono boned ents)
     */
    function CanConstrain(ent: Entity, bone: number): boolean;
    
    /**
     * [Server]
     * 
     * Creates a rope without any constraint.
     * @param pos - Starting position of the rope.
     * @param width - Width of the rope.
     * @param material - Material of the rope.
     * @param Constraint - Constraint for the rope.
     * @param Ent1 - First entity.
     * @param LPos1 - Position of first end of the rope. Local to Ent1.
     * @param Bone1 - Bone of first entity (0 for non-ragdolls)
     * @param Ent2 - Second entity.
     * @param LPos2 - Position of second end of the rope. Local to Ent2.
     * @param Bone2 - Bone of second entity (0 for non-ragdolls)
     * @param kv - (Optional) Any additional key/values to be set on the rope.
     */
    function CreateKeyframeRope(pos: Vector, width: number, material: string, Constraint: Entity, Ent1: Entity, LPos1: Vector, Bone1: number, Ent2: Entity, LPos2: Vector, Bone2: number, kv: any): Entity;
    
    /**
     * [Server]
     * 
     * Creates an invisible, non-moveable anchor point in the world to which things can be attached.
     * 
     * **Note:**
     * >The entity used internally by this function (`gmod_anchor`) only exists in Sandbox derived gamemodes, meaning this function will only work in these gamemodes.  
     * 
     * 		To use this in other gamemodes, you may need to create your own [gmod_anchor](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/gamemodes/sandbox/entities/entities/gmod_anchor.lua) entity.
     * 
     * @param pos - The position to spawn the anchor at
     */
    function CreateStaticAnchorPoint(pos: Vector): LuaMultiReturn<[Entity, PhysObj, number, Vector]>;
    
    /**
     * [Server]
     * 
     * Creates an elastic constraint.
     * @param Ent1 - First entity.
     * @param Ent2 - Second entity
     * @param Bone1 - Bone of first entity (0 for non-ragdolls)
     * @param Bone2 - Bone of second entity (0 for non-ragdolls)
     * @param LPos1 - Position of first end of the rope. Local to Ent1.
     * @param LPos2 - Position of second end of the rope. Local to Ent2.
     * @param constant - 
     * @param damping - 
     * @param rdamping - 
     * @param material - The material of the rope.
     * @param width - Width of rope.
     * @param stretchonly - 
     * @param color - The color of the rope. See [Global.Color](https://wiki.facepunch.com/gmod/Global.Color).
     */
    function Elastic(Ent1: Entity, Ent2: Entity, Bone1: number, Bone2: number, LPos1: Vector, LPos2: Vector, constant: number, damping: number, rdamping: number, material: string, width: number, stretchonly: boolean, color: any): LuaMultiReturn<[Entity, Entity]>;
    
    /**
     * [Server]
     * 
     * Returns the constraint of a specified type between two entities, if it exists
     * @param ent1 - The first entity to check
     * @param ent2 - The second entity to check
     * @param type - The type of constraint, case sensitive. List of default constrains is as follows:
     * * `Weld`
     * * `Axis`
     * * `AdvBallsocket`
     * * `Rope`
     * * `Elastic`
     * * `NoCollide`
     * * `Motor`
     * * `Pulley`
     * * `Ballsocket`
     * * `Winch`
     * * `Hydraulic`
     * * `Muscle`
     * * `Keepupright`
     * * `Slider`
     * @param bone1 - The bone number for the first entity (0 for monoboned entities)
     * @param bone2 - The bone number for the second entity
     */
    function Find(ent1: Entity, ent2: Entity, type: string, bone1: number, bone2: number): Entity;
    
    /**
     * [Server]
     * 
     * Returns the first constraint of a specific type directly connected to the entity found
     * @param ent - The entity to check
     * @param type - The type of constraint, case sensitive. List of default constrains is as follows:
     * * `Weld`
     * * `Axis`
     * * `AdvBallsocket`
     * * `Rope`
     * * `Elastic`
     * * `NoCollide`
     * * `Motor`
     * * `Pulley`
     * * `Ballsocket`
     * * `Winch`
     * * `Hydraulic`
     * * `Muscle`
     * * `Keepupright`
     * * `Slider`
     */
    function FindConstraint(ent: Entity, type: string): any;
    
    /**
     * [Server]
     * 
     * Returns the other entity involved in the first constraint of a specific type directly connected to the entity
     * @param ent - The entity to check
     * @param type - The type of constraint, case sensitive. List of default constrains is as follows:
     * * `Weld`
     * * `Axis`
     * * `AdvBallsocket`
     * * `Rope`
     * * `Elastic`
     * * `NoCollide`
     * * `Motor`
     * * `Pulley`
     * * `Ballsocket`
     * * `Winch`
     * * `Hydraulic`
     * * `Muscle`
     * * `Keepupright`
     * * `Slider`
     */
    function FindConstraintEntity(ent: Entity, type: string): Entity;
    
    /**
     * [Server]
     * 
     * Returns a table of all constraints of a specific type directly connected to the entity
     * @param ent - The entity to check
     * @param type - The type of constraint, case sensitive. List of default constrains is as follows:
     * * `Weld`
     * * `Axis`
     * * `AdvBallsocket`
     * * `Rope`
     * * `Elastic`
     * * `NoCollide`
     * * `Motor`
     * * `Pulley`
     * * `Ballsocket`
     * * `Winch`
     * * `Hydraulic`
     * * `Muscle`
     * * `Keepupright`
     * * `Slider`
     */
    function FindConstraints(ent: Entity, type: string): any;
    
    /**
     * [Server]
     * 
     * Make this entity forget any constraints it knows about. Note that this will not actually remove the constraints.
     * @param ent - The entity that will forget its constraints.
     */
    function ForgetConstraints(ent: Entity): void;
    
    /**
     * [Server]
     * 
     * Returns a table of all entities recursively constrained to an entitiy.
     * @param ent - The entity to check
     * @param [ResultTable = nil] - Table used to return result. Optional.
     */
    function GetAllConstrainedEntities(ent: Entity, ResultTable?: any): any;
    
    /**
     * [Server]
     * 
     * Returns a table of all constraints directly connected to the entity
     * @param ent - The entity to check
     */
    function GetTable(ent: Entity): any;
    
    /**
     * [Server]
     * 
     * Returns true if the entity has constraints attached to it
     * @param ent - The entity to check
     */
    function HasConstraints(ent: Entity): boolean;
    
    /**
     * [Server]
     * 
     * Creates a Hydraulic constraint.
     * @param pl - The player that will be used to call [numpad.OnDown](https://wiki.facepunch.com/gmod/numpad.OnDown).
     * @param Ent1 - First entity.
     * @param Ent2 - Second entity.
     * @param Bone1 - Bone of first entity (0 for non-ragdolls),
     * @param Bone2 - Bone of second entity (0 for non-ragdolls).
     * @param LPos1 - 
     * @param LPos2 - 
     * @param Length1 - 
     * @param Length2 - 
     * @param width - The width of the rope.
     * @param key - The key binding, corresponding to an [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY)
     * @param fixed - Whether the hydraulic is fixed.
     * @param speed - 
     * @param material - The material of the rope.
     * @param color - The color of the rope. See [Global.Color](https://wiki.facepunch.com/gmod/Global.Color).
     */
    function Hydraulic(pl: Player, Ent1: Entity, Ent2: Entity, Bone1: number, Bone2: number, LPos1: Vector, LPos2: Vector, Length1: number, Length2: number, width: number, key: KEY, fixed: number, speed: number, material: string, color: any): LuaMultiReturn<[Entity, Entity, Entity, Entity]>;
    
    /**
     * [Server]
     * 
     * Creates a keep upright constraint.
     * 
     * **Note:**
     * >This function only works on prop_physics or prop_ragdoll.
     * 
     * @param ent - The entity to keep upright
     * @param ang - The angle defined as "upright"
     * @param bone - The bone of the entity to constrain (0 for boneless)
     * @param angularLimit - Basically, the strength of the constraint
     */
    function Keepupright(ent: Entity, ang: Angle, bone: number, angularLimit: number): Entity;
    
    /**
     * [Server]
     * 
     * Creates a motor constraint.
     * @param Ent1 - First entity.
     * @param Ent2 - Second entity.
     * @param Bone1 - Bone of first entity (0 for non-ragdolls)
     * @param Bone2 - Bone of second entity (0 for non-ragdolls)
     * @param LPos1 - 
     * @param LPos2 - 
     * @param friction - 
     * @param torque - 
     * @param forcetime - 
     * @param nocollide - Whether the entities should be no-collided.
     * @param toggle - Whether the constraint is on toggle.
     * @param pl - The player that will be used to call [numpad.OnDown](https://wiki.facepunch.com/gmod/numpad.OnDown) and [numpad.OnUp](https://wiki.facepunch.com/gmod/numpad.OnUp).
     * @param forcelimit - Amount of force until it breaks (0 = unbreakable)
     * @param numpadkey_fwd - The key binding for "forward", corresponding to an [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY)
     * @param numpadkey_bwd - The key binding for "backwards", corresponding to an [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY)
     * @param direction - 
     * @param LocalAxis - 
     */
    function Motor(Ent1: Entity, Ent2: Entity, Bone1: number, Bone2: number, LPos1: Vector, LPos2: Vector, friction: number, torque: number, forcetime: number, nocollide: number, toggle: number, pl: Player, forcelimit: number, numpadkey_fwd: KEY, numpadkey_bwd: KEY, direction: number, LocalAxis: Vector): LuaMultiReturn<[Entity, Entity]>;
    
    /**
     * [Server]
     * 
     * Creates a muscle constraint.
     * @param pl - The player that will be used to call [numpad.OnDown](https://wiki.facepunch.com/gmod/numpad.OnDown).
     * @param Ent1 - First entity.
     * @param Ent2 - Second entity.
     * @param Bone1 - Bone of first entity (0 for non-ragdolls)
     * @param Bone2 - Bone of second entity (0 for non-ragdolls)
     * @param LPos1 - 
     * @param LPos2 - 
     * @param Length1 - 
     * @param Length2 - 
     * @param width - Width of the rope.
     * @param key - The key binding, corresponding to an [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY)
     * @param fixed - Whether the constraint is fixed.
     * @param period - 
     * @param amplitude - 
     * @param starton - 
     * @param material - Material of the rope.
     * @param color - The color of the rope. See [Global.Color](https://wiki.facepunch.com/gmod/Global.Color).
     */
    function Muscle(pl: Player, Ent1: Entity, Ent2: Entity, Bone1: number, Bone2: number, LPos1: Vector, LPos2: Vector, Length1: number, Length2: number, width: number, key: KEY, fixed: number, period: number, amplitude: number, starton: boolean, material: string, color: any): LuaMultiReturn<[Entity, Entity, Entity, Entity]>;
    
    /**
     * [Server]
     * 
     * Creates an no-collide "constraint". Disables collision between two entities.
     * 
     * **Note:**
     * >Does not work with players.
     * 
     * @param Ent1 - First entity.
     * @param Ent2 - Second entity.
     * @param Bone1 - Bone of first entity (0 for non-ragdolls).
     * @param Bone2 - Bone of second entity (0 for non-ragdolls).
     */
    function NoCollide(Ent1: Entity, Ent2: Entity, Bone1: number, Bone2: number): Entity;
    
    /**
     * [Server]
     * 
     * Creates a pulley constraint.
     * @param Ent1 - 
     * @param Ent4 - 
     * @param Bone1 - 
     * @param Bone4 - 
     * @param LPos1 - 
     * @param LPos4 - 
     * @param WPos2 - 
     * @param WPos3 - 
     * @param forcelimit - Amount of force until it breaks (0 = unbreakable)
     * @param rigid - Whether the constraint is rigid.
     * @param width - Width of the rope.
     * @param material - Material of the rope.
     * @param color - The color of the rope. See [Global.Color](https://wiki.facepunch.com/gmod/Global.Color).
     */
    function Pulley(Ent1: Entity, Ent4: Entity, Bone1: number, Bone4: number, LPos1: Vector, LPos4: Vector, WPos2: Vector, WPos3: Vector, forcelimit: number, rigid: boolean, width: number, material: string, color: any): Entity;
    
    /**
     * [Server]
     * 
     * Attempts to remove all constraints associated with an entity
     * @param ent - The entity to remove constraints from
     */
    function RemoveAll(ent: Entity): LuaMultiReturn<[boolean, number]>;
    
    /**
     * [Server]
     * 
     * Attempts to remove all constraints of a specified type associated with an entity
     * @param ent - The entity to check
     * @param type - The constraint type to remove (eg. "Weld", "Elastic", "NoCollide")
     */
    function RemoveConstraints(ent: Entity, type: string): LuaMultiReturn<[boolean, number]>;
    
    /**
     * [Server]
     * 
     * Creates a rope constraint - with rope!
     * @param Ent1 - First entity
     * @param Ent2 - Second entity
     * @param Bone1 - Bone of first entity (0 for non-ragdolls)
     * @param Bone2 - Bone of second entity (0 for non-ragdolls)
     * @param LPos1 - Position of first end of the rope. Local to Ent1.
     * @param LPos2 - Position of second end of the rope. Local to Ent2.
     * @param length - Length of the rope.
     * @param addlength - Amount to add to the length of the rope. Works as it does in the Rope tool.
     * @param forcelimit - Amount of force until it breaks (0 = unbreakable).
     * @param width - Width of the rope.
     * @param material - Material of the rope.
     * @param rigid - Whether the constraint is rigid.
     * @param color - The color of the rope. See [Global.Color](https://wiki.facepunch.com/gmod/Global.Color).
     */
    function Rope(Ent1: Entity, Ent2: Entity, Bone1: number, Bone2: number, LPos1: Vector, LPos2: Vector, length: number, addlength: number, forcelimit: number, width: number, material: string, rigid: boolean, color: any): LuaMultiReturn<[Entity, Entity]>;
    
    /**
     * [Server]
     * 
     * Creates a slider constraint.
     * @param Ent1 - First entity.
     * @param Ent2 - Second entity.
     * @param Bone1 - Bone of first entity (0 for non-ragdolls),
     * @param Bone2 - Bone of second entity (0 for non-ragdolls).
     * @param LPos1 - 
     * @param LPos2 - 
     * @param width - The width of the rope.
     * @param material - The material of the rope.
     * @param color - The color of the rope. See [Global.Color](https://wiki.facepunch.com/gmod/Global.Color).
     */
    function Slider(Ent1: Entity, Ent2: Entity, Bone1: number, Bone2: number, LPos1: Vector, LPos2: Vector, width: number, material: string, color: any): LuaMultiReturn<[Entity, Entity]>;
    
    /**
     * [Server]
     * 
     * Creates a weld constraint
     * @param ent1 - The first entity
     * @param ent2 - The second entity
     * @param bone1 - The bonenumber of the first entity (0 for monoboned entities) 
     * PhysObj number for ragdolls, see: [Entity:TranslateBoneToPhysBone](https://wiki.facepunch.com/gmod/Entity:TranslateBoneToPhysBone).
     * @param bone2 - The bonenumber of the second entity
     * @param forcelimit - The amount of force appliable to the constraint before it will break (0 is never)
     * @param nocollide - Should ent1 be nocollided to ent2 via this constraint
     * @param deleteent1onbreak - If true, when ent2 is removed, ent1 will also be removed
     */
    function Weld(ent1: Entity, ent2: Entity, bone1: number, bone2: number, forcelimit: number, nocollide: boolean, deleteent1onbreak: boolean): Entity;
    
    /**
     * [Server]
     * 
     * Creates a Winch constraint.
     * @param pl - The player that will be used to call [numpad.OnDown](https://wiki.facepunch.com/gmod/numpad.OnDown) and [numpad.OnUp](https://wiki.facepunch.com/gmod/numpad.OnUp).
     * @param Ent1 - First entity.
     * @param Ent2 - Second entity.
     * @param Bone1 - Bone of first entity (0 for non-ragdolls),
     * @param Bone2 - Bone of second entity (0 for non-ragdolls).
     * @param LPos1 - 
     * @param LPos2 - 
     * @param width - The width of the rope.
     * @param fwd_bind - The key binding for "forward", corresponding to an [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY)
     * @param bwd_bind - The key binding for "backwards", corresponding to an [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY)
     * @param fwd_speed - Forward speed.
     * @param bwd_speed - Backwards speed.
     * @param material - The material of the rope.
     * @param toggle - Whether the winch should be on toggle.
     * @param color - The color of the rope. See [Global.Color](https://wiki.facepunch.com/gmod/Global.Color).
     */
    function Winch(pl: Player, Ent1: Entity, Ent2: Entity, Bone1: number, Bone2: number, LPos1: Vector, LPos2: Vector, width: number, fwd_bind: KEY, bwd_bind: KEY, fwd_speed: number, bwd_speed: number, material: string, toggle: boolean, color: any): LuaMultiReturn<[Entity, Entity, Entity]>;

}

/**
 * The construct library is used to control the physical properties of entities.
 */
declare namespace construct {
    

    /**
     * [Server]
     * 
     * Creates a magnet.
     * @param ply - Player that will have the numpad control over the magnet
     * @param pos - The position of the magnet
     * @param ang - The angles of the magnet
     * @param model - The model of the maget
     * @param material - Material of the magnet ( texture )
     * @param key - The key to toggle the magnet, see [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY)
     * @param maxObjects - Maximum amount of objects the magnet can hold
     * @param strength - Strength of the magnet
     * @param [nopull = 0] - If > 0, disallows the magnet to pull objects towards it
     * @param [allowrot = 0] - If > 0, allows rotation of the objects attached
     * @param [startOn = 0] - If > 0, enabled from spawn
     * @param toggle - If != 0, pressing the key toggles the magnet, otherwise you'll have to hold the key to keep it enabled
     * @param [vel = Vector( 0, 0, 0 )] - Velocity to set on spawn
     * @param [aVel = Angle( 0, 0, 0 )] - Angular velocity to set on spawn
     * @param [frozen = false] - Freeze the magnet on start
     */
    function Magnet(ply: Player, pos: Vector, ang: Angle, model: string, material: string, key: KEY, maxObjects: number, strength: number, nopull = 0, allowrot = 0, startOn = 0, toggle: number, vel?: Vector, aVel?: Angle, frozen = false): Entity;
    
    /**
     * [Server]
     * 
     * Sets props physical properties.
     * @param ply - The player. This variable is not used and can be left out.
     * @param ent - The entity to apply properties to
     * @param physObjID - You can use this or the argument below. This will be used in case you don't provide argument below.
     * @param physObj - The physics object to apply the properties to
     * @param data - The table containing properties to apply. See [Structures/PhysProperties](https://wiki.facepunch.com/gmod/Structures/PhysProperties)
     */
    function SetPhysProp(ply: Player, ent: Entity, physObjID: number, physObj: PhysObj, data: PhysProperties): void;

}

/**
 * The controlpanel library.
 */
declare namespace controlpanel {
    

    /**
     * [Client]
     * 
     * Clears ALL the control panels ( for tools )
     * 
     */
    function Clear(): void;
    
    /**
     * [Client]
     * 
     * Returns (or creates if not exists) a control panel.
     * @param name - The name of the panel. For normal tools this will be equal to `TOOL.Mode` (the tool's filename without the extension).
     * When you create a tool/option via [spawnmenu.AddToolMenuOption](https://wiki.facepunch.com/gmod/spawnmenu.AddToolMenuOption), the internal control panel name is `TOOL.Mode .. "_" .. tool_tab:lower() .. "_" .. tool_category:lower()`.
     */
    function Get(name: string): Panel;

}

/**
 * Used to store permanent variables/settings on clients that will persist between servers. They are stored in the `cl.db`, `sv.db`, or `mn.db` SQLite databases depending on the realm, located in the root Garry's Mod folder.
 */
declare namespace cookie {
    

    /**
     * [Shared and Menu]
     * 
     * Deletes a cookie on the client.
     * @param name - The name of the cookie that you want to delete.
     */
    function Delete(name: string): void;
    
    /**
     * [Shared and Menu]
     * 
     * Gets the value of a cookie on the client as a number.
     * @param name - The name of the cookie that you want to get.
     * @param [default_ = nil] - Value to return if the cookie does not exist.
     */
    function GetNumber(name: string, default_?: any): number;
    
    /**
     * [Shared and Menu]
     * 
     * Gets the value of a cookie on the client as a string.
     * @param name - The name of the cookie that you want to get.
     * @param [default_ = nil] - Value to return if the cookie does not exist.
     */
    function GetString(name: string, default_?: any): string;
    
    /**
     * [Shared and Menu]
     * 
     * Sets the value of a cookie, which is saved automatically by the [sql](https://wiki.facepunch.com/gmod/sql).
     * 
     * These are stored in the *.db files - cl.db for clients, mn.db for menu state and sv.db for servers.
     * @param key - The name of the cookie that you want to set.
     * @param value - Value to store in the cookie.
     */
    function Set(key: string, value: string): void;

}

/**
 * Coroutines are similar to threads, however they do not run simultaneously. They offer a way to split up tasks and dynamically pause & resume functions.
 */
declare namespace coroutine {
    

    /**
     * [Shared and Menu]
     * 
     * Creates a coroutine of the given function.
     * @param func - The function for the coroutine to use.
     */
    function create(func: Function): thread;
    
    /**
     * [Shared and Menu]
     * 
     * Returns whether the running coroutine can yield.  
     * 		A running coroutine is yieldable if it is not in the main thread, and it is not inside a non-yieldable C function.
     * 
     * **Note:**
     * >This is only available on the x86-64 versions, because of the difference in the LuaJIT version. [See here](jit.version)
     * 
     * 
     */
    function isyieldable(): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Resumes the given coroutine and passes the given vararg to either the function arguments or the [coroutine.yield](https://wiki.facepunch.com/gmod/coroutine.yield) that is inside that function and returns whatever yield is called with the next time or by the final return in the function.
     * @param coroutine - Coroutine to resume.
     * @param args - Arguments to be returned by [coroutine.yield](https://wiki.facepunch.com/gmod/coroutine.yield).
     */
    function resume(coroutine: thread, ...args: any[]): LuaMultiReturn<[boolean, any[]]>;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the active coroutine or nil if we are not within a coroutine.
     * 
     */
    function running(): thread;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the status of the coroutine passed to it, the possible statuses are "suspended", "running", and "dead".
     * @param coroutine - Coroutine to check the status of.
     */
    function status(coroutine: thread): string;
    
    /**
     * [Shared]
     * 
     * Repeatedly yields the coroutine for the given duration before continuing. 
     * 
     * Only works inside a coroutine. Only useful in nextbot coroutine think function. 
     * 
     * This function uses [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime) instead of [Global.RealTime](https://wiki.facepunch.com/gmod/Global.RealTime).
     * @param duration - The number of seconds to wait
     */
    function wait(duration: number): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a function which calling is equivalent with calling [coroutine.resume](https://wiki.facepunch.com/gmod/coroutine.resume) with the coroutine and all extra parameters.
     * 
     * The values returned by the returned function only contain the values passed to the inner [coroutine.yield](https://wiki.facepunch.com/gmod/coroutine.yield) call and do not include the *no error* status that [coroutine.resume](https://wiki.facepunch.com/gmod/coroutine.resume) provides. In case of failure, an error is thrown instead.
     * @param coroutine - Coroutine to resume.
     */
    function wrap(coroutine: Function): Function;
    
    /**
     * [Shared and Menu]
     * 
     * Pauses the active coroutine and passes all additional variables to the call of [coroutine.resume](https://wiki.facepunch.com/gmod/coroutine.resume) that resumed the coroutine last time, and returns all additional variables that were passed to the previous call of resume.
     * @param returnValue - Arguments to be returned by the last call of [coroutine.resume](https://wiki.facepunch.com/gmod/coroutine.resume).
     */
    function yield(...returnValue: any[]): any[];

}

/**
 * The cvars library allows you to control what happens when a cvar (console variable) is changed.
 */
declare namespace cvars {
    

    /**
     * [Shared and Menu]
     * 
     * Adds a callback to be called when the named convar changes.
     * 
     * **Bug [#1440](https://github.com/Facepunch/garrysmod-issues/issues/1440):**
     * >This does not callback convars in the menu state.
     * 
     * **Bug [#3503](https://github.com/Facepunch/garrysmod-issues/issues/3503):**
     * >This does not callback convars on the client with FCVAR_GAMEDLL and convars on the server without FCVAR_GAMEDLL.
     * 
     * **Bug [#3740](https://github.com/Facepunch/garrysmod-issues/issues/3740):**
     * >This does not callback convars on the client with FCVAR_REPLICATED.
     * 
     * @param name - The name of the convar to add the change callback to.
     * @param callback - The function to be called when the convar changes. The arguments passed are:
     * * [string](https://wiki.facepunch.com/gmod/string) convar - The name of the convar.
     * * [string](https://wiki.facepunch.com/gmod/string) oldValue - The old value of the convar.
     * * [string](https://wiki.facepunch.com/gmod/string) newValue - The new value of the convar.
     * @param [identifier = nil] - If set, you will be able to remove the callback using [cvars.RemoveChangeCallback](https://wiki.facepunch.com/gmod/cvars.RemoveChangeCallback). The identifier is not required to be globally unique, as it's paired with the actual name of the convar.
     */
    function AddChangeCallback(name: string, callback: Function, identifier?: string): void;
    
    /**
     * [Shared and Menu]
     * 
     * Retrieves console variable as a boolean.
     * @param cvar - Name of console variable
     * @param [default_ = false] - The value to return if the console variable does not exist
     */
    function Bool(cvar: string, default_ = false): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a table of the given [ConVar](https://wiki.facepunch.com/gmod/ConVar)s callbacks.
     * @param name - The name of the [ConVar](https://wiki.facepunch.com/gmod/ConVar).
     * @param [createIfNotFound = false] - Whether or not to create the internal callback table for given [ConVar](https://wiki.facepunch.com/gmod/ConVar) if there isn't one yet.
     * This argument is internal and should not be used.
     */
    function GetConVarCallbacks(name: string, createIfNotFound = false): any;
    
    /**
     * [Shared and Menu]
     * 
     * Retrieves console variable as a number.
     * @param cvar - Name of console variable
     * @param [default_ = nil] - The value to return if the console variable does not exist
     */
    function Number(cvar: string, default_?: any): number;
    
    /**
     * [Shared and Menu]
     * 
     * **.**
     * 
     * Called by the engine when a convar value changes.
     * @param name - Convar name
     * @param oldVal - The old value of the convar
     * @param newVal - The new value of the convar
     */
    function OnConVarChanged(name: string, oldVal: string, newVal: string): void;
    
    /**
     * [Shared and Menu]
     * 
     * Removes a callback for a convar using the the callback's identifier. The identifier should be the third argument specified for [cvars.AddChangeCallback](https://wiki.facepunch.com/gmod/cvars.AddChangeCallback).
     * @param name - The name of the convar to remove the callback from.
     * @param indentifier - The callback's identifier.
     */
    function RemoveChangeCallback(name: string, indentifier: string): void;
    
    /**
     * [Shared and Menu]
     * 
     * Retrieves console variable as a string.
     * @param cvar - Name of console variable
     * @param [default_ = nil] - The value to return if the console variable does not exist
     */
    function String(cvar: string, default_?: any): string;

}

/**
 * The debug library is intended to help you debug your scripts, however it also has several other powerful uses. Some builtin debug function were removed in GMod due to security reasons
 */
declare namespace debug {
    

    /**
     * [Shared and Menu]
     * 
     * Enters an interactive mode with the user, running each string that the user enters. Using simple commands and other debug facilities, the user can inspect global and local variables, change their values, evaluate expressions, and so on. A line containing only the word cont finishes this function, so that the caller continues its execution.
     * 
     * * Commands for debug.debug are not lexically nested within any function, and so have no direct access to local variables.
     * * This only works on the source dedicated server.
     * * To exit this interactive mode, you can press Ctrl + Z then Enter OR type the word 'cont' on a single line and press enter.
     * 
     */
    function debug(): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the environment of the passed object. This can be set with [debug.setfenv](https://wiki.facepunch.com/gmod/debug.setfenv)
     * @param object - Object to get environment of
     */
    function getfenv(object: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the current hook settings of the passed thread. The thread argument can be omitted. This is completely different to gamemode hooks. More information on hooks can be found at http://www.lua.org/pil/23.2.html
     * @param [thread = nil] - Which thread to retrieve its hook from
     */
    function gethook(thread?: thread): LuaMultiReturn<[Function, string, number]>;
    
    /**
     * [Shared and Menu]
     * 
     * Returns debug information about a function.
     * @param funcOrStackLevel - Takes either a function or a number representing the stack level as an argument. Stack level 0 always corresponds to the debug.getinfo call, 1 would be the function calling debug.getinfo, and so on.
     * Returns useful information about that function in a table.
     * @param [fields = flnSu] - A string whose characters specify the information to be retrieved.
     * * f - Populates the func field.
     * * l - Populates the currentline field.
     * * L - Populates the activelines field.
     * * n - Populates the name and namewhat fields - only works if stack level is passed rather than function pointer.
     * * S - Populates the location fields (lastlinedefined, linedefined, short_src, source and what).
     * * u - Populates the argument and upvalue fields (isvararg, nparams, nups)
     */
    function getinfo(funcOrStackLevel: Function, fields?: string): DebugInfo;
    
    /**
     * [Shared and Menu]
     * 
     * Gets the name and value of a local variable indexed from the level.
     * 
     * **Warning:**
     * >When a function has a tailcall return, you cannot access the locals of this function.
     * 
     * @param [thread = Current thread] - The thread
     * @param level - The level above the thread. 
     * * 0 = the function that was called (most always this function)'s arguments
     * * 1 = the thread that had called this function.
     * * 2 = the thread that had called the function that started the thread that called this function.
     * A function defined in Lua can also be passed as the level. The index will specify the parameter's name to be returned (a parameter will have a value of nil).
     * @param index - The variable's index you want to get.
     * * 1 = the first local defined in the thread
     * * 2 = the second local defined in the thread
     * * etc...
     */
    function getlocal(thread?: thread, level: number, index: number): LuaMultiReturn<[string, any]>;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the metatable of an object. This function ignores the metatable's __metatable field.
     * @param object - The object to retrieve the metatable from.
     */
    function getmetatable(object: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the internal Lua registry table.
     * 
     * The Lua registry is used by the engine and binary modules to create references to Lua values. The registry contains every global ran and used in the Lua environment. Avoid creating entries into the registry with a number as the key, as they are reserved for the reference system.
     * 
     * **Warning:**
     * >Improper editing of the registry can result in unintended side effects, including crashing the game.
     * 
     * 
     */
    function getregistry(): any;
    
    /**
     * [Shared and Menu]
     * 
     * Used for getting variable values in an index from the passed function. This does nothing for C functions.
     * @param func - Function to get the upvalue indexed from.
     * @param index - The index in the upvalue array. The max number of entries can be found in [debug.getinfo](https://wiki.facepunch.com/gmod/debug.getinfo)'s "<page text="nups">Structures/DebugInfo</page>" key.
     */
    function getupvalue(func: Function, index: number): LuaMultiReturn<[string, any]>;
    
    /**
     * [Shared and Menu]
     * 
     * Sets the environment of the passed object.
     * @param object - Object to set environment of
     * @param env - Environment to set
     */
    function setfenv(object: any, env: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Sets the given function as a Lua hook. This is completely different to gamemode hooks. The thread argument can be completely omitted and calling this function with no arguments will remove the current hook. This is used by default for infinite loop detection. More information on hooks can be found at http://www.lua.org/pil/23.2.html and https://www.gammon.com.au/scripts/doc.php?lua=debug.sethook
     * 
     * Hooks are not always ran when code that has been compiled by LuaJIT's JIT compiler is being executed, this is due to Intermediate Representation internally storing constantly running bytecode for performance reasons.
     * @param thread - Thread to set the hook on. This argument can be omited
     * @param hook - Function for the hook to call. First argument in this function will be the mask event that called the hook as a full string (not as 'c' but instead as 'call').
     * @param mask - The hook's mask. Can be one or more of the following events: 
     * * c - Triggers the hook on each function call made from Lua.
     * * r - Triggers the hook on each function return made from Lua.
     * * l - Triggers the hook on each line compiled of code.
     * * t - Triggers the hook on each function call made from Lua or C/C++.
     * * u - Triggers the hook on each function return made from Lua or C/C++.
     * * k - Triggers the hook on each function call or return made from Lua or C/C++.
     * @param count - How often to call the hook (in instructions). 0 for every instruction. Can be omitted.
     */
    function sethook(thread: thread, hook: Function, mask: string, count: number): void;
    
    /**
     * [Shared and Menu]
     * 
     * <removed>This function was removed due to security concerns.</removed>
     * 
     * Sets a local variable's value.
     * @param [thread = Current Thread] - The thread
     * @param level - The level above the thread. 
     * 0 is the function that was called (most always this function)'s arguments
     * 1 is the thread that had called this function.
     * 2 is the thread that had called the function that started the thread that called this function.
     * @param index - The variable's index you want to get.
     * 1 = the first local defined in the thread
     * 2 = the second local defined in the thread
     * @param [value = nil] - The value to set the local to
     */
    function setlocal(thread?: thread, level: number, index: number, value?: any): string;
    
    /**
     * [Shared and Menu]
     * 
     * Sets the object's metatable. Unlike [Global.setmetatable](https://wiki.facepunch.com/gmod/Global.setmetatable), this function works regardless of whether the first object passed is a valid table or not; this function even works on primitive datatypes such as numbers, functions, and even nil.
     * @param object - Object to set the metatable for.
     * @param metatable - The metatable to set for the object.
     * If this argument is nil, then the object's metatable is removed.
     */
    function setmetatable(object: any, metatable: any): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * <removed>This function was removed due to security concerns.</removed>
     * 
     * Sets the variable indexed from func
     * @param func - The function to index the upvalue from
     * @param index - The index from func
     * @param [val = nil] - The value to set the upvalue to.
     */
    function setupvalue(func: Function, index: number, val?: any): string;
    
    /**
     * [Shared and Menu]
     * 
     * Prints out the lua function call stack to the console.
     * 
     */
    function Trace(): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a full execution stack trace.
     * @param [thread = current thread] - Thread (ie. error object from xpcall error handler) to build traceback for. If this argument is not set to a proper [thread](https://wiki.facepunch.com/gmod/thread) it will act as the next argument.
     * @param [message = nil] - Appended at the beginning of the traceback.
     * @param [level = 1] - Which level to start the traceback.
     */
    function traceback(thread?: thread, message?: string, level = 1): string;
    
    /**
     * [Shared and Menu]
     * 
     * <removed>This function was removed due to security concerns.</removed>
     * 
     * Returns an unique identifier for the upvalue indexed from func
     * @param func - The function to index the upvalue from
     * @param index - The index from func
     */
    function upvalueid(func: Function, index: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * <removed>This function was removed due to security concerns.</removed>
     *  
     * Make the n1-th upvalue of the Lua closure f1 refer to the n2-th upvalue of the Lua closure f2.
     * @param f1 - 
     * @param n1 - 
     * @param f2 - 
     * @param n2 - 
     */
    function upvaluejoin(f1: Function, n1: number, f2: Function, n2: number): void;

}

/**
 * The debugoverlay library is mainly useful for 3D debugging, it can be used to draw shapes on the screen for debug purposes.
 * 
 * **Note:**
 * >These functions will not do anything unless the **developer** console variable is set to non 0.
 * 
 */
declare namespace debugoverlay {
    

    /**
     * [Shared]
     * 
     * Displays an axis indicator at the specified position.
     * 
     * **Note:**
     * >This function will silently fail if the `developer` [ConVar](https://wiki.facepunch.com/gmod/ConVar) is set to `0`. It is not networked to clients, except for the.
     * 
     * @param origin - Position origin
     * @param ang - Angle of the axis
     * @param size - Size of the axis
     * @param [lifetime = 1] - Number of seconds to appear
     * @param [ignoreZ = false] - If true, will draw on top of everything; ignoring the Z buffer
     */
    function Axis(origin: Vector, ang: Angle, size: number, lifetime = 1, ignoreZ = false): void;
    
    /**
     * [Shared]
     * 
     * Displays a solid coloured box at the specified position.
     * 
     * **Note:**
     * >This function will silently fail if the `developer` [ConVar](https://wiki.facepunch.com/gmod/ConVar) is set to `0`. It is not networked to clients, except for the.
     * 
     * @param origin - Position origin
     * @param mins - Minimum bounds of the box
     * @param maxs - Maximum bounds of the box
     * @param [lifetime = 1] - Number of seconds to appear
     * @param [color = Color( 255, 255, 255, 255 )] - The color of the box. Uses the [Color](https://wiki.facepunch.com/gmod/Color)
     */
    function Box(origin: Vector, mins: Vector, maxs: Vector, lifetime = 1, color?: Color): void;
    
    /**
     * [Shared]
     * 
     * Displays a solid colored rotated box at the specified position.
     * 
     * **Note:**
     * >This function will silently fail if the `developer` [ConVar](https://wiki.facepunch.com/gmod/ConVar) is set to `0`. It is not networked to clients, except for the.
     * 
     * @param pos - World position
     * @param mins - The mins of the box (lowest corner)
     * @param maxs - The maxs of the box (highest corner)
     * @param ang - The angle to draw the box at
     * @param [lifetime = 1] - Amount of seconds to show the box
     * @param [color = Color( 255, 255, 255, 255 )] - The color of the box. Uses the [Color](https://wiki.facepunch.com/gmod/Color)
     */
    function BoxAngles(pos: Vector, mins: Vector, maxs: Vector, ang: Angle, lifetime = 1, color?: Color): void;
    
    /**
     * [Shared]
     * 
     * Creates a coloured cross at the specified position for the specified time.
     * 
     * **Note:**
     * >This function will silently fail if the `developer` [ConVar](https://wiki.facepunch.com/gmod/ConVar) is set to `0`. It is not networked to clients, except for the.
     * 
     * @param position - Position origin
     * @param size - Size of the cross
     * @param [lifetime = 1] - Number of seconds the cross will appear for
     * @param [color = Color( 255, 255, 255 )] - The color of the cross. Uses the [Color](https://wiki.facepunch.com/gmod/Color)
     * @param [ignoreZ = false] - If true, will draw on top of everything; ignoring the Z buffer
     */
    function Cross(position: Vector, size: number, lifetime = 1, color?: Color, ignoreZ = false): void;
    
    /**
     * [Shared]
     * 
     * Displays 2D text at the specified coordinates.
     * 
     * **Note:**
     * >This function will silently fail if the `developer` [ConVar](https://wiki.facepunch.com/gmod/ConVar) is set to `0`. It is not networked to clients, except for the.
     * 
     * @param pos - The position in 3D to display the text.
     * @param line - Line of text, will offset text on the to display the new line unobstructed
     * @param text - The text to display
     * @param [lifetime = 1] - Number of seconds to appear
     * @param [color = Color( 255, 255, 255 )] - The color of the box. Uses the [Color](https://wiki.facepunch.com/gmod/Color)
     */
    function EntityTextAtPosition(pos: Vector, line: number, text: string, lifetime = 1, color?: Color): void;
    
    /**
     * [Shared]
     * 
     * Draws a 3D grid of limited size in given position.
     * 
     * **Note:**
     * >This function will silently fail if the `developer` [ConVar](https://wiki.facepunch.com/gmod/ConVar) is set to `0`. It is not networked to clients, except for the.
     * 
     * @param position - 
     */
    function Grid(position: Vector): void;
    
    /**
     * [Shared]
     * 
     * Displays a coloured line at the specified position.
     * 
     * **Note:**
     * >This function will silently fail if the `developer` [ConVar](https://wiki.facepunch.com/gmod/ConVar) is set to `0`. It is not networked to clients, except for the.
     * 
     * @param pos1 - First position of the line
     * @param pos2 - Second position of the line
     * @param [lifetime = 1] - Number of seconds to appear
     * @param [color = Color( 255, 255, 255 )] - The color of the line. Uses the [Color](https://wiki.facepunch.com/gmod/Color)
     * @param [ignoreZ = false] - If true, will draw on top of everything; ignoring the Z buffer
     */
    function Line(pos1: Vector, pos2: Vector, lifetime = 1, color?: Color, ignoreZ = false): void;
    
    /**
     * [Shared]
     * 
     * Displays text triangle at the specified coordinates.
     * 
     * **Note:**
     * >This function will silently fail if the `developer` [ConVar](https://wiki.facepunch.com/gmod/ConVar) is set to `0`. It is not networked to clients, except for the.
     * 
     * @param x - The position of the text, from 0 ( left ) to 1 ( right ).
     * @param y - The position of the text, from 0 ( top ) to 1 ( bottom ).
     * @param text - The text to display
     * @param [lifetime = 1] - Number of seconds to appear
     * @param [color = Color( 255, 255, 255 )] - The color of the box. Uses the [Color](https://wiki.facepunch.com/gmod/Color)
     */
    function ScreenText(x: number, y: number, text: string, lifetime = 1, color?: Color): void;
    
    /**
     * [Shared]
     * 
     * Displays a coloured sphere at the specified position.
     * 
     * **Note:**
     * >This function will silently fail if the `developer` [ConVar](https://wiki.facepunch.com/gmod/ConVar) is set to `0`. It is not networked to clients, except for the.
     * 
     * @param origin - Position origin
     * @param size - Size of the sphere
     * @param [lifetime = 1] - Number of seconds to appear
     * @param [color = Color( 255, 255, 255 )] - The color of the sphere. Uses the [Color](https://wiki.facepunch.com/gmod/Color)
     * @param [ignoreZ = false] - If true, will draw on top of everything; ignoring the Z buffer
     */
    function Sphere(origin: Vector, size: number, lifetime = 1, color?: Color, ignoreZ = false): void;
    
    /**
     * [Shared]
     * 
     * Displays "swept" box, two boxes connected with lines by their vertices.
     * 
     * **Note:**
     * >This function will silently fail if the `developer` [ConVar](https://wiki.facepunch.com/gmod/ConVar) is set to `0`. It is not networked to clients, except for the.
     * 
     * @param vStart - The start position of the box.
     * @param vEnd - The end position of the box.
     * @param vMins - The "minimum" edge of the box.
     * @param vMaxs - The "maximum" edge of the box.
     * @param ang - 
     * @param [lifetime = 1] - Number of seconds to appear
     * @param [color = Color( 255, 255, 255 )] - The color of the box. Uses the [Color](https://wiki.facepunch.com/gmod/Color)
     */
    function SweptBox(vStart: Vector, vEnd: Vector, vMins: Vector, vMaxs: Vector, ang: Angle, lifetime = 1, color?: Color): void;
    
    /**
     * [Shared]
     * 
     * Displays text at the specified position.
     * 
     * **Note:**
     * >This function will silently fail if the `developer` [ConVar](https://wiki.facepunch.com/gmod/ConVar) is set to `0`. It is not networked to clients, except for the.
     * 
     * @param origin - Position origin
     * @param text - String message to display
     * @param [lifetime = 1] - Number of seconds to appear
     * @param [viewCheck = false] - Clip text that is obscured
     */
    function Text(origin: Vector, text: string, lifetime = 1, viewCheck = false): void;
    
    /**
     * [Shared]
     * 
     * Displays a colored triangle at the specified coordinates.
     * 
     * **Note:**
     * >This function will silently fail if the `developer` [ConVar](https://wiki.facepunch.com/gmod/ConVar) is set to `0`. It is not networked to clients, except for the.
     * 
     * @param pos1 - First point of the triangle
     * @param pos2 - Second point of the triangle
     * @param pos3 - Third point of the triangle
     * @param [lifetime = 1] - Number of seconds to appear
     * @param [color = Color( 255, 255, 255 )] - The color of the box. Uses the [Color](https://wiki.facepunch.com/gmod/Color)
     * @param [ignoreZ = false] - If true, will draw on top of everything; ignoring the Z buffer
     */
    function Triangle(pos1: Vector, pos2: Vector, pos3: Vector, lifetime = 1, color?: Color, ignoreZ = false): void;

}

/**
 * The derma library allows you to add custom derma controls and create & modify derma skins.
 */
declare namespace derma {
    

    /**
     * [Client and Menu]
     * 
     * Gets the color from a Derma skin of a panel and returns default color if not found
     * @param name - 
     * @param pnl - 
     * @param default_ - The default color in case of failure.
     */
    function Color(name: string, pnl: Panel, default_: any): void;
    
    /**
     * [Client and Menu]
     * 
     * This is NOT a function, it's a variable containing all derma controls, registered with [derma.DefineControl](https://wiki.facepunch.com/gmod/derma.DefineControl).
     * 
     * Use [derma.GetControlList](https://wiki.facepunch.com/gmod/derma.GetControlList) to retrieve this list.
     * 
     * It's a list of tables, each having 3 keys, all from [derma.DefineControl](https://wiki.facepunch.com/gmod/derma.DefineControl) arguments:
     * * [string](https://wiki.facepunch.com/gmod/string) ClassName - The class name of the panel
     * * [string](https://wiki.facepunch.com/gmod/string) Description - The description of the panel
     * * [string](https://wiki.facepunch.com/gmod/string) BaseClass - The base class of the panel
     * 
     */
    function Controls(): any;
    
    /**
     * [Client and Menu]
     * 
     * Defines a new Derma control with an optional base.
     * 
     * This calls [vgui.Register](https://wiki.facepunch.com/gmod/vgui.Register) internally, but also does the following:
     * * Adds the control to [derma.GetControlList](https://wiki.facepunch.com/gmod/derma.GetControlList)
     * * Adds a key "Derma" - This is returned by [derma.GetControlList](https://wiki.facepunch.com/gmod/derma.GetControlList)
     * * Makes a global table with the name of the control (This is technically deprecated and should not be relied upon)
     * * If reloading (i.e. called this function with name of an existing panel), updates all existing instances of panels with this name. (Updates functions, calls [PANEL:PreAutoRefresh](https://wiki.facepunch.com/gmod/PANEL:PreAutoRefresh) and [PANEL:PostAutoRefresh](https://wiki.facepunch.com/gmod/PANEL:PostAutoRefresh), etc.)
     * @param name - Name of the newly created control
     * @param description - Description of the control
     * @param tab - Table containing control methods and properties
     * @param base - Derma control to base the new control off of
     */
    function DefineControl(name: string, description: string, tab: any, base: string): any;
    
    /**
     * [Client and Menu]
     * 
     * Defines a new skin so that it is usable by Derma. The default skin can be found in `garrysmod/lua/skins/default.lua`
     * @param name - Name of the skin
     * @param descriptions - Description of the skin
     * @param skin - Table containing skin data
     */
    function DefineSkin(name: string, descriptions: string, skin: any): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the [derma.Controls](https://wiki.facepunch.com/gmod/derma.Controls) table, a list of all derma controls registered with [derma.DefineControl](https://wiki.facepunch.com/gmod/derma.DefineControl).
     * 
     */
    function GetControlList(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns the default skin table, which can be changed with the hook [GM:ForceDermaSkin](https://wiki.facepunch.com/gmod/GM:ForceDermaSkin)
     * 
     */
    function GetDefaultSkin(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns the skin table of the skin with the supplied name
     * @param name - Name of skin
     */
    function GetNamedSkin(name: string): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns a copy of the table containing every Derma skin
     * 
     */
    function GetSkinTable(): any;
    
    /**
     * [Client and Menu]
     * 
     * Clears all cached panels so that they reassess which skin they should be using.
     * 
     */
    function RefreshSkins(): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns how many times [derma.RefreshSkins](https://wiki.facepunch.com/gmod/derma.RefreshSkins) has been called.
     * 
     */
    function SkinChangeIndex(): number;
    
    /**
     * [Client and Menu]
     * 
     * Calls the specified hook for the given panel
     * @param type - The type of hook to run
     * @param name - The name of the hook to run
     * @param panel - The panel to call the hook for
     * @param w - The width of the panel
     * @param h - The height of the panel
     */
    function SkinHook(type: string, name: string, panel: Panel, w: number, h: number): any;
    
    /**
     * [Client and Menu]
     * 
     * This is NOT a function, it's a variable containing all registered via [derma.DefineSkin](https://wiki.facepunch.com/gmod/derma.DefineSkin) derma skins.
     * 
     */
    function SkinList(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns a function to draw a specified texture of panels skin.
     * @param name - The identifier of the texture
     * @param pnl - Panel to get the skin of.
     * @param [fallback = nil] - What to return if we failed to retrieve the texture
     */
    function SkinTexture(name: string, pnl: Panel, fallback?: any): Function;

}

/**
 * The drag'n'drop library, used internally by certain base panels to allow for drag'n'drop functionality, like spawnmenu's customizations.
 */
declare namespace dragndrop {
    

    /**
     * [Client and Menu]
     * 
     * Calls the receiver function of hovered panel.
     * @param bDoDrop - true if the mouse was released, false if we right clicked.
     * @param command - The command value. This should be the ID of the clicked dropdown menu ( if right clicked, or nil )
     * @param mx - The local to the panel mouse cursor X position when the click happened.
     * @param my - The local to the panel  mouse cursor Y position when the click happened.
     */
    function CallReceiverFunction(bDoDrop: boolean, command: number, mx: number, my: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Clears all the internal drag'n'drop variables.
     * 
     */
    function Clear(): void;
    
    /**
     * [Client and Menu]
     * 
     * Handles the drop action of drag'n'drop library.
     * 
     */
    function Drop(): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns a table of currently dragged panels.
     * @param [name = nil] - If set, the function will return only the panels with this [Panel:Droppable](https://wiki.facepunch.com/gmod/Panel:Droppable) name.
     */
    function GetDroppable(name?: string): any;
    
    /**
     * [Client and Menu]
     * 
     * If returns true, calls [dragndrop.StopDragging](https://wiki.facepunch.com/gmod/dragndrop.StopDragging) in [dragndrop.Drop](https://wiki.facepunch.com/gmod/dragndrop.Drop). Seems to be broken and does nothing. Is it for override?
     * 
     */
    function HandleDroppedInGame(): void;
    
    /**
     * [Client and Menu]
     * 
     * Handles the hover think. Called from [dragndrop.Think](https://wiki.facepunch.com/gmod/dragndrop.Think).
     * 
     */
    function HoverThink(): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the user is dragging something with the drag'n'drop system.
     * 
     */
    function IsDragging(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Starts the drag'n'drop.
     * 
     */
    function StartDragging(): void;
    
    /**
     * [Client and Menu]
     * 
     * Stops the drag'n'drop and calls [dragndrop.Clear](https://wiki.facepunch.com/gmod/dragndrop.Clear).
     * 
     */
    function StopDragging(): void;
    
    /**
     * [Client and Menu]
     * 
     * Handles all the drag'n'drop processes. Calls [dragndrop.UpdateReceiver](https://wiki.facepunch.com/gmod/dragndrop.UpdateReceiver) and [dragndrop.HoverThink](https://wiki.facepunch.com/gmod/dragndrop.HoverThink).
     * 
     */
    function Think(): void;
    
    /**
     * [Client and Menu]
     * 
     * Updates the receiver to drop the panels onto. Called from [dragndrop.Think](https://wiki.facepunch.com/gmod/dragndrop.Think).
     * 
     */
    function UpdateReceiver(): void;

}

/**
 * The draw library's purpose is to simplify the usage of the [surface](https://wiki.facepunch.com/gmod/surface) library.
 */
declare namespace draw {
    

    /**
     * [Client and Menu]
     * 
     * Simple draw text at position, but this will expand newlines and tabs.
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * 
     * See also [MarkupObject](https://wiki.facepunch.com/gmod/MarkupObject) for limited width and markup support.
     * @param text - Text to be drawn.
     * @param [font = DermaDefault] - Name of font to draw the text in. See [surface.CreateFont](https://wiki.facepunch.com/gmod/surface.CreateFont) to create your own, or [Default Fonts](https://wiki.facepunch.com/gmod/Default_Fonts) for a list of default fonts.
     * @param [x = 0] - The X Coordinate.
     * @param [y = 0] - The Y Coordinate.
     * @param [color = Color( 255, 255, 255, 255 )] - Color to draw the text in. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     * @param [xAlign = TEXT_ALIGN_LEFT] - Where to align the text horizontally. Uses the [Enums/TEXT_ALIGN](https://wiki.facepunch.com/gmod/Enums/TEXT_ALIGN).
     */
    function DrawText(text: string, font?: string, x = 0, y = 0, color?: Color, xAlign?: TEXT_ALIGN): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the height of the specified font in pixels. This is equivalent to the height of the character `W`. See [surface.GetTextSize](https://wiki.facepunch.com/gmod/surface.GetTextSize).
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * @param font - Name of the font to get the height of.
     */
    function GetFontHeight(font: string): number;
    
    /**
     * [Client and Menu]
     * 
     * Sets drawing texture to a default white texture (vgui/white) via [surface.SetMaterial](https://wiki.facepunch.com/gmod/surface.SetMaterial). Useful for resetting the drawing texture.
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * 
     */
    function NoTexture(): void;
    
    /**
     * [Client and Menu]
     * 
     * Draws a rounded rectangle.
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * 
     * **Note:**
     * >If you do not define a cornerRadius, [surface.DrawRect](https://wiki.facepunch.com/gmod/surface.DrawRect) will be used instead for performance.
     * 
     * @param cornerRadius - Radius of the rounded corners, works best with a multiple of 2.
     * @param x - The x coordinate of the top left of the rectangle.
     * @param y - The y coordinate of the top left of the rectangle.
     * @param width - The width of the rectangle.
     * @param height - The height of the rectangle.
     * @param color - The color to fill the rectangle with. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     */
    function RoundedBox(cornerRadius: number, x: number, y: number, width: number, height: number, color: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * Draws a rounded rectangle. This function also lets you specify which corners are drawn rounded.
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * @param cornerRadius - Radius of the rounded corners, works best with a power of 2 number.
     * @param x - The x coordinate of the top left of the rectangle.
     * @param y - The y coordinate of the top left of the rectangle.
     * @param width - The width of the rectangle.
     * @param height - The height of the rectangle.
     * @param color - The color to fill the rectangle with. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     * @param [roundTopLeft = false] - Whether the top left corner should be rounded.
     * @param [roundTopRight = false] - Whether the top right corner should be rounded.
     * @param [roundBottomLeft = false] - Whether the bottom left corner should be rounded.
     * @param [roundBottomRight = false] - Whether the bottom right corner should be rounded.
     */
    function RoundedBoxEx(cornerRadius: number, x: number, y: number, width: number, height: number, color: Color, roundTopLeft = false, roundTopRight = false, roundBottomLeft = false, roundBottomRight = false): void;
    
    /**
     * [Client and Menu]
     * 
     * Draws text on the screen.
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * 
     * **Note:**
     * >This function does not handle newlines properly. See [draw.DrawText](https://wiki.facepunch.com/gmod/draw.DrawText) for a function that does.
     * 
     * @param text - The text to be drawn.
     * @param [font = DermaDefault] - The font. See [surface.CreateFont](https://wiki.facepunch.com/gmod/surface.CreateFont) to create your own, or see [Default Fonts](https://wiki.facepunch.com/gmod/Default_Fonts) for a list of default fonts.
     * @param [x = 0] - The X Coordinate.
     * @param [y = 0] - The Y Coordinate.
     * @param [color = Color( 255, 255, 255, 255 )] - The color of the text. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     * @param [xAlign = TEXT_ALIGN_LEFT] - The alignment of the X coordinate using [Enums/TEXT_ALIGN](https://wiki.facepunch.com/gmod/Enums/TEXT_ALIGN).
     * @param [yAlign = TEXT_ALIGN_TOP] - The alignment of the Y coordinate using [Enums/TEXT_ALIGN](https://wiki.facepunch.com/gmod/Enums/TEXT_ALIGN).
     */
    function SimpleText(text: string, font?: string, x = 0, y = 0, color?: Color, xAlign?: TEXT_ALIGN, yAlign?: TEXT_ALIGN): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Creates a simple line of text that is outlined.
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * @param Text - The text to draw.
     * @param [font = DermaDefault] - The font name to draw with. See [surface.CreateFont](https://wiki.facepunch.com/gmod/surface.CreateFont) to create your own, or <page text="here">Default_Fonts</page> for a list of default fonts.
     * @param [x = 0] - The X Coordinate.
     * @param [y = 0] - The Y Coordinate.
     * @param [color = Color( 255, 255, 255, 255 )] - The color of the text. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     * @param [xAlign = TEXT_ALIGN_LEFT] - The alignment of the X Coordinate using [Enums/TEXT_ALIGN](https://wiki.facepunch.com/gmod/Enums/TEXT_ALIGN).
     * @param [yAlign = TEXT_ALIGN_TOP] - The alignment of the Y Coordinate using [Enums/TEXT_ALIGN](https://wiki.facepunch.com/gmod/Enums/TEXT_ALIGN).
     * @param outlinewidth - Width of the outline.
     * @param [outlinecolor = Color( 255, 255, 255, 255 )] - Color of the outline. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     */
    function SimpleTextOutlined(Text: string, font?: string, x = 0, y = 0, color?: Color, xAlign?: TEXT_ALIGN, yAlign?: TEXT_ALIGN, outlinewidth: number, outlinecolor?: Color): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Works like [draw.SimpleText](https://wiki.facepunch.com/gmod/draw.SimpleText) but uses a table structure instead.
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * @param textdata - The text properties. See the [Structures/TextData](https://wiki.facepunch.com/gmod/Structures/TextData)
     */
    function Text(textdata: TextData): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Works like [draw.Text](https://wiki.facepunch.com/gmod/draw.Text), but draws the text as a shadow.
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * @param textdata - The text properties. See [Structures/TextData](https://wiki.facepunch.com/gmod/Structures/TextData)
     * @param distance - How far away the shadow appears.
     * @param [alpha = 200] - How visible the shadow is (0-255).
     */
    function TextShadow(textdata: TextData, distance: number, alpha = 200): void;
    
    /**
     * [Client and Menu]
     * 
     * Draws a texture with a table structure.
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * @param texturedata - The texture properties. See [Structures/TextureData](https://wiki.facepunch.com/gmod/Structures/TextureData).
     */
    function TexturedQuad(texturedata: TextureData): void;
    
    /**
     * [Client and Menu]
     * 
     * Draws a rounded box with text in it.
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * @param bordersize - Size of border, should be multiple of 2. Ideally this will be 8 or 16.
     * @param x - The X Coordinate.
     * @param y - The Y Coordinate.
     * @param text - Text to draw.
     * @param font - Font to draw in. See [surface.CreateFont](https://wiki.facepunch.com/gmod/surface.CreateFont) to create your own, or <page text="here">Default_Fonts</page> for a list of default fonts.
     * @param boxcolor - The box color. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     * @param textcolor - The text color. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     * @param [xalign = TEXT_ALIGN_LEFT] - The alignment of the X coordinate using [Enums/TEXT_ALIGN](https://wiki.facepunch.com/gmod/Enums/TEXT_ALIGN).
     * @param [yalign = TEXT_ALIGN_TOP] - The alignment of the Y coordinate using [Enums/TEXT_ALIGN](https://wiki.facepunch.com/gmod/Enums/TEXT_ALIGN).
     */
    function WordBox(bordersize: number, x: number, y: number, text: string, font: string, boxcolor: Color, textcolor: Color, xalign?: TEXT_ALIGN, yalign?: TEXT_ALIGN): LuaMultiReturn<[number, number]>;

}

/**
 * The drive library is for adding custom control modes to the new "remote control" entity piloting system in Garry's Mod 13. See [Entity Driving](https://wiki.facepunch.com/gmod/Entity_Driving).
 */
declare namespace drive {
    

    /**
     * [Shared]
     * 
     * Optionally alter the view.
     * @param ply - The player
     * @param view - The view, see [Structures/ViewData](https://wiki.facepunch.com/gmod/Structures/ViewData)
     */
    function CalcView(ply: Player, view: ViewData): boolean;
    
    /**
     * [Shared]
     * 
     * Clientside, the client creates the cmd (usercommand) from their input device (mouse, keyboard) and then it's sent to the server. Restrict view angles here.
     * @param cmd - The user command
     */
    function CreateMove(cmd: CUserCmd): boolean;
    
    /**
     * [Shared]
     * 
     * Destroys players current driving method.
     * @param ply - The player to affect
     */
    function DestroyMethod(ply: Player): void;
    
    /**
     * [Shared]
     * 
     * Player has stopped driving the entity.
     * @param ply - The player
     * @param ent - The entity
     */
    function End(ply: Player, ent: Entity): void;
    
    /**
     * [Shared]
     * 
     * The move is finished. Copy mv back into the target.
     * @param ply - The player
     * @param mv - The move data
     */
    function FinishMove(ply: Player, mv: CMoveData): boolean;
    
    /**
     * [Shared]
     * 
     * Returns ( or creates if inexistent ) a driving method.
     * @param ply - The player
     */
    function GetMethod(ply: Player): any;
    
    /**
     * [Shared]
     * 
     * The move is executed here.
     * @param ply - The player
     * @param mv - The move data
     */
    function Move(ply: Player, mv: CMoveData): boolean;
    
    /**
     * [Shared]
     * 
     * Starts driving for the player.
     * @param ply - The player to affect
     * @param ent - The entity to drive
     * @param mode - The driving mode
     */
    function PlayerStartDriving(ply: Player, ent: Entity, mode: string): void;
    
    /**
     * [Shared]
     * 
     * Stops the player from driving anything. ( For example a prop in sandbox )
     * @param ply - The player to affect
     */
    function PlayerStopDriving(ply: Player): void;
    
    /**
     * [Shared]
     * 
     * Registers a new entity drive.
     * @param name - The name of the drive.
     * @param data - The data required to create the drive. This includes the functions used by the drive.
     * @param base - The base of the drive.
     */
    function Register(name: string, data: any, base: string): void;
    
    /**
     * [Shared]
     * 
     * Called when the player first starts driving this entity
     * @param ply - The player
     * @param ent - The entity
     */
    function Start(ply: Player, ent: Entity): void;
    
    /**
     * [Shared]
     * 
     * The user command is received by the server and then converted into a move. This is also run clientside when in multiplayer, for prediction to work.
     * @param ply - The player
     * @param mv - The move data
     * @param cmd - The user command
     */
    function StartMove(ply: Player, mv: CMoveData, cmd: CUserCmd): boolean;

}

/**
 * The duplicator library allows you to specify what should be saved when someone attempts to duplicate your custom entity with the duplicator tool. It can also be used by 3rd party duplicator tools to make use of the built in system.
 */
declare namespace duplicator {
    

    /**
     * [Shared]
     * 
     * Allow entities with given class name to be duplicated. See [duplicator.Disallow](https://wiki.facepunch.com/gmod/duplicator.Disallow) for the opposite effect.
     * @param classname - An entity's classname to allow duplicating.
     */
    function Allow(classname: string): void;
    
    /**
     * [Server]
     * 
     * Calls every function registered with [duplicator.RegisterBoneModifier](https://wiki.facepunch.com/gmod/duplicator.RegisterBoneModifier) on each bone the ent has.
     * @param ply - The player whose entity this is
     * @param ent - The entity in question
     */
    function ApplyBoneModifiers(ply: Player, ent: Entity): void;
    
    /**
     * [Server]
     * 
     * Calls every function registered with [duplicator.RegisterEntityModifier](https://wiki.facepunch.com/gmod/duplicator.RegisterEntityModifier) on the entity.
     * @param ply - The player whose entity this is
     * @param ent - The entity in question
     */
    function ApplyEntityModifiers(ply: Player, ent: Entity): void;
    
    /**
     * [Shared]
     * 
     * A list of all entity bone modifiers registered with [duplicator.RegisterBoneModifier](https://wiki.facepunch.com/gmod/duplicator.RegisterBoneModifier).
     * 
     */
    function BoneModifiers(): any;
    
    /**
     * [Server]
     * 
     * Clears/removes the chosen entity modifier from the entity.
     * @param ent - The entity the modification is stored on
     * @param key - The key of the stored entity modifier
     */
    function ClearEntityModifier(ent: Entity, key: any): void;
    
    /**
     * [Shared]
     * 
     * A list of all [constraint](https://wiki.facepunch.com/gmod/constraint)s that can be duplicated. Registered with [duplicator.RegisterConstraint](https://wiki.facepunch.com/gmod/duplicator.RegisterConstraint).
     * 
     */
    function ConstraintType(): any;
    
    /**
     * [Server]
     * 
     * Copies the entity, and all of its constraints and entities, then returns them in a table.
     * @param ent - The entity to duplicate. The function will automatically copy all constrained entities.
     * @param [tableToAdd = {}] - A preexisting table to add entities and constraints in from.
     * Uses the same table format as the table returned from this function.
     */
    function Copy(ent: Entity, tableToAdd?: any): any;
    
    /**
     * [Server]
     * 
     * Copies the passed table of entities to save for later.
     * @param ents - A table of entities to save/copy.
     */
    function CopyEnts(ents: any): any;
    
    /**
     * [Server]
     * 
     * Returns a table with some entity data that can be used to create a new entity with [duplicator.CreateEntityFromTable](https://wiki.facepunch.com/gmod/duplicator.CreateEntityFromTable)
     * @param ent - The entity table to save
     */
    function CopyEntTable(ent: Entity): EntityCopyData;
    
    /**
     * [Server]
     * 
     * Creates a constraint from a saved/copied constraint table.
     * @param constraint - Saved/copied constraint table
     * @param entityList - The list of entities that are to be constrained
     */
    function CreateConstraintFromTable(constraint: any, entityList: any): Entity;
    
    /**
     * [Server]
     * 
     * "Create an entity from a table." 
     * 
     * This creates an entity using the data in EntTable.
     * 
     * If an entity factory has been registered for the entity's Class, it will be called. 
     * 
     * Otherwise, [duplicator.GenericDuplicatorFunction](https://wiki.facepunch.com/gmod/duplicator.GenericDuplicatorFunction) will be called instead.
     * @param ply - The player who wants to create something
     * @param entTable - The duplication data to build the entity with. See [Structures/EntityCopyData](https://wiki.facepunch.com/gmod/Structures/EntityCopyData)
     */
    function CreateEntityFromTable(ply: Player, entTable: EntityCopyData): Entity;
    
    /**
     * [Shared]
     * 
     * Disallow this entity to be duplicated. Opposite of [duplicator.Allow](https://wiki.facepunch.com/gmod/duplicator.Allow).
     * 
     * By default, all classes are disallowed to be duplicated. This function is useful for temporarily disabling duplication of certain entity classes that may have been previously allowed.
     * @param classname - An entity's classname to disallow duplicating.
     */
    function Disallow(classname: string): void;
    
    /**
     * [Server]
     * 
     * "Restores the bone's data."
     * 
     * Loops through Bones and calls [Entity:ManipulateBoneScale](https://wiki.facepunch.com/gmod/Entity:ManipulateBoneScale), [Entity:ManipulateBoneAngles](https://wiki.facepunch.com/gmod/Entity:ManipulateBoneAngles) and [Entity:ManipulateBonePosition](https://wiki.facepunch.com/gmod/Entity:ManipulateBonePosition) on ent with the table keys and the subtable values s, a and p respectively.
     * @param ent - The entity to be bone manipulated
     * @param bones - Table with a [Structures/BoneManipulationData](https://wiki.facepunch.com/gmod/Structures/BoneManipulationData) for every bone (that has manipulations applied) using the bone ID as the table index.
     */
    function DoBoneManipulator(ent: Entity, bones: BoneManipulationData): void;
    
    /**
     * [Server]
     * 
     * Restores the flex data using [Entity:SetFlexWeight](https://wiki.facepunch.com/gmod/Entity:SetFlexWeight) and [Entity:SetFlexScale](https://wiki.facepunch.com/gmod/Entity:SetFlexScale)
     * @param ent - The entity to restore the flexes on
     * @param flex - The flexes to restore
     * @param [scale = nil] - The flex scale to apply. (Flex scale is unchanged if omitted)
     */
    function DoFlex(ent: Entity, flex: any, scale?: number): void;
    
    /**
     * [Server]
     * 
     * "Applies generic every-day entity stuff for ent from table data."
     * 
     * Depending on the values of Model, Angle, Pos, Skin, Flex, Bonemanip, ModelScale, ColGroup, Name, and BodyG ([table](https://wiki.facepunch.com/gmod/table) of multiple values) in the data table, this calls [Entity:SetModel](https://wiki.facepunch.com/gmod/Entity:SetModel), [Entity:SetAngles](https://wiki.facepunch.com/gmod/Entity:SetAngles), [Entity:SetPos](https://wiki.facepunch.com/gmod/Entity:SetPos), [Entity:SetSkin](https://wiki.facepunch.com/gmod/Entity:SetSkin), [duplicator.DoFlex](https://wiki.facepunch.com/gmod/duplicator.DoFlex), [duplicator.DoBoneManipulator](https://wiki.facepunch.com/gmod/duplicator.DoBoneManipulator), [Entity:SetModelScale](https://wiki.facepunch.com/gmod/Entity:SetModelScale), [Entity:SetCollisionGroup](https://wiki.facepunch.com/gmod/Entity:SetCollisionGroup), [Entity:SetName](https://wiki.facepunch.com/gmod/Entity:SetName), [Entity:SetBodygroup](https://wiki.facepunch.com/gmod/Entity:SetBodygroup) on ent.
     * 
     * If ent has a RestoreNetworkVars function, it is called with data.DT.
     * @param ent - The entity to be applied upon
     * @param data - The data to be applied onto the entity
     */
    function DoGeneric(ent: Entity, data: any): void;
    
    /**
     * [Server]
     * 
     * "Applies bone data, generically."
     * 
     * If data contains a PhysicsObjects table, it moves, re-angles and if relevent freezes all specified bones, first converting from local coordinates to world coordinates.
     * @param ent - The entity to be applied upon
     * @param [ply = nil] - The player who owns the entity. Unused in function as of early 2013
     * @param data - The data to be applied onto the entity
     */
    function DoGenericPhysics(ent: Entity, ply?: Player, data: any): void;
    
    /**
     * [Shared]
     * 
     * A list of all entity classes have a custom duplication spawn function. Registered with [duplicator.RegisterEntityClass](https://wiki.facepunch.com/gmod/duplicator.RegisterEntityClass).
     * 
     * If you wish to get a specific entity class table, use [duplicator.FindEntityClass](https://wiki.facepunch.com/gmod/duplicator.FindEntityClass).
     * 
     */
    function EntityClasses(): any;
    
    /**
     * [Shared]
     * 
     * A list of all entity modifiers registered with [duplicator.RegisterEntityModifier](https://wiki.facepunch.com/gmod/duplicator.RegisterEntityModifier).
     * 
     */
    function EntityModifiers(): any;
    
    /**
     * [Shared]
     * 
     * Checks the given duplication table and tries to figure out any addons that might be required to correctly spawn the duplication. Currently this is limited to models and material overrides saved in the duplication.
     * @param dupe - The duplication table to process, for example from [duplicator.Copy](https://wiki.facepunch.com/gmod/duplicator.Copy).
     * The provided table will have `RequiredAddons` key added.
     */
    function FigureOutRequiredAddons(dupe: any): void;
    
    /**
     * [Shared]
     * 
     * Returns the entity class factory registered with [duplicator.RegisterEntityClass](https://wiki.facepunch.com/gmod/duplicator.RegisterEntityClass).
     * @param name - The name of the entity class factory
     */
    function FindEntityClass(name: string): any;
    
    /**
     * [Server]
     * 
     * "Generic function for duplicating stuff" 
     * 
     * This is called when [duplicator.CreateEntityFromTable](https://wiki.facepunch.com/gmod/duplicator.CreateEntityFromTable) can't find an entity factory to build with. It calls [duplicator.DoGeneric](https://wiki.facepunch.com/gmod/duplicator.DoGeneric) and [duplicator.DoGenericPhysics](https://wiki.facepunch.com/gmod/duplicator.DoGenericPhysics) to apply standard duplicator stored things such as the model and position.
     * @param ply - The player who wants to create something
     * @param data - The duplication data to build the entity with
     */
    function GenericDuplicatorFunction(ply: Player, data: any): Entity;
    
    /**
     * [Server]
     * 
     * Fills entStorageTable with all of the entities in a group connected with constraints. Fills constraintStorageTable with all of the constrains constraining the group.
     * @param ent - The entity to start from
     * @param entStorageTable - The table the entities will be inserted into
     * @param constraintStorageTable - The table the constraints will be inserted into
     */
    function GetAllConstrainedEntitiesAndConstraints(ent: Entity, entStorageTable: any, constraintStorageTable: any): LuaMultiReturn<[any, any]>;
    
    /**
     * [Shared]
     * 
     * Returns whether the entity can be duplicated or not
     * @param classname - An entity's classname
     */
    function IsAllowed(classname: string): boolean;
    
    /**
     * [Server]
     * 
     * "Given entity list and constraint list, create all entities and return their tables"
     * 
     * Calls [duplicator.CreateEntityFromTable](https://wiki.facepunch.com/gmod/duplicator.CreateEntityFromTable) on each sub-table of EntityList. If an entity is actually created, it calls [ENTITY:OnDuplicated](https://wiki.facepunch.com/gmod/ENTITY:OnDuplicated) with the entity's duplicator data, then [duplicator.ApplyEntityModifiers](https://wiki.facepunch.com/gmod/duplicator.ApplyEntityModifiers), [duplicator.ApplyBoneModifiers](https://wiki.facepunch.com/gmod/duplicator.ApplyBoneModifiers) and finally  [ENTITY:PostEntityPaste](https://wiki.facepunch.com/gmod/ENTITY:PostEntityPaste) is called.
     * 
     * The constraints are then created with [duplicator.CreateConstraintFromTable](https://wiki.facepunch.com/gmod/duplicator.CreateConstraintFromTable).
     * @param Player - The player who wants to create something
     * @param EntityList - A table of duplicator data to create the entities from
     * @param ConstraintList - A table of duplicator data to create the constraints from
     */
    function Paste(Player: Player, EntityList: any, ConstraintList: any): LuaMultiReturn<[any, any]>;
    
    /**
     * [Shared]
     * 
     * Registers a function to be called on each of an entity's bones when [duplicator.ApplyBoneModifiers](https://wiki.facepunch.com/gmod/duplicator.ApplyBoneModifiers) is called.
     * 
     * **Note:**
     * >This function is available to call on the client, but registered functions aren't used anywhere!
     * 
     * @param key - The type of the key doesn't appear to matter, but it is preferable to use a string.
     * @param boneModifier - Function called on each bone that an ent has. Called during [duplicator.ApplyBoneModifiers](https://wiki.facepunch.com/gmod/duplicator.ApplyBoneModifiers).
     * Function parameters are:
     * * [Player](https://wiki.facepunch.com/gmod/Player) ply
     * * [Entity](https://wiki.facepunch.com/gmod/Entity) ent
     * * [number](https://wiki.facepunch.com/gmod/number) boneID
     * * [PhysObj](https://wiki.facepunch.com/gmod/PhysObj) bone
     * * [table](https://wiki.facepunch.com/gmod/table) data
     * The data table that is passed to boneModifier is set with [duplicator.StoreBoneModifier](https://wiki.facepunch.com/gmod/duplicator.StoreBoneModifier)
     */
    function RegisterBoneModifier(key: any, boneModifier: Function): void;
    
    /**
     * [Shared]
     * 
     * Register a function used for creating a duplicated constraint.
     * @param name - The unique name of new constraint
     * @param callback - Function to be called when this constraint is created
     * @param vararg - Arguments passed to the callback function
     */
    function RegisterConstraint(name: string, callback: Function, vararg: any): void;
    
    /**
     * [Shared]
     * 
     * This allows you to specify a specific function to be run when your SENT is pasted with the duplicator, instead of relying on the generic automatic functions.
     * 
     * **Note:**
     * >Automatically calls [duplicator.Allow](https://wiki.facepunch.com/gmod/duplicator.Allow) for the entity class.
     * 
     * @param name - The ClassName of the entity you wish to register a factory for
     * @param function_ - The factory function you want to have called. It should have the arguments (Player, ...) where ... is whatever arguments you request to be passed. It also should return the entity created, otherwise [duplicator.Paste](https://wiki.facepunch.com/gmod/duplicator.Paste) result will not include it!
     * @param args - Strings of the names of arguments you want passed to function the from the [Structures/EntityCopyData](https://wiki.facepunch.com/gmod/Structures/EntityCopyData). As a special case, "Data" will pass the whole structure.
     */
    function RegisterEntityClass(name: string, function_: Function, args: EntityCopyData): void;
    
    /**
     * [Shared]
     * 
     * This allows you to register tweaks to entities. For instance, if you were making an "unbreakable" addon, you would use this to enable saving the "unbreakable" state of entities between duplications.
     * 
     * This function registers a piece of generic code that is run on all entities with this modifier. In order to have it actually run, use [duplicator.StoreEntityModifier](https://wiki.facepunch.com/gmod/duplicator.StoreEntityModifier).
     * 
     * This function does nothing when run clientside.
     * @param name - An identifier for your modification. This is not limited, so be verbose. `Person's 'Unbreakable' mod` is far less likely to cause conflicts than `unbreakable`
     * @param func - The function to be called for your modification. It should have the arguments (`Player`, `Entity`, `Data`), where data is what you pass to [duplicator.StoreEntityModifier](https://wiki.facepunch.com/gmod/duplicator.StoreEntityModifier).
     */
    function RegisterEntityModifier(name: string, func: Function): void;
    
    /**
     * [Server]
     * 
     * Help to remove certain map created entities before creating the saved entities
     * This is obviously so we don't get duplicate props everywhere.
     * It should be called before calling Paste.
     * 
     */
    function RemoveMapCreatedEntities(): void;
    
    /**
     * [Shared]
     * 
     * "When a copy is copied it will be translated according to these.
     * If you set them - make sure to set them back to 0 0 0!"
     * @param v - The angle to offset all pastes from
     */
    function SetLocalAng(v: Angle): void;
    
    /**
     * [Shared]
     * 
     * "When a copy is copied it will be translated according to these.
     * If you set them - make sure to set them back to 0 0 0!"
     * @param v - The position to offset all pastes from
     */
    function SetLocalPos(v: Vector): void;
    
    /**
     * [Server]
     * 
     * Stores bone mod data for a registered bone modification function
     * @param ent - The entity to add bone mod data to
     * @param boneID - The bone ID.
     * See [Entity:GetPhysicsObjectNum](https://wiki.facepunch.com/gmod/Entity:GetPhysicsObjectNum)
     * @param key - The key for the bone modification
     * @param data - The bone modification data that is passed to the bone modification function
     */
    function StoreBoneModifier(ent: Entity, boneID: number, key: any, data: any): void;
    
    /**
     * [Server]
     * 
     * Stores an entity modifier into an entity for saving
     * @param entity - The entity to store modifier in
     * @param name - Unique modifier name as defined in [duplicator.RegisterEntityModifier](https://wiki.facepunch.com/gmod/duplicator.RegisterEntityModifier)
     * @param data - Modifier data
     */
    function StoreEntityModifier(entity: Entity, name: string, data: any): void;
    
    /**
     * [Server]
     * 
     * Works out the AABB size of the duplication
     * @param Ents - A table of entity duplication datums.
     */
    function WorkoutSize(Ents: any): LuaMultiReturn<[vector, vector]>;

}

/**
 * The effects library allows you to manually add scripted effects.
 */
declare namespace effects {
    

    /**
     * [Shared]
     * 
     * Creates a "beam ring point" effect.
     * @param pos - The origin position of the effect.
     * @param lifetime - How long the effect will be drawing for, in seconds.
     * @param startRad - Initial radius of the effect.
     * @param endRad - Final radius of the effect, at the end of the effect's lifetime.
     * @param width - How thick the beam should be.
     * @param amplitude - How noisy the beam should be.
     * @param color - Beam's [Global.Color](https://wiki.facepunch.com/gmod/Global.Color).
     * @param extra - Extra info, all optional. A table with the following keys: (any combination)
     * * [number](https://wiki.facepunch.com/gmod/number) speed - ?
     * * [number](https://wiki.facepunch.com/gmod/number) spread - ?
     * * [number](https://wiki.facepunch.com/gmod/number) delay - Delay in seconds after which the effect should appear.
     * * [number](https://wiki.facepunch.com/gmod/number) flags- Beam flags.
     * * [number](https://wiki.facepunch.com/gmod/number) framerate - texture framerate.
     * * [string](https://wiki.facepunch.com/gmod/string) material - The material to use instead of the default one.
     */
    function BeamRingPoint(pos: Vector, lifetime: number, startRad: number, endRad: number, width: number, amplitude: number, color: any, extra: any): void;
    
    /**
     * [Shared]
     * 
     * Creates a bunch of bubbles inside a defined box.
     * @param mins - The lowest extents of the box.
     * @param maxs - The highest extents of the box.
     * @param count - How many bubbles to spawn. There's a hard limit of 500 tempents at any time.
     * @param height - How high the bubbles can fly up before disappearing.
     * @param [speed = 0] - How quickly the bubbles move.
     * @param [delay = 0] - Delay in seconds after the function call and before the effect actually spawns.
     */
    function Bubbles(mins: Vector, maxs: Vector, count: number, height: number, speed = 0, delay = 0): void;
    
    /**
     * [Shared]
     * 
     * Creates a bubble trail effect, the very same you get when shooting underwater.
     * @param startPos - The start position of the effect.
     * @param endPos - The end position of the effects.
     * @param count - How many bubbles to spawn. There's a hard limit of 500 tempents at any time.
     * @param height - How high the bubbles can fly up before disappearing.
     * @param [speed = 0] - How quickly the bubbles move.
     * @param [delay = 0] - Delay in seconds after the function call and before the effect actually spawns.
     */
    function BubbleTrail(startPos: Vector, endPos: Vector, count: number, height: number, speed = 0, delay = 0): void;
    
    /**
     * [Client]
     * 
     * **.**Returns the table of the effect specified.
     * @param name - Effect name.
     */
    function Create(name: string): any;
    
    /**
     * [Client]
     * 
     * Returns a list of all Lua-defined effects.
     * 
     */
    function GetList(): any;
    
    /**
     * [Client]
     * 
     * Registers a new effect.
     * @param effect_table - Effect table.
     * @param name - Effect name.
     */
    function Register(effect_table: any, name: string): void;

}

/**
 * The engine library provides functions to access various features in the game's engine, most are related to the demo and save systems.
 */
declare namespace engine {
    

    /**
     * [Shared]
     * 
     * Returns non paused [Global.FrameTime](https://wiki.facepunch.com/gmod/Global.FrameTime).
     * 
     */
    function AbsoluteFrameTime(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the name of the currently running gamemode.
     * 
     */
    function ActiveGamemode(): string;
    
    /**
     * [Server]
     * 
     * Closes the server and completely exits.
     * 
     * This is only functional when running in server test mode (launch option -systemtest). Server test mode is used internally at Facepunch as part of the build process to make sure that the dedicated servers aren't crashing on startup.
     * 
     */
    function CloseServer(): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a list of addons the player have subscribed to on the workshop.
     * 
     * This list will also include "Floating" .gma addons that are mounted by the game, but not the folder addons.
     * 
     */
    function GetAddons(): any;
    
    /**
     * [Client and Menu]
     * 
     * When starting playing a demo, [engine.GetDemoPlaybackTick](https://wiki.facepunch.com/gmod/engine.GetDemoPlaybackTick) will be reset and its old value will be added to this functions return value.
     * 
     */
    function GetDemoPlaybackStartTick(): number;
    
    /**
     * [Client and Menu]
     * 
     * Current tick of currently loaded demo.
     * 
     * If not playing a demo, it will return amount of ticks since last demo playback.
     * 
     */
    function GetDemoPlaybackTick(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns time scale of demo playback.
     * 
     * If not during demo playback, returns 1.
     * 
     */
    function GetDemoPlaybackTimeScale(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns total amount of ticks of currently loaded demo.
     * 
     * If not playing a demo, returns 0 or the value of last played demo.
     * 
     */
    function GetDemoPlaybackTotalTicks(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a table containing info for all installed gamemodes
     * 
     */
    function GetGamemodes(): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns an array of tables corresponding to all games from which Garry's Mod supports mounting content.
     * 
     */
    function GetGames(): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the UGC (demos, saves and dupes) the player have subscribed to on the workshop.
     * 
     * @deprecated Used internally for in-game menus, may be merged in the future into [engine.GetAddons](https://wiki.facepunch.com/gmod/engine.GetAddons).
     * 
     * 
     */
    function GetUserContent(): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns true if we're currently playing a demo.
     * 
     * You will notice that there's no server-side version of this. That's because there is no server when playing a demo. Demos are both recorded and played back purely clientside.
     * 
     */
    function IsPlayingDemo(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns true if the game is currently recording a demo file (.dem) using gm_demo
     * 
     */
    function IsRecordingDemo(): boolean;
    
    /**
     * [Server]
     * 
     * This is a direct binding to the function `engine->LightStyle`. This function allows you to change the default light style of the map - so you can make lighting lighter or darker. You’ll need to call [render.RedownloadAllLightmaps](https://wiki.facepunch.com/gmod/render.RedownloadAllLightmaps) clientside to refresh the lightmaps to this new color.
     * 
     * **Bug [#3626](https://github.com/Facepunch/garrysmod-issues/issues/3626):**
     * >Calling this function with arguments 0 and "a" will cause dynamic lights such as those produced by the Light tool to stop working.
     * 
     * @param lightstyle - The lightstyle to edit. 0 to 63. If you want to edit map lighting, you want to set this to 0.
     * @param pattern - The pattern to change the lightstyle to. `a` is the darkest, `z` is the brightest. You can use stuff like "abcxyz" to make flashing patterns. The normal brightness for a map is `m`. Values over `z` are allowed, `~` for instance.
     */
    function LightStyle(lightstyle: number, pattern: string): void;
    
    /**
     * [Client]
     * 
     * Loads a duplication from the local filesystem.
     * @param dupeName - Name of the file. e.g, engine.OpenDupe("dupes/8b809dd7a1a9a375e75be01cdc12e61f.dupe")
     */
    function OpenDupe(dupeName: string): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns an estimate of the server's performance. Equivalent to calling [Global.FrameTime](https://wiki.facepunch.com/gmod/Global.FrameTime) from the server, according to source code.
     * 
     */
    function ServerFrameTime(): LuaMultiReturn<[number, number]>;
    
    /**
     * [Menu]
     * 
     * Sets the mounting options for mountable content.
     * @param depotID - The depot id of the game to mount.
     * @param doMount - The mount state, true to mount, false to unmount
     */
    function SetMounted(depotID: string, doMount: boolean): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the number of ticks since the game server started.
     * 
     */
    function TickCount(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the number of seconds between each gametick.
     * 
     */
    function TickInterval(): number;
    
    /**
     * [Client]
     * 
     * Returns video recording settings set by [video.Record](https://wiki.facepunch.com/gmod/video.Record). Used by Demo-To-Video feature.
     * 
     */
    function VideoSettings(): VideoData;
    
    /**
     * [Client]
     * 
     * Saves a duplication as a file.
     * @param dupe - Dupe table, encoded by [util.TableToJSON](https://wiki.facepunch.com/gmod/util.TableToJSON) and compressed by [util.Compress](https://wiki.facepunch.com/gmod/util.Compress)
     * @param jpeg - The dupe icon, created by [render.Capture](https://wiki.facepunch.com/gmod/render.Capture)
     */
    function WriteDupe(dupe: string, jpeg: string): void;
    
    /**
     * [Client]
     * 
     * Stores savedata into the game (can be loaded using the LoadGame menu)
     * @param saveData - Data generated by gmsave.SaveMap
     * @param name - Name the save will have.
     * @param time - When the save was saved during the game (Put CurTime here)
     * @param map - The map the save is used for.
     */
    function WriteSave(saveData: string, name: string, time: number, map: string): void;

}

/**
 * The ents library provides functions for creating and finding entities in the game.
 */
declare namespace ents {
    

    /**
     * [Server]
     * 
     * Creates an entity. This function will fail and return `NULL` if the networked-edict limit is hit (around **8176**), or the provided entity class doesn't exist.
     * 
     * **Warning:**
     * >Do not use before [GM:InitPostEntity](https://wiki.facepunch.com/gmod/GM:InitPostEntity) has been called, otherwise the server will crash!
     * If you need to perform entity creation when the game starts, create a hook for [GM:InitPostEntity](https://wiki.facepunch.com/gmod/GM:InitPostEntity) and do it there.
     * 
     * @param class_ - The classname of the entity to create.
     */
    function Create(class_: string): Entity;
    
    /**
     * [Client]
     * 
     * Creates a clientside only prop. See also [Global.ClientsideModel](https://wiki.facepunch.com/gmod/Global.ClientsideModel).
     * 
     * For physics to work you **must** use the _model_ argument, a simple `SetModel` call will not be enough.
     * 
     * **Bug [#861](https://github.com/Facepunch/garrysmod-issues/issues/861):**
     * >Parented clientside prop will become detached if the parent entity leaves the PVS. **A workaround is available on its github page.**
     * 
     * @param [model = models/error.mdl] - The model for the entity to be created.
     * **Warning:**
     * >Model must be precached with [util.PrecacheModel](https://wiki.facepunch.com/gmod/util.PrecacheModel) on the server before usage.
     * 
     */
    function CreateClientProp(model?: string): Entity;
    
    /**
     * [Client]
     * 
     * Creates a clientside only scripted entity. The scripted entity must be of "anim" type.
     * @param class_ - The class name of the entity to create.
     */
    function CreateClientside(class_: string): Entity;
    
    /**
     * [Shared]
     * 
     * Returns a table of all entities along the ray. The ray does not stop on collisions, meaning it will go through walls/entities.
     * @param start - The start position of the ray
     * @param end - The end position of the ray
     * @param [mins = nil] - The mins corner of the ray
     * @param [maxs = nil] - The maxs corner of the ray
     */
    function FindAlongRay(start: Vector, end: Vector, mins?: Vector, maxs?: Vector): any;
    
    /**
     * [Shared]
     * 
     * Gets all entities with the given class, supports wildcards. This works internally by iterating over [ents.GetAll](https://wiki.facepunch.com/gmod/ents.GetAll). Even if internally ents.GetAll is used, It is faster to use ents.FindByClass than ents.GetAll with a single class comparison.
     * 
     * **Note:**
     * >Asterisks (*) are the only wildcard supported.
     * 
     * **Note:**
     * >This function returns a sequential table, meaning it should be looped with [Global.ipairs](https://wiki.facepunch.com/gmod/Global.ipairs) instead of [Global.pairs](https://wiki.facepunch.com/gmod/Global.pairs) for efficiency reasons.
     * 
     * @param class_ - The class of the entities to find.
     */
    function FindByClass(class_: string): any;
    
    /**
     * [Shared]
     * 
     * Finds all entities that are of given class and are children of given entity. This works internally by iterating over [ents.GetAll](https://wiki.facepunch.com/gmod/ents.GetAll).
     * @param class_ - The class of entities to search for
     * @param parent - Parent of entities that are being searched for
     */
    function FindByClassAndParent(class_: string, parent: Entity): any;
    
    /**
     * [Shared]
     * 
     * Gets all entities with the given model, supports wildcards.
     * 
     * **Note:**
     * >This works internally by iterating over [ents.GetAll](https://wiki.facepunch.com/gmod/ents.GetAll).
     * 
     * @param model - The model of the entities to find.
     */
    function FindByModel(model: string): any;
    
    /**
     * [Shared]
     * 
     * Gets all entities with the given hammer targetname. This works internally by iterating over [ents.GetAll](https://wiki.facepunch.com/gmod/ents.GetAll).
     * 
     * Doesn't do anything on client.
     * @param name - The targetname to look for
     */
    function FindByName(name: string): any;
    
    /**
     * [Shared]
     * 
     * Returns all entities within the specified box.
     * 
     * **Warning:**
     * >There is a limit of 512 entities for the output!
     * 
     * **Note:**
     * >Clientside entities will not be returned by this function.
     * 
     * @param boxMins - The box minimum coordinates.
     * @param boxMaxs - The box maximum coordinates.
     */
    function FindInBox(boxMins: Vector, boxMaxs: Vector): any;
    
    /**
     * [Shared]
     * 
     * Finds and returns all entities within the specified cone. Only entities whose [Entity:WorldSpaceCenter](https://wiki.facepunch.com/gmod/Entity:WorldSpaceCenter) is within the cone are considered to be in it.
     * 
     * The "cone" is actually a conical "slice" of an axis-aligned box (see: [ents.FindInBox](https://wiki.facepunch.com/gmod/ents.FindInBox)). The image to the right shows approximately how this function would look in 2D. Due to this, the entity may be farther than the specified range!
     * 
     * <image src="ents.FindInCone.png" alt="2D_visualization_of_the_actual_shape_of_the_cone,_click_to_enlarge"/>
     * 
     * **Warning:**
     * >If there are more than 512 entities in the axis-aligned box around the origin, then the result may be incomplete!
     * 
     * **Note:**
     * >Clientside entities will not be returned by this function.
     * 
     * @param origin - The tip of the cone.
     * @param normal - Direction of the cone.
     * @param range - The range of the cone/box around the origin.
     * **Note:**
     * >The function internally adds 1 to this argument before using it.
     * 
     * @param angle_cos - The <page text="cosine">math.cos</page> of the angle between the center of the cone to its edges, which is half the overall angle of the cone.
     * 1 makes a 0° cone, 0.707 makes approximately 90°, 0 makes 180°, and so on.
     */
    function FindInCone(origin: Vector, normal: Vector, range: number, angle_cos: number): any;
    
    /**
     * [Server]
     * 
     * Finds all entities that lie within a [PVS (Potential Visibility Set)](https://developer.valvesoftware.com/wiki/PVS "PVS - Valve Developer Community").
     * 
     * **Note:**
     * >The function won't take in to account [Global.AddOriginToPVS](https://wiki.facepunch.com/gmod/Global.AddOriginToPVS) and the like.
     * 
     * @param viewPoint - [Entity](https://wiki.facepunch.com/gmod/Entity) or [Vector](https://wiki.facepunch.com/gmod/Vector) to find entities within the PVS of. If a player is given, this function will use the player's view entity.
     */
    function FindInPVS(viewPoint: any): any;
    
    /**
     * [Shared]
     * 
     * Gets all entities within the specified sphere.
     * 
     * **Note:**
     * >Clientside entities will not be returned by this function.
     * 
     * **Note:**
     * >This function internally calls [ents.FindInBox](https://wiki.facepunch.com/gmod/ents.FindInBox) with some [radius checks](https://github.com/ValveSoftware/source-sdk-2013/blob/0d8dceea4310fde5706b3ce1c70609d72a38efdf/sp/src/public/collisionutils.cpp#L256-L301).
     * 
     * @param origin - Center of the sphere.
     * @param radius - Radius of the sphere.
     */
    function FindInSphere(origin: Vector, radius: number): any;
    
    /**
     * [Server]
     * 
     * Fires a use event.
     * @param target - Name of the target entity.
     * @param activator - Activator of the event.
     * @param caller - Caller of the event.
     * @param usetype - Use type. See the [Enums/USE](https://wiki.facepunch.com/gmod/Enums/USE).
     * @param value - This value is passed to [ENTITY:Use](https://wiki.facepunch.com/gmod/ENTITY:Use), but isn't used by any default entities in the engine.
     */
    function FireTargets(target: string, activator: Entity, caller: Entity, usetype: USE, value: number): void;
    
    /**
     * [Shared]
     * 
     * Returns a table of all existing entities.
     * 
     * Consider using [ents.Iterator](https://wiki.facepunch.com/gmod/ents.Iterator) instead for better performance.
     * 
     * **Note:**
     * >This function returns a sequential table, meaning it should be looped with [Global.ipairs](https://wiki.facepunch.com/gmod/Global.ipairs) instead of [Global.pairs](https://wiki.facepunch.com/gmod/Global.pairs) for efficiency reasons.
     * 
     * 
     */
    function GetAll(): any;
    
    /**
     * [Shared]
     * 
     * Returns an entity by its index. Same as [Global.Entity](https://wiki.facepunch.com/gmod/Global.Entity).
     * @param entIdx - The index of the entity.
     */
    function GetByIndex(entIdx: number): Entity;
    
    /**
     * [Shared]
     * 
     * Gives you the amount of currently existing entities.
     * 
     * **Note:**
     * >Similar to **#**[ents.GetAll](https://wiki.facepunch.com/gmod/ents.GetAll)() but with better performance since the entity table doesn't have to be generated. If [ents.GetAll](https://wiki.facepunch.com/gmod/ents.GetAll) is already being called for iteration, than using the **#** operator on the table will be faster than calling this function since it is JITted.
     * 
     * @param [IncludeKillMe = false] - Include entities with the FL_KILLME flag. This will skip an internal loop, and the function will be more efficient as a byproduct.
     */
    function GetCount(IncludeKillMe = false): number;
    
    /**
     * [Server]
     * 
     * Returns the amount of networked entities, which is limited to 8192. [ents.Create](https://wiki.facepunch.com/gmod/ents.Create) will fail somewhere between 8064 and 8176 - this can vary based on the amount of existing temp ents.
     * 
     */
    function GetEdictCount(): number;
    
    /**
     * [Shared]
     * 
     * Returns entity that has given [Entity:MapCreationID](https://wiki.facepunch.com/gmod/Entity:MapCreationID).
     * @param id - Entity's creation id
     */
    function GetMapCreatedEntity(id: number): Entity;
    
    /**
     * [Shared]
     * 
     * Returns an iterator for all existing entities.
     * 
     * This will be quite a bit faster than [ents.GetAll](https://wiki.facepunch.com/gmod/ents.GetAll), especially when using the `break` keyword.
     * 
     */
    function Iterator(): LuaMultiReturn<[Function, any, number]>;

}

/**
 * The file library provides functions for finding, reading and writing to files. <br/>
 * The following path values are most commonly used:
 * * `LUA` searches the lua files (in /lua/, in your gamemodes, in all the addons).
 * * `GAME` searches all the mounted content (main folder, addons, mounted games etc).
 * * `MOD` searches only the garrysmod folder.
 * * `DATA` searches in the data folder.
 * 
 * See [File Search Paths](https://wiki.facepunch.com/gmod/File_Search_Paths) for the descriptive list of path values.
 * For the full list of path values, type `path` in the console.
 */
declare namespace file {
    

    /**
     * [Shared and Menu]
     * 
     * Appends a file relative to the `data` folder.
     * @param name - The file's name.
     * @param content - The content which should be appended to the file.
     */
    function Append(name: string, content: string): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the content of a file asynchronously.
     * 
     * All limitations of [file.Read](https://wiki.facepunch.com/gmod/file.Read) also apply.
     * 
     * **Note:**
     * >This function is currently broken in the Menu State and won't be fixed. [Bug Report](https://github.com/Facepunch/garrysmod-issues/issues/5433)
     * 
     * @param fileName - The name of the file.
     * @param gamePath - The path to look for the files and directories in. See <page text="this list">File_Search_Paths</page> for a list of valid paths.
     * @param callback - A callback function that will be called when the file read operation finishes. Arguments are:
     * * [string](https://wiki.facepunch.com/gmod/string) fileName - The `fileName` argument above.
     * * [string](https://wiki.facepunch.com/gmod/string) gamePath - The `gamePath` argument above.
     * * [number](https://wiki.facepunch.com/gmod/number) status - The status of the operation. The list can be found in [Enums/FSASYNC](https://wiki.facepunch.com/gmod/Enums/FSASYNC).
     * * [string](https://wiki.facepunch.com/gmod/string) data - The entirety of the data of the file.
     * @param [sync = false] - If `true` the file will be read synchronously.
     */
    function AsyncRead(fileName: string, gamePath: string, callback: Function, sync = false): number;
    
    /**
     * [Shared and Menu]
     * 
     * Creates a directory that is relative to the `data` folder.
     * @param name - The directory's name.
     */
    function CreateDir(name: string): void;
    
    /**
     * [Shared and Menu]
     * 
     * Deletes a file or `empty` folder that is relative to the **data** folder. You can't remove any files outside of **data** folder.
     * 
     * **Note:**
     * >You are able to delete **any** file in the Menu state.
     * 
     * @param name - The file name.
     * @param path - The path to look for the files and directories in. See <page text="this list">File_Search_Paths</page> for a list of valid paths.
     * **Note:**
     * >This is only available in the menu state.
     * 
     */
    function Delete(name: string, path: string): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a boolean of whether the file or directory exists or not.
     * @param name - The file or directory's name.
     * @param gamePath - The path to look for the files and directories in. See <page text="this list">File_Search_Paths</page> for a list of valid paths.
     */
    function Exists(name: string, gamePath: string): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a list of files and directories inside a single folder.
     * 
     * **Warning:**
     * >It seems that paths with capital letters (e.g. lua/MyFolder/) don't work as expected on Linux.
     * 
     * @param name - The wildcard to search for. `models/.mdl` will list **.mdl** files in the `models/` folder.
     * @param path - The path to look for the files and directories in. See <page text="this list">File_Search_Paths</page> for a list of valid paths.
     * @param [sorting = nameasc] - The sorting to be used, **optional**.
     * * `nameasc` sort the files ascending by name.
     * * `namedesc` sort the files descending by name.
     * * `dateasc` sort the files ascending by date.
     * * `datedesc` sort the files descending by date.
     */
    function Find(name: string, path: string, sorting?: string): LuaMultiReturn<[any, any]>;
    
    /**
     * [Shared and Menu]
     * 
     * Returns whether the given file is a directory or not.
     * @param fileName - The file or directory's name.
     * @param gamePath - The path to look for the files and directories in. See <page text="this list">File_Search_Paths</page> for a list of valid paths.
     */
    function IsDir(fileName: string, gamePath: string): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Attempts to open a file with the given mode.
     * @param fileName - The files name. See [file.Write](https://wiki.facepunch.com/gmod/file.Write) for details on filename restrictions when writing to files.
     * @param fileMode - The mode to open the file in. Possible values are:
     * * **r** - read mode
     * * **w** - write mode
     * * **a** - append mode
     * * **rb** - binary read mode
     * * **wb** - binary write mode
     * * **ab** - binary append mode
     * @param gamePath - The path to look for the files and directories in. See <page text="this list">File_Search_Paths</page> for a list of valid paths.
     */
    function Open(fileName: string, fileMode: string, gamePath: string): File;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the content of a file.
     * 
     * **Warning:**
     * >Beware of casing -- some filesystems are case-sensitive. SRCDS on Linux seems to force file/directory creation to lowercase, but will not modify read operations.
     * 
     * @param fileName - The name of the file.
     * @param [gamePath = GAME or DATA] - The path to look for the files and directories in. If this argument is set to `true` then the path will be `GAME`, otherwise if the argument is `false` or `nil` then the path will be `DATA`. See <page text="this list">File_Search_Paths</page> for a list of valid paths.
     */
    function Read(fileName: string, gamePath?: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Attempts to rename a file with the given name to another given name.
     * 
     * This function is constrained to the `data/` folder.
     * @param orignalFileName - The original file or folder name. See [file.Write](https://wiki.facepunch.com/gmod/file.Write) for details on filename restrictions when writing to files.
     * **This argument will be forced lowercase.**
     * @param targetFileName - The target file or folder name. See [file.Write](https://wiki.facepunch.com/gmod/file.Write) for details on filename restrictions when writing to files.
     * **This argument will be forced lowercase.**
     */
    function Rename(orignalFileName: string, targetFileName: string): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the file's size in bytes. If the file is not found, returns `-1`.
     * @param fileName - The file's name.
     * @param gamePath - The path to look for the files and directories in. See <page text="this list">File_Search_Paths</page> for a list of valid paths.
     */
    function Size(fileName: string, gamePath: string): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns when the file or folder was last modified in Unix time.
     * @param path - The **file** or **folder** path.
     * @param gamePath - The path to look for the files and directories in. See <page text="this list">File_Search_Paths</page> for a list of valid paths.
     */
    function Time(path: string, gamePath: string): number;
    
    /**
     * [Shared and Menu]
     * 
     * Writes the given string to a file. Erases all previous data in the file. To add data without deleting previous data, use [file.Append](https://wiki.facepunch.com/gmod/file.Append).
     * @param fileName - The name of the file being written into. The path is relative to the **data/* folder.
     * This argument will be forced lowercase.
     * The filename **must** end with one of the following:
     * * .txt
     * * .dat
     * * .json
     * * .xml
     * * .csv
     * * .jpg
     * * .jpeg
     * * .png
     * * .vtf
     * * .vmt
     * * .mp3
     * * .wav
     * * .ogg
     * * .vcd
     * * .dem
     * * .gma
     * Restricted symbols are: `" :`
     * @param content - The content that will be written into the file.
     */
    function Write(fileName: string, content: string): void;

}

/**
 * The frame blending library.
 */
declare namespace frame_blend {
    

    /**
     * [Client]
     * 
     * Adds a frame to the blend. Calls [frame_blend.CompleteFrame](https://wiki.facepunch.com/gmod/frame_blend.CompleteFrame) once enough frames have passed since last [frame_blend.CompleteFrame](https://wiki.facepunch.com/gmod/frame_blend.CompleteFrame) call.
     * 
     */
    function AddFrame(): void;
    
    /**
     * [Client]
     * 
     * Blends the frame(s).
     * 
     */
    function BlendFrame(): void;
    
    /**
     * [Client]
     * 
     * Renders the frame onto internal render target.
     * 
     */
    function CompleteFrame(): void;
    
    /**
     * [Client]
     * 
     * Actually draws the frame blend effect.
     * 
     */
    function DrawPreview(): void;
    
    /**
     * [Client]
     * 
     * Returns whether frame blend post processing effect is enabled or not.
     * 
     */
    function IsActive(): boolean;
    
    /**
     * [Client]
     * 
     * Returns whether the current frame is the last frame?
     * 
     */
    function IsLastFrame(): boolean;
    
    /**
     * [Client]
     * 
     * Returns amount of frames needed to render?
     * 
     */
    function RenderableFrames(): number;
    
    /**
     * [Client]
     * 
     * Returns whether we should skip frame or not
     * 
     */
    function ShouldSkipFrame(): boolean;

}

/**
 * The game library provides functions to access various features in the game's engine, most of it's functions are related to controlling the map.
 */
declare namespace game {
    

    /**
     * [Shared]
     * 
     * Adds a new ammo type to the game.
     * 
     * You can find a list of default ammo types [here](https://wiki.facepunch.com/gmod/Default_Ammo_Types).
     * 
     * **Warning:**
     * >This function **must** be called on both the client and server in [GM:Initialize](https://wiki.facepunch.com/gmod/GM:Initialize) or you will have unexpected problems.
     * 
     * **Note:**
     * >There is a limit of 256 ammo types, including the default ones.
     * 
     * @param ammoData - The attributes of the ammo. See the [Structures/AmmoData](https://wiki.facepunch.com/gmod/Structures/AmmoData).
     */
    function AddAmmoType(ammoData: AmmoData): void;
    
    /**
     * [Shared]
     * 
     * Registers a new decal.
     * 
     * **Warning:**
     * >There's a rather low limit of around 256 for decal materials that may be registered and they are not cleared on map load.
     * 
     * @param decalName - The name of the decal.
     * @param materialName - The material to be used for the decal. May also be a list of material names, in which case a random material from that list will be chosen every time the decal is placed.
     */
    function AddDecal(decalName: string, materialName: string): void;
    
    /**
     * [Shared]
     * 
     * Loads a particle file. Individual particle systems will still need to be precached with [Global.PrecacheParticleSystem](https://wiki.facepunch.com/gmod/Global.PrecacheParticleSystem).
     * 
     * **Note:**
     * >You will still need to call this function clientside regardless if you create the particle effects serverside.
     * 
     * @param particleFileName - The path of the file to add. Must be `(file).pcf`.
     */
    function AddParticles(particleFileName: string): void;
    
    /**
     * [Shared]
     * 
     * **.**
     * Called by the engine to retrieve the ammo types.
     * 
     */
    function BuildAmmoTypes(): any;
    
    /**
     * [Shared]
     * 
     * If called serverside it will remove **ALL** entities which were not created by the map (not players or weapons held by players).  
     * It won't remove Entities who have the <page text="EFL_KEEP_ON_RECREATE_ENTITIES">enums/EFL</page> Flag set.
     * 
     * On the client it will remove decals, sounds, gibs, dead NPCs, and entities created via [ents.CreateClientProp](https://wiki.facepunch.com/gmod/ents.CreateClientProp).
     * 
     * This function calls [GM:PreCleanupMap](https://wiki.facepunch.com/gmod/GM:PreCleanupMap) before cleaning up the map and [GM:PostCleanupMap](https://wiki.facepunch.com/gmod/GM:PostCleanupMap) after cleaning up the map.
     * 
     * **Bug [#1142](https://github.com/Facepunch/garrysmod-issues/issues/1142):**
     * >Calling this in a [ENTITY:StartTouch](https://wiki.facepunch.com/gmod/ENTITY:StartTouch) or [ENTITY:Touch](https://wiki.facepunch.com/gmod/ENTITY:Touch) hook will crash the game.
     * 
     * **Bug [#2874](https://github.com/Facepunch/garrysmod-issues/issues/2874):**
     * >Calling this destroys all BASS streams.
     * 
     * **Bug [#3637](https://github.com/Facepunch/garrysmod-issues/issues/3637):**
     * >This can crash when removing _firesmoke entities. **You can use the example below to workaround this issue.**
     * 
     * @param [dontSendToClients = false] - If set to `true`, don't run this functions on all clients.
     * @param [extraFilters = {}] - Entity classes not to reset during cleanup.
     */
    function CleanUpMap(dontSendToClients = false, extraFilters?: any): void;
    
    /**
     * [Server]
     * 
     * Runs a console command.
     * Make sure to add a newline ("\n") at the end of the command.
     * 
     * **Warning:**
     * >If you use data that were received from a client, you should avoid using this function because newline and semicolon (at least) allow the client to run arbitrary commands!
     * 
     * For safety, you are urged to prefer using [Global.RunConsoleCommand](https://wiki.facepunch.com/gmod/Global.RunConsoleCommand) in this case.
     * 
     * @param stringCommand - String containing the command and arguments to be ran.
     */
    function ConsoleCommand(stringCommand: string): void;
    
    /**
     * [Shared]
     * 
     * Returns the damage type of given ammo type.
     * @param id - Ammo ID to retrieve the damage type of. Starts from 1.
     */
    function GetAmmoDamageType(id: number): DMG;
    
    /**
     * [Shared]
     * 
     * Returns the [Structures/AmmoData](https://wiki.facepunch.com/gmod/Structures/AmmoData) for given ID.
     * @param id - ID of the ammo type to look up the data for
     */
    function GetAmmoData(id: number): AmmoData;
    
    /**
     * [Shared]
     * 
     * Returns the ammo bullet force that is applied when an entity is hit by a bullet of given ammo type.
     * @param id - Ammo ID to retrieve the force of. Starts from 1.
     */
    function GetAmmoForce(id: number): number;
    
    /**
     * [Shared]
     * 
     * Returns the ammo type ID for given ammo type name.
     * 
     * See [game.GetAmmoName](https://wiki.facepunch.com/gmod/game.GetAmmoName) for reverse.
     * @param name - Name of the ammo type to look up ID of
     */
    function GetAmmoID(name: string): number;
    
    /**
     * [Shared]
     * 
     * Returns the real maximum amount of ammo of given ammo ID, regardless of the setting of `gmod_maxammo` convar.
     * @param id - Ammo type ID
     */
    function GetAmmoMax(id: number): number;
    
    /**
     * [Shared]
     * 
     * Returns the ammo name for given ammo type ID.
     * 
     * See [game.GetAmmoID](https://wiki.facepunch.com/gmod/game.GetAmmoID) for reverse.
     * @param id - Ammo ID to retrieve the name of. Starts from 1.
     */
    function GetAmmoName(id: number): string;
    
    /**
     * [Shared]
     * 
     * Returns the damage given ammo type should do to NPCs.
     * @param id - Ammo ID to retrieve the damage info of. Starts from 1.
     */
    function GetAmmoNPCDamage(id: number): number;
    
    /**
     * [Shared]
     * 
     * Returns the damage given ammo type should do to players.
     * @param id - Ammo ID to retrieve the damage info of. Starts from 1.
     */
    function GetAmmoPlayerDamage(id: number): number;
    
    /**
     * [Shared]
     * 
     * Returns a list of all ammo types currently registered.
     * 
     */
    function GetAmmoTypes(): any;
    
    /**
     * [Server]
     * 
     * Returns the counter of a Global State.
     * 
     * See [Global States](https://wiki.facepunch.com/gmod/Global_States) for more information.
     * @param name - The name of the Global State to set. 
     * If the Global State by that name does not exist, it will be created.
     * See [Global States](https://wiki.facepunch.com/gmod/Global_States) for a list of default global states.
     */
    function GetGlobalCounter(name: string): number;
    
    /**
     * [Server]
     * 
     * Returns whether a Global State is off, active or dead ( inactive )
     * 
     * See [Global States](https://wiki.facepunch.com/gmod/Global_States) for more information.
     * @param name - The name of the Global State to retrieve the state of. 
     * If the Global State by that name does not exist, **GLOBAL_DEAD** will be returned.
     * See [Global States](https://wiki.facepunch.com/gmod/Global_States) for a list of default global states.
     */
    function GetGlobalState(name: string): GLOBAL;
    
    /**
     * [Shared]
     * 
     * Returns the public IP address and port of the current server. This will return the IP/port that you are connecting through when ran clientside.
     * 
     * **Bug [#3001](https://github.com/Facepunch/garrysmod-issues/issues/3001):**
     * >Returns "0.0.0.0:`port`" on the server when called too early, including in [GM:Initialize](https://wiki.facepunch.com/gmod/GM:Initialize) and [GM:InitPostEntity](https://wiki.facepunch.com/gmod/GM:InitPostEntity). This bug seems to only happen the first time a server is launched, and will return the correct value after switching maps.
     * 
     * **Note:**
     * >Returns "loopback" in singleplayer.
     * 
     * 
     */
    function GetIPAddress(): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the name of the current map, without a file extension.
     * On the menu state, returns "menu".
     * 
     * **Warning:**
     * >In Multiplayer this does not return the current map in the CLIENT realm before [GM:Initialize](https://wiki.facepunch.com/gmod/GM:Initialize).
     * 
     * 
     */
    function GetMap(): string;
    
    /**
     * [Server]
     * 
     * Returns the next map that would be loaded according to the file that is set by the mapcyclefile convar.
     * 
     */
    function GetMapNext(): string;
    
    /**
     * [Server]
     * 
     * Returns the revision (Not to be confused with [VBSP Version](https://developer.valvesoftware.com/wiki/Source_BSP_File_Format#Versions)) of the current map.
     * 
     */
    function GetMapVersion(): number;
    
    /**
     * [Shared]
     * 
     * Returns the difficulty level of the game.
     * 
     * **TIP:** You can use this function in your scripted NPCs or Nextbots to make them stronger, however, it is a good idea to lock powerful attacks behind the highest difficulty instead of just increasing the health.
     * 
     * **Note:**
     * >Internally this is tied to the gamerules entity, so you'll have to wait until [GM:InitPostEntity](https://wiki.facepunch.com/gmod/GM:InitPostEntity) is called to return the skill level
     * 
     * 
     */
    function GetSkillLevel(): number;
    
    /**
     * [Shared]
     * 
     * Returns the time scale set with [game.SetTimeScale](https://wiki.facepunch.com/gmod/game.SetTimeScale).  
     * 		If you want to get the value of `host_timescale` use
     * 		```lua
     * local timescale = GetConVar( "host_timescale" ):GetFloat()
     * 		```
     * 
     */
    function GetTimeScale(): number;
    
    /**
     * [Shared]
     * 
     * Returns the worldspawn entity.
     * 
     */
    function GetWorld(): Entity;
    
    /**
     * [Shared]
     * 
     * Returns true if the server is a dedicated server, false if it is a listen server or a singleplayer game.
     * 
     */
    function IsDedicated(): boolean;
    
    /**
     * [Server]
     * 
     * Kicks a player from the server. This can be ran before the player has spawned.
     * @param id - UserID or SteamID of the player to kick.
     * @param [reason = No reason given] - Reason to display to the player. This can span across multiple lines.
     * **Warning:**
     * >This will be shortened to ~512 chars, though this includes the command itself and the player index so will realistically be more around ~498. It is recommended to avoid going near the limit to avoid truncation.
     * 
     */
    function KickID(id: string, reason?: string): void;
    
    /**
     * [Server]
     * 
     * Loads the next map according to the nextlevel convar, or from the current mapcycle file set by the respective convar.
     * 
     */
    function LoadNextMap(): void;
    
    /**
     * [Server]
     * 
     * Returns the map load type of the current map.
     * 
     * After changing the map with the console command `changelevel`, "newgame" is returned. With `changelevel2` (single player only), "transition" is returned.
     * 
     */
    function MapLoadType(): string;
    
    /**
     * [Shared]
     * 
     * Returns the maximum amount of players (including bots) that the server can have.
     * 
     */
    function MaxPlayers(): number;
    
    /**
     * [Shared]
     * 
     * Mounts a GMA addon from the disk.
     * Can be used with [steamworks.DownloadUGC](https://wiki.facepunch.com/gmod/steamworks.DownloadUGC)
     * 
     * **Note:**
     * >Any error models currently loaded that the mounted addon provides will be reloaded.
     * 
     * Any error materials currently loaded that the mounted addon provides will NOT be reloaded. That means that this cannot be used to fix missing map materials, as the map materials are loaded before you are able to call this.
     * 
     * @param path - Location of the GMA file to mount, retrieved from [steamworks.DownloadUGC](https://wiki.facepunch.com/gmod/steamworks.DownloadUGC) or relative to the `garrysmod/` directory (ignores mounting). This file does not have to end with the .gma extension, but will be interpreted as a GMA.
     */
    function MountGMA(path: string): LuaMultiReturn<[boolean, any]>;
    
    /**
     * [Shared]
     * 
     * Removes all the clientside ragdolls.
     * 
     */
    function RemoveRagdolls(): void;
    
    /**
     * [Server]
     * 
     * Sets the counter of a Global State.
     * 
     * See [Global States](https://wiki.facepunch.com/gmod/Global_States) for more information.
     * @param name - The name of the Global State to set. 
     * If the Global State by that name does not exist, it will be created.
     * See [Global States](https://wiki.facepunch.com/gmod/Global_States) for a list of default global states.
     * @param count - The value to set for that Global State.
     */
    function SetGlobalCounter(name: string, count: number): void;
    
    /**
     * [Server]
     * 
     * Sets whether a Global State is off, active or dead ( inactive )
     * 
     * See [Global States](https://wiki.facepunch.com/gmod/Global_States) for more information.
     * @param name - The name of the Global State to set. 
     * If the Global State by that name does not exist, it will be created.
     * See [Global States](https://wiki.facepunch.com/gmod/Global_States) for a list of default global states.
     * @param state - The state of the Global State. See [Enums/GLOBAL](https://wiki.facepunch.com/gmod/Enums/GLOBAL)
     */
    function SetGlobalState(name: string, state: GLOBAL): void;
    
    /**
     * [Server]
     * 
     * Sets the difficulty level of the game, can be retrieved with [game.GetSkillLevel](https://wiki.facepunch.com/gmod/game.GetSkillLevel).
     * 
     * This will automatically change whenever the "skill" convar is modified serverside.
     * @param level - The difficulty level, Easy( 1 ), Normal( 2 ), Hard( 3 ).
     */
    function SetSkillLevel(level: number): void;
    
    /**
     * [Server]
     * 
     * Sets the time scale of the game.
     * 
     * This function is supposed to remove the need of using the host_timescale convar, which is cheat protected.  
     * 
     * To slow down or speed up the movement of a specific player, use [Player:SetLaggedMovementValue](https://wiki.facepunch.com/gmod/Player:SetLaggedMovementValue) instead.
     * 
     * **Note:**
     * >Like host_timescale, this method does not affect sounds, if you wish to change that, look into [GM:EntityEmitSound](https://wiki.facepunch.com/gmod/GM:EntityEmitSound).  
     * 	The true timescale will be `host_timescale` multiplied by [game.GetTimeScale](https://wiki.facepunch.com/gmod/game.GetTimeScale)
     * 
     * @param timeScale - The new timescale, minimum value is 0.001 and maximum is 5.
     */
    function SetTimeScale(timeScale: number): void;
    
    /**
     * [Shared]
     * 
     * Returns whether the current session is a single player game.
     * 
     */
    function SinglePlayer(): boolean;
    
    /**
     * [Shared]
     * 
     * Returns position the player should start from, this is not the same thing as spawn points, it is used to properly transit the player between maps.
     * 
     */
    function StartSpot(): Vector;

}

/**
 * Used to interface with the built-in game events system.
 * 
 * The following is a list of all available game events.
 * <pagelist category="gameevent"></pagelist>
 * 
 * **Note:**
 * >All Serverside gameevents are networked and called clientside. It could happen that a gameevent is called twice because of this like.
 * 
 */
declare namespace gameevent {
    

    /**
     * [Shared]
     * 
     * Adds a [game event](gameevent) listener, creating a new hook using the [hook](https://wiki.facepunch.com/gmod/hook) library, which can be listened to via [hook.Add](https://wiki.facepunch.com/gmod/hook.Add) with the given `eventName` as event.
     * 
     * **Note:**
     * >All gameevents are called in the **Menu State**, but if you want to use them you need to use some DLL(like [this](https://github.com/RaphaelIT7/gmod-gameevent) one) or you need to create your own.
     * 
     * @param eventName - The event to listen to. List of valid events (with examples) can be found [here](gameevent).
     */
    function Listen(eventName: string): void;

}

/**
 * The gamemode library provides functions relating to the gamemode system in Garry's Mod. This entire library also passes through the C -> Lua bridge.
 */
declare namespace gamemode {
    

    /**
     * [Shared]
     * 
     * Called by the engine to call a hook within the loaded gamemode.
     * 
     * The supplied event 'name' must be defined in the active gamemode. Otherwise, nothing will happen - not even hooks added with [hook.Add](https://wiki.facepunch.com/gmod/hook.Add) will be called.
     * 
     * This is similar to [hook.Run](https://wiki.facepunch.com/gmod/hook.Run) and [hook.Call](https://wiki.facepunch.com/gmod/hook.Call), except the hook library will call hooks created with hook.Add even if there is no corresponding gamemode function.
     * @param name - The name of the hook to call.
     * @param args - The arguments
     */
    function Call(name: string, ...args: any[]): any;
    
    /**
     * [Shared]
     * 
     * This returns the internally stored gamemode table.
     * @param name - The name of the gamemode you want to get
     */
    function Get(name: string): any;
    
    /**
     * [Shared]
     * 
     * Called by the engine when a gamemode is being loaded.
     * @param gm - Your GM table
     * @param name - Name of your gamemode, lowercase, no spaces.
     * @param derived - The gamemode name that your gamemode is derived from
     */
    function Register(gm: any, name: string, derived: string): void;

}

/**
 * Similar purpose to the [game](https://wiki.facepunch.com/gmod/game) and [engine](https://wiki.facepunch.com/gmod/engine), allows access to various features of the game's engine.
 */
declare namespace gmod {
    

    /**
     * [Shared]
     * 
     * Returns [GAMEMODE](https://wiki.facepunch.com/gmod/GAMEMODE).
     * 
     */
    function GetGamemode(): any;

}

/**
 * The gmsave library provides functions relating to the singleplayer save system in Garry's Mod.
 */
declare namespace gmsave {
    

    /**
     * [Server]
     * 
     * Loads a saved map.
     * @param mapData - The JSON encoded string containing all the map data.
     * @param [ply = NULL] - The player to load positions for.
     * @param [callback = nil] - A function to be called after all the entities have been placed.
     */
    function LoadMap(mapData: string, ply?: Player, callback?: Function): void;
    
    /**
     * [Server]
     * 
     * Sets player position and angles from supplied table
     * @param ply - The player to "load" values for
     * @param data - A table containing Origin and Angle keys for position and angles to set.
     */
    function PlayerLoad(ply: Player, data: any): void;
    
    /**
     * [Server]
     * 
     * Returns a table containing player position and angles. Used by [gmsave.SaveMap](https://wiki.facepunch.com/gmod/gmsave.SaveMap).
     * @param ply - The player to "save"
     */
    function PlayerSave(ply: Player): any;
    
    /**
     * [Server]
     * 
     * Saves the map
     * @param ply - The player, whose position should be saved for loading the save
     */
    function SaveMap(ply: Player): string;
    
    /**
     * [Server]
     * 
     * Returns if we should save this entity in a duplication or a map save or not.
     * @param ent - The entity
     * @param t - A table containing classname key with entities classname.
     */
    function ShouldSaveEntity(ent: Entity, t: any): boolean;

}

/**
 * The gui library is similar to the [input](https://wiki.facepunch.com/gmod/input) but features functions that are more focused on the mouse's interaction with GUI panels.
 */
declare namespace gui {
    

    /**
     * [Client and Menu]
     * 
     * Opens the game menu overlay.
     * 
     */
    function ActivateGameUI(): void;
    
    /**
     * [Client]
     * 
     * Pushes text to the closed caption box.
     * @param text - The caption to emit. See [Closed Captions](https://developer.valvesoftware.com/wiki/Closed_Captions) for more info
     * @param duration - How long the caption should stay for
     * @param [fromPlayer = false] - Is this caption coming from the player?
     * This is used to give different colors to the caption to differentiate, for example, whether the SMG is fired by the player or NPC.
     */
    function AddCaption(text: string, duration: number, fromPlayer = false): void;
    
    /**
     * [Client]
     * 
     * Enables the mouse cursor without restricting player movement, like using Sandbox's context menu. See [vgui.CursorVisible](https://wiki.facepunch.com/gmod/vgui.CursorVisible) for a function to see if the cursor is visible or not.
     * 
     * **Note:**
     * >Some [CUserCmd](https://wiki.facepunch.com/gmod/CUserCmd) functions will return incorrect values when this function is active because [the user input is getting overtaken by the vgui system](https://github.com/Facepunch/garrysmod-issues/issues/982#issuecomment-505671531).
     * 
     * @param enabled - Whether the cursor should be enabled or not. (true = enable, false = disable)
     */
    function EnableScreenClicker(enabled: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Hides the game menu overlay.
     * 
     */
    function HideGameUI(): void;
    
    /**
     * [Client and Menu]
     * 
     * Simulates a mouse move with the given deltas.
     * @param deltaX - The movement delta on the x axis.
     * @param deltaY - The movement delta on the y axis.
     */
    function InternalCursorMoved(deltaX: number, deltaY: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Simulates a key press for the given key.
     * @param key - The key, see [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY).
     */
    function InternalKeyCodePressed(key: KEY): void;
    
    /**
     * [Client and Menu]
     * 
     * Simulates a key release for the given key.
     * @param key - The key, see [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY).
     */
    function InternalKeyCodeReleased(key: KEY): void;
    
    /**
     * [Client and Menu]
     * 
     * Simulates a key type typing to the specified key.
     * @param key - The key, see [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY).
     */
    function InternalKeyCodeTyped(key: KEY): void;
    
    /**
     * [Client and Menu]
     * 
     * Simulates an ASCII symbol writing.
     * Use to write text in the chat or in VGUI.
     * Doesn't work while the main menu is open!
     * @param code - ASCII code of symbol, see http://www.mikroe.com/img/publication/spa/pic-books/programming-in-basic/chapter/04/fig4-24.gif
     */
    function InternalKeyTyped(code: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Simulates a double mouse key press for the given mouse key.
     * @param key - The key, see [Enums/MOUSE](https://wiki.facepunch.com/gmod/Enums/MOUSE).
     */
    function InternalMouseDoublePressed(key: MOUSE): void;
    
    /**
     * [Client and Menu]
     * 
     * Simulates a mouse key press for the given mouse key.
     * @param key - The key, see [Enums/MOUSE](https://wiki.facepunch.com/gmod/Enums/MOUSE).
     */
    function InternalMousePressed(key: MOUSE): void;
    
    /**
     * [Client and Menu]
     * 
     * Simulates a mouse key release for the given mouse key.
     * @param key - The key, see [Enums/MOUSE](https://wiki.facepunch.com/gmod/Enums/MOUSE).
     */
    function InternalMouseReleased(key: MOUSE): void;
    
    /**
     * [Client and Menu]
     * 
     * Simulates a mouse wheel scroll with the given delta.
     * @param delta - The amount of scrolling to simulate.
     */
    function InternalMouseWheeled(delta: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the console is visible or not.
     * 
     */
    function IsConsoleVisible(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the game menu overlay ( main menu ) is open or not.
     * 
     */
    function IsGameUIVisible(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the cursor's position on the screen, or 0, 0 if cursor is not visible.
     * 
     * @deprecated Use [input.GetCursorPos](https://wiki.facepunch.com/gmod/input.GetCursorPos) instead.
     * 
     * 
     */
    function MousePos(): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Returns x component of the mouse position.
     * 
     */
    function MouseX(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns y component of the mouse position.
     * 
     */
    function MouseY(): number;
    
    /**
     * [Client and Menu]
     * 
     * Opens specified URL in the steam overlay browser.
     * 
     * **Note:**
     * >When called clientside, user will be asked for confirmation before the website will open.
     * 
     * @param url - URL to open, it has to start with either `http://` or `https://`.
     */
    function OpenURL(url: string): void;
    
    /**
     * [Client]
     * 
     * Converts the specified screen position to a **direction** vector local to the player's view. A related function is [Vector:ToScreen](https://wiki.facepunch.com/gmod/Vector:ToScreen), which translates a 3D position to a screen coordinate.
     * 
     * [util.AimVector](https://wiki.facepunch.com/gmod/util.AimVector) is a more generic version of this, using a custom view instead of the player's current view.
     * @param x - X coordinate on the screen.
     * @param y - Y coordinate on the screen.
     */
    function ScreenToVector(x: number, y: number): Vector;
    
    /**
     * [Client and Menu]
     * 
     * Sets the cursor's position on the screen, relative to the topleft corner of the window
     * 
     * @deprecated Use [input.SetCursorPos](https://wiki.facepunch.com/gmod/input.SetCursorPos) instead.
     * 
     * @param mouseX - The X coordinate to move the cursor to.
     * @param mouseY - The Y coordinate to move the cursor to.
     */
    function SetMousePos(mouseX: number, mouseY: number): void;
    
    /**
     * [Menu]
     * 
     * Shows console in the game UI.
     * 
     */
    function ShowConsole(): void;

}

/**
 * GWEN is a system that allows you to load a spritesheet and generate a skin out of it.
 */
declare namespace GWEN {
    

    /**
     * [Client and Menu]
     * 
     * Used in derma skins to create a bordered rectangle drawing function from an image. The texture is taken either from last argument or from SKIN.GwenTexture when material source it's not supplied
     * @param x - The X coordinate on the texture
     * @param y - The Y coordinate on the texture
     * @param w - Width of the area on texture
     * @param h - Height of the area on texture
     * @param left - Left width of border
     * @param top - Top width of border
     * @param right - Right width of border
     * @param bottom - Bottom width of border
     * @param [source = nil] - Texture of source image to create a bordered rectangle from. Uses SKIN.GwenTexture if not set.
     */
    function CreateTextureBorder(x: number, y: number, w: number, h: number, left: number, top: number, right: number, bottom: number, source?: IMaterial): Function;
    
    /**
     * [Client and Menu]
     * 
     * Used in derma skins to create a rectangle drawing function from an image. The rectangle will not be scaled, but instead it will be drawn in the center of the box. The texture is taken from SKIN.GwenTexture when mat_override it's not defined
     * @param x - The X coordinate on the texture
     * @param y - The Y coordinate on the texture
     * @param w - Width of the area on texture
     * @param h - Height of the area on texture
     * @param [mat_override = null] - Optional. Sets the material this function will use
     */
    function CreateTextureCentered(x: number, y: number, w: number, h: number, mat_override?: IMaterial): Function;
    
    /**
     * [Client and Menu]
     * 
     * Used in derma skins to create a rectangle drawing function from an image. The texture of the rectangle will be scaled. The texture is taken from SKIN.GwenTexture when mat_override is not supplied
     * @param x - The X coordinate on the texture
     * @param y - The Y coordinate on the texture
     * @param w - Width of the area on texture
     * @param h - Height of the area on texture
     * @param [mat_override = null] - Optional. Sets the material this function will use
     */
    function CreateTextureNormal(x: number, y: number, w: number, h: number, mat_override?: IMaterial): Function;
    
    /**
     * [Client and Menu]
     * 
     * When used in a material skin, it returns a color value from a point in the skin image.
     * @param x - X position of the pixel to get the color from.
     * @param y - Y position of the pixel to get the color from.
     */
    function TextureColor(x: number, y: number): Color;

}

/**
 * The halo library is used to draw glowing outlines around entities, an example of this can be seen by picking up props with the physgun in Garry's Mod 13.
 */
declare namespace halo {
    

    /**
     * [Client]
     * 
     * Applies a [halo](https://wiki.facepunch.com/gmod/halo) glow effect to one or multiple entities.
     * 
     * **Warning:**
     * >Using this function outside of the [GM:PreDrawHalos](https://wiki.facepunch.com/gmod/GM:PreDrawHalos) hook can cause instability or crashes.
     * 
     * **Note:**
     * >The ignoreZ parameter will cause the halos to draw over the player's viewmodel. You can work around this using [render.DepthRange](https://wiki.facepunch.com/gmod/render.DepthRange) in the [GM:PreDrawViewModel](https://wiki.facepunch.com/gmod/GM:PreDrawViewModel), [GM:PostDrawViewModel](https://wiki.facepunch.com/gmod/GM:PostDrawViewModel), [GM:PreDrawPlayerHands](https://wiki.facepunch.com/gmod/GM:PreDrawPlayerHands) and [GM:PostDrawPlayerHands](https://wiki.facepunch.com/gmod/GM:PostDrawPlayerHands) hooks.
     * 
     * @param entities - A table of entities to add the halo effect to.
     * @param color - The desired color of the halo. See [Color](https://wiki.facepunch.com/gmod/Color).
     * @param [blurX = 2] - The strength of the halo's blur on the x axis.
     * @param [blurY = 2] - The strength of the halo's blur on the y axis.
     * @param [passes = 1] - The number of times the halo should be drawn per frame. **Increasing this may hinder player FPS**.
     * @param [additive = true] - Sets the render mode of the halo to additive.
     * @param [ignoreZ = false] - Renders the halo through anything when set to `true`.
     */
    function Add(entities: any, color: Color, blurX = 2, blurY = 2, passes = 1, additive = true, ignoreZ = false): void;
    
    /**
     * [Client]
     * 
     * Renders a halo according to the specified table, only used internally, called from a [GM:PostDrawEffects](https://wiki.facepunch.com/gmod/GM:PostDrawEffects) hook added by the halo library.
     * @param entry - Table with info about the halo to draw.
     */
    function Render(entry: any): void;
    
    /**
     * [Client]
     * 
     * Returns the entity the halo library is currently rendering the halo for.
     * 
     * The main purpose of this function is to be used in [ENTITY:Draw](https://wiki.facepunch.com/gmod/ENTITY:Draw) in order not to draw certain parts of the entity when the halo is being rendered, so there's no halo around unwanted entity parts, such as lasers, 3D2D displays, etc.
     * 
     */
    function RenderedEntity(): Entity;

}

/**
 * The hammer library.
 */
declare namespace hammer {
    

    /**
     * [Server]
     * 
     * Sends command to Hammer, if Hammer is running with the current map loaded.
     * @param cmd - Command to send including arguments
     * All commands are in the format "command var1 var2 etc"
     * All commands that pick an entity with x y z , must use the exact position including decimals. i.e. -354.4523 123.4 
     * # List of commands
     * | Command       | Description   |
     * | ------------- | ------------- |
     * | "session_begin mapName mapVersion" | Starts a hammer edit, locking the editor. mapName is the current map without path or suffix, mapVersion is the current version in the .vmf file |
     * | "session_end" | Ends a hammer edit, unlocking the editor. |
     * | "map_check_version mapName mapVersion" | This only works after session_begin, so you'd know the right version already and this only returns ok, this function is apparently useless. |
     * | "entity_create entityClass x y z" | Creates an entity of entityClass at position x y z |
     * | "entity_delete entityClass x y z" | Deletes an entity of entityClass at position x y z |
     * | "entity_set_keyvalue entityClass x y z "key" "value"" | Set's the KeyValue pair of an entity of entityClass at x y z. The Key name and Value String must be in quotes. |
     * | "entity_rotate_incremental entityClass x y z incX incY incZ" | Rotates an entity of entityClass at x y z by incX incY incZ |
     * | "node_create nodeClass nodeID x y z" | Creates an AI node of nodeClass with nodeID at x y z you should keep nodeID unique or you will have issues |
     * | "node_delete nodeID" | Deletes node(s) with nodeID, this will delete multiple nodes if they have the same nodeID |
     * | "nodelink_create startNodeID endNodeID" | Creates a link between AI nodes startNodeID and endNodeID |
     * | "nodelink_delete startNodeID endNodeID" | Removes a link between AI nodes startNodeID and endNodeID |
     */
    function SendCommand(cmd: string): string;

}

/**
 * The hook library allows you to add hooks called by the game engine, allowing multiple scripts to modify game function.
 */
declare namespace hook {
    

    /**
     * [Shared and Menu]
     * 
     * Add a hook to be called upon the given event occurring.
     * @param eventName - The event to hook on to. This can be any <page text="GM">GM_Hooks</page> hook, gameevent after using [gameevent.Listen](https://wiki.facepunch.com/gmod/gameevent.Listen), or custom hook run with [hook.Call](https://wiki.facepunch.com/gmod/hook.Call) or [hook.Run](https://wiki.facepunch.com/gmod/hook.Run).
     * @param identifier - The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier **should** be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * The identifier can be either a [string](https://wiki.facepunch.com/gmod/string), or a [table](https://wiki.facepunch.com/gmod/table)/object with an IsValid function defined such as an [Entity](https://wiki.facepunch.com/gmod/Entity) or [Panel](https://wiki.facepunch.com/gmod/Panel). [number](https://wiki.facepunch.com/gmod/number)s and [boolean](https://wiki.facepunch.com/gmod/boolean)s, for example, are not allowed.
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.
     * @param func - The function to be called, arguments given to it depend on the identifier used.
     * **Warning:**
     * >Returning any value besides nil from the hook's function will stop other hooks of the same event down the loop from being executed. Only return a value when absolutely necessary and when you know what you are doing.
     * It WILL break other addons.
     * 
     */
    function Add(eventName: string, identifier: any, func: Function): void;
    
    /**
     * [Shared and Menu]
     * 
     * Calls all hooks associated with the given event until one returns something other than `nil`, and then returns that data.
     * 
     * In almost all cases, you should use [hook.Run](https://wiki.facepunch.com/gmod/hook.Run) instead - it calls hook.Call internally but supplies the gamemode table by itself, making your code neater.
     * @param eventName - The event to call hooks for.
     * @param gamemodeTable - If the gamemode is specified, the gamemode hook within will be called, otherwise not.
     * @param args - The arguments to be passed to the hooks.
     */
    function Call(eventName: string, gamemodeTable: any, ...args: any[]): any[];
    
    /**
     * [Shared and Menu]
     * 
     * Returns a list of all the hooks registered with [hook.Add](https://wiki.facepunch.com/gmod/hook.Add).
     * 
     */
    function GetTable(): any;
    
    /**
     * [Shared and Menu]
     * 
     * Removes the hook with the supplied identifier from the given event.
     * @param eventName - The event name.
     * @param identifier - The unique identifier of the hook to remove, usually a string.
     */
    function Remove(eventName: string, identifier: any): void;
    
    /**
     * [undefined]
     * 
     * Calls all hooks associated with the given event **until** one returns something other than `nil` and then returns that data. If no hook returns any data, it will try to call the `GAMEMODE:<eventName>`; alternative, if one exists.
     * 
     * This function internally calls [hook.Call](https://wiki.facepunch.com/gmod/hook.Call).
     * 
     * See also: [gamemode.Call](https://wiki.facepunch.com/gmod/gamemode.Call) - same as this, but does not call hooks if the gamemode hasn't defined the function.
     * 	</description>
     * 	<realm>Shared and Menu</realm>
     * 	<file line="64-L71">lua/includes/modules/hook.lua</file>
     * 	<args>
     * 		<arg name="eventName" type="string">The event to call hooks for.</arg>
     * 		<arg name="args" type="vararg">The arguments to be passed to the hooks.</arg>
     * 	</args>
     * 	<rets>
     * 		<ret name="" type="any">Returned data from called hooks.</ret>
     * 	</rets>
     * 
     */
    function Run(): void;

}

/**
 * The http library allows either the server or client to communicate with external websites via HTTP, both `GET` ([http.Fetch](https://wiki.facepunch.com/gmod/http.Fetch)) and `POST` ([http.Post](https://wiki.facepunch.com/gmod/http.Post)) are supported. A more powerful & advanced method can be used via the global [Global.HTTP](https://wiki.facepunch.com/gmod/Global.HTTP) function.
 */
declare namespace http {
    

    /**
     * [Shared and Menu]
     * 
     * Launches an asynchronous **GET** request to a HTTP server.
     * 
     * HTTP requests returning a status code >= `400` are still considered a success and will call the <page text="onSuccess">Structures/HTTPRequest</page> callback.
     * 
     * The <page text="onFailure">Structures/HTTPRequest</page> callback is usually only called on DNS or TCP errors (e.g. the website is unavailable or the domain does not exist).
     * 
     * A rough overview of possible <page text="onFailure">Structures/HTTPRequest</page> messages:
     * * `invalid url` - Invalid/empty url ( no request was attempted )
     * * `invalid request` - Steam HTTP lib failed to create a HTTP request
     * * `error` - OnComplete callback's second argument, `bError`, is `true`
     * * `unsuccessful` - OnComplete's first argument, `pResult->m_bRequestSuccessful`, returned `false`
     * 
     * **Bug [#2232](https://github.com/Facepunch/garrysmod-issues/issues/2232):**
     * >This cannot send or receive multiple headers with the same name.
     * 
     * **Note:**
     * >HTTP-requests that respond with a large body may return an `unsuccessful` error. Try using the [Range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range) header to download the file in chunks.
     * 
     * **Note:**
     * >HTTP-requests to destinations on private networks (such as `192.168.0.1`) won't work.To enable HTTP-requests to destinations on private networks use [Command Line Parameters](https://wiki.facepunch.com/gmod/Command_Line_Parameters) `-allowlocalhttp`.
     * 
     * @param url - The URL of the website to fetch.
     * @param [onSuccess = nil] - Function to be called on success. Arguments are
     * * [string](https://wiki.facepunch.com/gmod/string) body
     * * [number](https://wiki.facepunch.com/gmod/number) size - equal to [string.len](https://wiki.facepunch.com/gmod/string.len)(body).
     * * [table](https://wiki.facepunch.com/gmod/table) headers
     * * [number](https://wiki.facepunch.com/gmod/number) code - The HTTP success code.
     * @param [onFailure = nil] - Function to be called on failure. Arguments are
     * * [string](https://wiki.facepunch.com/gmod/string) error - The error message.
     * @param [headers = {}] - KeyValue table for headers.
     */
    function Fetch(url: string, onSuccess?: Function, onFailure?: Function, headers?: any): void;
    
    /**
     * [Shared and Menu]
     * 
     * Sends an asynchronous **POST** request to a HTTP server.
     * 
     * HTTP requests returning a status code >= `400` are still considered a success and will call the <page text="onSuccess">Structures/HTTPRequest</page> callback.
     * 
     * The <page text="onFailure">Structures/HTTPRequest</page> callback is usually only called on DNS or TCP errors (e.g. the website is unavailable or the domain does not exist).
     * 
     * **Bug [#2232](https://github.com/Facepunch/garrysmod-issues/issues/2232):**
     * >This cannot send or receive multiple headers with the same name.
     * 
     * **Note:**
     * >HTTP-requests that respond with a large body may return an `unsuccessful` error. Try using the [Range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range) header to download the file in chunks.
     * 
     * **Note:**
     * >HTTP-requests to destinations on private networks (such as `192.168.0.1`) won't work.To enable HTTP-requests to destinations on private networks use [Command Line Parameters](https://wiki.facepunch.com/gmod/Command_Line_Parameters) `-allowlocalhttp`.
     * 
     * @param url - The url to of the website to post.
     * @param parameters - The post parameters (x-www-form-urlencoded) to be send to the server. **Keys and values must be strings**.
     * @param [onSuccess = nil] - Function to be called on success. Arguments are
     * * [string](https://wiki.facepunch.com/gmod/string) body
     * * [string](https://wiki.facepunch.com/gmod/string) size - equal to [string.len](https://wiki.facepunch.com/gmod/string.len)(body).
     * * [table](https://wiki.facepunch.com/gmod/table) headers
     * * [number](https://wiki.facepunch.com/gmod/number) code - The HTTP success code.
     * @param [onFailure = nil] - Function to be called on failure. Arguments are
     * * [string](https://wiki.facepunch.com/gmod/string) error - The error message.
     * @param [headers = {}] - KeyValue table for headers.
     */
    function Post(url: string, parameters: any, onSuccess?: Function, onFailure?: Function, headers?: any): void;

}

/**
 * The input library allows you to gather information about the clients input devices (mouse & keyboard), such as the cursor position and whether a key is pressed or not.
 */
declare namespace input {
    

    /**
     * [Client and Menu]
     * 
     * Returns the last key captured by key trapping.
     * 
     */
    function CheckKeyTrapping(): KEY;
    
    /**
     * [Client and Menu]
     * 
     * Returns the digital value of an analog stick on the current (set up via convars) controller.
     * @param axis - The analog axis to poll. See [Enums/ANALOG](https://wiki.facepunch.com/gmod/Enums/ANALOG).
     */
    function GetAnalogValue(axis: ANALOG): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the cursor's position on the screen.
     * 
     * **Bug [#4964](https://github.com/Facepunch/garrysmod-issues/issues/4964):**
     * >On macOS, the cursor isn't locked on the middle of the screen which causes a significant offset of the positions returned by this function.
     * 
     * 
     */
    function GetCursorPos(): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Gets the button code from a button name. This is opposite of [input.GetKeyName](https://wiki.facepunch.com/gmod/input.GetKeyName).
     * @param button - The internal button name, such as <key>E</key> or <key>SHIFT</key>.
     */
    function GetKeyCode(button: string): BUTTON_CODE;
    
    /**
     * [Client and Menu]
     * 
     * Gets the button name from a numeric button code. The name needs to be translated with [language.GetPhrase](https://wiki.facepunch.com/gmod/language.GetPhrase) before being displayed.
     * 
     * **Note:**
     * >Despite the name of the function, this also works for the full range of keys in [Enums/BUTTON_CODE](https://wiki.facepunch.com/gmod/Enums/BUTTON_CODE).
     * 
     * @param button - The button, see [Enums/BUTTON_CODE](https://wiki.facepunch.com/gmod/Enums/BUTTON_CODE).
     */
    function GetKeyName(button: BUTTON_CODE): string;
    
    /**
     * [Client and Menu]
     * 
     * Gets whether the specified button code is down.
     * 
     * Unlike [input.IsKeyDown](https://wiki.facepunch.com/gmod/input.IsKeyDown) this can also detect joystick presses from [Enums/JOYSTICK](https://wiki.facepunch.com/gmod/Enums/JOYSTICK)
     * @param button - The button, valid values are in the range of [Enums/BUTTON_CODE](https://wiki.facepunch.com/gmod/Enums/BUTTON_CODE).
     */
    function IsButtonDown(button: BUTTON_CODE): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether a control key is being pressed
     * 
     */
    function IsControlDown(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Gets whether a key is down.
     * @param key - The key, see [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY).
     */
    function IsKeyDown(key: KEY): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether key trapping is activate and the next key press will be captured.
     * 
     */
    function IsKeyTrapping(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Gets whether a mouse button is down
     * @param mouseKey - The key, see [Enums/MOUSE](https://wiki.facepunch.com/gmod/Enums/MOUSE)
     */
    function IsMouseDown(mouseKey: MOUSE): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Gets whether a shift key is being pressed
     * 
     */
    function IsShiftDown(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the client's bound key for the specified console command. If the player has multiple keys bound to a single command, there is no defined behavior of which key will be returned.
     * @param binding - The binding name
     * @param [exact = false] - True if the binding should match exactly
     */
    function LookupBinding(binding: string, exact = false): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns the bind string that the given key is bound to.
     * @param key - Key from [Enums/BUTTON_CODE](https://wiki.facepunch.com/gmod/Enums/BUTTON_CODE)
     */
    function LookupKeyBinding(key: BUTTON_CODE): string;
    
    /**
     * [Client]
     * 
     * Switches to the provided weapon on the next CUserCmd generation/CreateMove call. Direct binding to [CInput::MakeWeaponSelection](https://github.com/LestaD/SourceEngine2007/blob/43a5c90a5ada1e69ca044595383be67f40b33c61/se2007/game/client/in_main.cpp#L929-L932).
     * @param weapon - The weapon entity to switch to.
     */
    function SelectWeapon(weapon: Weapon): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the cursor's position on the screen, relative to the topleft corner of the window
     * @param mouseX - X coordinate for mouse position
     * @param mouseY - Y coordinate for mouse position
     */
    function SetCursorPos(mouseX: number, mouseY: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Begins waiting for a key to be pressed so we can save it for [input.CheckKeyTrapping](https://wiki.facepunch.com/gmod/input.CheckKeyTrapping). Used by the [DBinder](https://wiki.facepunch.com/gmod/DBinder).
     * 
     */
    function StartKeyTrapping(): void;
    
    /**
     * [Client and Menu]
     * 
     * Translates a console command alias, basically reverse of the `alias` console command.
     * @param command - The alias to lookup.
     */
    function TranslateAlias(command: string): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether a key was initially pressed in the same frame this function was called.
     * 
     * This function only works in Move hooks, and will detect key presses even in main menu or when a typing in a text field.
     * @param key - The key, see [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY).
     */
    function WasKeyPressed(key: KEY): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether a key was released in the same frame this function was called.
     * 
     * This function only works in Move hooks, and will detect key releases even in main menu or when a typing in a text field.
     * @param key - The key, see [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY).
     */
    function WasKeyReleased(key: KEY): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the key is being held down or not.
     * 
     * This function only works in Move hooks, and will detect key events even in main menu or when a typing in a text field.
     * @param key - The key to test, see [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY)
     */
    function WasKeyTyped(key: KEY): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether a mouse key was double pressed in the same frame this function was called.
     * 
     * If this function returns true, [input.WasMousePressed](https://wiki.facepunch.com/gmod/input.WasMousePressed) will return false.
     * 
     * This function only works in Move hooks, and will detect mouse events even in main menu or when a typing in a text field.
     * @param button - The mouse button to test, see [Enums/MOUSE](https://wiki.facepunch.com/gmod/Enums/MOUSE)
     */
    function WasMouseDoublePressed(button: MOUSE): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether a mouse key was initially pressed in the same frame this function was called.
     * 
     * If [input.WasMouseDoublePressed](https://wiki.facepunch.com/gmod/input.WasMouseDoublePressed) returns true, this function will return false.
     * 
     * This function only works in Move hooks, and will detect mouse events even in main menu or when a typing in a text field.
     * @param key - The key, see [Enums/MOUSE](https://wiki.facepunch.com/gmod/Enums/MOUSE)
     */
    function WasMousePressed(key: MOUSE): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether a mouse key was released in the same frame this function was called.
     * 
     * This function only works in Move hooks, and will detect mouse events even in main menu or when a typing in a text field.
     * @param key - The key to test, see [Enums/MOUSE](https://wiki.facepunch.com/gmod/Enums/MOUSE)
     */
    function WasMouseReleased(key: MOUSE): boolean;

}

/**
 * Library to work with the [LuaJIT](http://luajit.org/) functionality of gmod.
 */
declare namespace jit {
    

    /**
     * [Shared and Menu]
     * 
     * A variable containing the target architecture name: `x86`, `x64`, `arm`, `ppc`, `ppcspe`, or `mips`. This will be `x86` or `x64` in GMod.
     * 
     */
    function arch(): string;
    
    /**
     * [Shared and Menu]
     * 
     * You can attach callbacks to a number of compiler events with jit.attach. The callback can be called:
     * 
     * * when a function has been compiled to bytecode ("bc");
     * * when trace recording starts or stops ("trace");
     * * as a trace is being recorded ("record");
     * * or when a trace exits through a side exit ("texit").
     * 
     * Set a callback with jit.attach(callback, "event") and clear the same callback with jit.attach(callback)
     * 
     * **Warning:**
     * >This function isn't officially documented on LuaJIT wiki, use it at your own risk.
     * 
     * **Warning:**
     * >Using these constantly (especially bytecode) can be very performance heavy due to the constant stream of data being compiled at a time.
     * 
     * @param callback - The callback function.
     * The arguments passed to the callback depend on the event being reported:
     * * "bc":
     * [function](https://wiki.facepunch.com/gmod/function) func - The function that's just been recorded
     * * "trace":
     * [string](https://wiki.facepunch.com/gmod/string) what - description of the trace event: "flush", "start", "stop", "abort". Available for all events.
     * [number](https://wiki.facepunch.com/gmod/number) tr - The trace number. Not available for flush.
     * [function](https://wiki.facepunch.com/gmod/function) func - The function being traced. Available for start and abort.
     * [number](https://wiki.facepunch.com/gmod/number) pc - The program counter - the bytecode number of the function being recorded (if this a Lua function). Available for start and abort.
     * [number](https://wiki.facepunch.com/gmod/number) otr - start: the parent trace number if this is a side trace, abort: abort code
     * [string](https://wiki.facepunch.com/gmod/string) oex - start: the exit number for the parent trace, abort: abort reason (string)
     * * "record":
     * [number](https://wiki.facepunch.com/gmod/number) tr - The trace number. Not available for flush.
     * [function](https://wiki.facepunch.com/gmod/function) func - The function being traced. Available for start and abort.
     * [number](https://wiki.facepunch.com/gmod/number) pc - The program counter - the bytecode number of the function being recorded (if this a Lua function). Available for start and abort.
     * [number](https://wiki.facepunch.com/gmod/number) depth  - The depth of the inlining of the current bytecode.
     * * "texit":
     * [number](https://wiki.facepunch.com/gmod/number) tr - The trace number. Not available for flush.
     * [number](https://wiki.facepunch.com/gmod/number) ex - The exit number
     * [number](https://wiki.facepunch.com/gmod/number) ngpr - The number of general-purpose and floating point registers that are active at the exit.
     * [number](https://wiki.facepunch.com/gmod/number) nfpr - The number of general-purpose and floating point registers that are active at the exit.
     * @param event - The event to hook into.
     */
    function attach(callback: Function, event: string): void;
    
    /**
     * [Shared and Menu]
     * 
     * Flushes the whole cache of compiled code.
     * 
     */
    function flush(): void;
    
    /**
     * [Shared and Menu]
     * 
     * Disables LuaJIT Lua compilation.
     * 
     */
    function off(): void;
    
    /**
     * [Shared and Menu]
     * 
     * Enables LuaJIT Lua compilation.
     * 
     */
    function on(): void;
    
    /**
     * [Shared and Menu]
     * 
     * This is NOT a function, it's a variable containing the target OS name: `Windows`, `Linux`, `OSX`, `BSD`, `POSIX` or `Other`.
     * 
     */
    function os(): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the status of the JIT compiler and the current optimizations enabled.
     * 
     */
    function status(): LuaMultiReturn<[boolean, any]>;
    
    /**
     * [Shared and Menu]
     * 
     * A variable containing the LuaJIT version string. This is `LuaJIT 2.0.4` in GMod, and `LuaJIT 2.1.0-beta3` on the x86-64 branch of GMod.
     * 
     */
    function version(): string;
    
    /**
     * [Shared and Menu]
     * 
     * A variable containing the version number of the LuaJIT core.
     * 
     */
    function version_num(): number;
/**
     * 
     */
    namespace opt {
        

        /**
         * [Shared and Menu]
         * 
         * JIT compiler optimization control. The opt sub-module provides the backend for the -O command line LuaJIT option.
         * You can also use it programmatically, e.g.:
         * 
         * ```
         * jit.opt.start(2) -- same as -O2
         * jit.opt.start("-dce")
         * jit.opt.start("hotloop=10", "hotexit=2")
         * ```
         * 
         * 	A list of LuaJIT -O command line options can be found here(a table of various optimization levels are displayed towards the bottom of the page along with exactly which optimization options are enabled for each level): http://luajit.org/running.html
         * @param args - 
         */
        function start(...args: any[]): void;

    }

/**
     * 
     */
    namespace util {
        

        /**
         * [Shared and Menu]
         * 
         * Returns bytecode of a function at a position.
         * @param func - Function to retrieve bytecode from.
         * @param pos - Position of the bytecode to retrieve.
         */
        function funcbc(func: Function, pos: number): LuaMultiReturn<[number, number]>;
        
        /**
         * [Shared and Menu]
         * 
         * Retrieves LuaJIT information about a given function, similarly to [debug.getinfo](https://wiki.facepunch.com/gmod/debug.getinfo). Possible table fields:
         * * linedefined: as for [debug.getinfo](https://wiki.facepunch.com/gmod/debug.getinfo)
         * * lastlinedefined: as for [debug.getinfo](https://wiki.facepunch.com/gmod/debug.getinfo)
         * * params: the number of parameters the function takes
         * * stackslots: the number of stack slots the function's local variable use
         * * upvalues: the number of upvalues the function uses
         * * bytecodes: the number of bytecodes it the compiled function
         * * gcconsts: the number of garbage collectable constants
         * * nconsts: the number of lua_Number (double) constants
         * * children: Boolean representing whether the function creates closures
         * * currentline: as for [debug.getinfo](https://wiki.facepunch.com/gmod/debug.getinfo)
         * * isvararg: if the function is a vararg function
         * * source: as for [debug.getinfo](https://wiki.facepunch.com/gmod/debug.getinfo)
         * * loc: a string describing the source and currentline, like "<source>:<line>"
         * * ffid: the fast function id of the function (if it is one). In this case only upvalues above and addr below are valid
         * * addr: the address of the function (if it is not a Lua function). If it's a C function rather than a fast function, only upvalues above is valid*
         * @param func - Function or Proto to retrieve info about.
         * @param [pos = 0] - 
         */
        function funcinfo(func: Function, pos = 0): any;
        
        /**
         * [Shared and Menu]
         * 
         * Gets a constant at a certain index in a function.
         * 
         * **Warning:**
         * >This function isn't officially documented on LuaJIT wiki, use it at your own risk.
         * 
         * **Note:**
         * >Numbers constants goes from 0 (included) to n-1, n being the value of nconsts in [jit.util.funcinfo](https://wiki.facepunch.com/gmod/jit.util.funcinfo) in other words, the consts goes from (nconsts-1) to -n
         * 
         * **Note:**
         * >This function only works for Lua defined functions.
         * 
         * @param func - Function to get constant from
         * @param index - Constant index (counting down from the top of the function at -1)
         */
        function funck(func: Function, index: number): any;
        
        /**
         * [Shared and Menu]
         * 
         * Does the exact same thing as debug.getupvalue except it only returns the name, not the name and the object. The upvalue indexes also start at 0 rather than 1, so doing jit.util.funcuvname(func, 0) will get you the same name as debug.getupvalue(func, 1)
         * 
         * **Warning:**
         * >This function isn't officially documented on LuaJIT wiki, use it at your own risk.
         * 
         * @param func - Function to get the upvalue indexed from
         * @param index - The upvalue index, starting from 0
         */
        function funcuvname(func: Function, index: number): string;
        
        /**
         * [Shared and Menu]
         * 
         * Gets the address of a function from a list of functions, for the list see [Ircalladdr Functions](https://wiki.facepunch.com/gmod/Ircalladdr_Functions)
         * 
         * **Warning:**
         * >This function isn't officially documented on LuaJIT wiki, use it at your own risk.
         * 
         * @param index - The index of the function address to get from the ircalladdr func array (starting from 0)
         */
        function ircalladdr(index: number): number;
        
        /**
         * [Shared and Menu]
         * 
         * @param exitno - exit number to retrieve exit stub address from (gotten via [jit.attach](https://wiki.facepunch.com/gmod/jit.attach) with the texit event)
         */
        function traceexitstub(exitno: number): number;
        
        /**
         * [Shared and Menu]
         * 
         * Return table fields:
         * * link (number): the linked trace (0 for link types: none, return, interpreter)
         * * nk (number): the lowest IR constant (???)
         * * nins (number): the next IR instruction (???)
         * * linktype (string): the link type (none, root, loop, tail-recursion, up-recursion, down-recursion, interpreter, return)
         * * nexit (number): number of snapshots (for use with [jit.util.tracesnap](https://wiki.facepunch.com/gmod/jit.util.tracesnap))
         * @param trace - trace index to retrieve info for (gotten via [jit.attach](https://wiki.facepunch.com/gmod/jit.attach))
         */
        function traceinfo(trace: number): any;
        
        /**
         * [Shared and Menu]
         * 
         * @param tr - 
         * @param index - 
         */
        function traceir(tr: number, index: number): LuaMultiReturn<[number, number, number, number, number]>;
        
        /**
         * [Shared and Menu]
         * 
         * @param tr - 
         * @param index - 
         */
        function tracek(tr: number, index: number): LuaMultiReturn<[any, number, number]>;
        
        /**
         * [Shared and Menu]
         * 
         * @param tr - 
         */
        function tracemc(tr: number): LuaMultiReturn<[string, number, number]>;
        
        /**
         * [Shared and Menu]
         * 
         * Return table fields:
         * * 0 (ref) (number): first IR ref for the snapshot
         * * 1 (nslots) (number): the number of valid slots 
         * * all indexes except first 2 and last (there might not be any of these): the snapshot map
         * * last index in table (number): -16777216 (255 << 24)
         * @param tr - trace index to retrieve snapshot for (gotten via [jit.attach](https://wiki.facepunch.com/gmod/jit.attach))
         * @param sn - snapshot index for trace (starting from 0 to nexit - 1, nexit gotten via [jit.util.traceinfo](https://wiki.facepunch.com/gmod/jit.util.traceinfo))
         */
        function tracesnap(tr: number, sn: number): any;

    }
}

/**
 * The killicon library is used to add to and control the icons that appear in the top right of your screen when a player is killed.
 */
declare namespace killicon {
    

    /**
     * [Client]
     * 
     * Creates new kill icon using a texture.
     * @param class_ - Weapon or entity class
     * @param texture - Path to the texture
     * @param color - Color of the kill icon
     */
    function Add(class_: string, texture: string, color: any): void;
    
    /**
     * [Client]
     * 
     * Creates kill icon from existing one.
     * @param new_class - New class of the kill icon
     * @param existing_class - Already existing kill icon class
     */
    function AddAlias(new_class: string, existing_class: string): void;
    
    /**
     * [Client]
     * 
     * Adds kill icon for given weapon/entity class using special font.
     * @param class_ - Weapon or entity class.
     * @param font - Font to be used.
     * @param symbol - The symbol to be used.
     * @param color - Color of the killicon.
     * @param [heightScale = 1] - Used internally to correct certain killicons to more closely match their visual size.
     */
    function AddFont(class_: string, font: string, symbol: string, color: any, heightScale = 1): void;
    
    /**
     * [Client]
     * 
     * Creates new kill icon using a sub-rectangle of a texture.
     * @param class_ - Weapon or entity class this killicon is for.
     * @param texture - Path to the texture.
     * @param color - Color of the kill icon.
     * @param x - The start position (X axis) of the rectangle on the given texture. This is in texture coordinates.
     * @param y - The start position (Y axis) of the rectangle on the given texture. This is in texture coordinates.
     * @param w - The width of the rectangle on the given texture. This is in texture coordinates.
     * @param h - The height of the rectangle on the given texture. This is in texture coordinates.
     */
    function AddTexCoord(class_: string, texture: string, color: any, x: number, y: number, w: number, h: number): void;
    
    /**
     * [Client]
     * 
     * Draws a kill icon.
     * 
     * @deprecated This function applies unpredictable vertical offsets, you should use [killicon.Render](https://wiki.facepunch.com/gmod/killicon.Render) instead, which does not suffer from this issue.
     * 
     * @param x - X coordinate of the icon
     * @param y - Y coordinate of the icon
     * @param name - Classname of the kill icon
     * @param alpha - Alpha/transparency value ( 0 - 255 ) of the icon
     */
    function Draw(x: number, y: number, name: string, alpha: number): void;
    
    /**
     * [Client]
     * 
     * Checks if kill icon exists for given class.
     * @param class_ - The class to test
     */
    function Exists(class_: string): boolean;
    
    /**
     * [Client]
     * 
     * Returns the size of a kill icon.
     * @param name - Classname of the kill icon
     * @param [dontEqualizeHeight = false] - If set to `true`, returns the real size of the kill icon, without trying to equalize the height to match the default kill icon font.
     */
    function GetSize(name: string, dontEqualizeHeight = false): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client]
     * 
     * Renders a kill icon.
     * @param x - X coordinate of the icon
     * @param y - Y coordinate of the icon
     * @param name - Classname of the kill icon
     * @param alpha - Alpha/transparency value ( 0 - 255 ) of the icon
     * @param dontEqualizeHeight - Do not rescale the icon to match the default kill icon font.
     */
    function Render(x: number, y: number, name: string, alpha: number, dontEqualizeHeight: number): void;

}

/**
 * The language library is used for translation.
 */
declare namespace language {
    

    /**
     * [Client and Menu]
     * 
     * Adds a language item. Language placeholders preceded with "#" are replaced with full text in Garry's Mod once registered with this function.
     * @param placeholder - The key for this phrase, without the preceding "#".
     * @param fulltext - The phrase that should be displayed whenever this key is used.
     */
    function Add(placeholder: string, fulltext: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Retrieves the translated version of inputted string. Useful for concentrating multiple translated strings.
     * @param phrase - The phrase to translate
     */
    function GetPhrase(phrase: string): string;

}

/**
 * The list library allows you add and retrieve values to and from lists. The list library is basically a fancy wrapper for a table, but with much more limited functionality. See [Default Lists](https://wiki.facepunch.com/gmod/Default_Lists) for a page of default Sandbox lists.
 */
declare namespace list {
    

    /**
     * [Shared and Menu]
     * 
     * Adds an item to a named list
     * @param identifier - The list identifier
     * @param item - The item to add to the list
     */
    function Add(identifier: string, item: any): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns true if the list contains the value. (as a value - not a key)
     * 
     * For a function that looks for a key and not a value see [list.HasEntry](https://wiki.facepunch.com/gmod/list.HasEntry).
     * @param list - List to search through
     * @param value - The value to test
     */
    function Contains(list: string, value: any): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a copy of the list stored at identifier
     * @param identifier - The list identifier
     */
    function Get(identifier: string): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the actual table of the list stored at identifier. Modifying this will affect the stored list
     * @param identifier - The list identifier
     * @param [dontCreate = false] - If the list at given identifier does not exist, do **not** create it.
     */
    function GetForEdit(identifier: string, dontCreate = false): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a list of all lists currently in use.
     * 
     */
    function GetTable(): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns true if the list contains the given key.
     * 
     * For a function that looks for values and not keys see [list.Contains](https://wiki.facepunch.com/gmod/list.Contains).
     * @param list - List to search through
     * @param key - The key to test
     */
    function HasEntry(list: string, key: any): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Sets a specific position in the named list to a value.
     * @param identifier - The list identifier
     * @param key - The key in the list to set
     * @param item - The item to set to the list as key
     */
    function Set(identifier: string, key: any, item: any): void;

}

/**
 * The markup library only contains a single function to create a [MarkupObject](https://wiki.facepunch.com/gmod/MarkupObject).
 */
declare namespace markup {
    

    /**
     * [Client and Menu]
     * 
     * A convenience function that converts a [Color](https://wiki.facepunch.com/gmod/Color) into its markup ready string representation.
     * @param col - The [Color](https://wiki.facepunch.com/gmod/Color) to convert.
     */
    function Color(col: Color): string;
    
    /**
     * [Client and Menu]
     * 
     * Converts a string to its escaped, markup-safe equivalent.
     * @param text - The string to sanitize.
     */
    function Escape(text: string): string;
    
    /**
     * [Client and Menu]
     * 
     * Parses markup into a [MarkupObject](https://wiki.facepunch.com/gmod/MarkupObject). Currently, this only supports fonts and colors as demonstrated in the example.
     * @param markup - The markup to be parsed.
     * @param [maxWidth = nil] - The max width of the output
     */
    function Parse(markup: string, maxWidth?: number): MarkupObject;

}

/**
 * The math library is a standard Lua library that provides functions for manipulating numbers. In Garry's Mod several additional math functions have been added.
 */
declare namespace math {
    

    /**
     * [Shared and Menu]
     * 
     * Calculates the absolute value of a number (effectively removes any negative sign).
     * @param x - The number to get the absolute value of.
     */
    function abs(x: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the [arccosine](https://en.wikipedia.org/wiki/Arccosine) of the given number.
     * @param cos - Cosine value in range of -1 to 1.
     */
    function acos(cos: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Calculates the difference between two angles.
     * @param a - The first angle.
     * @param b - The second angle.
     */
    function AngleDifference(a: number, b: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Gradually approaches the target value by the specified amount.
     * @param current - The value we're currently at.
     * @param target - The target value. This function will never overshoot this value.
     * @param change - The amount that the current value is allowed to change by to approach the target. (It makes no difference whether this is positive or negative.)
     */
    function Approach(current: number, target: number, change: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Increments an angle towards another by specified rate.
     * 
     * **Note:**
     * >This function is for numbers representing angles (0-360), NOT [Angle](https://wiki.facepunch.com/gmod/Angle) objects!
     * 
     * @param currentAngle - The current angle to increase
     * @param targetAngle - The angle to increase towards
     * @param rate - The amount to approach the target angle by
     */
    function ApproachAngle(currentAngle: number, targetAngle: number, rate: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the [arcsine](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions) of the given number.
     * @param normal - Sine value in the range of -1 to 1.
     */
    function asin(normal: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the [arctangent](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions) of the given number.
     * @param normal - Tangent value.
     */
    function atan(normal: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * functions like [math.atan](https://wiki.facepunch.com/gmod/math.atan)(y / x), except it also takes into account the quadrant of the angle and so doesn't have a limited range of output.
     * 
     * **Note:**
     * >The Y argument comes first!
     * 
     * @param y - Y coordinate.
     * @param x - X coordinate.
     */
    function atan2(y: number, x: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Converts a binary string into a number.
     * @param string - Binary string to convert
     */
    function BinToInt(string: string): number;
    
    /**
     * [Shared and Menu]
     * 
     * Basic code for Bezier-Spline algorithm.
     * @param tDiff - From 0 to 1, where alongside the spline the point will be.
     * @param tPoints - A table of [Vector](https://wiki.facepunch.com/gmod/Vector)s. The amount cannot be less than 4.
     * @param tMax - Just leave this at 1.
     */
    function BSplinePoint(tDiff: number, tPoints: any, tMax: number): Vector;
    
    /**
     * [Shared and Menu]
     * 
     * **.**
     * 
     * Basic code for Bezier-Spline algorithm, helper function for [math.BSplinePoint](https://wiki.facepunch.com/gmod/math.BSplinePoint).
     * @param i - 
     * @param k - 
     * **Bug :**
     * >Sending in a value < 1 will result in an infinite loop.
     * 
     * @param t - 
     * @param tinc - 
     */
    function calcBSplineN(i: number, k: number, t: number, tinc: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Ceils or rounds a number up.
     * @param number - The number to be rounded up.
     */
    function ceil(number: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Cubic Hermite spline algorithm.
     * @param frac - From 0 to 1, where alongside the spline the point will be.
     * @param point0 - First point for the spline.
     * @param tan0 - Tangent for the first point for the spline.
     * @param point1 - Second point for the spline.
     * @param tan1 - Tangent for the second point for the spline.
     */
    function CHSpline(frac: number, point0: Vector, tan0: Vector, point1: Vector, tan1: Vector): Vector;
    
    /**
     * [Shared and Menu]
     * 
     * Clamps a number between a minimum and maximum value.
     * @param input - The number to clamp.
     * @param min - The minimum value, this function will **never** return a number less than this.
     * @param max - The maximum value, this function will **never** return a number greater than this.
     */
    function Clamp(input: number, min: number, max: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the [cosine](https://en.wikipedia.org/wiki/Trigonometric_functions#cos) of given angle.
     * @param number - Angle in radians
     */
    function cos(number: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the [hyperbolic cosine](https://en.wikipedia.org/wiki/Cosh_(mathematical_function)) of the given angle.
     * @param number - Angle in radians.
     */
    function cosh(number: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Lerp point between 4 control points with cubic bezier.
     * 
     * See [math.QuadraticBezier](https://wiki.facepunch.com/gmod/math.QuadraticBezier) for a similar function which works with 3 control points.
     * @param frac - The fraction for finding the result. This number is clamped between 0 and 1.
     * @param p0 - First control point
     * @param p1 - First tangent
     * @param p2 - Second tangent
     * @param p3 - Second control point
     */
    function CubicBezier(frac: number, p0: Vector, p1: Vector, p2: Vector, p3: Vector): Vector;
    
    /**
     * [Shared and Menu]
     * 
     * Converts radians to degrees.
     * @param radians - Value to be converted to degrees.
     */
    function deg(radians: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the difference between two points in 2D space. Alias of [math.Distance](https://wiki.facepunch.com/gmod/math.Distance).
     * 
     * @deprecated You should use [math.Distance](https://wiki.facepunch.com/gmod/math.Distance) instead
     * 
     * @param x1 - X position of first point
     * @param y1 - Y position of first point
     * @param x2 - X position of second point
     * @param y2 - Y position of second point
     */
    function Dist(x1: number, y1: number, x2: number, y2: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the difference between two points in 2D space.
     * @param x1 - X position of first point
     * @param y1 - Y position of first point
     * @param x2 - X position of second point
     * @param y2 - Y position of second point
     */
    function Distance(x1: number, y1: number, x2: number, y2: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the squared difference between two points in 2D space. This is computationally faster than [math.Distance](https://wiki.facepunch.com/gmod/math.Distance).
     * @param x1 - X position of first point
     * @param y1 - Y position of first point
     * @param x2 - X position of second point
     * @param y2 - Y position of second point
     */
    function DistanceSqr(x1: number, y1: number, x2: number, y2: number): number;
    
    /**
     * [Shared]
     * 
     * 
     */
    function ease(): void;
    
    /**
     * [Shared and Menu]
     * 
     * Calculates the progress of a value fraction, taking in to account given easing fractions
     * @param progress - Fraction of the progress to ease, from 0 to 1
     * @param easeIn - Fraction of how much easing to begin with
     * @param easeOut - Fraction of how much easing to end with
     */
    function EaseInOut(progress: number, easeIn: number, easeOut: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the x power of the Euler constant.
     * @param exponent - The exponent for the function.
     */
    function exp(exponent: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Simple function that calculates [factorial](https://en.wikipedia.org/wiki/Factorial) of a whole number.
     * @param val_in - An whole number to get a factorial of. Decimal numbers will be treated as whole numbers.
     */
    function Factorial(val_in: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Floors or rounds a number down.
     * @param number - The number to be rounded down.
     */
    function floor(number: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the modulus of the specified values.
     * 
     * While this is similar to the % operator, **it will return a negative value if the first argument is negative**, whereas the % operator will return a `positive` value **even if the first operand is negative**.
     * @param base - The base value.
     * @param modulator - The modulator.
     */
    function fmod(base: number, modulator: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * **Lua reference description**: Returns `m` and `e` such that `x = m2e`, `e` is an integer and the absolute value of `m` is in the range ((0.5, 1) (or zero when x is zero).
     * 
     * Used to split the number value into a normalized fraction and an exponent. Two values are returned: the first is a multiplier in the range `1/2` (**inclusive**) to `1` (**exclusive**) and the second is an integer exponent.
     * 
     * The result is such that `x = m*2^e`.
     * @param x - The value to get the normalized fraction and the exponent from.
     */
    function frexp(x: number): LuaMultiReturn<[number, number]>;
    
    /**
     * [Shared and Menu]
     * 
     * A variable that effectively represents infinity, in the sense that in any numerical comparison every number will be less than this.
     * 
     * For example, if `x` is a number, `x > math.huge` will **NEVER** be `true` except in the case of overflow (see below).
     * 
     * Lua will consider any number greater than or equal to `2^1024` (the exponent limit of a [double](http://en.wikipedia.org/wiki/Double-precision_floating-point_format)) as `inf` and hence equal to this.
     * 
     */
    function huge(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Converts an integer to a binary (base-2) string.
     * @param int - Number to be converted.
     */
    function IntToBin(int: number): string;
    
    /**
     * [Shared and Menu]
     * 
     * Takes a normalised number and returns the floating point representation.
     * @param normalizedFraction - The value to get the normalized fraction and the exponent from.
     * @param exponent - The value to get the normalized fraction and the exponent from.
     */
    function ldexp(normalizedFraction: number, exponent: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * With one argument, return the natural logarithm of x (to base e).
     * 
     * With two arguments, return the logarithm of x to the given base, calculated as log(x)/log(base).
     * @param x - The value to get the base from exponent from.
     * @param [base = e] - The logarithmic base.
     */
    function log(x: number, base?: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the base-10 logarithm of x. This is usually more accurate than math.log(x, 10).
     * @param x - The value to get the base from exponent from.
     */
    function log10(x: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the largest value of all arguments.
     * @param numbers - Numbers to get the largest from
     */
    function max(...numbers: any[]): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the smallest value of all arguments.
     * @param numbers - Numbers to get the smallest from.
     */
    function min(...numbers: any[]): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the modulus of the specified values. Same as [math.fmod](https://wiki.facepunch.com/gmod/math.fmod).
     * 
     * @deprecated This is removed in Lua versions later than what GMod is currently using. You should use the % operator or [math.fmod](https://wiki.facepunch.com/gmod/math.fmod) instead.
     * 
     * @param base - The base value
     * @param modulator - Modulator
     */
    function mod(base: number, modulator: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the integral and fractional component of the modulo operation.
     * @param base - The base value.
     */
    function modf(base: number): LuaMultiReturn<[number, number]>;
    
    /**
     * [Shared and Menu]
     * 
     * Normalizes angle, so it returns value between -180 and 180.
     * @param angle - The angle to normalize, in degrees.
     */
    function NormalizeAngle(angle: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * A variable containing the mathematical constant pi. (`3.1415926535898`)
     * 
     * See also: [Trigonometry](https://wiki.facepunch.com/gmod/Trigonometry)
     * 
     * **Note:**
     * >It should be noted that due to the nature of floating point numbers, results of calculations with `math.pi` may not be what you expect. See second example below.
     * 
     * 
     */
    function pi(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns x raised to the power y.
     * In particular, math.pow(1.0, x) and math.pow(x, 0.0) always return 1.0, even when x is a zero or a [nan](https://wiki.facepunch.com/gmod/nan). If both x and y are finite, x is negative, and y is not an integer then math.pow(x, y) is undefined.
     * @param x - Base.
     * @param y - Exponent.
     */
    function pow(x: number, y: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Lerp point between 3 control points with quadratic bezier.
     * 
     * See [math.CubicBezier](https://wiki.facepunch.com/gmod/math.CubicBezier) for a function which works with 4 control points.
     * @param frac - The fraction for finding the result. This number is clamped between 0 and 1.
     * @param p0 - First control point
     * @param p1 - Tangent
     * @param p2 - Second control point
     */
    function QuadraticBezier(frac: number, p0: Vector, p1: Vector, p2: Vector): Vector;
    
    /**
     * [Shared and Menu]
     * 
     * Converts an angle in degrees to it's equivalent in radians.
     * @param degrees - The angle measured in degrees.
     */
    function rad(degrees: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a random float between min and max.
     * 
     * See also [math.random](https://wiki.facepunch.com/gmod/math.random)
     * @param min - The minimum value.
     * @param max - The maximum value.
     */
    function Rand(min: number, max: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * When called without arguments, returns a uniform pseudo-random real number in the range 0 to 1 which includes 0 but excludes 1.
     * 
     * When called with an integer number m, returns a uniform pseudo-random integer in the range 1 to m inclusive.
     * 
     * When called with two integer numbers m and n, returns a uniform pseudo-random integer in the range m to n inclusive.
     * 
     * See also [math.Rand](https://wiki.facepunch.com/gmod/math.Rand)
     * @param [m = nil] - If m is the only parameter: upper limit.
     * If n is also provided: lower limit.
     * If provided, this must be an integer.
     * @param [n = nil] - Upper limit.
     * If provided, this must be an integer.
     */
    function random(m?: number, n?: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Seeds the random number generator. The same seed will guarantee the same sequence of numbers each time with [math.random](https://wiki.facepunch.com/gmod/math.random).
     * 
     * For shared random values across predicted realms, use [util.SharedRandom](https://wiki.facepunch.com/gmod/util.SharedRandom).
     * 
     * **Warning:**
     * >Incorrect usage of this function will affect `all` random numbers in the game.
     * 
     * @param seed - The new seed
     */
    function randomseed(seed: number): void;
    
    /**
     * [Shared and Menu]
     * 
     * Remaps the value from one range to another
     * @param value - The value
     * @param inMin - The minimum of the initial range
     * @param inMax - The maximum of the initial range
     * @param outMin - The minimum of new range
     * @param outMax - The maximum of new range
     */
    function Remap(value: number, inMin: number, inMax: number, outMin: number, outMax: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Rounds the given value to the nearest whole number or to the given decimal places.
     * @param value - The value to round.
     * @param [decimals = 0] - The decimal places to round to.
     */
    function Round(value: number, decimals = 0): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the [sine](https://en.wikipedia.org/wiki/Trigonometric_functions) of given angle.
     * @param number - Angle in radians
     */
    function sin(number: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the [hyperbolic sine](https://en.wikipedia.org/wiki/Hyperbolic_functions) of the given angle.
     * @param number - Angle in radians.
     */
    function sinh(number: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Snaps a number to the closest multiplicative of given number. See also [Angle:SnapTo](https://wiki.facepunch.com/gmod/Angle:SnapTo).
     * @param input - The number to snap.
     * @param snapTo - What to snap the input number to.
     */
    function SnapTo(input: number, snapTo: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the square root of the number.
     * @param value - Value to get the square root of.
     */
    function sqrt(value: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the tangent of the given angle.
     * @param value - Angle in radians
     */
    function tan(value: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the [hyperbolic tangent](https://en.wikipedia.org/wiki/Hyperbolic_functions) of the given number.
     * @param number - Angle in radians.
     */
    function tanh(number: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * A variable containing the mathematical constant tau, which is equivalent to 2*[math.pi](https://wiki.facepunch.com/gmod/math.pi). (`6.28318530718`)
     * 
     * See also: [Trigonometry](https://wiki.facepunch.com/gmod/Trigonometry)
     * 
     * **Note:**
     * >It should be noted that due to the nature of floating point numbers, results of calculations with `math.tau` may not be what you expect. See the second example on [math.pi](https://wiki.facepunch.com/gmod/math.pi) page.
     * 
     * 
     */
    function tau(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the fraction of where the current time is relative to the start and end times
     * @param start - Start time in seconds
     * @param end - End time in seconds
     * @param current - Current time in seconds
     */
    function TimeFraction(start: number, end: number, current: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Trim unwanted decimal places.
     * @param num - The number to truncate
     * @param [digits = 0] - The amount of digits to keep after the point.
     */
    function Truncate(num: number, digits = 0): number;

}

/**
 * Add proxies to materials.
 */
declare namespace matproxy {
    

    /**
     * [Client]
     * 
     * A list of all **active** material proxies.
     * 
     */
    function ActiveList(): any;
    
    /**
     * [Client]
     * 
     * Adds a material proxy.
     * @param MatProxyData - The information about the proxy. See [Structures/MatProxyData](https://wiki.facepunch.com/gmod/Structures/MatProxyData)
     */
    function Add(MatProxyData: MatProxyData): void;
    
    /**
     * [Client]
     * 
     * Called by the engine from `OnBind`. Calls <page text="bind">Structures/MatProxyData#bind</page> method of the Lua material proxy.
     * @param uname - The material proxy name.
     * @param mat - The material the proxy is being applied to.
     * @param ent - The entity the material is applied to.
     */
    function Call(uname: string, mat: IMaterial, ent: Entity): void;
    
    /**
     * [Client]
     * 
     * Called by the engine from `OnBind`. Calls <page text="init">Structures/MatProxyData#init</page> method of the Lua material proxy.
     * @param name - Name of the material proxy.
     * @param uname - Name for the active material proxy instance.
     * @param mat - Material the material proxy is applied to.
     * @param values - `.vmt` shader parameters of the material.
     */
    function Init(name: string, uname: string, mat: IMaterial, values: any): void;
    
    /**
     * [Client]
     * 
     * A list of all material proxies registered with [matproxy.Add](https://wiki.facepunch.com/gmod/matproxy.Add).
     * 
     */
    function ProxyList(): any;
    
    /**
     * [Client]
     * 
     * Called by engine to determine if a certain material proxy is registered in Lua.
     * @param name - The name of proxy in question
     */
    function ShouldOverrideProxy(name: string): boolean;

}

/**
 * The menu library.
 */
declare namespace menu {
    

    /**
     * [Client]
     * 
     * Used by "Demo to Video" to record the frame.
     * 
     */
    function RecordFrame(): void;

}

/**
 * The menubar library.
 */
declare namespace menubar {
    

    /**
     * [Client]
     * 
     * Creates the menu bar ( The bar at the top of the screen when holding C or Q in sandbox ) and docks it to the top of the screen. It will not appear.
     * 
     * Calling this multiple times will **NOT** remove previous panel.
     * 
     */
    function Init(): void;
    
    /**
     * [Client]
     * 
     * Checks if the supplied panel is parent to the menubar
     * @param pnl - The panel to check
     */
    function IsParent(pnl: Panel): boolean;
    
    /**
     * [Client]
     * 
     * Parents the menubar to the panel and displays the menubar.
     * @param pnl - The panel to parent to
     */
    function ParentTo(pnl: Panel): void;

}

/**
 * The mesh library allows you to create meshes. A mesh is a set of vertices that define a 3D shape, for constant meshes you should use the [IMesh](https://wiki.facepunch.com/gmod/IMesh) object instead.
 */
declare namespace mesh {
    

    /**
     * [Client]
     * 
     * Pushes the new vertex data onto the render stack.
     * 
     */
    function AdvanceVertex(): void;
    
    /**
     * [Client]
     * 
     * Starts a new dynamic mesh. If an [IMesh](https://wiki.facepunch.com/gmod/IMesh) is passed, it will use that mesh instead.
     * @param [mesh = nil] - Mesh to build. This argument can be removed if you wish to build a "dynamic" mesh. See examples below.
     * @param primitiveType - Primitive type, see [Enums/MATERIAL](https://wiki.facepunch.com/gmod/Enums/MATERIAL).
     * @param primiteCount - The amount of primitives.
     */
    function Begin(mesh?: IMesh, primitiveType: MATERIAL, primiteCount: number): void;
    
    /**
     * [Client]
     * 
     * Sets the color to be used for the next vertex.
     * @param r - Red component.
     * @param g - Green component.
     * @param b - Blue component.
     * @param a - Alpha component.
     */
    function Color(r: number, g: number, b: number, a: number): void;
    
    /**
     * [Client]
     * 
     * Ends the mesh and renders it.
     * 
     */
    function End(): void;
    
    /**
     * [Client]
     * 
     * Sets the normal to be used for the next vertex.
     * @param normal - The normal of the vertex.
     */
    function Normal(normal: Vector): void;
    
    /**
     * [Client]
     * 
     * Sets the position to be used for the next vertex.
     * @param position - The position of the vertex.
     */
    function Position(position: Vector): void;
    
    /**
     * [Client]
     * 
     * Draws a quad using 4 vertices.
     * @param vertex1 - The first vertex.
     * @param vertex2 - The second vertex.
     * @param vertex3 - The third vertex.
     * @param vertex4 - The fourth vertex.
     */
    function Quad(vertex1: Vector, vertex2: Vector, vertex3: Vector, vertex4: Vector): void;
    
    /**
     * [Client]
     * 
     * Draws a quad using a position, a normal and the size.
     * @param position - The center of the quad.
     * @param normal - The normal of the quad.
     * @param sizeX - X size in pixels.
     * @param sizeY - Y size in pixels.
     */
    function QuadEasy(position: Vector, normal: Vector, sizeX: number, sizeY: number): void;
    
    /**
     * [Client]
     * 
     * Sets the specular map values.
     * 
     * This function actually does nothing.
     * @param r - The red channel multiplier of the specular map.
     * @param g - The green channel multiplier of the specular map.
     * @param b - The blue channel multiplier of the specular map.
     * @param a - The alpha channel multiplier of the specular map.
     */
    function Specular(r: number, g: number, b: number, a: number): void;
    
    /**
     * [Client]
     * 
     * Sets the s tangent to be used.
     * 
     * This function actually does nothing.
     * @param sTanger - The s tangent.
     */
    function TangentS(sTanger: Vector): void;
    
    /**
     * [Client]
     * 
     * Sets the T tangent to be used.
     * 
     * This function actually does nothing.
     * @param tTanger - The t tangent.
     */
    function TangentT(tTanger: Vector): void;
    
    /**
     * [Client]
     * 
     * Sets the texture coordinates for the next vertex.
     * 
     * Non-zero values of stage require the currently bound material to support it. For example, any LightmappedGeneric material supports stages 1 and 2 (lightmap texture coordinates).
     * @param stage - The stage of the texture coordinate.
     * @param u - U coordinate.
     * @param v - V coordinate.
     */
    function TexCoord(stage: number, u: number, v: number): void;
    
    /**
     * [Client]
     * 
     * A table of four numbers. This is used by most shaders in Source to hold tangent information of the vertex ( tangentX, tangentY, tangentZ, tangentHandedness ).
     * 
     * **Note:**
     * >It is recommended to use [IMesh:BuildFromTriangles](https://wiki.facepunch.com/gmod/IMesh:BuildFromTriangles) instead of the mesh library.
     * 
     * @param tangentX - 
     * @param tangentY - 
     * @param tangentZ - 
     * @param tangentHandedness - 
     */
    function UserData(tangentX: number, tangentY: number, tangentZ: number, tangentHandedness: number): void;
    
    /**
     * [Client]
     * 
     * Returns the amount of vertex that have yet been pushed.
     * 
     */
    function VertexCount(): number;

}

/**
 * Functions related to Kinect for Windows usage in GMod.
 * 
 * **Warning:**
 * >Kinect feature works only on 32-bit version of the game.
 * 
 */
declare namespace motionsensor {
    

    /**
     * [Shared]
     * 
     * Called to build the skeleton. See [Using The Kinect](https://wiki.facepunch.com/gmod/Using_The_Kinect) and [Kinect developing](https://wiki.facepunch.com/gmod/Kinect_developing).
     * @param translator - `list.Get( "SkeletonConvertor" )` and [motionsensor.ChooseBuilderFromEntity](https://wiki.facepunch.com/gmod/motionsensor.ChooseBuilderFromEntity).
     * @param player - The player to get motion sensor positions from.
     * @param rotation - Global rotation of the player?
     */
    function BuildSkeleton(translator: any, player: Player, rotation: Angle): LuaMultiReturn<[Vector, Angle, any]>;
    
    /**
     * [Shared]
     * 
     * @param ent - Entity to choose builder for
     */
    function ChooseBuilderFromEntity(ent: Entity): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns the depth map material.
     * 
     */
    function GetColourMaterial(): IMaterial;
    
    /**
     * [Client]
     * 
     * Returns players skeletal data if they are using Kinect. See [Using The Kinect](https://wiki.facepunch.com/gmod/Using_The_Kinect) and [Kinect developing](https://wiki.facepunch.com/gmod/Kinect_developing).
     * 
     */
    function GetSkeleton(): any;
    
    /**
     * [Client]
     * 
     * Return whether a kinect is connected - and active (ie - Start has been called).
     * 
     */
    function IsActive(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns true if we have detected that there's a kinect connected to the PC
     * 
     */
    function IsAvailable(): boolean;
    
    /**
     * [Shared]
     * 
     * Used internally by [motionsensor.ProcessAnglesTable](https://wiki.facepunch.com/gmod/motionsensor.ProcessAnglesTable). See [Using The Kinect](https://wiki.facepunch.com/gmod/Using_The_Kinect) and [Kinect developing](https://wiki.facepunch.com/gmod/Kinect_developing).
     * @param translator - 
     * @param sensor - 
     * @param pos - 
     * @param ang - 
     * @param special_vectors - 
     * @param boneid - 
     * @param v - 
     */
    function ProcessAngle(translator: any, sensor: any, pos: Vector, ang: Angle, special_vectors: any, boneid: number, v: any): boolean;
    
    /**
     * [Shared]
     * 
     * Used internally by [motionsensor.BuildSkeleton](https://wiki.facepunch.com/gmod/motionsensor.BuildSkeleton). See [Using The Kinect](https://wiki.facepunch.com/gmod/Using_The_Kinect) and [Kinect developing](https://wiki.facepunch.com/gmod/Kinect_developing).
     * @param translator - 
     * @param sensor - 
     * @param pos - 
     * @param rotation - 
     */
    function ProcessAnglesTable(translator: any, sensor: any, pos: Vector, rotation: Angle): any;
    
    /**
     * [Shared]
     * 
     * Used internally by [motionsensor.BuildSkeleton](https://wiki.facepunch.com/gmod/motionsensor.BuildSkeleton). See [Using The Kinect](https://wiki.facepunch.com/gmod/Using_The_Kinect) and [Kinect developing](https://wiki.facepunch.com/gmod/Kinect_developing).
     * @param translator - 
     * @param sensor - 
     */
    function ProcessPositionTable(translator: any, sensor: any): any;
    
    /**
     * [Client and Menu]
     * 
     * This starts access to the kinect sensor. Note that this usually freezes the game for a couple of seconds.
     * 
     */
    function Start(): boolean;
    
    /**
     * [Client]
     * 
     * Stops the motion capture.
     * 
     */
    function Stop(): void;

}

/**
 * The navigation mesh library. To be used with [CNavArea](https://wiki.facepunch.com/gmod/CNavArea).
 * 
 * The navigation mesh is used by [NextBot](https://wiki.facepunch.com/gmod/NextBot) to calculate path to its target.
 */
declare namespace navmesh {
    

    /**
     * [Server]
     * 
     * Add this position and normal to the list of walkable positions, used before map generation with [navmesh.BeginGeneration](https://wiki.facepunch.com/gmod/navmesh.BeginGeneration)
     * @param pos - The terrain position.
     * @param dir - The normal of this terrain position.
     */
    function AddWalkableSeed(pos: Vector, dir: Vector): void;
    
    /**
     * [Server]
     * 
     * Starts the generation of a new navmesh.
     * 
     * **Note:**
     * >This process is highly resource intensive and it's not wise to use during normal gameplay
     * 
     * 
     */
    function BeginGeneration(): void;
    
    /**
     * [Server]
     * 
     * Clears all the walkable positions, used before calling [navmesh.BeginGeneration](https://wiki.facepunch.com/gmod/navmesh.BeginGeneration).
     * 
     */
    function ClearWalkableSeeds(): void;
    
    /**
     * [Server]
     * 
     * Creates a new [CNavArea](https://wiki.facepunch.com/gmod/CNavArea).
     * @param corner - The first corner of the new [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)
     * @param opposite_corner - The opposite (diagonally) corner of the new [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)
     */
    function CreateNavArea(corner: Vector, opposite_corner: Vector): CNavArea;
    
    /**
     * [Server]
     * 
     * Creates a new [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder).
     * @param top - The top position of the ladder.
     * @param bottom - The bottom position of the ladder.
     * @param width - Width for the new ladder.
     * @param dir - Directional vector in which way the ladder should be facing. Please note that ladders can only face in the 4 cardinal directions - NORTH, SOUTH, WEST, EAST.
     * @param [maxHeightAboveTopArea = 0] - If above 0, will limit how much the top of the ladder can be adjusted to the closest [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) when automatically connecting the newly created ladder to pre-existing nav areas.
     */
    function CreateNavLadder(top: Vector, bottom: Vector, width: number, dir: Vector, maxHeightAboveTopArea = 0): CNavLadder;
    
    /**
     * [Server]
     * 
     * Returns a list of areas within distance, used to find hiding spots by [NextBot](https://wiki.facepunch.com/gmod/NextBot)s for example.
     * @param pos - The position to search around. This position will be used to find the closest area to search from.
     * @param radius - Radius to search within
     * @param stepHeight - Maximum step up height allowed
     * @param dropHeight - Maximum step down (fall distance) allowed
     */
    function Find(pos: Vector, radius: number, stepHeight: number, dropHeight: number): any;
    
    /**
     * [Server]
     * 
     * Returns a list of [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)s overlapping the given cube extents.
     * @param pos1 - The start position of the cube to search in.
     * @param pos2 - The "end" position of the cube to search in. This is the opposite corner of the cube, diagonally.
     */
    function FindInBox(pos1: Vector, pos2: Vector): any;
    
    /**
     * [Server]
     * 
     * Returns an integer indexed table of all [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)s on the current map. If the map doesn't have a navmesh generated then this will return an empty table.
     * 
     */
    function GetAllNavAreas(): any;
    
    /**
     * [Server]
     * 
     * Returns a table of all blocked [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)s on the current map. See [CNavArea:MarkAsBlocked](https://wiki.facepunch.com/gmod/CNavArea:MarkAsBlocked).
     * 
     */
    function GetBlockedAreas(): any;
    
    /**
     * [Server]
     * 
     * Returns the position of the edit cursor when nav_edit is set to 1.
     * 
     */
    function GetEditCursorPosition(): Vector;
    
    /**
     * [Server]
     * 
     * Finds the closest standable ground at, above, or below the provided position.
     * 
     * **Note:**
     * >The ground must have at least 32 units of empty space above it to be considered by this function, unless 16 layers are tested without finding valid ground.
     * 
     * @param pos - Position to find the closest ground for.
     */
    function GetGroundHeight(pos: Vector): LuaMultiReturn<[number, Vector]>;
    
    /**
     * [Server]
     * 
     * Returns the currently marked [CNavArea](https://wiki.facepunch.com/gmod/CNavArea), for use with editing console commands.
     * 
     */
    function GetMarkedArea(): CNavArea;
    
    /**
     * [Server]
     * 
     * Returns the currently marked [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder), for use with editing console commands.
     * 
     */
    function GetMarkedLadder(): CNavLadder;
    
    /**
     * [Server]
     * 
     * Returns the Nav Area contained in this position that also satisfies the elevation limit.
     * 
     * This function will properly see blocked [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)s. See [navmesh.GetNearestNavArea](https://wiki.facepunch.com/gmod/navmesh.GetNearestNavArea).
     * @param pos - The position to search for.
     * @param beneathLimit - The elevation limit at which the Nav Area will be searched.
     */
    function GetNavArea(pos: Vector, beneathLimit: number): CNavArea;
    
    /**
     * [Server]
     * 
     * Returns a [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) by the given ID.
     * 
     * **Note:**
     * >Avoid calling this function every frame, as internally it does a lookup trough all the [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)s, call this once and store the result
     * 
     * @param id - ID of the [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) to get. Starts with 1.
     */
    function GetNavAreaByID(id: number): CNavArea;
    
    /**
     * [Server]
     * 
     * Returns the total count of nav areas on the map. If you want to get all nav areas, use [navmesh.GetAllNavAreas](https://wiki.facepunch.com/gmod/navmesh.GetAllNavAreas) instead as nav areas IDs are not always sequential.
     * 
     */
    function GetNavAreaCount(): number;
    
    /**
     * [Server]
     * 
     * Returns a [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder) by the given ID.
     * @param id - ID of the [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder) to get. Starts with 1.
     */
    function GetNavLadderByID(id: number): CNavLadder;
    
    /**
     * [Server]
     * 
     * Returns the closest [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) to given position at the same height, or beneath it.
     * 
     * This function will ignore blocked [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)s. See [navmesh.GetNavArea](https://wiki.facepunch.com/gmod/navmesh.GetNavArea) for a function that does see blocked areas.
     * @param pos - The position to look from
     * @param [anyZ = false] - This argument is ignored and has no effect
     * @param [maxDist = 10000] - This is the maximum distance from the given position that the function will look for a [CNavArea](https://wiki.facepunch.com/gmod/CNavArea)
     * @param [checkLOS = false] - If this is set to true then the function will internally do a [util.TraceLine](https://wiki.facepunch.com/gmod/util.TraceLine) from the starting position to each potential [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) with a [MASK_NPCSOLID_BRUSHONLY](https://wiki.facepunch.com/gmod/Enums/MASK). If the trace fails then the [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) is ignored.
     * If this is set to false then the function will find the closest [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) through anything, including the world.
     * @param [checkGround = true] - If checkGround is true then this function will internally call [navmesh.GetNavArea](https://wiki.facepunch.com/gmod/navmesh.GetNavArea) to check if there is a [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) directly below the position, and return it if so, before checking anywhere else.
     * @param [team = TEAM_ANY=-2] - This will internally call [CNavArea:IsBlocked](https://wiki.facepunch.com/gmod/CNavArea:IsBlocked) to check if the target [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) is not to be navigated by the given team. Currently this appears to do nothing.
     */
    function GetNearestNavArea(pos: Vector, anyZ = false, maxDist = 10000, checkLOS = false, checkGround = true, team?: number): CNavArea;
    
    /**
     * [Server]
     * 
     * Returns the classname of the player spawn entity.
     * 
     */
    function GetPlayerSpawnName(): string;
    
    /**
     * [Server]
     * 
     * Whether we're currently generating a new navmesh with [navmesh.BeginGeneration](https://wiki.facepunch.com/gmod/navmesh.BeginGeneration).
     * 
     */
    function IsGenerating(): boolean;
    
    /**
     * [Server]
     * 
     * Returns true if a navmesh has been loaded when loading the map.
     * 
     */
    function IsLoaded(): boolean;
    
    /**
     * [Server]
     * 
     * Loads a new navmesh from the .nav file for current map discarding any changes made to the navmesh previously.
     * 
     * **Warning:**
     * >Calling this function too soon, causes the Server to crash!
     * 
     * 
     */
    function Load(): void;
    
    /**
     * [Server]
     * 
     * Deletes every [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) and [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder) on the map **without saving the changes**.
     * 
     */
    function Reset(): void;
    
    /**
     * [Server]
     * 
     * Saves any changes made to navmesh to the .nav file.
     * 
     */
    function Save(): void;
    
    /**
     * [Server]
     * 
     * Sets the [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) as marked, so it can be used with editing console commands.
     * @param area - The [CNavArea](https://wiki.facepunch.com/gmod/CNavArea) to set as the marked area.
     */
    function SetMarkedArea(area: CNavArea): void;
    
    /**
     * [Server]
     * 
     * Sets the [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder) as marked, so it can be used with editing console commands.
     * @param area - The [CNavLadder](https://wiki.facepunch.com/gmod/CNavLadder) to set as the marked ladder.
     */
    function SetMarkedLadder(area: CNavLadder): void;
    
    /**
     * [Server]
     * 
     * Sets the classname of the default spawn point entity, used before generating a new navmesh with [navmesh.BeginGeneration](https://wiki.facepunch.com/gmod/navmesh.BeginGeneration).
     * @param spawnPointClass - The classname of what the player uses to spawn, automatically adds it to the walkable positions during map generation.
     */
    function SetPlayerSpawnName(spawnPointClass: string): void;

}

/**
 * The net library is one of a number of ways to send data between the client and server. 
 * 
 * The major advantages of the net library are the large size limit (64kb/message) and the ability to send data backwards - from the client to the server.
 * 
 * Refer to [Net Library Usage](https://wiki.facepunch.com/gmod/Net_Library_Usage) for a short introduction.
 */
declare namespace net {
    

    /**
     * [Shared]
     * 
     * Cancels a net message started by [net.Start](https://wiki.facepunch.com/gmod/net.Start), so you can immediately start a new one without any errors.
     * 
     */
    function Abort(): void;
    
    /**
     * [Server]
     * 
     * Sends the currently built net message to all connected players.
     * More information can be found in [Net Library Usage](https://wiki.facepunch.com/gmod/Net_Library_Usage).
     * 
     */
    function Broadcast(): void;
    
    /**
     * [Shared]
     * 
     * Returns the amount of data left to read in the current message. Does nothing when sending data.
     * 
     * **Note:**
     * >This will include 6 extra bits (or 1 byte rounded-up) used by the engine internally.
     * 
     * 
     */
    function BytesLeft(): LuaMultiReturn<[number, number]>;
    
    /**
     * [Shared]
     * 
     * Returns the size of the current message.
     * 
     * **Note:**
     * >This will include 3 extra bytes (24 bits) used by the engine internally to send the data over the network.
     * 
     * 
     */
    function BytesWritten(): LuaMultiReturn<[number, number]>;
    
    /**
     * [Shared]
     * 
     * **.**
     * 
     * Function called by the engine to tell the Lua state a message arrived.
     * @param length - The message length, in **bits**.
     * @param client - The player that sent the message. This will be `nil` in the client state.
     */
    function Incoming(length: number, client: Player): void;
    
    /**
     * [Shared]
     * 
     * Reads an angle from the received net message.
     * 
     * **Warning:**
     * >You **must** read information in same order as you write it.
     * 
     * 
     */
    function ReadAngle(): Angle;
    
    /**
     * [Shared]
     * 
     * Reads a bit from the received net message.
     * 
     * **Warning:**
     * >You **must** read information in same order as you write it.
     * 
     * 
     */
    function ReadBit(): number;
    
    /**
     * [Shared]
     * 
     * Reads a boolean from the received net message.
     * 
     * **Warning:**
     * >You **must** read information in same order as you write it.
     * 
     * 
     */
    function ReadBool(): boolean;
    
    /**
     * [Shared]
     * 
     * Reads a [Color](https://wiki.facepunch.com/gmod/Color) from the current net message.
     * 
     * **Warning:**
     * >You **must** read information in same order as you write it.
     * 
     * @param [hasAlpha = true] - If the color has alpha written or not. **Must match what was given to [net.WriteColor](https://wiki.facepunch.com/gmod/net.WriteColor).**
     */
    function ReadColor(hasAlpha = true): Color;
    
    /**
     * [Shared]
     * 
     * Reads pure binary data from the message.
     * 
     * **Warning:**
     * >You **must** read information in same order as you write it.
     * 
     * @param length - The length of the data to be read, in **bytes**.
     */
    function ReadData(length: number): string;
    
    /**
     * [Shared]
     * 
     * Reads a double-precision number from the received net message.
     * 
     * **Warning:**
     * >You **must** read information in same order as you write it.
     * 
     * 
     */
    function ReadDouble(): number;
    
    /**
     * [Shared]
     * 
     * Reads an entity from the received net message. You should always check if the specified entity exists as it may have been removed and therefore `NULL` if it is outside of the players [PVS (Potential Visibility Set)](https://developer.valvesoftware.com/wiki/PVS "PVS - Valve Developer Community") or was already removed.
     * 
     * **Warning:**
     * >You **must** read information in same order as you write it.
     * 
     * 
     */
    function ReadEntity(): Entity;
    
    /**
     * [Shared]
     * 
     * Reads a floating point number from the received net message.
     * 
     * **Warning:**
     * >You **must** read information in same order as you write it.
     * 
     * 
     */
    function ReadFloat(): number;
    
    /**
     * [Shared]
     * 
     * Reads a word, basically unsigned short. This is used internally to read the "header" of the message which is an unsigned short which can be converted to the corresponding message name via [util.NetworkIDToString](https://wiki.facepunch.com/gmod/util.NetworkIDToString).
     * 
     */
    function ReadHeader(): number;
    
    /**
     * [Shared]
     * 
     * Reads an integer from the received net message.
     * 
     * **Warning:**
     * >You **must** read information in same order as you write it.
     * 
     * @param bitCount - The amount of bits to be read.
     * This must be set to what you set to [net.WriteInt](https://wiki.facepunch.com/gmod/net.WriteInt). Read more information at [net.WriteInt](https://wiki.facepunch.com/gmod/net.WriteInt).
     */
    function ReadInt(bitCount: number): number;
    
    /**
     * [Shared]
     * 
     * Reads a [VMatrix](https://wiki.facepunch.com/gmod/VMatrix) from the received net message.
     * 
     * **Warning:**
     * >You **must** read information in same order as you write it.
     * 
     * 
     */
    function ReadMatrix(): VMatrix;
    
    /**
     * [Shared]
     * 
     * Reads a normal vector from the net message.
     * 
     * **Warning:**
     * >You **must** read information in same order as you write it.
     * 
     * 
     */
    function ReadNormal(): Vector;
    
    /**
     * [Shared]
     * 
     * Reads a player entity that was written with [net.WritePlayer](https://wiki.facepunch.com/gmod/net.WritePlayer) from the received net message.
     * 
     * You should always check if the specified entity exists as it may have been removed and therefore `NULL` if it is outside of the local players [PVS](https://developer.valvesoftware.com/wiki/PVS) or was already removed.
     * 
     * **Warning:**
     * >You **must** read information in same order as you write it.
     * 
     * 
     */
    function ReadPlayer(): Player;
    
    /**
     * [Shared]
     * 
     * Reads a [null-terminated string](https://en.wikipedia.org/wiki/Null-terminated_string) from the net stream. The size of the string is 8 bits plus 8 bits for every ASCII character in the string.
     * 
     * **Warning:**
     * >You **must** read information in same order as you write it.
     * 
     * 
     */
    function ReadString(): string;
    
    /**
     * [Shared]
     * 
     * Reads a table from the received net message.
     * 
     * See [net.WriteTable](https://wiki.facepunch.com/gmod/net.WriteTable) for extra info.
     * 
     * **Warning:**
     * >You **must** read information in same order as you write it.
     * 
     * **Note:**
     * >Sometimes when sending a table through the net library, the order of the keys may be switched. So be cautious when comparing (See example 1).
     * 
     * You may get `net.ReadType: Couldn't read type X` during the execution of the function, the problem is that you are sending objects that **cannot** be serialized/sent over the network.
     * 
     * @param [sequential = false] - Set to `true` if the input table is sequential. This saves on bandwidth.
     */
    function ReadTable(sequential = false): any;
    
    /**
     * [Shared]
     * 
     * **.**
     * 
     * Reads a value from the net message with the specified type, written by [net.WriteType](https://wiki.facepunch.com/gmod/net.WriteType).
     * 
     * **Warning:**
     * >You **must** read information in same order as you write it.
     * 
     * @param [typeID = net.ReadUInt(8)] - The type of value to be read, using [Enums/TYPE](https://wiki.facepunch.com/gmod/Enums/TYPE).
     */
    function ReadType(typeID?: TYPE): any;
    
    /**
     * [Shared]
     * 
     * Reads an unsigned integer with the specified number of bits from the received net message.
     * 
     * **Warning:**
     * >You **must** read information in same order as you write it.
     * 
     * @param numberOfBits - The size of the integer to be read, in bits.
     * This must be set to what you set to [net.WriteUInt](https://wiki.facepunch.com/gmod/net.WriteUInt). Read more information at [net.WriteUInt](https://wiki.facepunch.com/gmod/net.WriteUInt).
     */
    function ReadUInt(numberOfBits: number): number;
    
    /**
     * [Shared]
     * 
     * Reads a unsigned integer with 64 bits from the received net message.
     * 
     * **Warning:**
     * >You **must** read information in same order as you write it.
     * 
     * 
     */
    function ReadUInt64(): string;
    
    /**
     * [Shared]
     * 
     * A list of types that can be sent over the network via [net.ReadType](https://wiki.facepunch.com/gmod/net.ReadType).
     * 
     */
    function ReadVars(): any;
    
    /**
     * [Shared]
     * 
     * Reads a vector from the received net message. Vectors sent by this function are **compressed**, which may result in precision loss. See [net.WriteVector](https://wiki.facepunch.com/gmod/net.WriteVector) for more information.
     * 
     * **Warning:**
     * >You **must** read information in same order as you write it.
     * 
     * 
     */
    function ReadVector(): Vector;
    
    /**
     * [Shared]
     * 
     * Adds a net message handler. Only one receiver can be used to receive the net message.
     * 
     * **Warning:**
     * >You **must** put this function **outside** of any other function or hook for it to work properly unless you know what you are doing!
     * 
     * You **must** read information in the same order as you write it.
     * 
     * Each net message has a length limit of **64KB**!
     * 
     * **Note:**
     * >The message-name is converted to lower-case so the message-names "`BigBlue`" and "`bigblue`" would be equal.
     * 
     * @param messageName - The message name to hook to.
     * @param callback - The function to be called if the specified message was received. Arguments are:
     * * [number](https://wiki.facepunch.com/gmod/number) len - Length of the message, in bits.<br/>
     * * [Player](https://wiki.facepunch.com/gmod/Player) ply - The player that sent the message, works **only** server-side.
     */
    function Receive(messageName: string, callback: Function): void;
    
    /**
     * [Shared]
     * 
     * This is NOT a function, it's a table used internally by the net library to store net receivers added with [net.Receive](https://wiki.facepunch.com/gmod/net.Receive).
     * 
     * The key is the lowercase net message name and the value is the message's callback function.
     * 
     * **Note:**
     * >Modifying [net.Receivers](https://wiki.facepunch.com/gmod/net.Receivers) won't affect the net string pool used in [util.AddNetworkString](https://wiki.facepunch.com/gmod/util.AddNetworkString).
     * 
     * 
     */
    function Receivers(): any;
    
    /**
     * [Server]
     * 
     * Sends the current message to the specified player, or to all players listed in the table.
     * @param ply - The player(s) to send the message to. Can be a table of players or a [CRecipientFilter](https://wiki.facepunch.com/gmod/CRecipientFilter).
     */
    function Send(ply: Player): void;
    
    /**
     * [Server]
     * 
     * Sends the current message to all except the specified, or to all except all players in the table.
     * @param ply - The player(s) to **NOT** send the message to. Can be a table of players.
     */
    function SendOmit(ply: Player): void;
    
    /**
     * [Server]
     * 
     * Sends the message to all players that are in the same [Potentially Audible Set (PAS)](https://developer.valvesoftware.com/wiki/PAS) as the position, or simply said, it adds all players that can potentially hear sounds from this position.
     * @param position - PAS position.
     */
    function SendPAS(position: Vector): void;
    
    /**
     * [Server]
     * 
     * Sends the message to all players in the [PVS (Potential Visibility Set)](https://developer.valvesoftware.com/wiki/PVS "PVS - Valve Developer Community") of the position, or, more simply said, sends the message to players that can potentially see this position.
     * @param position - Position that must be in players' visibility set.
     */
    function SendPVS(position: Vector): void;
    
    /**
     * [Client]
     * 
     * Sends the current message to the server.
     * 
     * **Warning:**
     * >Each net message has a length limit of 65,533 bytes (approximately 64 KiB) and your net message will error and fail to send if it is larger than this.
     * 
     * The message name must be pooled with [util.AddNetworkString](https://wiki.facepunch.com/gmod/util.AddNetworkString) beforehand!
     * 
     * 
     */
    function SendToServer(): void;
    
    /**
     * [Shared]
     * 
     * Begins a new net message. If another net message is already started and hasn't been sent yet, it will be discarded.
     * 
     * **Warning:**
     * >Each net message has a length limit of 65,533 bytes (approximately 64 KiB) and your net message will error and fail to send if it is larger than this.
     * 
     * The message name must be pooled with [util.AddNetworkString](https://wiki.facepunch.com/gmod/util.AddNetworkString) beforehand!
     * 
     * Net messages will not reliably reach the client until the client's [GM:InitPostEntity](https://wiki.facepunch.com/gmod/GM:InitPostEntity) hook is called.
     * 
     * @param messageName - The name of the message to send
     * @param [unreliable = false] - If set to `true`, the message is not guaranteed to reach its destination
     */
    function Start(messageName: string, unreliable = false): boolean;
    
    /**
     * [Shared]
     * 
     * Writes an angle to the current net message.
     * @param angle - The angle to be sent.
     */
    function WriteAngle(angle: Angle): void;
    
    /**
     * [Shared]
     * 
     * Appends a boolean (as `1` or `0`) to the current net message.
     * 
     * Please note that the bit is written here from a [boolean](https://wiki.facepunch.com/gmod/boolean) (`true/false`) but [net.ReadBit](https://wiki.facepunch.com/gmod/net.ReadBit) returns a number.
     * @param boolean - Bit status (false = `0`, true = `1`).
     */
    function WriteBit(boolean: boolean): void;
    
    /**
     * [Shared]
     * 
     * Appends a boolean to the current net message. Alias of [net.WriteBit](https://wiki.facepunch.com/gmod/net.WriteBit).
     * @param boolean - Boolean value to write.
     */
    function WriteBool(boolean: boolean): void;
    
    /**
     * [Shared]
     * 
     * Appends a [Color](https://wiki.facepunch.com/gmod/Color) to the current net message.
     * @param Color - The [Color](https://wiki.facepunch.com/gmod/Color) you want to append to the net message.
     * @param [writeAlpha = true] - If we should write the alpha of the color or not.
     */
    function WriteColor(Color: Color, writeAlpha = true): void;
    
    /**
     * [Shared]
     * 
     * Writes a chunk of binary data to the message.
     * @param binaryData - The binary data to be sent.
     * @param [length = #binaryData] - The length of the binary data to be sent, in bytes.
     */
    function WriteData(binaryData: string, length?: number): void;
    
    /**
     * [Shared]
     * 
     * Appends a double-precision number to the current net message.
     * @param double - The double to be sent
     */
    function WriteDouble(double: number): void;
    
    /**
     * [undefined]
     * 
     * Appends an entity to the current net message using its [Entity:EntIndex](https://wiki.facepunch.com/gmod/Entity:EntIndex).
     * 
     * See [net.ReadEntity](https://wiki.facepunch.com/gmod/net.ReadEntity) for the function to read the entity.
     * 
     */
    function WriteEntity(): void;
    
    /**
     * [Shared]
     * 
     * Appends a float (number with decimals) to the current net message.
     * @param float - The float to be sent.
     */
    function WriteFloat(float: number): void;
    
    /**
     * [Shared]
     * 
     * Appends a signed integer - a whole number, positive/negative - to the current net message. Can be read back with [net.ReadInt](https://wiki.facepunch.com/gmod/net.ReadInt) on the receiving end.
     * 
     * Use [net.WriteUInt](https://wiki.facepunch.com/gmod/net.WriteUInt) to send an unsigned number (that you know will **never** be negative). Use [net.WriteFloat](https://wiki.facepunch.com/gmod/net.WriteFloat) for a non-whole number (e.g. `2.25`).
     * @param integer - The integer to be sent.
     * @param bitCount - The amount of bits the number consists of. This must be **32** or less.
     * If you are unsure what to set, just set it to `32`.
     * Consult the table below to determine the bit count you need:
     * | Bit Count |  Minimum value |  Maximum value |
     * |-----------|:--------------:|:--------------:|
     * | 3 | -4 | 3 |
     * | 4 | -8 | 7 |
     * | 5 | -16 | 15 |
     * | 6 | -32 | 31 |
     * | 7 | -64 | 63 |
     * | 8 | -128 | 127 |
     * | 9 | -256 | 255 |
     * | 10 | -512 | 511 |
     * | 11 | -1024 | 1023 |
     * | 12 | -2048 | 2047 |
     * | 13 | -4096 | 4095 |
     * | 14 | -8192 | 8191 |
     * | 15 | -16384 | 16383 |
     * | 16 | -32768 | 32767 |
     * | 17 | -65536 | 65535 |
     * | 18 | -131072 | 131071 |
     * | 19 | -262144 | 262143 |
     * | 20 | -524288 | 524287 |
     * | 21 | -1048576 | 1048575 |
     * | 22 | -2097152 | 2097151 |
     * | 23 | -4194304 | 4194303 |
     * | 24 | -8388608 | 8388607 |
     * | 25 | -16777216 | 16777215 |
     * | 26 | -33554432 | 33554431 |
     * | 27 | -67108864 | 67108863 |
     * | 28 | -134217728 | 134217727 |
     * | 29 | -268435456 | 268435455 |
     * | 30 | -536870912 | 536870911 |
     * | 31 | -1073741824 | 1073741823 |
     * | 32 | -2147483648 | 2147483647 |
     */
    function WriteInt(integer: number, bitCount: number): void;
    
    /**
     * [Shared]
     * 
     * Writes a [VMatrix](https://wiki.facepunch.com/gmod/VMatrix) to the current net message.
     * @param matrix - The matrix to be sent.
     */
    function WriteMatrix(matrix: VMatrix): void;
    
    /**
     * [Shared]
     * 
     * Writes a normalized/direction vector ( Vector with length of 1 ) to the net message.
     * 
     * This function uses less bandwidth compared to [net.WriteVector](https://wiki.facepunch.com/gmod/net.WriteVector) and will not send vectors with length of > 1 properly.
     * @param normal - The normalized/direction vector to be send.
     */
    function WriteNormal(normal: Vector): void;
    
    /**
     * [Shared]
     * 
     * Appends a player entity to the current net message using its [Entity:EntIndex](https://wiki.facepunch.com/gmod/Entity:EntIndex). This saves a small amount of network bandwidth over [net.WriteEntity](https://wiki.facepunch.com/gmod/net.WriteEntity).
     * 
     * See [net.ReadPlayer](https://wiki.facepunch.com/gmod/net.ReadPlayer) for the function to read the entity.
     * @param ply - The player to be sent.
     */
    function WritePlayer(ply: Player): void;
    
    /**
     * [Shared]
     * 
     * Appends a string to the current net message. The size of the string is 8 bits plus 8 bits for every ASCII character in the string. The maximum allowed length of a single written string is **65532 characters**.
     * @param string - The string to be sent.
     */
    function WriteString(string: string): void;
    
    /**
     * [Shared]
     * 
     * Appends a table to the current net message. Adds **16 extra bits** per key/value pair, so you're better off writing each individual key/value as the exact type if possible.
     * 
     * **Warning:**
     * >All net messages have a **64kb** buffer. This function will not check or error when that buffer is overflown. You might want to consider using [util.TableToJSON](https://wiki.facepunch.com/gmod/util.TableToJSON) and [util.Compress](https://wiki.facepunch.com/gmod/util.Compress) and send the resulting string in **60kb** chunks, doing the opposite on the receiving end.
     * 
     * @param table - The table to be sent.
     * **Warning:**
     * >If the table contains a `nil` key the table may not be read correctly.
     * Not all objects can be sent over the network. Things like functions, [IMaterial](https://wiki.facepunch.com/gmod/IMaterial)s, etc will cause errors when reading the table from a net message.
     * 
     * @param [sequential = false] - Set to `true` if the input table is sequential. This saves on bandwidth, adding **8 extra bits** per key/value pair instead of 16 bits.
     * **Note:**
     * >To read the table you need to give [net.ReadTable](https://wiki.facepunch.com/gmod/net.ReadTable) the same value!
     * 
     */
    function WriteTable(table: any, sequential = false): void;
    
    /**
     * [Shared]
     * 
     * **.**
     * 
     * Appends any type of value to the current net message.
     * 
     * **Note:**
     * >An additional 8-bit unsigned integer indicating the type will automatically be written to the packet before the value, in order to facilitate reading with [net.ReadType](https://wiki.facepunch.com/gmod/net.ReadType). If you know the data type you are writing, use a function meant for that specific data type to reduce amount of data sent.
     * 
     * @param Data - The data to be sent.
     */
    function WriteType(Data: any): void;
    
    /**
     * [Shared]
     * 
     * Appends an unsigned integer with the specified number of bits to the current net message.
     * 
     * Use [net.WriteInt](https://wiki.facepunch.com/gmod/net.WriteInt) if you want to send negative and positive numbers. Use [net.WriteFloat](https://wiki.facepunch.com/gmod/net.WriteFloat) for a non-whole number (e.g. `2.25`).
     * 
     * **Note:**
     * >Unsigned numbers **do not** support negative numbers.
     * 
     * @param unsignedInteger - The unsigned integer to be sent.
     * @param numberOfBits - The size of the integer to be sent, in bits. Acceptable values range from any number `1` to `32` inclusive.
     * For reference: `1` = bit, `4` = nibble, `8` = byte, `16` = short, `32` = long.
     * Consult the table below to determine the bit count you need. The minimum value for all bit counts is `0`.
     * | Bit Count |  Maximum value |
     * |-----------|:--------------:|
     * | 1 | 1  |
     * | 2 | 3  |
     * | 3 | 7  |
     * | 4 | 15 |
     * | 5 | 31 |
     * | 6 | 63 |
     * | 7 | 127 |
     * | 8 | 255 |
     * | 9 | 511 |
     * | 10 | 1023 |
     * | 11 | 2047 |
     * | 12 | 4095 |
     * | 13 | 8191 |
     * | 14 | 16383 |
     * | 15 | 32767 |
     * | 16 | 65535 |
     * | 17 | 131071 |
     * | 18 | 262143 |
     * | 19 | 524287  |
     * | 20 | 1048575  |
     * | 21 | 2097151  |
     * | 22 | 4194303  |
     * | 23 | 8388607  |
     * | 24 | 16777215  |
     * | 25 | 33554431  |
     * | 26 | 67108863  |
     * | 27 | 134217727  |
     * | 28 | 268435455  |
     * | 29 | 536870911  |
     * | 30 | 1073741823 |
     * | 31 | 2147483647 |
     * | 32 | 4294967295 |
     */
    function WriteUInt(unsignedInteger: number, numberOfBits: number): void;
    
    /**
     * [Shared]
     * 
     * Appends an unsigned integer with 64 bits to the current net message.
     * 
     * **Note:**
     * >The limit for an uint64 is 18.446.744.073.709.551.615.  
     * 			Everything above the limit will be set to the limit.  
     * 
     * 			Unsigned numbers **do not** support negative numbers.
     * 
     * @param uint64 - The uint64 to be sent. Can be a number.
     * **Warning:**
     * >Since Lua cannot store full 64-bit integers, this function returns a string. It is mainly aimed at usage with [Player:SteamID64](https://wiki.facepunch.com/gmod/Player:SteamID64).
     * 				If your input is a number and not a string, it won't be networked correctly as soon as it has more than 13 digits.  
     * 				This is because Lua represents numbers over 13 digits as `1e+14`(`100 000 000 000 000`)  
     * 				You can do something like this to convert it to a string: `string.format("%.0f", number)`.  
     * 				If you try to use [Global.tostring](https://wiki.facepunch.com/gmod/Global.tostring) it will fail because it will create a result something like `1e+14` which doesn't work.
     * 
     */
    function WriteUInt64(uint64: string): void;
    
    /**
     * [Shared]
     * 
     * A list of types that can be sent over the network via [net.WriteType](https://wiki.facepunch.com/gmod/net.WriteType).
     * 
     */
    function WriteVars(): any;
    
    /**
     * [Shared]
     * 
     * Appends a vector to the current net message.
     * Vectors sent by this function are compressed, which may result in precision loss. XYZ components greater than `16384` or less than `-16384` are irrecoverably altered (most significant bits are trimmed) and precision after the decimal point is low.
     * @param vector - The vector to be sent.
     */
    function WriteVector(vector: Vector): void;

}

/**
 * Used to display notifications on the screen (mid-right).
 */
declare namespace notification {
    

    /**
     * [Client and Menu]
     * 
     * Adds a standard notification to your screen.
     * @param text - The text to display.
     * @param type - Determines the notification method (e.g. icon) for displaying the notification. See the [Enums/NOTIFY](https://wiki.facepunch.com/gmod/Enums/NOTIFY).
     * @param length - The number of seconds to display the notification for.
     */
    function AddLegacy(text: string, type: NOTIFY, length: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Adds a notification with an animated progress bar.
     * @param id - Can be any type. It's used as an index.
     * @param strText - The text to show
     * @param [frac = nil] - If set, overrides the progress bar animation with given percentage. Range is 0 to 1.
     */
    function AddProgress(id: any, strText: string, frac?: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Removes the notification after 0.8 seconds.
     * @param uid - The unique ID of the notification
     */
    function Kill(uid: any): void;

}

/**
 * The numpad module allows you to execute functions on a key press or release.
 */
declare namespace numpad {
    

    /**
     * [Server]
     * 
     * Activates numpad key owned by the player
     * @param ply - The player whose numpad should be simulated
     * @param key - The key to press, see [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY)
     * @param isButton - Should this keypress pretend to be a from a gmod_button? (causes [numpad.FromButton](https://wiki.facepunch.com/gmod/numpad.FromButton) to return true)
     */
    function Activate(ply: Player, key: KEY, isButton: boolean): void;
    
    /**
     * [Server]
     * 
     * Deactivates numpad key owned by the player
     * @param ply - The player whose numpad should be simulated
     * @param key - The key to press, corresponding to [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY)
     * @param isButton - Should this keypress pretend to be a from a gmod_button? (causes [numpad.FromButton](https://wiki.facepunch.com/gmod/numpad.FromButton) to return true)
     */
    function Deactivate(ply: Player, key: KEY, isButton: boolean): void;
    
    /**
     * [Server]
     * 
     * Returns true during a function added with [numpad.Register](https://wiki.facepunch.com/gmod/numpad.Register) when the third argument to [numpad.Activate](https://wiki.facepunch.com/gmod/numpad.Activate) is true.
     * 
     * This is caused when a numpad function is triggered by a button SENT being used.
     * 
     */
    function FromButton(): boolean;
    
    /**
     * [Server]
     * 
     * Calls a function registered with [numpad.Register](https://wiki.facepunch.com/gmod/numpad.Register) when a player presses specified key.
     * 
     * See for key released action: [numpad.OnUp](https://wiki.facepunch.com/gmod/numpad.OnUp)
     * @param ply - The player whose numpad should be watched
     * @param key - The key, corresponding to [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY)
     * @param name - The name of the function to run, corresponding with the one used in [numpad.Register](https://wiki.facepunch.com/gmod/numpad.Register)
     * @param vararg - Arguments to pass to the function passed to [numpad.Register](https://wiki.facepunch.com/gmod/numpad.Register).
     */
    function OnDown(ply: Player, key: KEY, name: string, ...vararg: any[]): number;
    
    /**
     * [Server]
     * 
     * Calls a function registered with [numpad.Register](https://wiki.facepunch.com/gmod/numpad.Register) when a player releases specified key.
     * 
     * See for key pressed action: [numpad.OnDown](https://wiki.facepunch.com/gmod/numpad.OnDown)
     * @param ply - The player whose numpad should be watched
     * @param key - The key, corresponding to [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY)
     * @param name - The name of the function to run, corresponding with the one used in [numpad.Register](https://wiki.facepunch.com/gmod/numpad.Register)
     * @param vararg - Arguments to pass to the function passed to [numpad.Register](https://wiki.facepunch.com/gmod/numpad.Register).
     */
    function OnUp(ply: Player, key: KEY, name: string, ...vararg: any[]): number;
    
    /**
     * [Server]
     * 
     * Registers a numpad library action for use with [numpad.OnDown](https://wiki.facepunch.com/gmod/numpad.OnDown) and [numpad.OnUp](https://wiki.facepunch.com/gmod/numpad.OnUp)
     * @param id - The unique id of your action.
     * @param func - The function to be executed.
     * Arguments are:
     * [Player](https://wiki.facepunch.com/gmod/Player) ply - The player who pressed the button
     * [vararg](https://wiki.facepunch.com/gmod/vararg) ... - The 4th and all subsequent arguments passed from [numpad.OnDown](https://wiki.facepunch.com/gmod/numpad.OnDown) and/or [numpad.OnUp](https://wiki.facepunch.com/gmod/numpad.OnUp)
     * Returning **false** in this function will remove the listener which triggered this function (example: return false if one of your varargs is an entity which is no longer valid)
     */
    function Register(id: string, func: Function): void;
    
    /**
     * [Server]
     * 
     * Removes a function added by either [numpad.OnUp](https://wiki.facepunch.com/gmod/numpad.OnUp) or [numpad.OnDown](https://wiki.facepunch.com/gmod/numpad.OnDown)
     * @param ID - The impulse ID returned by [numpad.OnUp](https://wiki.facepunch.com/gmod/numpad.OnUp) or [numpad.OnDown](https://wiki.facepunch.com/gmod/numpad.OnDown)
     */
    function Remove(ID: number): void;
    
    /**
     * [Server]
     * 
     * Either runs [numpad.Activate](https://wiki.facepunch.com/gmod/numpad.Activate) or [numpad.Deactivate](https://wiki.facepunch.com/gmod/numpad.Deactivate) depending on the key's current state
     * @param ply - The player whose numpad should be simulated
     * @param key - The key to press, corresponding to [Enums/KEY](https://wiki.facepunch.com/gmod/Enums/KEY)
     */
    function Toggle(ply: Player, key: KEY): void;

}

/**
 * The os library is a standard Lua library originally intended to allow Lua access to various features of the Operating System it's running on, however many of the features and functions have been removed in Garry's Mod due to security issues. It's only used in Garry's Mod for date & time operations.
 */
declare namespace os {
    

    /**
     * [Shared and Menu]
     * 
     * Returns the approximate cpu time the application ran.
     * See also [Global.SysTime](https://wiki.facepunch.com/gmod/Global.SysTime)
     * 
     * **Note:**
     * >This function has different precision on Linux (1/100).
     * 
     * 
     */
    function clock(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the date/time as a formatted string or in a table.
     * @param format - The format string.
     * If this is equal to `*t` or `!*t` then this function will return a [Structures/DateData](https://wiki.facepunch.com/gmod/Structures/DateData), otherwise it will return a string.
     * If this starts with an `!`, the returned data will use the UTC timezone rather than the local timezone.
     * See http://www.mkssoftware.com/docs/man3/strftime.3.asp for available format flags.
     * Known formats that work on all platforms:
     * | Format | Description | Example of the output |
     * |:------:|:-----------:|:---------------------:|
     * | `%a` | Abbreviated weekday name | `Wed` |
     * | `%A` | Full weekday name | `Wednesday` |
     * | `%b` | Abbreviated month name | `Sep` |
     * | `%B` | Full month name | `September` |
     * | `%c` | Locale-appropriate date and time | Varies by platform and language settings |
     * | `%d` | Day of the month [01-31] | `16` |
     * | `%H` | Hour, using a 24-hour clock [00-23] | `23` |
     * | `%I` | Hour, using a 12-hour clock [01-12] | `11` |
     * | `%j` | Day of the year [001-365] | `259` |
     * | `%m` | Month [01-12] | `09` |
     * | `%M` | Minute [00-59] | `48` |
     * | `%p` | Either `am` or `pm` | `pm` |
     * | `%S` | Second [00-60] | `10` |
     * | `%w` | Weekday [0-6 = Sunday-Saturday] | `3` |
     * | `%W` | Week of the year [00-53] | `37` |
     * | `%x` | Date (Same as `%m/%d/%y`) | `09/16/98` |
     * | `%X` | Time (Same as `%H:%M:%S`) | `24:48:10` |
     * | `%y` | Two-digit year [00-99] | `98` |
     * | `%Y` | Full year | `1998` |
     * | `%z` | Timezone | `-0300` |
     * | `%%` | A percent sign | `%` |
     * **Bug [#329](https://github.com/Facepunch/garrysmod-issues/issues/329):**
     * >**Not all flags are available on all operating systems** and the result of using an invalid flag is undefined. This currently crashes the game on Windows. Most or all flags are available on OS X and Linux but considerably fewer are available on Windows. See http://msdn.microsoft.com/en-us/library/fe06s4ak.aspx for a list of available flags on Windows. Note that the **#** flags also crashes the game on Windows.
     * 
     * @param [time = os.time()] - Time to use for the format.
     */
    function date(format: DateData, time?: number): DateData;
    
    /**
     * [Shared and Menu]
     * 
     * Subtracts the second from the first value and rounds the result.
     * @param timeA - The first value.
     * @param timeB - The value to subtract.
     */
    function difftime(timeA: number, timeB: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the system time in seconds past the unix epoch. If a table is supplied, the function attempts to build a system time with the specified table members.
     * @param [dateData = nil] - Table to generate the time from. This table's data is interpreted as being in the local timezone. See [Structures/DateData](https://wiki.facepunch.com/gmod/Structures/DateData)
     */
    function time(dateData?: DateData): number;

}

/**
 * The package library is a standard Lua library, it's mainly for use with the module system built into Lua.
 */
declare namespace package {
    

    /**
     * [Shared and Menu]
     * 
     * A list of all loaded packages.
     * 
     */
    function loaded(): any;
    
    /**
     * [Shared and Menu]
     * 
     * Sets a metatable for module with its __index field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to [Global.module](https://wiki.facepunch.com/gmod/Global.module).
     * @param module - The module table to be given a metatable
     */
    function seeall(module: any): void;

}

/**
 * Used to ask player for various potentially dangerous permissions.
 */
declare namespace permissions {
    

    /**
     * [Client]
     * 
     * Requests the player to connect to a specified server. The player will be prompted with a confirmation window.
     * @param address - The address to ask to connect to. If a port is not given, the default `:27015` port will be added.
     */
    function AskToConnect(address: string): void;
    
    /**
     * [Menu]
     * 
     * Connects player to the server. This is what [permissions.AskToConnect](https://wiki.facepunch.com/gmod/permissions.AskToConnect) uses internally.
     * @param ip - IP address to connect.
     */
    function Connect(ip: string): void;
    
    /**
     * [Client]
     * 
     * Activates player's microphone as if they pressed the speak button themself. The player will be prompted with a confirmation window which grants permission temporarily/permanently(depending on checkbox state) for the connected server (revokable). 
     * This is used for TTT's traitor voice channel.
     * @param enable - Enable or disable voice activity. `true` will run `+voicerecord` command, anything else `-voicerecord`.
     */
    function EnableVoiceChat(enable: boolean): void;
    
    /**
     * [Menu]
     * 
     * Returns all permissions per server. Permanent permissions are stored in `settings/permissions.bin`.
     * 
     */
    function GetAll(): any;
    
    /**
     * [Menu]
     * 
     * Grants permission to the current connected server.
     * @param permission - Permission to grant for the server the player is currently connected.
     * @param temporary - `true` if the permission should be granted temporary.
     */
    function Grant(permission: string, temporary: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the player has granted the current server a specific permission.
     * @param permission - The permission to poll. Currently only 2 permission are valid:
     * * `"connect"`
     * * `"voicerecord"`
     */
    function IsGranted(permission: string): boolean;
    
    /**
     * [Menu]
     * 
     * Revokes permission from the server.
     * @param permission - Permission to revoke from the server.
     * @param ip - IP of the server.
     */
    function Revoke(permission: string, ip: string): void;

}

/**
 * The physenv library allows you to control the physics environment created by the engine, and lets you modify constants such as gravity and maximum velocity.
 */
declare namespace physenv {
    

    /**
     * [Shared]
     * 
     * Adds surface properties to the game's physics environment.
     * 
     * **Bug [#2604](https://github.com/Facepunch/garrysmod-issues/issues/2604):**
     * >The game has a limit of 128 surface properties - this includes properties loaded automatically from [surfaceproperties.txt](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/scripts/surfaceproperties.txt). Due to this, there's only a small amount of open slots that can be registered with GMod's provided surfaceproperties.txt.
     * 
     * @param properties - The properties to add. Each one should include "base" or the game will crash due to some values being missing.
     */
    function AddSurfaceData(properties: string): void;
    
    /**
     * [Shared]
     * 
     * Returns the air density used to calculate drag on physics objects.
     * 		<validate>The unit is in `kg/m³`.</validate>
     * 
     */
    function GetAirDensity(): number;
    
    /**
     * [Shared]
     * 
     * Gets the gravitational acceleration used for physics objects in `source_unit/s^2`.
     * 
     */
    function GetGravity(): Vector;
    
    /**
     * [Shared]
     * 
     * Returns the last simulation duration of the in-game physics.
     * 
     */
    function GetLastSimulationTime(): number;
    
    /**
     * [Shared]
     * 
     * Gets the current performance settings in table form.
     * 
     */
    function GetPerformanceSettings(): PhysEnvPerformanceSettings;
    
    /**
     * [Shared]
     * 
     * Sets the air density.
     * @param airDensity - The new air density.
     */
    function SetAirDensity(airDensity: number): void;
    
    /**
     * [Shared]
     * 
     * Sets the gravitational acceleration used for physics objects.
     * 
     * **Note:**
     * >Does not work on players.
     * 
     * @param gravAccel - The new gravity in `source_unit/s^2`.
     */
    function SetGravity(gravAccel: Vector): void;
    
    /**
     * [Shared]
     * 
     * Sets the performance settings.
     * @param performanceSettings - The new performance settings. See [Structures/PhysEnvPerformanceSettings](https://wiki.facepunch.com/gmod/Structures/PhysEnvPerformanceSettings)
     */
    function SetPerformanceSettings(performanceSettings: PhysEnvPerformanceSettings): void;

}

/**
 * The player library is used to get the Lua objects that represent players in-game.
 */
declare namespace player {
    

    /**
     * [Server]
     * 
     * Similar to the serverside command "bot", this function creates a new Player bot with the given name. This bot will not obey to the usual "bot_*" commands, and it's the same bot base used in TF2 and CS:S.
     * 
     * The best way to control the behaviour of a Player bot right now is to use the [GM:StartCommand](https://wiki.facepunch.com/gmod/GM:StartCommand) hook and modify its input serverside.
     * 
     * **Note:**
     * >Despite this Player being fake, it has to be removed from the server by using [Player:Kick](https://wiki.facepunch.com/gmod/Player:Kick) and **NOT** [Entity:Remove](https://wiki.facepunch.com/gmod/Entity:Remove).
     * Also keep in mind that these bots still use player slots, so you won't be able to spawn them in singleplayer!
     * 
     * **Note:**
     * >Any Bot created using this method will be considered UnAuthed by Garry's Mod
     * 
     * @param botName - The name of the bot, using an already existing name will append brackets at the end of it with a number pertaining it.
     * Example: "Bot name test", "Bot name test(1)".
     */
    function CreateNextBot(botName: string): Player;
    
    /**
     * [Shared]
     * 
     * Gets all the current players in the server (not including connecting clients).
     * 
     * This function returns bots as well as human players. See [player.GetBots](https://wiki.facepunch.com/gmod/player.GetBots) and  [player.GetHumans](https://wiki.facepunch.com/gmod/player.GetHumans).
     * 
     * **Note:**
     * >This function returns a sequential table, meaning it should be looped with [Global.ipairs](https://wiki.facepunch.com/gmod/Global.ipairs) instead of [Global.pairs](https://wiki.facepunch.com/gmod/Global.pairs) for efficiency reasons.
     * 
     * 
     */
    function GetAll(): any;
    
    /**
     * [Shared]
     * 
     * Returns a table of all bots on the server.
     * 
     */
    function GetBots(): any;
    
    /**
     * [Shared]
     * 
     * Tried to get the player with the specified [Player:AccountID](https://wiki.facepunch.com/gmod/Player:AccountID).
     * 
     * **Warning:**
     * >Internally this function iterates over all players in the server, meaning it can be quite expensive in a performance-critical context.
     * 
     * @param accountID - The [Player:AccountID](https://wiki.facepunch.com/gmod/Player:AccountID) to find the player by.
     */
    function GetByAccountID(accountID: number): Player;
    
    /**
     * [Shared]
     * 
     * Gets the player with the specified connection ID.
     * 
     * Connection ID can be retrieved via [gameevent.Listen](https://wiki.facepunch.com/gmod/gameevent.Listen) events.
     * 
     * For a function that returns a player based on their [Entity:EntIndex](https://wiki.facepunch.com/gmod/Entity:EntIndex), see [Global.Entity](https://wiki.facepunch.com/gmod/Global.Entity).
     * 
     * For a function that returns a player based on their [Player:UserID](https://wiki.facepunch.com/gmod/Player:UserID), see [Global.Player](https://wiki.facepunch.com/gmod/Global.Player).
     * @param connectionID - The connection ID to find the player by.
     */
    function GetByID(connectionID: number): Player;
    
    /**
     * [Shared]
     * 
     * Gets the player with the specified SteamID.
     * 
     * **Warning:**
     * >Internally this function iterates over all players in the server, meaning it can be quite expensive in a performance-critical context.
     * 
     * @param steamID - The [Player:SteamID](https://wiki.facepunch.com/gmod/Player:SteamID) to find the player by.
     */
    function GetBySteamID(steamID: string): Player;
    
    /**
     * [Shared]
     * 
     * Gets the player with the specified SteamID64.
     * 
     * **Warning:**
     * >Internally this function iterates over all players in the server, meaning it can be quite expensive in a performance-critical context.
     * 
     * @param steamID64 - The [Player:SteamID64](https://wiki.facepunch.com/gmod/Player:SteamID64) to find the player by.
     */
    function GetBySteamID64(steamID64: string): Player;
    
    /**
     * [Shared]
     * 
     * @deprecated Use [player.GetBySteamID64](https://wiki.facepunch.com/gmod/player.GetBySteamID64), [player.GetBySteamID](https://wiki.facepunch.com/gmod/player.GetBySteamID) or [player.GetByAccountID](https://wiki.facepunch.com/gmod/player.GetByAccountID) to get a player by a unique identifier instead.
     * 
     * **Warning:**
     * >It is highly recommended to use [player.GetByAccountID](https://wiki.facepunch.com/gmod/player.GetByAccountID), [player.GetBySteamID](https://wiki.facepunch.com/gmod/player.GetBySteamID) or [player.GetBySteamID64](https://wiki.facepunch.com/gmod/player.GetBySteamID64) instead as this function can have collisions ( be same for different people ) while SteamID is guaranteed to unique to each player.
     * 
     * **Warning:**
     * >Internally this function iterates over all players in the server, meaning it can be quite expensive in a performance-critical context.
     * 
     * @param uniqueID - The [Player:UniqueID](https://wiki.facepunch.com/gmod/Player:UniqueID) to find the player by.
     */
    function GetByUniqueID(uniqueID: string): Player;
    
    /**
     * [Shared]
     * 
     * Gives you the player count.
     * 
     * **Note:**
     * >Similar to **#**[player.GetAll](https://wiki.facepunch.com/gmod/player.GetAll)() but with better performance since the player table doesn't have to be generated. If [player.GetAll](https://wiki.facepunch.com/gmod/player.GetAll) is already being called for iteration, then using the **#** operator on the table will be faster than calling this function since it is JITted.
     * 
     * 
     */
    function GetCount(): number;
    
    /**
     * [Shared]
     * 
     * Returns a table containing all human players (non-bot/AI).
     * 
     * Unlike [player.GetAll](https://wiki.facepunch.com/gmod/player.GetAll), this does not include bots.
     * 
     * **Note:**
     * >This function returns a sequential table, meaning it should be looped with [Global.ipairs](https://wiki.facepunch.com/gmod/Global.ipairs) instead of [Global.pairs](https://wiki.facepunch.com/gmod/Global.pairs) for efficiency reasons.
     * 
     * 
     */
    function GetHumans(): any;
    
    /**
     * [Shared]
     * 
     * Returns an iterator for all players on the server.
     * 
     * This will be quite a bit faster than [player.GetAll](https://wiki.facepunch.com/gmod/player.GetAll), especially when using the `break` keyword.
     * 
     */
    function Iterator(): LuaMultiReturn<[Function, any, number]>;

}

/**
 * The player_manager library lets you manage players, such as setting their models or creating player classes.
 */
declare namespace player_manager {
    

    /**
     * [Shared]
     * 
     * Assigns view model hands to player model.
     * @param name - Player model name
     * @param model - Hands model
     * @param [skin = 0] - Skin to apply to the hands
     * @param [bodygroups = 0000000] - Bodygroups to apply to the hands. See [Entity:SetBodyGroups](https://wiki.facepunch.com/gmod/Entity:SetBodyGroups) for help with the format.
     * @param [matchBodySkin = false] - If set to `true`, the skin of the hands will be set to the skin of the playermodel. 
     *  This is useful when player models have multiple user-selectable skins.
     */
    function AddValidHands(name: string, model: string, skin = 0, bodygroups?: string, matchBodySkin = false): void;
    
    /**
     * [Shared]
     * 
     * Associates a simplified name with a path to a valid player model.
     * 
     * Only used internally.
     * @param name - Simplified name
     * @param model - Valid PlayerModel path
     */
    function AddValidModel(name: string, model: string): void;
    
    /**
     * [Shared]
     * 
     * Returns the entire list of valid player models.
     * 
     */
    function AllValidModels(): void;
    
    /**
     * [Shared]
     * 
     * Clears a player's class association by setting their ClassID to 0
     * @param ply - Player to clear class from
     */
    function ClearPlayerClass(ply: Player): void;
    
    /**
     * [Shared]
     * 
     * Gets a players class
     * @param ply - Player to get class
     */
    function GetPlayerClass(ply: Player): string;
    
    /**
     * [Shared]
     * 
     * Retrieves a copy of all registered player classes.
     * 
     */
    function GetPlayerClasses(): any;
    
    /**
     * [Shared]
     * 
     * Applies basic class variables when the player spawns.
     * 
     * Called from [GM:PlayerSpawn](https://wiki.facepunch.com/gmod/GM:PlayerSpawn) in the base gamemode.
     * @param ply - Player to setup
     */
    function OnPlayerSpawn(ply: Player): void;
    
    /**
     * [Shared]
     * 
     * Register a class metatable to be assigned to players later
     * @param name - Class name
     * @param table - Class metatable
     * @param base - Base class name
     */
    function RegisterClass(name: string, table: any, base: string): void;
    
    /**
     * [Shared]
     * 
     * Execute a named function within the player's set class
     * @param ply - Player to execute function on.
     * @param funcName - Name of function.
     * @param arguments - Optional arguments. Can be of any type.
     */
    function RunClass(ply: Player, funcName: string, ...arguments: any[]): any[];
    
    /**
     * [Shared]
     * 
     * Sets a player's class
     * @param ply - Player to set class
     * @param classname - Name of class to set
     */
    function SetPlayerClass(ply: Player, classname: string): void;
    
    /**
     * [Shared]
     * 
     * Retrieves correct hands for given player model. By default returns citizen hands.
     * 
     * **Note:**
     * >See [player_manager.AddValidHands](https://wiki.facepunch.com/gmod/player_manager.AddValidHands) for defining/linking hands to a model - this must be defined somewhere otherwise the model will return citizen hands here.
     * 
     * @param name - Player model name
     */
    function TranslatePlayerHands(name: string): any;
    
    /**
     * [Shared]
     * 
     * Returns the valid model path for a simplified name.
     * @param shortName - The short name of the model.
     */
    function TranslatePlayerModel(shortName: string): string;
    
    /**
     * [Shared]
     * 
     * Returns the simplified name for a valid model path of a player model.
     * 
     * Opposite of [player_manager.TranslatePlayerModel](https://wiki.facepunch.com/gmod/player_manager.TranslatePlayerModel).
     * @param model - The model path to a player model
     */
    function TranslateToPlayerModelName(model: string): string;

}

/**
 * The presets library lets you add and modify the pre-set options for scripted tools (selected via the white bar at the top of each tools control panel).
 */
declare namespace presets {
    

    /**
     * [Client]
     * 
     * Adds preset to a preset group.
     * @param groupname - The preset group name, usually it's tool class name.
     * @param name - Preset name, must be unique.
     * @param values - A table of preset console commands.
     */
    function Add(groupname: string, name: string, values: any): void;
    
    /**
     * [Client]
     * 
     * Used internally to tell the player that the name they tried to use in their preset is not acceptable.
     * 
     */
    function BadNameAlert(): void;
    
    /**
     * [Client]
     * 
     * Returns whether a preset with given name exists or not
     * @param type - The preset group name, usually it's tool class name.
     * @param name - Name of the preset to test
     */
    function Exists(type: string, name: string): boolean;
    
    /**
     * [Client]
     * 
     * Returns a table with preset names and values from a single preset group.
     * @param groupname - Preset group name.
     */
    function GetTable(groupname: string): any;
    
    /**
     * [Client]
     * 
     * Used internally to ask the player if they want to override an already existing preset.
     * @param callback - 
     */
    function OverwritePresetPrompt(callback: Function): void;
    
    /**
     * [Client]
     * 
     * Removes a preset entry from a preset group.
     * @param groupname - Preset group to remove from
     * @param name - Name of preset to remove
     */
    function Remove(groupname: string, name: string): void;
    
    /**
     * [Client]
     * 
     * Renames preset.
     * @param groupname - Preset group name
     * @param oldname - Old preset name
     * @param newname - New preset name
     */
    function Rename(groupname: string, oldname: string, newname: string): void;

}

/**
 * The properties library gives you access to the menu that shows up when right clicking entities while holding C.
 */
declare namespace properties {
    

    /**
     * [Shared]
     * 
     * Add properties to the properties module
     * @param name - A unique name used to identify the property
     * @param propertyData - A table that defines the property. Uses the [Structures/PropertyAdd](https://wiki.facepunch.com/gmod/Structures/PropertyAdd).
     */
    function Add(name: string, propertyData: PropertyAdd): void;
    
    /**
     * [Shared]
     * 
     * Returns true if given entity can be targeted by the player via the properties system.
     * 
     * This should be used serverside in your properties to prevent abuse by clientside scripting.
     * @param ent - The entity to test
     * @param ply - If given, will also perform a distance check based on the entity's Orientated Bounding Box.
     */
    function CanBeTargeted(ent: Entity, ply: Player): boolean;
    
    /**
     * [Client]
     * 
     * Returns an entity player is hovering over with their cursor.
     * @param pos - Eye position of local player, [Entity:EyePos](https://wiki.facepunch.com/gmod/Entity:EyePos)
     * @param aimVec - Aim vector of local player, [Player:GetAimVector](https://wiki.facepunch.com/gmod/Player:GetAimVector)
     */
    function GetHovered(pos: Vector, aimVec: Vector): Entity;
    
    /**
     * [Shared]
     * 
     * A list of all properties registered with [properties.Add](https://wiki.facepunch.com/gmod/properties.Add).
     * 
     */
    function List(): any;
    
    /**
     * [Shared]
     * 
     * Checks if player hovers over any entities and open a properties menu for it.
     * @param eyepos - The eye pos of a player
     * @param eyevec - The aim vector of a player
     */
    function OnScreenClick(eyepos: Vector, eyevec: Vector): void;
    
    /**
     * [Shared]
     * 
     * Opens properties menu for given entity.
     * @param ent - The entity to open menu for
     * @param tr - The trace that is passed as second argument to Action callback of a property
     */
    function OpenEntityMenu(ent: Entity, tr: any): void;

}

/**
 * The render library is a powerful set of functions that let you control how the world and its contents are rendered. It can also be used to draw some 3D clientside effects such as beams, boxes and spheres.
 */
declare namespace render {
    

    /**
     * [Client]
     * 
     * Adds a beam segment to the beam started by [render.StartBeam](https://wiki.facepunch.com/gmod/render.StartBeam).
     * @param startPos - Beam start position.
     * @param width - The width of the beam.
     * @param textureEnd - The end coordinate of the texture used.
     * @param color - The color to be used. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     */
    function AddBeam(startPos: Vector, width: number, textureEnd: number, color: Color): void;
    
    /**
     * [Client]
     * 
     * Blurs the render target ( or a given texture )
     * @param rendertarget - The texture to blur
     * @param blurx - Horizontal amount of blur
     * @param blury - Vertical amount of blur
     * @param passes - Amount of passes to go through
     */
    function BlurRenderTarget(rendertarget: ITexture, blurx: number, blury: number, passes: number): void;
    
    /**
     * [Client]
     * 
     * This function overrides the brush material for next render operations. It can be used with [Entity:DrawModel](https://wiki.facepunch.com/gmod/Entity:DrawModel).
     * @param [mat = nil] - 
     */
    function BrushMaterialOverride(mat?: IMaterial): void;
    
    /**
     * [Client]
     * 
     * Captures a part of the current render target and returns the data as a binary string in the given format.
     * 
     * Since the pixel buffer clears itself every frame, this will return a black screen outside of render hooks. To capture the user's final view, use [GM:PostRender](https://wiki.facepunch.com/gmod/GM:PostRender). This will not capture the Steam overlay or third-party injections (such as the Discord overlay, Overwolf, and advanced cheats) on the user's screen.
     * 
     * **Bug [#2571](https://github.com/Facepunch/garrysmod-issues/issues/2571):**
     * >In PNG mode, this function can produce unexpected result where foreground is rendered as transparent.
     * This is caused by [render.SetWriteDepthToDestAlpha](https://wiki.facepunch.com/gmod/render.SetWriteDepthToDestAlpha) set to `true` when doing most of render operations, including rendering in `_rt_fullframefb`. If you want to capture render target's content as PNG image only for output quality, set [Structures/RenderCaptureData](https://wiki.facepunch.com/gmod/Structures/RenderCaptureData)'s `alpha` to `false` when capturing render targets with [render.SetWriteDepthToDestAlpha](https://wiki.facepunch.com/gmod/render.SetWriteDepthToDestAlpha) set to `true`.
     * 
     * @param captureData - Parameters of the capture. See [Structures/RenderCaptureData](https://wiki.facepunch.com/gmod/Structures/RenderCaptureData).
     */
    function Capture(captureData: RenderCaptureData): string;
    
    /**
     * [Client]
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * 	Dumps the current render target and allows the pixels to be accessed by [render.ReadPixel](https://wiki.facepunch.com/gmod/render.ReadPixel). 
     * 
     * 	Capturing outside a render hook will return 0 0 0 255
     * 
     */
    function CapturePixels(): void;
    
    /**
     * [Client and Menu]
     * 
     * Clears the current render target and the specified buffers.
     * 
     * **Bug [#2085](https://github.com/Facepunch/garrysmod-issues/issues/2085):**
     * >This sets the alpha incorrectly for [surface](https://wiki.facepunch.com/gmod/surface) draw calls for render targets.
     * 
     * @param r - Red component to clear to.
     * @param g - Green component to clear to.
     * @param b - Blue component to clear to.
     * @param a - Alpha component to clear to.
     * @param [clearDepth = false] - Clear the depth.
     * @param [clearStencil = false] - Clear the stencil.
     */
    function Clear(r: number, g: number, b: number, a: number, clearDepth = false, clearStencil = false): void;
    
    /**
     * [Client and Menu]
     * 
     * Clears the current rendertarget for obeying the current stencil buffer conditions.
     * @param r - Value of the **red** channel to clear the current rt with.
     * @param g - Value of the **green** channel to clear the current rt with.
     * @param b - Value of the **blue** channel to clear the current rt with.
     * @param a - Value of the **alpha** channel to clear the current rt with.
     * @param depth - Clear the depth buffer.
     */
    function ClearBuffersObeyStencil(r: number, g: number, b: number, a: number, depth: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Resets the depth buffer.
     * @param [clearStencil = true] - Whether to also clear the stencil buffer.
     */
    function ClearDepth(clearStencil = true): void;
    
    /**
     * [Client]
     * 
     * Clears a render target
     * 
     * It uses [render.Clear](https://wiki.facepunch.com/gmod/render.Clear) then [render.SetRenderTarget](https://wiki.facepunch.com/gmod/render.SetRenderTarget) on the modified render target.
     * @param texture - 
     * @param color - The color, see [Color](https://wiki.facepunch.com/gmod/Color)
     */
    function ClearRenderTarget(texture: ITexture, color: Color): void;
    
    /**
     * [Client and Menu]
     * 
     * Resets all values in the stencil buffer to zero.
     * 
     */
    function ClearStencil(): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the stencil value in a specified rect.
     * 
     * This is **not** affected by [render.SetStencilWriteMask](https://wiki.facepunch.com/gmod/render.SetStencilWriteMask)
     * @param originX - X origin of the rectangle.
     * @param originY - Y origin of the rectangle.
     * @param endX - The end X coordinate of the rectangle.
     * @param endY - The end Y coordinate of the rectangle.
     * @param stencilValue - Value to set cleared stencil buffer to.
     */
    function ClearStencilBufferRectangle(originX: number, originY: number, endX: number, endY: number, stencilValue: number): void;
    
    /**
     * [Client]
     * 
     * Calculates the lighting caused by dynamic lights for the specified surface.
     * @param position - The position to sample from.
     * @param normal - The normal of the surface.
     */
    function ComputeDynamicLighting(position: Vector, normal: Vector): Vector;
    
    /**
     * [Client]
     * 
     * Calculates the light color of a certain surface.
     * @param position - The position of the surface to get the light from.
     * @param normal - The normal of the surface to get the light from.
     */
    function ComputeLighting(position: Vector, normal: Vector): Vector;
    
    /**
     * [Client]
     * 
     * Calculates diameter of a 3D sphere on a 2D screen.
     * 
     * <rendercontext hook="false" type="3D"></rendercontext>
     * @param point - The position of the sphere in 3D space.
     * @param radius - The radius of the sphere in 3D space.
     */
    function ComputePixelDiameterOfSphere(point: Vector, radius: number): number;
    
    /**
     * [Client]
     * 
     * Copies the currently active Render Target to the specified texture.
     * @param Target - The texture to copy to
     */
    function CopyRenderTargetToTexture(Target: ITexture): void;
    
    /**
     * [Client]
     * 
     * Copies the contents of one texture to another. Only works with rendertargets.
     * @param texture_from - 
     * @param texture_to - 
     */
    function CopyTexture(texture_from: ITexture, texture_to: ITexture): void;
    
    /**
     * [Client and Menu]
     * 
     * Changes the cull mode.
     * @param cullMode - Cullmode, see [Enums/MATERIAL_CULLMODE](https://wiki.facepunch.com/gmod/Enums/MATERIAL_CULLMODE)
     */
    function CullMode(cullMode: MATERIAL_CULLMODE): void;
    
    /**
     * [Client]
     * 
     * Set's the depth range of the upcoming render.
     * @param depthmin - The minimum depth of the upcoming render. `0.0` = render normally; `1.0` = render nothing.
     * @param depthmax - The maximum depth of the upcoming render. `0.0` = render everything (through walls); `1.0` = render normally.
     */
    function DepthRange(depthmin: number, depthmax: number): void;
    
    /**
     * [Client]
     * 
     * Draws textured beam.
     * 
     * <rendercontext hook="false" type="3D"></rendercontext>
     * @param startPos - Beam start position.
     * @param endPos - Beam end position.
     * @param width - The width of the beam.
     * @param textureStart - The start coordinate of the texture used.
     * @param textureEnd - The end coordinate of the texture used.
     * @param [color = Color( 255, 255, 255 )] - The color to be used. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     */
    function DrawBeam(startPos: Vector, endPos: Vector, width: number, textureStart: number, textureEnd: number, color?: Color): void;
    
    /**
     * [Client]
     * 
     * Draws a box in 3D space.
     * 
     * <rendercontext hook="false" type="3D"></rendercontext>
     * @param position - Origin of the box.
     * @param angles - Orientation of the box.
     * @param mins - Start position of the box, relative to origin.
     * @param maxs - End position of the box, relative to origin.
     * @param [color = Color( 255, 255, 255 )] - The color of the box. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     */
    function DrawBox(position: Vector, angles: Angle, mins: Vector, maxs: Vector, color?: Color): void;
    
    /**
     * [Client]
     * 
     * Draws a line in 3D space.
     * 
     * <rendercontext hook="false" type="3D"></rendercontext>
     * @param startPos - Line start position in world coordinates.
     * @param endPos - Line end position in world coordinates.
     * @param [color = Color( 255, 255, 255 )] - The color to be used. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     * @param [writeZ = false] - Whether or not to consider the Z buffer. If false, the line will be drawn over everything currently drawn, if true, the line will be drawn with depth considered, as if it were a regular object in 3D space.
     * **Bug [#1086](https://github.com/Facepunch/garrysmod-issues/issues/1086):**
     * >Enabling this option will cause the line to ignore the color's alpha.
     * 
     */
    function DrawLine(startPos: Vector, endPos: Vector, color?: Color, writeZ = false): void;
    
    /**
     * [Client]
     * 
     * Draws 2 connected triangles. Expects material to be set by [render.SetMaterial](https://wiki.facepunch.com/gmod/render.SetMaterial).
     * 
     * <rendercontext hook="false" type="3D"></rendercontext>
     * @param vert1 - First vertex.
     * @param vert2 - The second vertex.
     * @param vert3 - The third vertex.
     * @param vert4 - The fourth vertex.
     * @param [color = Color( 255, 255, 255 )] - The color of the quad. See [Global.Color](https://wiki.facepunch.com/gmod/Global.Color)
     */
    function DrawQuad(vert1: Vector, vert2: Vector, vert3: Vector, vert4: Vector, color?: any): void;
    
    /**
     * [Client]
     * 
     * Draws a quad.
     * 
     * <rendercontext hook="false" type="3D"></rendercontext>
     * @param position - Origin of the sprite.
     * @param normal - The face direction of the quad.
     * @param width - The width of the quad.
     * @param height - The height of the quad.
     * @param color - The color of the quad. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     * @param [rotation = 0] - The rotation of the quad counter-clockwise in degrees around the normal axis. In other words, the quad will always face the same way but this will rotate its corners.
     */
    function DrawQuadEasy(position: Vector, normal: Vector, width: number, height: number, color: Color, rotation = 0): void;
    
    /**
     * [Client]
     * 
     * Draws the current material set by [render.SetMaterial](https://wiki.facepunch.com/gmod/render.SetMaterial) to the whole screen. The color cannot be customized.
     * 
     * See also [render.DrawScreenQuadEx](https://wiki.facepunch.com/gmod/render.DrawScreenQuadEx).
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * @param [applyPoster = false] - If set to true, when rendering a poster the quad will be properly drawn in parts in the poster. This is used internally by some Post Processing effects. Certain special textures (frame buffer like textures) do not need this adjustment.
     */
    function DrawScreenQuad(applyPoster = false): void;
    
    /**
     * [Client]
     * 
     * Draws the current material set by [render.SetMaterial](https://wiki.facepunch.com/gmod/render.SetMaterial) to the area specified. Color cannot be customized.
     * 
     * See also [render.DrawScreenQuad](https://wiki.facepunch.com/gmod/render.DrawScreenQuad).
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * @param startX - X start position of the rect.
     * @param startY - Y start position of the rect.
     * @param width - Width of the rect.
     * @param height - Height of the rect.
     */
    function DrawScreenQuadEx(startX: number, startY: number, width: number, height: number): void;
    
    /**
     * [Client]
     * 
     * Draws a sphere in 3D space. The material previously set with [render.SetMaterial](https://wiki.facepunch.com/gmod/render.SetMaterial) will be applied the sphere's surface.
     * 
     * See also [render.DrawWireframeSphere](https://wiki.facepunch.com/gmod/render.DrawWireframeSphere) for a wireframe equivalent.
     * 
     * <rendercontext hook="false" type="3D"></rendercontext>
     * @param position - Position of the sphere.
     * @param radius - Radius of the sphere. Negative radius will make the sphere render inwards rather than outwards.
     * @param longitudeSteps - The number of longitude steps. This controls the quality of the sphere. Higher quality will lower performance significantly. 50 is a good number to start with.
     * @param latitudeSteps - The number of latitude steps. This controls the quality of the sphere. Higher quality will lower performance significantly. 50 is a good number to start with.
     * @param [color = Color( 255, 255, 255 )] - The color of the sphere. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     */
    function DrawSphere(position: Vector, radius: number, longitudeSteps: number, latitudeSteps: number, color?: Color): void;
    
    /**
     * [Client]
     * 
     * Draws a sprite in 3D space.
     * 
     * <rendercontext hook="false" type="3D"></rendercontext>
     * @param position - Position of the sprite.
     * @param width - Width of the sprite.
     * @param height - Height of the sprite.
     * @param [color = Color( 255, 255, 255 )] - Color of the sprite. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     */
    function DrawSprite(position: Vector, width: number, height: number, color?: Color): void;
    
    /**
     * [Client]
     * 
     * Draws a texture over the whole screen.
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * @param tex - The texture to draw
     */
    function DrawTextureToScreen(tex: ITexture): void;
    
    /**
     * [Client]
     * 
     * Draws a textured rectangle.
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * @param tex - The texture to draw
     * @param x - The x coordinate of the rectangle to draw.
     * @param y - The y coordinate of the rectangle to draw.
     * @param width - The width of the rectangle to draw.
     * @param height - The height of the rectangle to draw.
     */
    function DrawTextureToScreenRect(tex: ITexture, x: number, y: number, width: number, height: number): void;
    
    /**
     * [Client]
     * 
     * Draws a wireframe box in 3D space.
     * 
     * <rendercontext hook="false" type="3D"></rendercontext>
     * @param position - Position of the box.
     * @param angle - Angles of the box.
     * @param mins - The lowest corner of the box.
     * @param maxs - The highest corner of the box.
     * @param [color = Color( 255, 255, 255 )] - The color of the box. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     * @param [writeZ = false] - Sets whenever to write to the zBuffer.
     */
    function DrawWireframeBox(position: Vector, angle: Angle, mins: Vector, maxs: Vector, color?: Color, writeZ = false): void;
    
    /**
     * [Client]
     * 
     * Draws a wireframe sphere in 3d space.
     * 
     * <rendercontext hook="false" type="3D"></rendercontext>
     * @param position - Position of the sphere.
     * @param radius - The size of the sphere.
     * @param longitudeSteps - The amount of longitude steps. 
     * The larger this number is, the smoother the sphere is.
     * @param latitudeSteps - The amount of latitude steps. 
     * The larger this number is, the smoother the sphere is.
     * @param [color = Color( 255, 255, 255 )] - The color of the wireframe. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     * @param [writeZ = false] - Whether or not to consider the Z buffer. If false, the wireframe will be drawn over everything currently drawn. If true, it will be drawn with depth considered, as if it were a regular object in 3D space.
     */
    function DrawWireframeSphere(position: Vector, radius: number, longitudeSteps: number, latitudeSteps: number, color?: Color, writeZ = false): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the status of the clip renderer, returning previous state.
     * 
     * **Warning:**
     * >To prevent unintended rendering behavior of other mods/the game, you must reset the clipping state to its previous value.
     * 
     * @param state - New clipping state.
     */
    function EnableClipping(state: boolean): boolean;
    
    /**
     * [Client]
     * 
     * Ends the beam mesh of a beam started with [render.StartBeam](https://wiki.facepunch.com/gmod/render.StartBeam).
     * 
     */
    function EndBeam(): void;
    
    /**
     * [Client]
     * 
     * Sets the color of the fog.
     * @param red - Red channel of the fog color, 0 - 255.
     * @param green - Green channel of the fog color, 0 - 255.
     * @param blue - Blue channel of the fog color, 0 - 255.
     */
    function FogColor(red: number, green: number, blue: number): void;
    
    /**
     * [Client]
     * 
     * Sets the at which the fog reaches its max density.
     * @param distance - The distance at which the fog reaches its max density.
     * **Note:**
     * >If used in [GM:SetupSkyboxFog](https://wiki.facepunch.com/gmod/GM:SetupSkyboxFog), this value **must** be scaled by the first argument of the hook
     * 
     */
    function FogEnd(distance: number): void;
    
    /**
     * [Client]
     * 
     * Sets the maximum density of the fog.
     * @param maxDensity - The maximum density of the fog, 0-1.
     */
    function FogMaxDensity(maxDensity: number): void;
    
    /**
     * [Client]
     * 
     * Sets the mode of fog.
     * @param fogMode - Fog mode, see [Enums/MATERIAL_FOG](https://wiki.facepunch.com/gmod/Enums/MATERIAL_FOG).
     */
    function FogMode(fogMode: MATERIAL_FOG): void;
    
    /**
     * [Client]
     * 
     * Sets the distance at which the fog starts showing up.
     * @param fogStart - The distance at which the fog starts showing up.
     * **Note:**
     * >If used in [GM:SetupSkyboxFog](https://wiki.facepunch.com/gmod/GM:SetupSkyboxFog), this value **must** be scaled by the first argument of the hook
     * 
     */
    function FogStart(fogStart: number): void;
    
    /**
     * [Client]
     * 
     * Returns the ambient color of the map.
     * 
     */
    function GetAmbientLightColor(): Vector;
    
    /**
     * [Client]
     * 
     * Returns the current alpha blending.
     * 
     */
    function GetBlend(): number;
    
    /**
     * [Client]
     * 
     * 
     */
    function GetBloomTex0(): ITexture;
    
    /**
     * [Client]
     * 
     * 
     */
    function GetBloomTex1(): ITexture;
    
    /**
     * [Client]
     * 
     * Returns the current color modulation values as normals.
     * 
     */
    function GetColorModulation(): LuaMultiReturn<[number, number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Returns the maximum available directX version.
     * 
     */
    function GetDXLevel(): number;
    
    /**
     * [Client]
     * 
     * Returns the current fog color.
     * 
     */
    function GetFogColor(): LuaMultiReturn<[number, number, number]>;
    
    /**
     * [Client]
     * 
     * Returns the fog start and end distance.
     * 
     */
    function GetFogDistances(): LuaMultiReturn<[number, number, number]>;
    
    /**
     * [Client]
     * 
     * Returns the fog mode.
     * 
     */
    function GetFogMode(): MATERIAL_FOG;
    
    /**
     * [Client]
     * 
     * Returns the `_rt_FullFrameDepth` texture. Alias of `_rt_PowerOfTwoFB`
     * 
     */
    function GetFullScreenDepthTexture(): ITexture;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether HDR is currently enabled or not. This takes into account hardware support, current map and current client settings.
     * 
     */
    function GetHDREnabled(): boolean;
    
    /**
     * [Client]
     * 
     * Gets the light exposure on the specified position.
     * @param position - The position of the surface to get the light from.
     */
    function GetLightColor(position: Vector): Vector;
    
    /**
     * [Client]
     * 
     * 
     */
    function GetMoBlurTex0(): ITexture;
    
    /**
     * [Client]
     * 
     * 
     */
    function GetMoBlurTex1(): ITexture;
    
    /**
     * [Client]
     * 
     * 
     */
    function GetMorphTex0(): ITexture;
    
    /**
     * [Client]
     * 
     * 
     */
    function GetMorphTex1(): ITexture;
    
    /**
     * [Client]
     * 
     * Returns the render target's power of two texture.
     * 
     */
    function GetPowerOfTwoTexture(): ITexture;
    
    /**
     * [Client]
     * 
     * Alias of [render.GetPowerOfTwoTexture](https://wiki.facepunch.com/gmod/render.GetPowerOfTwoTexture).
     * 
     */
    function GetRefractTexture(): ITexture;
    
    /**
     * [Client]
     * 
     * Returns the currently active render target.
     * 
     * Instead of saving the current render target using this function and restoring to it later, it is generally better practice to use [render.PushRenderTarget](https://wiki.facepunch.com/gmod/render.PushRenderTarget) and [render.PopRenderTarget](https://wiki.facepunch.com/gmod/render.PopRenderTarget).
     * 
     */
    function GetRenderTarget(): ITexture;
    
    /**
     * [Client]
     * 
     * Returns the `_rt_ResolvedFullFrameDepth` texture for SSAO depth. It will only be updated if [GM:NeedsDepthPass](https://wiki.facepunch.com/gmod/GM:NeedsDepthPass) returns true.
     * 
     */
    function GetResolvedFullFrameDepth(): ITexture;
    
    /**
     * [Client]
     * 
     * Obtain an [ITexture](https://wiki.facepunch.com/gmod/ITexture) of the screen. You must call [render.UpdateScreenEffectTexture](https://wiki.facepunch.com/gmod/render.UpdateScreenEffectTexture) in order to update this texture with the currently rendered scene.
     * 
     * This texture is mainly used within [GM:RenderScreenspaceEffects](https://wiki.facepunch.com/gmod/GM:RenderScreenspaceEffects)
     * @param [textureIndex = 0] - Max index is 3, but engine only creates the first two for you.
     */
    function GetScreenEffectTexture(textureIndex = 0): ITexture;
    
    /**
     * [Client]
     * 
     * 
     */
    function GetSmallTex0(): ITexture;
    
    /**
     * [Client]
     * 
     * 
     */
    function GetSmallTex1(): ITexture;
    
    /**
     * [Client]
     * 
     * Returns a floating point texture the same resolution as the screen.
     * 
     * **Note:**
     * >The [gmodscreenspace](https://wiki.facepunch.com/gmod/gmodscreenspace) doesn't behave as expected when drawing a floating-point texture to an integer texture (e.g. the default render target). Use an UnlitGeneric material instead
     * 
     * 
     */
    function GetSuperFPTex(): ITexture;
    
    /**
     * [Client]
     * 
     * See [render.GetSuperFPTex](https://wiki.facepunch.com/gmod/render.GetSuperFPTex)
     * 
     */
    function GetSuperFPTex2(): ITexture;
    
    /**
     * [Client]
     * 
     * Performs a render trace and returns the color of the surface hit, this uses a low res version of the texture.
     * @param startPos - The start position to trace from.
     * @param endPos - The end position of the trace.
     */
    function GetSurfaceColor(startPos: Vector, endPos: Vector): Vector;
    
    /**
     * [Client]
     * 
     * Returns a vector representing linear tone mapping scale.
     * 
     */
    function GetToneMappingScaleLinear(): Vector;
    
    /**
     * [Client]
     * 
     * Returns the current view setup.
     * @param [noPlayer = false] - If `true`, returns the `view->GetViewSetup`, if `false` - returns `view->GetPlayerViewSetup`
     */
    function GetViewSetup(noPlayer = false): ViewSetup;
    
    /**
     * [Client]
     * 
     * Sets the render material override for all next calls of [Entity:DrawModel](https://wiki.facepunch.com/gmod/Entity:DrawModel). Also overrides [render.MaterialOverrideByIndex](https://wiki.facepunch.com/gmod/render.MaterialOverrideByIndex).
     * @param material - The material to use as override, use nil to disable.
     */
    function MaterialOverride(material: IMaterial): void;
    
    /**
     * [Client]
     * 
     * Similar to [render.MaterialOverride](https://wiki.facepunch.com/gmod/render.MaterialOverride), but overrides the materials per index. Similar to [Entity:SetSubMaterial](https://wiki.facepunch.com/gmod/Entity:SetSubMaterial)
     * 
     * [render.MaterialOverride](https://wiki.facepunch.com/gmod/render.MaterialOverride) overrides effects of this function.
     * @param index - The index of the material to override, in range of 0 to 31.
     * @param material - The material to override with
     */
    function MaterialOverrideByIndex(index: number, material: IMaterial): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the maximum texture height the renderer can handle.
     * 
     */
    function MaxTextureHeight(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the maximum texture width the renderer can handle.
     * 
     */
    function MaxTextureWidth(): number;
    
    /**
     * [Client]
     * 
     * Creates a new [Global.ClientsideModel](https://wiki.facepunch.com/gmod/Global.ClientsideModel), renders it at the specified pos/ang, and removes it. Can also be given an existing [CSEnt](https://wiki.facepunch.com/gmod/CSEnt) to reuse instead.
     * 
     * **Bug [#2688](https://github.com/Facepunch/garrysmod-issues/issues/2688):**
     * >Using this with a map model ([game.GetWorld](https://wiki.facepunch.com/gmod/game.GetWorld)():()) crashes the game.
     * 
     * **Note:**
     * >This function is only meant to be used in a single render pass kind of scenario, if you need to render a model continuously, use a cached [Global.ClientsideModel](https://wiki.facepunch.com/gmod/Global.ClientsideModel) and provide it as a second argument.
     * 
     * @param settings - Requires:
     * * [string](https://wiki.facepunch.com/gmod/string) model - The model to draw
     * * [Vector](https://wiki.facepunch.com/gmod/Vector) pos - The position to draw the model at
     * * [Angle](https://wiki.facepunch.com/gmod/Angle) angle - The angles to draw the model at
     * @param [ent = nil] - If provided, this entity will be reused instead of creating a new one with [Global.ClientsideModel](https://wiki.facepunch.com/gmod/Global.ClientsideModel). Note that the ent's model, position and angles will be changed, and [Entity:SetNoDraw](https://wiki.facepunch.com/gmod/Entity:SetNoDraw) will be set to true.
     */
    function Model(settings: any, ent?: CSEnt): void;
    
    /**
     * [Client]
     * 
     * Sets a material to override a model's default material. Similar to [Entity:SetMaterial](https://wiki.facepunch.com/gmod/Entity:SetMaterial) except it uses an [IMaterial](https://wiki.facepunch.com/gmod/IMaterial) argument and it can be used to change materials on models which are part of the world geometry.
     * @param material - The material override.
     */
    function ModelMaterialOverride(material: IMaterial): void;
    
    /**
     * [Client and Menu]
     * 
     * Overrides the write behaviour of all next rendering operations towards the alpha channel of the current render target.
     * 
     * See also [render.OverrideBlend](https://wiki.facepunch.com/gmod/render.OverrideBlend).
     * 
     * **Note:**
     * >Doing [surface](https://wiki.facepunch.com/gmod/surface) draw calls with alpha set to 0 is a no-op and will never have any effect.
     * 
     * @param enable - Enable or disable the override.
     * @param shouldWrite - If the previous argument is true, sets whether the next rendering operations should write to the alpha channel or not. Has no effect if the previous argument is false.
     */
    function OverrideAlphaWriteEnable(enable: boolean, shouldWrite: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Overrides the internal graphical functions used to determine the final color and alpha of a rendered texture.
     * 
     * See also [render.OverrideAlphaWriteEnable](https://wiki.facepunch.com/gmod/render.OverrideAlphaWriteEnable).
     * 
     * **Note:**
     * >Doing [surface](https://wiki.facepunch.com/gmod/surface) draw calls with alpha set to 0 is a no-op and won't have an effect.
     * 
     * @param enabled - true to enable, false to disable. No other arguments are required when disabling.
     * @param srcBlend - The source color blend function [Enums/BLEND](https://wiki.facepunch.com/gmod/Enums/BLEND). Determines how a rendered texture's final color should be calculated.
     * @param destBlend - The destination color blend function [Enums/BLEND](https://wiki.facepunch.com/gmod/Enums/BLEND).
     * @param blendFunc - The blend mode used for drawing the color layer [Enums/BLENDFUNC](https://wiki.facepunch.com/gmod/Enums/BLENDFUNC).
     * @param [srcBlendAlpha = none] - The source alpha blend function [Enums/BLEND](https://wiki.facepunch.com/gmod/Enums/BLEND). Determines how a rendered texture's final alpha should be calculated.
     * @param [destBlendAlpha = none] - The destination alpha blend function [Enums/BLEND](https://wiki.facepunch.com/gmod/Enums/BLEND).
     * @param [blendFuncAlpha = none] - The blend mode used for drawing the alpha layer [Enums/BLENDFUNC](https://wiki.facepunch.com/gmod/Enums/BLENDFUNC).
     */
    function OverrideBlend(enabled: boolean, srcBlend: BLEND, destBlend: BLEND, blendFunc: BLENDFUNC, srcBlendAlpha?: BLEND, destBlendAlpha?: BLEND, blendFuncAlpha?: BLENDFUNC): void;
    
    /**
     * [Client and Menu]
     * 
     * @deprecated Use [render.OverrideBlend](https://wiki.facepunch.com/gmod/render.OverrideBlend) instead.
     * 
     * **Note:**
     * >Doing [surface](https://wiki.facepunch.com/gmod/surface) draw calls with alpha set to 0 is a no-op and will never have any effect.
     * 
     * @param enabled - true to enable, false to disable. No other arguments are required when disabling.
     * @param srcBlend - The source color blend function [Enums/BLEND](https://wiki.facepunch.com/gmod/Enums/BLEND). Determines how a rendered texture's final color should be calculated.
     * @param destBlend - 
     * @param [srcBlendAlpha = nil] - The source alpha blend function [Enums/BLEND](https://wiki.facepunch.com/gmod/Enums/BLEND). Determines how a rendered texture's final alpha should be calculated.
     * @param [destBlendAlpha = nil] - 
     */
    function OverrideBlendFunc(enabled: boolean, srcBlend: BLEND, destBlend: number, srcBlendAlpha?: BLEND, destBlendAlpha?: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Overrides the write behaviour of all next rendering operations towards the color channel of the current render target.
     * @param enable - Enable or disable the override.
     * @param shouldWrite - If the previous argument is true, sets whether the next rendering operations should write to the color channel or not. Has no effect if the previous argument is false.
     */
    function OverrideColorWriteEnable(enable: boolean, shouldWrite: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Overrides the write behaviour of all next rendering operations towards the depth buffer.
     * @param enable - Enable or disable the override.
     * @param shouldWrite - If the previous argument is true, sets whether the next rendering operations should write to the depth buffer or not. Has no effect if the previous argument is false.
     */
    function OverrideDepthEnable(enable: boolean, shouldWrite: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Perform stencil operations to every pixel on the screen.
     * 
     */
    function PerformFullScreenStencilOperation(): void;
    
    /**
     * [Client and Menu]
     * 
     * Removes the current active clipping plane from the clip plane stack.
     * 
     */
    function PopCustomClipPlane(): void;
    
    /**
     * [Client and Menu]
     * 
     * Pops the current texture magnification filter from the filter stack.
     * 
     * See [render.PushFilterMag](https://wiki.facepunch.com/gmod/render.PushFilterMag)
     * 
     */
    function PopFilterMag(): void;
    
    /**
     * [Client and Menu]
     * 
     * Pops the current texture minification filter from the filter stack.
     * 
     * See [render.PushFilterMin](https://wiki.facepunch.com/gmod/render.PushFilterMin)
     * 
     */
    function PopFilterMin(): void;
    
    /**
     * [Client]
     * 
     * Pops the current flashlight mode from the flashlight mode stack.
     * 
     */
    function PopFlashlightMode(): void;
    
    /**
     * [Client]
     * 
     * Pops the last render target and viewport from the RT stack and sets them as the current render target and viewport.
     * 
     * This is should be called to restore the previous render target and viewport after a call to [render.PushRenderTarget](https://wiki.facepunch.com/gmod/render.PushRenderTarget).
     * 
     */
    function PopRenderTarget(): void;
    
    /**
     * [Client and Menu]
     * 
     * Pushes a new clipping plane of the clip plane stack and sets it as active.
     * 
     * **Bug [#2687](https://github.com/Facepunch/garrysmod-issues/issues/2687):**
     * >A max of 2 clip planes are supported on Linux/POSIX, and 6 on Windows.
     * 
     * @param normal - The normal of the clipping plane.
     * @param distance - The distance of the plane from the world origin. You can use [Vector:Dot](https://wiki.facepunch.com/gmod/Vector:Dot) between the normal and any point on the plane to find this.
     */
    function PushCustomClipPlane(normal: Vector, distance: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Pushes a texture filter onto the magnification texture filter stack.
     * 
     * See also [render.PushFilterMin](https://wiki.facepunch.com/gmod/render.PushFilterMin) and [render.PopFilterMag](https://wiki.facepunch.com/gmod/render.PopFilterMag).
     * @param texFilterType - The texture filter type, see [Enums/TEXFILTER](https://wiki.facepunch.com/gmod/Enums/TEXFILTER)
     */
    function PushFilterMag(texFilterType: TEXFILTER): void;
    
    /**
     * [Client and Menu]
     * 
     * Pushes a texture filter onto the minification texture filter stack.
     * 
     * See also [render.PushFilterMag](https://wiki.facepunch.com/gmod/render.PushFilterMag) and [render.PopFilterMin](https://wiki.facepunch.com/gmod/render.PopFilterMin).
     * @param texFilterType - The texture filter type, see [Enums/TEXFILTER](https://wiki.facepunch.com/gmod/Enums/TEXFILTER)
     */
    function PushFilterMin(texFilterType: TEXFILTER): void;
    
    /**
     * [Client]
     * 
     * Enables the flashlight projection for the upcoming rendering.
     * 
     * **Warning:**
     * >This will leave models lit under specific conditions. You should use [render.RenderFlashlights](https://wiki.facepunch.com/gmod/render.RenderFlashlights) which is meant as a direct replacement for this function.
     * 
     * @param [enable = false] - Whether the flashlight mode should be enabled or disabled.
     */
    function PushFlashlightMode(enable = false): void;
    
    /**
     * [Client]
     * 
     * Pushes the current render target and viewport to the RT stack then sets a new current render target and viewport. If the viewport is not specified, the dimensions of the render target are used instead.
     * 
     * This is similar to a call to [render.SetRenderTarget](https://wiki.facepunch.com/gmod/render.SetRenderTarget) and [render.SetViewPort](https://wiki.facepunch.com/gmod/render.SetViewPort) where the current render target and viewport have been saved beforehand, except the viewport isn't clipped to screen bounds.
     * 
     * See also [render.PopRenderTarget](https://wiki.facepunch.com/gmod/render.PopRenderTarget).
     * 
     * **Note:**
     * >If you want to render to the render target in 2d mode and it is not the same size as the screen, use [cam.Start2D](https://wiki.facepunch.com/gmod/cam.Start2D) and [cam.End2D](https://wiki.facepunch.com/gmod/cam.End2D).
     * 
     * **Note:**
     * >If the render target is bigger than the screen, rendering done with the surface library will be clipped to the screen bounds unless you call [Global.DisableClipping](https://wiki.facepunch.com/gmod/Global.DisableClipping)
     * 
     * @param texture - The new render target to be used.
     * @param [x = 0] - X origin of the viewport.
     * @param [y = 0] - Y origin of the viewport.
     * @param [w = texture:Width()] - Width of the viewport.
     * @param [h = texture:Height()] - Height of the viewport
     */
    function PushRenderTarget(texture: ITexture, x = 0, y = 0, w?: number, h?: number): void;
    
    /**
     * [Client]
     * 
     * Reads the color of the specified pixel from the RenderTarget sent by [render.CapturePixels](https://wiki.facepunch.com/gmod/render.CapturePixels)
     * @param x - The x coordinate.
     * @param y - The y coordinate.
     */
    function ReadPixel(x: number, y: number): LuaMultiReturn<[number, number, number, number]>;
    
    /**
     * [Client]
     * 
     * This applies the changes made to map lighting using [engine.LightStyle](https://wiki.facepunch.com/gmod/engine.LightStyle).
     * @param [DoStaticProps = false] - When true, this will also apply lighting changes to static props. This is really slow on large maps.
     * @param [UpdateStaticLighting = false] - Forces all props to update their static lighting. Can be slow.
     */
    function RedownloadAllLightmaps(DoStaticProps = false, UpdateStaticLighting = false): void;
    
    /**
     * [Client]
     * 
     * Renders additive flashlights on an [IMesh](https://wiki.facepunch.com/gmod/IMesh), a direct replacement for [render.PushFlashlightMode](https://wiki.facepunch.com/gmod/render.PushFlashlightMode).
     * @param renderFunc - The function that renders the [IMesh](https://wiki.facepunch.com/gmod/IMesh), or a model.
     */
    function RenderFlashlights(renderFunc: Function): void;
    
    /**
     * [Client]
     * 
     * Renders the HUD on the screen.
     * @param x - X position for the HUD draw origin.
     * @param y - Y position for the HUD draw origin.
     * @param w - Width of the HUD draw.
     * @param h - Height of the HUD draw.
     */
    function RenderHUD(x: number, y: number, w: number, h: number): void;
    
    /**
     * [Client]
     * 
     * Renders the scene with the specified viewData to the current active render target.
     * 
     * **Bug [#1330](https://github.com/Facepunch/garrysmod-issues/issues/1330):**
     * >Static props and LODs are rendered improperly due to incorrectly perceived distance.
     * 
     * @param [view = nil] - The view data to be used in the rendering. See [Structures/ViewData](https://wiki.facepunch.com/gmod/Structures/ViewData). Any missing value is assumed to be that of the current view. Similarly, you can make a normal render by simply not passing this table at all.
     */
    function RenderView(view?: ViewData): void;
    
    /**
     * [Client]
     * 
     * Resets the model lighting to the specified color.
     * 
     * Calls [render.SetModelLighting](https://wiki.facepunch.com/gmod/render.SetModelLighting) for every direction with given color.
     * @param r - The red part of the color, 0-1
     * @param g - The green part of the color, 0-1
     * @param b - The blue part of the color, 0-1
     */
    function ResetModelLighting(r: number, g: number, b: number): void;
    
    /**
     * [Client]
     * 
     * Resets the HDR tone multiplier to the specified value.
     * 
     * This will only work on HDR maps, and the value will automatically fade to what it was ( or whatever [render.SetGoalToneMappingScale](https://wiki.facepunch.com/gmod/render.SetGoalToneMappingScale) is ) if called only once.
     * @param scale - The value which should be used as multiplier.
     */
    function ResetToneMappingScale(scale: number): void;
    
    /**
     * [Client]
     * 
     * Sets the ambient lighting for any upcoming render operation.
     * @param r - The red part of the color, 0-1.
     * @param g - The green part of the color, 0-1.
     * @param b - The blue part of the color, 0-1.
     */
    function SetAmbientLight(r: number, g: number, b: number): void;
    
    /**
     * [Client]
     * 
     * Sets the alpha blending for every upcoming render operation.
     * 
     * **Bug [#3166](https://github.com/Facepunch/garrysmod-issues/issues/3166):**
     * >This does not affect non-model `render.Draw*` functions.
     * 
     * @param blending - Blending value from `0-1`.
     */
    function SetBlend(blending: number): void;
    
    /**
     * [Client]
     * 
     * Sets the current drawing material to "color".
     * 
     * The material is defined as:
     * ```
     * 
     *  "UnlitGeneric"
     *  {
     *  	"$basetexture" "color/white"
     *  	"$model" 		1
     *  	"$translucent" 	1
     *  	"$vertexalpha" 	1
     *  	"$vertexcolor" 	1
     *  }
     * ```
     * 
     */
    function SetColorMaterial(): void;
    
    /**
     * [Client]
     * 
     * Sets the current drawing material to `color_ignorez`.
     * 
     * The material is defined as:
     * ```
     * 
     *  "UnlitGeneric"
     *  {
     *  	"$basetexture" "color/white"
     *   	"$model" 		1
     *  	"$translucent" 	1
     *  	"$vertexalpha" 	1
     *  	"$vertexcolor" 	1
     *  	"$ignorez"		1
     *  }
     * ```
     * 
     */
    function SetColorMaterialIgnoreZ(): void;
    
    /**
     * [Client]
     * 
     * Sets the color modulation.
     * @param r - The red channel multiplier normal ranging from 0-1.
     * @param g - The green channel multiplier normal ranging from 0-1.
     * @param b - The blue channel multiplier normal ranging from 0-1.
     */
    function SetColorModulation(r: number, g: number, b: number): void;
    
    /**
     * [Client]
     * 
     * If the fog mode is set to <page text="MATERIAL_FOG_LINEAR_BELOW_FOG_Z">Enums/MATERIAL_FOG</page>, the fog will only be rendered below the specified height.
     * @param fogZ - The fog Z.
     */
    function SetFogZ(fogZ: number): void;
    
    /**
     * [Client]
     * 
     * Sets the goal HDR tone mapping scale.
     * 
     * Use this in a rendering/think hook as it is reset every frame.
     * @param scale - The target scale.
     */
    function SetGoalToneMappingScale(scale: number): void;
    
    /**
     * [Client]
     * 
     * Sets lighting mode when rendering something.
     * 
     * **Note:**
     * >**Do not forget to restore the default value** to avoid unexpected behavior, like the world and the HUD/UI being affected
     * 
     * @param Mode - Lighting render mode
     * Possible values are:
     * * 0 - Default
     * * 1 - Total fullbright, similar to `mat_fullbright 1` but excluding some weapon view models
     * * 2 - Increased brightness(?), models look fullbright
     */
    function SetLightingMode(Mode: number): void;
    
    /**
     * [Client]
     * 
     * Sets the lighting origin.
     * 
     * **Bug [#2804](https://github.com/Facepunch/garrysmod-issues/issues/2804):**
     * >This does not work for prop_physics.
     * 
     * @param lightingOrigin - The position from which the light should be "emitted".
     */
    function SetLightingOrigin(lightingOrigin: Vector): void;
    
    /**
     * [Client]
     * 
     * Sets the texture to be used as the lightmap in upcoming rendering operations. This is required when rendering meshes using a material with a lightmapped shader such as LightmappedGeneric.
     * 
     * <rendercontext hook="false" type="3D"></rendercontext>
     * <rendercontext hook="false" type="2D"></rendercontext>
     * @param tex - The texture to be used as the lightmap.
     */
    function SetLightmapTexture(tex: ITexture): void;
    
    /**
     * [Client]
     * 
     * Sets up the local lighting for any upcoming render operation. Up to 4 local lights can be defined, with one of three different types (point, directional, spot).
     * 
     * Disables all local lights if called with no arguments.
     * @param [lights = {}] - A table containing up to 4 tables for each light source that should be set up. Each of these tables should contain the properties of its associated light source, see [Structures/LocalLight](https://wiki.facepunch.com/gmod/Structures/LocalLight).
     */
    function SetLocalModelLights(lights?: LocalLight): void;
    
    /**
     * [Client]
     * 
     * Sets the material to be used in any upcoming render operation using the [render](https://wiki.facepunch.com/gmod/render).
     * 
     * Not to be confused with [surface.SetMaterial](https://wiki.facepunch.com/gmod/surface.SetMaterial).
     * @param mat - The material to be used.
     */
    function SetMaterial(mat: IMaterial): void;
    
    /**
     * [Client]
     * 
     * Sets up the ambient lighting for any upcoming render operation. Ambient lighting can be seen as a cube enclosing the object to be drawn, each of its faces representing a directional light source that shines towards the object. Thus, there is a total of six different light sources that can be configured separately.
     * 
     * Light color components are not restricted to a specific range (i.e. 0-255), instead, higher values will result in a brighter light.
     * @param lightDirection - The light source to edit, see [Enums/BOX](https://wiki.facepunch.com/gmod/Enums/BOX).
     * @param red - The red component of the light color.
     * @param green - The green component of the light color.
     * @param blue - The blue component of the light color.
     */
    function SetModelLighting(lightDirection: BOX, red: number, green: number, blue: number): void;
    
    /**
     * [Client]
     * 
     * Sets the render target to the specified rt.
     * @param texture - The new render target to be used.
     */
    function SetRenderTarget(texture: ITexture): void;
    
    /**
     * [Client]
     * 
     * Sets the render target with the specified index to the specified rt.
     * @param rtIndex - The index of the rt to set.
     * @param texture - The new render target to be used.
     */
    function SetRenderTargetEx(rtIndex: number, texture: ITexture): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets a scissoring rect which limits the drawing area.
     * @param startX - X start coordinate of the scissor rect.
     * @param startY - Y start coordinate of the scissor rect.
     * @param endX - X end coordinate of the scissor rect.
     * @param endY - Y end coordinate of the scissor rect.
     * @param enable - Enable or disable the scissor rect.
     */
    function SetScissorRect(startX: number, startY: number, endX: number, endY: number, enable: boolean): void;
    
    /**
     * [Client]
     * 
     * Sets the shadow color.
     * @param red - The red channel of the shadow color.
     * @param green - The green channel of the shadow color.
     * @param blue - The blue channel of the shadow color.
     */
    function SetShadowColor(red: number, green: number, blue: number): void;
    
    /**
     * [Client]
     * 
     * Sets the shadow projection direction.
     * @param shadowDirections - The new shadow direction.
     */
    function SetShadowDirection(shadowDirections: Vector): void;
    
    /**
     * [Client]
     * 
     * Sets the maximum shadow projection range.
     * @param shadowDistance - The new maximum shadow distance.
     */
    function SetShadowDistance(shadowDistance: number): void;
    
    /**
     * [Client]
     * 
     * Sets whether any future render operations will ignore shadow drawing.
     * @param newState - 
     */
    function SetShadowsDisabled(newState: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the compare function of the stencil.
     * 
     * Pixels which fail the stencil comparison function are not written to the render target. The operation to be performed on the stencil buffer values for these pixels can be set using [render.SetStencilFailOperation](https://wiki.facepunch.com/gmod/render.SetStencilFailOperation).
     * 
     * Pixels which pass the stencil comparison function are written to the render target unless they fail the depth buffer test (where applicable). The operation to perform on the stencil buffer values for these pixels can be set using [render.SetStencilPassOperation](https://wiki.facepunch.com/gmod/render.SetStencilPassOperation) and [render.SetStencilZFailOperation](https://wiki.facepunch.com/gmod/render.SetStencilZFailOperation).
     * @param compareFunction - Compare function, see [Enums/STENCILCOMPARISONFUNCTION](https://wiki.facepunch.com/gmod/Enums/STENCILCOMPARISONFUNCTION), and [Enums/STENCIL](https://wiki.facepunch.com/gmod/Enums/STENCIL) for short.
     */
    function SetStencilCompareFunction(compareFunction: STENCILCOMPARISONFUNCTION): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets whether stencil tests are carried out for each rendered pixel.
     * 
     * Only pixels passing the stencil test are written to the render target.
     * @param newState - The new state.
     */
    function SetStencilEnable(newState: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the operation to be performed on the stencil buffer values if the compare function was not successful.
     * Note that this takes place **before** depth testing.
     * @param failOperation - Fail operation function, see [Enums/STENCILOPERATION](https://wiki.facepunch.com/gmod/Enums/STENCILOPERATION).
     */
    function SetStencilFailOperation(failOperation: STENCILOPERATION): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the operation to be performed on the stencil buffer values if the compare function was successful.
     * @param passOperation - Pass operation function, see [Enums/STENCILOPERATION](https://wiki.facepunch.com/gmod/Enums/STENCILOPERATION).
     */
    function SetStencilPassOperation(passOperation: STENCILOPERATION): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the reference value which will be used for all stencil operations. This is an unsigned integer.
     * @param referenceValue - Reference value.
     */
    function SetStencilReferenceValue(referenceValue: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the unsigned 8-bit test bitflag mask to be used for any stencil testing.
     * @param mask - The mask bitflag.
     */
    function SetStencilTestMask(mask: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the unsigned 8-bit write bitflag mask to be used for any writes to the stencil buffer.
     * @param mask - The mask bitflag.
     */
    function SetStencilWriteMask(mask: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the operation to be performed on the stencil buffer values if the stencil test is passed but the depth buffer test fails.
     * @param zFailOperation - Z fail operation function, see [Enums/STENCILOPERATION](https://wiki.facepunch.com/gmod/Enums/STENCILOPERATION)
     */
    function SetStencilZFailOperation(zFailOperation: STENCILOPERATION): void;
    
    /**
     * [Client]
     * 
     * @param vec - 
     */
    function SetToneMappingScaleLinear(vec: Vector): void;
    
    /**
     * [Client and Menu]
     * 
     * Changes the view port position and size. The values will be clamped to the game's screen resolution.
     * 
     * If you are looking to render something to a texture (render target), you should use [render.PushRenderTarget](https://wiki.facepunch.com/gmod/render.PushRenderTarget).
     * 
     * **Note:**
     * >This function will override values of [Global.ScrW](https://wiki.facepunch.com/gmod/Global.ScrW) and [Global.ScrH](https://wiki.facepunch.com/gmod/Global.ScrH) with the ones you set.
     * 
     * @param x - X origin of the view port.
     * @param y - Y origin of the view port.
     * @param w - Width of the view port.
     * @param h - Height of the view port.
     */
    function SetViewPort(x: number, y: number, w: number, h: number): void;
    
    /**
     * [Client]
     * 
     * Sets the internal parameter **INT_RENDERPARM_WRITE_DEPTH_TO_DESTALPHA**
     * @param enable - 
     */
    function SetWriteDepthToDestAlpha(enable: boolean): void;
    
    /**
     * [Client]
     * 
     * Swaps the frame buffers/cycles the frame. In other words, this updates the screen.
     * 
     * If you take a really long time during a single frame render, it is a good idea to use this and let the user know that the game isn't stuck.
     * 
     */
    function Spin(): void;
    
    /**
     * [Client]
     * 
     * Start a new beam draw operation.
     * 
     * <rendercontext hook="false" type="3D"></rendercontext>
     * @param segmentCount - Amount of beam segments that are about to be drawn.
     */
    function StartBeam(segmentCount: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the player's hardware supports HDR. (High Dynamic Range) HDR can still be disabled by the `mat_hdr_level` console variable or just not be supported by the map.
     * 
     */
    function SupportsHDR(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns if the current settings and the system allow the usage of pixel shaders 1.4.
     * 
     */
    function SupportsPixelShaders_1_4(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns if the current settings and the system allow the usage of pixel shaders 2.0.
     * 
     */
    function SupportsPixelShaders_2_0(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns if the current settings and the system allow the usage of vertex shaders 2.0.
     * 
     */
    function SupportsVertexShaders_2_0(): boolean;
    
    /**
     * [Client]
     * 
     * Suppresses or enables any engine lighting for any upcoming render operation.
     * 
     * **Bug [#4070](https://github.com/Facepunch/garrysmod-issues/issues/4070):**
     * >This does not affect [IMesh](https://wiki.facepunch.com/gmod/IMesh)es.
     * 
     * @param suppressLighting - True to suppress false to enable.
     */
    function SuppressEngineLighting(suppressLighting: boolean): void;
    
    /**
     * [Client]
     * 
     * Enables HDR tone mapping which influences the brightness.
     * 
     */
    function TurnOnToneMapping(): void;
    
    /**
     * [Client]
     * 
     * Updates the texture returned by [render.GetFullScreenDepthTexture](https://wiki.facepunch.com/gmod/render.GetFullScreenDepthTexture).
     * 
     * Silently fails if [render.SupportsPixelShaders_2_0](https://wiki.facepunch.com/gmod/render.SupportsPixelShaders_2_0) returns false.
     * 
     */
    function UpdateFullScreenDepthTexture(): void;
    
    /**
     * [Client]
     * 
     * Updates the power of two texture.
     * 
     */
    function UpdatePowerOfTwoTexture(): ITexture;
    
    /**
     * [Client]
     * 
     * Pretty much alias of [render.UpdatePowerOfTwoTexture](https://wiki.facepunch.com/gmod/render.UpdatePowerOfTwoTexture) but does not return the texture.
     * 
     */
    function UpdateRefractTexture(): void;
    
    /**
     * [Client]
     * 
     * Copies the entire screen to the screen effect texture, which can be acquired via [render.GetScreenEffectTexture](https://wiki.facepunch.com/gmod/render.GetScreenEffectTexture). This function is mainly intended to be used in [GM:RenderScreenspaceEffects](https://wiki.facepunch.com/gmod/GM:RenderScreenspaceEffects)
     * @param [textureIndex = 0] - Texture index to update. Max index is 3, but engine only creates the first two for you.
     */
    function UpdateScreenEffectTexture(textureIndex = 0): void;
    
    /**
     * [Client]
     * 
     * This function overrides all map materials for one frame.
     * @param [mat = nil] - 
     */
    function WorldMaterialOverride(mat?: IMaterial): void;

}

/**
 * The resource library is used to control what files are sent to clients who join a server, this includes models, materials, sounds, text files but not Lua files.
 */
declare namespace resource {
    

    /**
     * [Server]
     * 
     * Adds the specified and all related files to the files the client should download.
     * 
     * For convenience, this function will automatically add any other files that are related to the selected one, and throw an error if it can't find them. For example, a `.vmt` file will automatically add the `.vtf` with the same name, and a `.mdl` file will automatically add all `.vvd`, `.ani`, `.dx80.vtx`, `.dx90.vtx`, `.sw.vtx`, `.phy` and `.jpg` files with the same name, with a separate error for each missing file.
     * 
     * If you do not want it to do this, use [resource.AddSingleFile](https://wiki.facepunch.com/gmod/resource.AddSingleFile).
     * 
     * **Warning:**
     * >There's a 8192 downloadable file limit. If you need more, consider using Workshop addons - [resource.AddWorkshop](https://wiki.facepunch.com/gmod/resource.AddWorkshop). You should also consider the fact that you have way too many downloads. This limit is shared among all resource.Add functions.
     * 
     * **Note:**
     * >Running this function using a path relative to the main `garrysmod/` folder will not work for files in addons and gamemodes. Instead, the files must be added relative to their respective content folders. For example, a sound file from an addon would use the path "sound/[FILENAME_AND_EXTENSION]," despite the file being located in `addons/[ADDON_NAME]/sound/[FILENAME_AND_EXTENSION]`
     * 
     * **Note:**
     * >The file must exist on the server or players will not download it!
     * 
     * @param path - Virtual path of the file to be added, relative to `garrysmod/`. Do not add `.bz2` to the filepath. Do not put `gamemodes/gamemodename\content/` or `addons/addonname\` into the path.
     */
    function AddFile(path: string): void;
    
    /**
     * [Server]
     * 
     * Adds the specified file to the files the client should download.
     * 
     * If you wish to add textures or models, consider using [resource.AddFile](https://wiki.facepunch.com/gmod/resource.AddFile) to add all the files required for a texture/model.
     * 
     * **Warning:**
     * >There's a 8192 downloadable file limit.
     * 
     * **Note:**
     * >If you need more than 8192, consider using Workshop addons - [resource.AddWorkshop](https://wiki.facepunch.com/gmod/resource.AddWorkshop). You should also consider the fact that you have way too many downloads. This limit is shared among all resource.Add functions.
     * 
     * **Note:**
     * >The file must exist on the server or players will not download it!
     * 
     * @param path - Path of the file to be added, relative to garrysmod/
     */
    function AddSingleFile(path: string): void;
    
    /**
     * [Server]
     * 
     * Adds a workshop addon for the client to download before entering the server.
     * 
     * Having the raw files from a workshop item does not count as having already downloaded it.<br/>
     * So players who previously downloaded a map through Fast Download will have to re-download it if you use the workshop.
     * 
     * You should try to only add addons that have custom content ( models, sounds, etc ).
     * 
     * Gamemodes that are <page text="workshop enabled">Gamemode_Creation#Gamemode_Text_File</page> are automatically added to this list - so there's no need to add them.
     * 
     * The server's current map is also automatically added, if it is loaded from a workshop addon.
     * 
     * **Warning:**
     * >This will not "install" the addon on your server, see [Workshop for Dedicated Servers](https://wiki.facepunch.com/gmod/Workshop_for_Dedicated_Servers) for installing Steam Workshop addons onto your servers
     * 
     * @param workshopid - The workshop id of the file. This cannot be a collection.
     */
    function AddWorkshop(workshopid: string): void;

}

/**
 * The saverestore library contains functions relating to the singleplayer save system built into the game.
 */
declare namespace saverestore {
    

    /**
     * [Shared]
     * 
     * Adds a restore/load hook for the Half-Life 2 save system.
     * @param identifier - The unique identifier for this hook.
     * @param callback - The function to be called when an engine save is being loaded. It has one argument:
     * [IRestore](https://wiki.facepunch.com/gmod/IRestore) save - The restore object to be used to read data from save file that is being loaded
     * You can also use those functions to read data:
     * [saverestore.ReadVar](https://wiki.facepunch.com/gmod/saverestore.ReadVar)
     * [saverestore.ReadTable](https://wiki.facepunch.com/gmod/saverestore.ReadTable)
     * [saverestore.LoadEntity](https://wiki.facepunch.com/gmod/saverestore.LoadEntity)
     */
    function AddRestoreHook(identifier: string, callback: Function): void;
    
    /**
     * [Shared]
     * 
     * Adds a save hook for the Half-Life 2 save system. You can this to carry data through level transitions in Half-Life 2.
     * @param identifier - The unique identifier for this hook.
     * @param callback - The function to be called when an engine save is being saved. It has one argument:
     * [ISave](https://wiki.facepunch.com/gmod/ISave) save - The save object to be used to write data to the save file that is being saved
     * You can also use those functions to save data:
     * [saverestore.WriteVar](https://wiki.facepunch.com/gmod/saverestore.WriteVar)
     * [saverestore.WriteTable](https://wiki.facepunch.com/gmod/saverestore.WriteTable)
     * [saverestore.SaveEntity](https://wiki.facepunch.com/gmod/saverestore.SaveEntity)
     */
    function AddSaveHook(identifier: string, callback: Function): void;
    
    /**
     * [Shared]
     * 
     * Loads [Entity:GetTable](https://wiki.facepunch.com/gmod/Entity:GetTable) from the save game file that is being loaded and merges it with the given entitys [Entity:GetTable](https://wiki.facepunch.com/gmod/Entity:GetTable).
     * @param ent - The entity which will receive the loaded values from the save.
     * @param save - The restore object to read the [Entity:GetTable](https://wiki.facepunch.com/gmod/Entity:GetTable) from.
     */
    function LoadEntity(ent: Entity, save: IRestore): void;
    
    /**
     * [Shared]
     * 
     * Called by engine when a save is being loaded.
     * 
     * This handles loading gamemode and calls all of the hooks added with [saverestore.AddRestoreHook](https://wiki.facepunch.com/gmod/saverestore.AddRestoreHook).
     * @param save - The restore object to read data from the save file with.
     */
    function LoadGlobal(save: IRestore): void;
    
    /**
     * [Shared]
     * 
     * Called by the engine just before [saverestore.LoadGlobal](https://wiki.facepunch.com/gmod/saverestore.LoadGlobal) is.
     * 
     */
    function PreRestore(): void;
    
    /**
     * [Shared]
     * 
     * Called by the engine just before [saverestore.SaveGlobal](https://wiki.facepunch.com/gmod/saverestore.SaveGlobal) is.
     * 
     */
    function PreSave(): void;
    
    /**
     * [Shared]
     * 
     * Reads a table from the save game file that is being loaded.
     * @param save - The restore object to read the table from.
     */
    function ReadTable(save: IRestore): any;
    
    /**
     * [Shared]
     * 
     * Loads a variable from the save game file that is being loaded.
     * 
     * Variables will be read in the save order you have saved them.
     * @param save - The restore object to read variables from.
     */
    function ReadVar(save: IRestore): any;
    
    /**
     * [Shared]
     * 
     * Saves entitys [Entity:GetTable](https://wiki.facepunch.com/gmod/Entity:GetTable) to the save game file that is being saved.
     * @param ent - The entity to save [Entity:GetTable](https://wiki.facepunch.com/gmod/Entity:GetTable) of.
     * @param save - The save object to save [Entity:GetTable](https://wiki.facepunch.com/gmod/Entity:GetTable) to.
     */
    function SaveEntity(ent: Entity, save: ISave): void;
    
    /**
     * [Shared]
     * 
     * Called by engine when a save is being saved.
     * 
     * This handles saving gamemode and calls all of the hooks added with [saverestore.AddSaveHook](https://wiki.facepunch.com/gmod/saverestore.AddSaveHook).
     * @param save - The save object to write data into the save file.
     */
    function SaveGlobal(save: ISave): void;
    
    /**
     * [Shared]
     * 
     * Returns how many writable keys are in the given table.
     * @param table - The table to test.
     */
    function WritableKeysInTable(table: any): number;
    
    /**
     * [Shared]
     * 
     * Write a table to a save game file that is being saved.
     * @param table - The table to write
     * @param save - The save object to write the table to.
     */
    function WriteTable(table: any, save: ISave): void;
    
    /**
     * [Shared]
     * 
     * Writes a variable to the save game file that is being saved.
     * @param value - The value to save.
     * It can be one of the following types: [number](https://wiki.facepunch.com/gmod/number), [boolean](https://wiki.facepunch.com/gmod/boolean), [string](https://wiki.facepunch.com/gmod/string), [Entity](https://wiki.facepunch.com/gmod/Entity), [Angle](https://wiki.facepunch.com/gmod/Angle), [Vector](https://wiki.facepunch.com/gmod/Vector) or [table](https://wiki.facepunch.com/gmod/table).
     * @param save - The save object to write the variable to.
     */
    function WriteVar(value: any, save: ISave): void;

}

/**
 * The scripted_ents library allows you to access information about any scripted entities loaded into the game, as well as register your own entities.
 */
declare namespace scripted_ents {
    

    /**
     * [Shared]
     * 
     * Defines an alias string that can be used to refer to another classname
     * @param alias - A new string which can be used to refer to another classname
     * @param classname - The classname the alias should refer to
     */
    function Alias(alias: string, classname: string): void;
    
    /**
     * [Shared]
     * 
     * Returns a copy of the ENT table for a class, including functions defined by the base class
     * @param classname - The classname of the ENT table to return, can be an alias
     */
    function Get(classname: string): any;
    
    /**
     * [Shared]
     * 
     * Returns a copy of the list of all ENT tables registered
     * 
     */
    function GetList(): any;
    
    /**
     * [Shared]
     * 
     * Retrieves a member of entity's table.
     * @param class_ - Entity's class name
     * @param name - Name of member to retrieve
     */
    function GetMember(class_: string, name: string): any;
    
    /**
     * [Shared]
     * 
     * Returns a list of all ENT tables which contain ENT.Spawnable
     * 
     */
    function GetSpawnable(): ENT;
    
    /**
     * [Shared]
     * 
     * Returns the actual ENT table for a class. Modifying functions/variables in this table will change newly spawned entities
     * @param classname - The classname of the ENT table to return
     */
    function GetStored(classname: string): any;
    
    /**
     * [Shared]
     * 
     * Returns the 'type' of a class, this will one of the following: 'anim', 'ai', 'brush', 'point'.
     * @param classname - The classname to check
     */
    function GetType(classname: string): string;
    
    /**
     * [Shared]
     * 
     * Checks if name is based on base
     * @param name - Entity's class name to be checked
     * @param base - Base class name to be checked
     */
    function IsBasedOn(name: string, base: string): boolean;
    
    /**
     * [Shared]
     * 
     * Called after all ENTS have been loaded and runs [baseclass.Set](https://wiki.facepunch.com/gmod/baseclass.Set) on each one.
     * 
     * You can retrieve all the currently registered ENTS with [scripted_ents.GetList](https://wiki.facepunch.com/gmod/scripted_ents.GetList).
     * 
     * **Note:**
     * >This is not called after an ENT auto refresh, and thus the inherited baseclass functions retrieved with [baseclass.Get](https://wiki.facepunch.com/gmod/baseclass.Get) will not be updated
     * 
     * 
     */
    function OnLoaded(): void;
    
    /**
     * [Shared]
     * 
     * Registers an ENT table with a classname. Reregistering an existing classname will automatically update the functions of all existing entities of that class.
     * 
     * **Bug :**
     * >Sub-tables provided in the first argument will not carry over their metatable, and will receive a BaseClass key if the table was merged with the base's. Userdata references, which includes Vectors, Angles, Entities, etc. will not be copied.
     * 
     * @param ENT - The ENT table to register.
     * @param classname - The classname to register.
     */
    function Register(ENT: any, classname: string): void;

}

/**
 * The search library
 */
declare namespace search {
    

    /**
     * [Client]
     * 
     * Adds a search result provider. For examples, see gamemodes/sandbox/gamemode/cl_search_models.lua
     * @param provider - Provider function. It has one argument: [string](https://wiki.facepunch.com/gmod/string) searchQuery
     * You must return a list of tables structured like this:
     * * [string](https://wiki.facepunch.com/gmod/string) text - Text to "Copy to clipboard"
     * * [function](https://wiki.facepunch.com/gmod/function) func - Function to use/spawn the item
     * * [Panel](https://wiki.facepunch.com/gmod/Panel) icon - A panel to add to spawnmenu
     * * [table](https://wiki.facepunch.com/gmod/table) words - A table of words?
     * @param [id = nil] - If provided, ensures that only one provider exists with the given ID at a time.
     */
    function AddProvider(provider: Function, id?: string): void;
    
    /**
     * [Client]
     * 
     * Retrieves search results.
     * @param query - Search query
     * @param [types = nil] - If set, only searches given provider type(s), instead of everything. For example `"tool"` will only search tools in Sandbox. Can be a table for multiple types.
     * @param [maxResults = 1024] - How many results to stop at
     */
    function GetResults(query: string, types?: string, maxResults = 1024): any;

}

/**
 * Menu state library to query the master server list.
 */
declare namespace serverlist {
    

    /**
     * [Menu]
     * 
     * Adds current server the player is on to their favorites.
     * 
     */
    function AddCurrentServerToFavorites(): void;
    
    /**
     * [Menu]
     * 
     * Adds the given server address to their favorites.
     * @param address - Server Address. **IP:Port like "127.0.0.1:27015"**
     */
    function AddServerToFavorites(address: string): void;
    
    /**
     * [Menu]
     * 
     * Returns true if the current server address is in their favorites.
     * 
     */
    function IsCurrentServerFavorite(): boolean;
    
    /**
     * [Menu]
     * 
     * Returns true if the given server address is in their favorites.
     * @param address - Server Address. **IP:Port like "127.0.0.1:27015"**
     */
    function IsServerFavorite(address: string): boolean;
    
    /**
     * [Menu]
     * 
     * Queries a server for its information/ping.
     * @param ip - The IP address of the server, including the port.
     * @param callback - The function to be called if and when the request finishes. Function has the same arguments as the callback of [serverlist.Query](https://wiki.facepunch.com/gmod/serverlist.Query).
     */
    function PingServer(ip: string, callback: Function): void;
    
    /**
     * [Menu]
     * 
     * Queries a server for its player list.
     * @param ip - The IP address of the server, including the port.
     * @param callback - The function to be called if and when the request finishes. Function has one argument, a table containing tables with player info. 
     * Each table with player info has next fields:
     * [number](https://wiki.facepunch.com/gmod/number) time - The amount of time the player is playing on the server, in seconds
     * [string](https://wiki.facepunch.com/gmod/string) name - The player name
     * [number](https://wiki.facepunch.com/gmod/number) score - The players score
     */
    function PlayerList(ip: string, callback: Function): void;
    
    /**
     * [Menu]
     * 
     * Queries the master server for server list.
     * @param data - The information about what kind of servers we want. See [Structures/ServerQueryData](https://wiki.facepunch.com/gmod/Structures/ServerQueryData).
     */
    function Query(data: ServerQueryData): void;
    
    /**
     * [Menu]
     * 
     * Removes the given server address from their favorites.
     * @param address - Server Address. **IP:Port like "127.0.0.1:27015"**
     */
    function RemoveServerFromFavorites(address: string): void;

}

/**
 * Used primarily for adding new soundscript entries.
 */
declare namespace sound {
    

    /**
     * [Shared]
     * 
     * Creates a sound script. It can also override sounds, which seems to only work when set on the server.
     * 
     * You can find a list of common sound scripts that are shipped with the game by default here: [Common Sounds](https://wiki.facepunch.com/gmod/Common_Sounds).
     * @param soundData - The sounds properties. See [Structures/SoundData](https://wiki.facepunch.com/gmod/Structures/SoundData)
     */
    function Add(soundData: SoundData): void;
    
    /**
     * [Shared]
     * 
     * Overrides sounds defined inside of a txt file; typically used for adding map-specific sounds.
     * @param filepath - Path to the script file to load.
     */
    function AddSoundOverrides(filepath: string): void;
    
    /**
     * [Server]
     * 
     * Emits a sound hint to the game elements to react to, for example to repel or attract antlions.
     * @param hint - The hint to emit. See [Enums/SOUND](https://wiki.facepunch.com/gmod/Enums/SOUND)
     * @param pos - The position to emit the hint at
     * @param volume - The volume or radius of the hint
     * @param duration - The duration of the hint in seconds
     * @param [owner = NULL] - 
     */
    function EmitHint(hint: SOUND, pos: Vector, volume: number, duration: number, owner?: Entity): void;
    
    /**
     * [Client]
     * 
     * Creates a sound from a function.
     * @param indentifier - An unique identified for the sound.
     * **Warning:**
     * >You cannot override already existing ones.
     * 
     * @param samplerate - The sample rate of the sound. Must be `11025`, `22050` or `44100`.
     * @param length - The length in seconds of the sound to generate.
     * @param callback - A function which will be called to generate every sample on the sound. This function gets the current sample number passed as the first argument. The return value must be between `-1.0` and `1.0`. Other values will wrap back to the -1 to 1 range and basically clip. There are **65535** possible quantifiable values between -1 and 1.
     */
    function Generate(indentifier: string, samplerate: number, length: number, callback: Function): void;
    
    /**
     * [Server]
     * 
     * Returns the most dangerous/closest sound hint based on given location and types of sounds to sense.
     * @param types - The types of sounds to choose from. See <page text="SOUND_ enums">Enums/SOUND</page>.
     * @param pos - The position to sense sounds at.
     */
    function GetLoudestSoundHint(types: number, pos: Vector): any;
    
    /**
     * [Shared]
     * 
     * Returns properties of the soundscript.
     * @param name - The name of the sound script
     */
    function GetProperties(name: string): SoundData;
    
    /**
     * [Shared]
     * 
     * Returns a list of all registered sound scripts.
     * 
     */
    function GetTable(): any;
    
    /**
     * [Shared]
     * 
     * Plays a sound from the specified position in the world.
     * If you want to play a sound without a position, such as a UI sound, use [surface.PlaySound](https://wiki.facepunch.com/gmod/surface.PlaySound) instead.
     * 
     * This function is similar to [Global.EmitSound](https://wiki.facepunch.com/gmod/Global.EmitSound), but with less options.
     * @param snd - The sound to play. This should either be a sound script name ([sound.Add](https://wiki.facepunch.com/gmod/sound.Add)) or a file path relative to the `sound/` folder. (Make note that it's not sound**s**)
     * @param pos - Where the sound should play.
     * @param [level = 75] - Sound level in decibels. 75 is normal. Ranges from 20 to 180, where 180 is super loud. This affects how far away the sound will be heard.
     * @param [pitch = 100] - The sound pitch. Range is from 0 to 255. 100 is normal pitch.
     * @param [volume = 1] - Output volume of the sound in range 0 to 1.
     */
    function Play(snd: string, pos: Vector, level = 75, pitch = 100, volume = 1): void;
    
    /**
     * [Client]
     * 
     * Plays a file from GMod directory. You can find a list of all error codes [here](http://www.un4seen.com/doc/#bass/BASS_ErrorGetCode.html)
     * 
     * For external file/stream playback, see [sound.PlayURL](https://wiki.facepunch.com/gmod/sound.PlayURL).
     * 
     * **Bug [#1752](https://github.com/Facepunch/garrysmod-issues/issues/1752):**
     * >This fails for looping .wav files in 3D mode.
     * 
     * **Bug [#2304](https://github.com/Facepunch/garrysmod-issues/issues/2304):**
     * >This fails with unicode file names.
     * 
     * @param path - The path to the file to play.
     * Unlike other sound functions and structures, the path is relative to `garrysmod/` instead of `garrysmod/sound/`
     * @param flags - Flags for the sound. Can be one or more of following, separated by a space (" "):
     * * 3d - Makes the sound 3D, so you can set its position
     * * mono - Forces the sound to have only one channel
     * * noplay - Forces the sound not to play as soon as this function is called
     * * noblock - Disables streaming in blocks. It is more resource-intensive, but it is required for [IGModAudioChannel:SetTime](https://wiki.facepunch.com/gmod/IGModAudioChannel:SetTime).
     * If you don't want to use any of the above, you can just leave it as "".
     * @param callback - Callback function that is called as soon as the the stream is loaded. It has next arguments:
     * * [IGModAudioChannel](https://wiki.facepunch.com/gmod/IGModAudioChannel) soundchannel - The sound channel. Will be nil if an error occured.
     * * [number](https://wiki.facepunch.com/gmod/number) errorID - ID of an error if an error has occured. Will be nil, otherwise.
     * * [string](https://wiki.facepunch.com/gmod/string) errorName - Name of an error if an error has occured. Will be nil, otherwise.
     */
    function PlayFile(path: string, flags: string, callback: Function): void;
    
    /**
     * [Client]
     * 
     * Allows you to play external sound files, as well as online radio streams.
     * You can find a list of all error codes [here](http://www.un4seen.com/doc/#bass/BASS_ErrorGetCode.html)
     * 
     * For offline file playback, see [sound.PlayFile](https://wiki.facepunch.com/gmod/sound.PlayFile).
     * 
     * **Bug [#2296](https://github.com/Facepunch/garrysmod-issues/issues/2296):**
     * >Due to a bug with [BASS](http://www.un4seen.com/), AAC codec streams cannot be played in 3D mode.
     * 
     * @param url - The URL of the sound to play
     * @param flags - Flags for the sound. Can be one or more of following, separated by a space (`" "`):
     * * 3d - Makes the sound 3D, so you can set its position
     * * mono - Forces the sound to have only one channel
     * * noplay - Forces the sound not to play as soon as this function is called
     * * noblock - Disables streaming in blocks. It is more resource-intensive, but it is required for [IGModAudioChannel:SetTime](https://wiki.facepunch.com/gmod/IGModAudioChannel:SetTime).
     * If you don't want to use any of the above, you can just leave it as `""`.
     * @param callback - Callback function that is called as soon as the the stream is loaded. It has the following arguments:
     * * [IGModAudioChannel](https://wiki.facepunch.com/gmod/IGModAudioChannel) soundchannel - The sound channel
     * * [number](https://wiki.facepunch.com/gmod/number) errorID - ID of an error, if an error has occured
     * * [string](https://wiki.facepunch.com/gmod/string) errorName - Name of an error, if an error has occured
     */
    function PlayURL(url: string, flags: string, callback: Function): void;

}

/**
 * The spawnmenu library is a set of functions that allow you to control the spawn (Q) menu.
 */
declare namespace spawnmenu {
    

    /**
     * [Client]
     * 
     * Activates a tool, opens context menu and brings up the tool gun.
     * @param tool - Tool class/file name
     * @param menu_only - Should we activate this tool in the menu only or also the toolgun? `true` = menu only,`false` = toolgun aswell
     */
    function ActivateTool(tool: string, menu_only: boolean): void;
    
    /**
     * [Client]
     * 
     * Activates tools context menu in specified tool tab.
     * @param tab - The tabID of the tab to open the context menu in
     * @param cp - The control panel to open
     */
    function ActivateToolPanel(tab: number, cp: Panel): void;
    
    /**
     * [Client]
     * 
     * Returns currently opened control panel of a tool, post process effect or some other menu in spawnmenu.
     * 
     */
    function ActiveControlPanel(): Panel;
    
    /**
     * [Client]
     * 
     * Registers a new content type that is saveable into spawnlists.
     * Created/called by [spawnmenu.CreateContentIcon](https://wiki.facepunch.com/gmod/spawnmenu.CreateContentIcon).
     * @param name - An unique name of the content type.
     * @param constructor - A function that is called whenever we need create a new panel for this content type.
     * It has two arguments:
     * [Panel](https://wiki.facepunch.com/gmod/Panel) container - The container/parent of the new panel
     * [table](https://wiki.facepunch.com/gmod/table) data - Data for the content type passed from [spawnmenu.CreateContentIcon](https://wiki.facepunch.com/gmod/spawnmenu.CreateContentIcon)
     */
    function AddContentType(name: string, constructor: (pnl: Panel, tbl: any) => void): void;
    
    /**
     * [Client]
     * 
     * Inserts a new tab into the CreationMenus table, which will be used by the creation menu to generate its tabs (Spawnlists, Weapons, Entities, etc.)
     * @param name - What text will appear on the tab (I.E Spawnlists).
     * @param function_ - The function called to generate the content of the tab.
     * @param [material = icon16/exclamation.png] - Path to the material that will be used as an icon on the tab.
     * @param [order = 1000] - The order in which this tab should be shown relative to the other tabs on the creation menu.
     * @param [tooltip = nil] - The tooltip to be shown for this tab.
     */
    function AddCreationTab(name: string, function_: Function, material?: string, order = 1000, tooltip?: string): void;
    
    /**
     * [Client]
     * 
     * Used to add addon spawnlists to the spawnmenu tree. This function should be called within [SANDBOX:PopulatePropMenu](https://wiki.facepunch.com/gmod/SANDBOX:PopulatePropMenu).
     * 
     * Addon spawnlists will not save to disk if edited.
     * 
     * **Warning:**
     * >You should never try to modify player customized spawnlists!
     * 
     * @param classname - A unique classname of the list.
     * @param name - The name of the category displayed to the player, e.g. `Comic Props`.
     * @param contents - A table of entries for the spawn menu. It must be numerically indexed.
     * Each member of the table is a sub-table containing a type member, and other members depending on the type.
     * New content types can be added via [spawnmenu.AddContentType](https://wiki.facepunch.com/gmod/spawnmenu.AddContentType).
     * | [string](https://wiki.facepunch.com/gmod/string) type | Description | Other members |
     * | ------------- | ---------- | ----------------- |
     * | "header" | a simple header for organization | [string](https://wiki.facepunch.com/gmod/string) text - The text that the header will display |
     * | "model" | spawns a model where the player is looking | [string](https://wiki.facepunch.com/gmod/string) model - The path to the model file <br/>	 [number](https://wiki.facepunch.com/gmod/number) skin - The skin for the model to use (optional) <br/> [string](https://wiki.facepunch.com/gmod/string) body - The bodygroups for the model (optional) <br/> [number](https://wiki.facepunch.com/gmod/number) wide - The width of the spawnicon (optional) <br/> [number](https://wiki.facepunch.com/gmod/number) tall - The height of the spawnicon (optional) |
     * | "entity" | spawns an entity where the player is looking<br/>(appears in the Entities tab by default) | [string](https://wiki.facepunch.com/gmod/string) spawnname - The filename of the entity, for example "sent_ball" <br/> [string](https://wiki.facepunch.com/gmod/string) nicename - The name of the entity to display <br/> [string](https://wiki.facepunch.com/gmod/string) material - The icon to display, this should be set to "entities/<sent_name>.png" <br/>	[boolean](https://wiki.facepunch.com/gmod/boolean) admin - Whether the entity is only spawnable by admins (optional) |
     * | "vehicle" | spawns a vehicle where the player is looking <br/> (appears in the Vehicles tab by default) | [string](https://wiki.facepunch.com/gmod/string) spawnname - The filename of the vehicle <br/> [string](https://wiki.facepunch.com/gmod/string) nicename - The name of the vehicle to display <br/> [string](https://wiki.facepunch.com/gmod/string) material - The icon to display <br/> [boolean](https://wiki.facepunch.com/gmod/boolean) admin - Whether the vehicle is only spawnable by admins (optional) |
     * | "npc" | spawns an NPC where the player is looking <br/> (appears in the NPCs tab by default) | [string](https://wiki.facepunch.com/gmod/string) spawnname - The spawn name of the NPC <br/>	[string](https://wiki.facepunch.com/gmod/string) nicename - The name to display <br/> [string](https://wiki.facepunch.com/gmod/string) material - The icon to display <br/> [table](https://wiki.facepunch.com/gmod/table) weapon - A table of potential weapons (each a string) to give to the NPC.<br/> When spawned, one of these will be chosen randomly each time. <br/> [boolean](https://wiki.facepunch.com/gmod/boolean) admin - Whether the NPC is only spawnable by admins (optional) |
     * | "weapon" | When clicked, gives the player a weapon; <br/> When middle-clicked, spawns a weapon where the player is looking <br/> (appears in the Weapons tab by default) |[string](https://wiki.facepunch.com/gmod/string) spawnname - The spawn name of the weapon <br/> [string](https://wiki.facepunch.com/gmod/string) nicename - The name to display <br/> [string](https://wiki.facepunch.com/gmod/string) material - The icon to display <br/> [boolean](https://wiki.facepunch.com/gmod/boolean) admin - Whether the weapon is only spawnable by admins (optional) | 
     * </arg>
     * 		<arg name="icon" type="string">The icon to use in the tree.</arg>
     * 		<arg name="id" type="number" default="1000">The unique ID number for the spawnlist category. Used to make sub categories. See "parentID" parameter below. If not set, it will be automatically set to ever increasing number, starting with 1000.</arg>
     * 		<arg name="parentID" type="number" default="0">The unique ID of the parent category. This will make the created category a subcategory of category with given unique ID. `0` makes this a base category (such as `Builder`).</arg>
     * 		<arg name="needsApp" type="string" default="">The needed game for this prop category, if one is needed. If the specified game is not mounted, the category isn't shown. This uses the shortcut name, e.g. `cstrike`, and not the Steam AppID.</arg>
     */
    function AddPropCategory(classname: string, name: string, contents: any): void;
    
    /**
     * [Client]
     * 
     * Used to create a new category in the list inside of a spawnmenu ToolTab.
     * 
     * You must call this function from [SANDBOX:AddToolMenuCategories](https://wiki.facepunch.com/gmod/SANDBOX:AddToolMenuCategories) for it to work properly.
     * @param tab - The ToolTab name, as created with [spawnmenu.AddToolTab](https://wiki.facepunch.com/gmod/spawnmenu.AddToolTab).
     * You can also use the default ToolTab names "Main" and "Utilities".
     * @param RealName - The identifier name
     * @param PrintName - The displayed name
     */
    function AddToolCategory(tab: string, RealName: string, PrintName: string): void;
    
    /**
     * [Client]
     * 
     * Adds an option to the right side of the spawnmenu
     * @param tab - The spawnmenu tab to add into (for example "Utilities")
     * @param category - The category to add into (for example "Admin")
     * @param class_ - Unique identifier of option to add
     * @param name - The nice name of item
     * @param cmd - Command to execute when the item is selected
     * @param config - Config name, used in older versions to load tool settings UI from a file. No longer works.
     * **Warning:**
     * >We advise against using this. It may be changed or removed in a future update.
     * 
     * @param cpanel - A function to build the context panel. The function has one argument:
     * * [Panel](https://wiki.facepunch.com/gmod/Panel) pnl - A [DForm](https://wiki.facepunch.com/gmod/DForm) that will be shown in the context menu
     * @param [table = {}] - Allows to override the table that will be added to the tool list. Some of the fields will be overwritten by this function.
     */
    function AddToolMenuOption(tab: string, category: string, class_: string, name: string, cmd: string, config: string, cpanel: Function, table?: any): void;
    
    /**
     * [Client]
     * 
     * Adds a new tool tab to the right side of the spawnmenu via the [SANDBOX:AddToolMenuTabs](https://wiki.facepunch.com/gmod/SANDBOX:AddToolMenuTabs) hook.
     * 
     * This function is a inferior duplicate of [spawnmenu.GetToolMenu](https://wiki.facepunch.com/gmod/spawnmenu.GetToolMenu), just without its return value.
     * @param name - The internal name of the tab. This is used for sorting.
     * @param [label = name] - The 'nice' name of the tab (Tip: [language.Add](https://wiki.facepunch.com/gmod/language.Add))
     * @param [icon = icon16/wrench.png] - The filepath to the icon of the tab. Should be a .png
     */
    function AddToolTab(name: string, label?: string, icon?: string): void;
    
    /**
     * [Client]
     * 
     * Clears all the tools from the different tool categories and the categories itself, if ran at the correct place.
     * 
     * Seems to only work when ran at initialization.
     * 
     */
    function ClearToolMenus(): void;
    
    /**
     * [Client]
     * 
     * Creates a new content icon.
     * @param type - The type of the content icon.
     * @param parent - The parent to add the content icon to.
     * @param data - The data to send to the content icon in [spawnmenu.AddContentType](https://wiki.facepunch.com/gmod/spawnmenu.AddContentType)
     */
    function CreateContentIcon(type: string, parent: Panel, data: any): Panel;
    
    /**
     * [Client]
     * 
     * Calls [spawnmenu.SaveToTextFiles](https://wiki.facepunch.com/gmod/spawnmenu.SaveToTextFiles).
     * @param spawnlists - A table containing spawnlists.
     */
    function DoSaveToTextFiles(spawnlists: any): void;
    
    /**
     * [Client]
     * 
     * Returns the function to create an vgui element for a specified content type
     * @param contentType - 
     */
    function GetContentType(contentType: string): Function;
    
    /**
     * [Client]
     * 
     * Returns the list of Creation tabs. Creation tabs are added via [spawnmenu.AddCreationTab](https://wiki.facepunch.com/gmod/spawnmenu.AddCreationTab).
     * 
     */
    function GetCreationTabs(): CreationMenus;
    
    /**
     * [Client]
     * 
     * Similar to [spawnmenu.GetPropTable](https://wiki.facepunch.com/gmod/spawnmenu.GetPropTable), but only returns spawnlists created by addons via [spawnmenu.AddPropCategory](https://wiki.facepunch.com/gmod/spawnmenu.AddPropCategory).
     * 
     * These spawnlists are shown in a separate menu in-game.
     * 
     */
    function GetCustomPropTable(): any;
    
    /**
     * [Client]
     * 
     * Returns a table of all prop categories and their props in the spawnmenu.
     * 
     * Note that if the spawnmenu has not been populated, this will return an empty table.
     * 
     * This will not return spawnlists created by addons, see  [spawnmenu.GetCustomPropTable](https://wiki.facepunch.com/gmod/spawnmenu.GetCustomPropTable) for that.
     * 
     */
    function GetPropTable(): any;
    
    /**
     * [Client]
     * 
     * Adds a new tool tab (or returns an existing one by name) to the right side of the spawnmenu via the [SANDBOX:AddToolMenuTabs](https://wiki.facepunch.com/gmod/SANDBOX:AddToolMenuTabs) hook.
     * @param name - The internal name of the tab. This is used for sorting.
     * @param [label = name] - The 'nice' name of the tab
     * @param [icon = icon16/wrench.png] - The filepath to the icon of the tab. Should be a .png
     */
    function GetToolMenu(name: string, label?: string, icon?: string): any;
    
    /**
     * [Client]
     * 
     * Gets a table of tools on the client.
     * 
     */
    function GetTools(): any;
    
    /**
     * [Client]
     * 
     * Calls [spawnmenu.PopulateFromTextFiles](https://wiki.facepunch.com/gmod/spawnmenu.PopulateFromTextFiles).
     * 
     */
    function PopulateFromEngineTextFiles(): void;
    
    /**
     * [Client]
     * 
     * Loads spawnlists from text files.
     * @param callback - The function to call. Arguments are ( strFilename, strName, tabContents, icon, id, parentid, needsapp )
     */
    function PopulateFromTextFiles(callback: Function): void;
    
    /**
     * [Client]
     * 
     * Saves a table of spawnlists to files.
     * @param spawnlists - A table containing spawnlists.
     */
    function SaveToTextFiles(spawnlists: any): void;
    
    /**
     * [Client]
     * 
     * Sets currently active control panel to be returned by [spawnmenu.ActiveControlPanel](https://wiki.facepunch.com/gmod/spawnmenu.ActiveControlPanel).
     * @param pnl - The panel to set.
     */
    function SetActiveControlPanel(pnl: Panel): void;
    
    /**
     * [Client]
     * 
     * Switches the creation tab (left side of the spawnmenu) on the spawnmenu to the given tab.
     * @param id - The tab ID to open
     */
    function SwitchCreationTab(id: number): void;
    
    /**
     * [Client]
     * 
     * Opens specified tool tab in spawnmenu.
     * @param id - The tab ID to open
     */
    function SwitchToolTab(id: number): void;

}

/**
 * The SQL library allows you to access powerful database software included with Garry's Mod. It is the preferred and fastest method of storing large amounts of data. The database is located in sv.db serverside and cl.db clientside, both in the Garry's Mod base folder. SQL is a whole scripting language in itself although relatively simple, it's something you'll need to read up on before using this library.
 * 
 * Example of using sql.
 * ```
 * -- Creating a table
 * sql.Query("CREATE TABLE my_db_table( id NUMBER , name TEXT )" )
 * 
 * -- Inserting a value to the table
 * sql.Query("INSERT INTO my_db_table( id , name ) VALUES( 1 , 'First') ")
 * 
 * -- Printing the tables data
 * PrintTable( sql.Query("SELECT * FROM my_db_table ") )
 * 
 * -- Deleting the table
 * sql.Query("DROP TABLE my_db_table") 
 * ```
 * 
 * Known GMod [SQLite](https://www.sqlite.org/compile.html) settings:
 * * Temp files are stored in memory (`SQLITE_TEMP_STORE = 3`)
 * * No `ATTACH` and `DETACH` operations (`SQLITE_OMIT_ATTACH = 1`)
 * * No Virtual Tables (`SQLITE_OMIT_VIRTUALTABLE = 1`)
 * * No `VACUUM` operation (`SQLITE_OMIT_VACUUM = 1`)
 * * No `LIMIT` and `ORDER BY` clauses in `DELETE` and `UPDATE` statements (`SQLITE_ENABLE_UPDATE_DELETE_LIMIT`)
 */
declare namespace sql {
    

    /**
     * [Shared and Menu]
     * 
     * Tells the engine a set of queries is coming. Will wait until [sql.Commit](https://wiki.facepunch.com/gmod/sql.Commit) is called to run them.<br/>
     * This is most useful when you run more than 100+ queries.<br/>
     * This is equivalent to :
     * ```
     * sql.Query( "BEGIN;" )
     * ```
     * 
     */
    function Begin(): void;
    
    /**
     * [Shared and Menu]
     * 
     * Tells the engine to execute a series of queries queued for execution, must be preceded by [sql.Begin](https://wiki.facepunch.com/gmod/sql.Begin).
     * 
     * This is equivalent to `sql.Query( "COMMIT;" )`.
     * 
     */
    function Commit(): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns true if the index with the specified name exists.
     * @param indexName - The name of the index to check.
     */
    function IndexExists(indexName: string): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the last error from a SQLite query.
     * 
     */
    function LastError(): string;
    
    /**
     * [Shared and Menu]
     * 
     * Performs a query on the local SQLite database, returns a table as result set, nil if result is empty and false on error.
     * @param query - The query to execute.
     */
    function Query(query: string): any;
    
    /**
     * [Shared and Menu]
     * 
     * Performs the [sql.Query](https://wiki.facepunch.com/gmod/sql.Query) and returns the n'th row.
     * 
     * This function is equivalent to safely returning
     * ```lua
     * sql.Query(query)[row]
     * ```
     * @param query - The query as used in sql.Query
     * @param [row = 1] - The row number.
     */
    function QueryRow(query: string, row = 1): any;
    
    /**
     * [Shared and Menu]
     * 
     * Performs the query like [sql.QueryRow](https://wiki.facepunch.com/gmod/sql.QueryRow), but returns the first value found.
     * @param query - The input query.
     */
    function QueryValue(query: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Escapes dangerous characters and symbols from user input used in an SQLite SQL Query.
     * 
     * **Note:**
     * >this function is not meant to be used with external database engines such as `MySQL`. Escaping strings with inadequate functions is dangerous!
     * 
     * @param string - The string to be escaped.
     * @param [bNoQuotes = false] - Set this as `true`, and the function will not wrap the input string in apostrophes.
     */
    function SQLStr(string: string, bNoQuotes = false): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns true if the table with the specified name exists.
     * @param tableName - The name of the table to check.
     */
    function TableExists(tableName: string): boolean;

}

/**
 * Steamworks related functions.
 */
declare namespace steamworks {
    

    /**
     * [Menu]
     * 
     * Refreshes clients addons.
     * 
     */
    function ApplyAddons(): void;
    
    /**
     * [Client and Menu]
     * 
     * Downloads a file from the supplied addon and saves it as a .cache file in garrysmod/cache folder.
     * 
     * This is mostly used to download the preview image of the addon, but the game seems to also use it to download replays and saves.
     * 
     * In case the retrieved file is an image and you need the [IMaterial](https://wiki.facepunch.com/gmod/IMaterial), use [Global.AddonMaterial](https://wiki.facepunch.com/gmod/Global.AddonMaterial) with the path supplied from the callback.
     * @param workshopPreviewID - The Preview ID of workshop item.
     * @param uncompress - Whether to uncompress the file or not, assuming it was compressed with LZMA.<br/>
     * You will usually want to set this to true.
     * @param resultCallback - The function to process retrieved data. The first and only argument is a string, containing path to the saved file.
     */
    function Download(workshopPreviewID: string, uncompress: boolean, resultCallback: Function): void;
    
    /**
     * [Client and Menu]
     * 
     * Downloads a Steam Workshop file by its ID and returns a path to it.
     * @param workshopID - The ID of workshop item to download. **NOT** a file ID.
     * @param resultCallback - The function to process retrieved data. Arguments passed are:
     * * [string](https://wiki.facepunch.com/gmod/string) path - Contains a path to the saved file, or nil if the download failed for any reason.
     * * [file_class](https://wiki.facepunch.com/gmod/file_class) file - A file object pointing to the downloaded .gma file. The file handle will be closed after the function exits.
     */
    function DownloadUGC(workshopID: string, resultCallback: Function): void;
    
    /**
     * [Client and Menu]
     * 
     * Retrieves info about supplied Steam Workshop addon.
     * @param workshopItemID - The ID of Steam Workshop item.
     * @param resultCallback - The function to process retrieved data, with the following arguments:
     * * [table](https://wiki.facepunch.com/gmod/table) data - The data about the item, if the request succeeded, nil otherwise. See [Structures/UGCFileInfo](https://wiki.facepunch.com/gmod/Structures/UGCFileInfo).
     */
    function FileInfo(workshopItemID: string, resultCallback: Function): void;
    
    /**
     * [Client and Menu]
     * 
     * Retrieves a customized list of Steam Workshop addons.
     * @param type - The type of items to retrieve. Possible values include:
     * * popular (All invalid options will equal to this)
     * * trending
     * * latest
     * * friends
     * * followed - Items of people the player is following on Steam
     * * friend_favs - Favorites of player's friends
     * * favorite - Player's favorites
     * @param tags - A table of tags to match.
     * @param offset - How much of results to skip from first one. This is useful for pagination. Negative values are invalid.
     * @param numRetrieve - How many items to retrieve, up to 50 at a time. Negative values are invalid.
     * @param days - When getting `popular` or `trending` content from Steam, this determines a time period, in range of days from 0 to 365. ( 7 = most popular addons in last 7 days, 30 = most popular addons in the last month, etc ). If given a zero, will automatically choose a value, which is 7 for `trending`.
     * @param userID - "0" to retrieve all addons, "1" to retrieve addons only published by you, or a valid SteamID64 of a user to get workshop items of.
     * @param resultCallback - The function to process retrieved data. The first and only argument is a table, containing all the info, or nil in case of error
     */
    function GetList(type: string, tags: any, offset: number, numRetrieve: number, days: number, userID: string, resultCallback: Function): void;
    
    /**
     * [Client and Menu]
     * 
     * Retrieves players name by their 64bit SteamID.
     * 
     * You must call [steamworks.RequestPlayerInfo](https://wiki.facepunch.com/gmod/steamworks.RequestPlayerInfo) a decent amount of time before calling this function.
     * 
     * @deprecated You should use the callback of [steamworks.RequestPlayerInfo](https://wiki.facepunch.com/gmod/steamworks.RequestPlayerInfo) instead.
     * 
     * @param steamID64 - The 64bit Steam ID ( aka Community ID ) of the player
     */
    function GetPlayerName(steamID64: string): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns whenever the client is subscribed to the specified Steam Workshop item.
     * @param workshopItemID - The ID of the Steam Workshop item.
     */
    function IsSubscribed(workshopItemID: string): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Opens the workshop website in the steam overlay browser.
     * 
     */
    function OpenWorkshop(): void;
    
    /**
     * [Menu]
     * 
     * Publishes dupes, saves or demos to workshop.
     * @param tags - The workshop tags to apply
     * @param filename - Path to the file to upload
     * @param image - Path to the image to use as icon
     * @param name - Name of the Workshop submission
     * @param desc - Description of the Workshop submission
     */
    function Publish(tags: any, filename: string, image: string, name: string, desc: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Requests information of the player with SteamID64 for later use with [steamworks.GetPlayerName](https://wiki.facepunch.com/gmod/steamworks.GetPlayerName).
     * @param steamID64 - The 64bit Steam ID of player.
     * @param callback - A callback function with only 1 argument - [string](https://wiki.facepunch.com/gmod/string) name.
     */
    function RequestPlayerInfo(steamID64: string, callback: Function): void;
    
    /**
     * [Menu]
     * 
     * Sets the workshop item as "completed" by the player. There will be a visual indicator on the Steam Workshop for completed items.
     * @param workshopid - The Steam Workshop item id
     */
    function SetFileCompleted(workshopid: string): string;
    
    /**
     * [Menu]
     * 
     * Sets whether you have played this addon or not. This will be shown to the user in the Steam Workshop itself:
     * <image src="steamworksSetFilePlayedExample.png"/>
     * @param workshopid - The Steam Workshop item ID
     */
    function SetFilePlayed(workshopid: string): string;
    
    /**
     * [Menu]
     * 
     * Sets if an addon should be enabled or disabled. Call [steamworks.ApplyAddons](https://wiki.facepunch.com/gmod/steamworks.ApplyAddons) afterwards to update.
     * @param workshopItemID - The ID of the Steam Workshop item we should enable/disable
     * @param shouldMount - true to enable the item, false to disable.
     */
    function SetShouldMountAddon(workshopItemID: string, shouldMount: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns whenever the specified Steam Workshop addon will be mounted or not.
     * @param workshopItemID - The ID of the Steam Workshop
     */
    function ShouldMountAddon(workshopItemID: string): boolean;
    
    /**
     * [Menu]
     * 
     * Subscribes to the specified workshop addon. Call [steamworks.ApplyAddons](https://wiki.facepunch.com/gmod/steamworks.ApplyAddons) afterwards to update.
     * @param workshopItemID - The ID of the Steam Workshop item we should subscribe to
     */
    function Subscribe(workshopItemID: string): void;
    
    /**
     * [Menu]
     * 
     * Unsubscribes to the specified workshop addon. Call [steamworks.ApplyAddons](https://wiki.facepunch.com/gmod/steamworks.ApplyAddons) afterwards to update.
     * 
     * This function should `never` be called without a user's consent and should not be called if the addon is currently in use (aka: the user is not in the main menu) as it may result in unexpected behaviour.
     * @param workshopItemID - The ID of the Steam Workshop item we should unsubscribe from.
     */
    function Unsubscribe(workshopItemID: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Opens the workshop website for specified Steam Workshop item in the Steam overlay browser.
     * @param workshopItemID - The ID of workshop item.
     */
    function ViewFile(workshopItemID: string): void;
    
    /**
     * [Menu]
     * 
     * Makes the user vote for the specified addon
     * @param workshopItemID - The ID of workshop item.
     * @param upOrDown - Sets if the user should vote up/down. True makes them upvote, false down
     */
    function Vote(workshopItemID: string, upOrDown: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Retrieves vote info of supplied addon.
     * 
     * @deprecated Use data [steamworks.FileInfo](https://wiki.facepunch.com/gmod/steamworks.FileInfo) instead.
     * 
     * @param workshopItemID - The ID of workshop item.
     * @param resultCallback - The function to process retrieved data. The first and only argument is a table, containing all the info.
     */
    function VoteInfo(workshopItemID: string, resultCallback: Function): void;

}

/**
 * The string *type* is a sequence of characters.
 * 
 * The string *library* is a standard Lua library which provides functions for the manipulation of strings.[[1]](https://www.lua.org/pil/20.html)
 * 
 * In Garry's Mod there are several extra useful functions and features added to this library.<br/>
 * Most notably all strings will access this library through the string metatable index function.[[2]](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/lua/includes/extensions/string.lua#L311-L322)
 * 
 * This means all strings are treated like table objects and the string library as its <page text="Meta Table">Meta_Tables</page>
 * 
 * ```lua
 * local x = "Kittens"
 * function string.Foobar(self) return self:Right(4) end
 * 
 * string.Right(x,4) == x:Right(4) == x:Foobar() == ("Kittens"):Right(4) == x[-4]..x[-3]..x[-2]..x[-1]
 * ```
 * 
 * The string *metatable* however is something else, and to access that you must use `getmetatable("")`.
 * 
 * The difference here is related to [Metamethods](https://wiki.facepunch.com/gmod/Metamethods), such as using (+) instead of (..) to concatenate strings.
 * 
 * This category lists functions available in the string *library*.
 * 
 * **Warning:**
 * >Using `+` operator for concatenation breaks lua metamethod to sum string as numbers (Example: `"10" + "1"` return `11` (number)) and this is 400 times SLOWER!
 * 
 * **Warning:**
 * >Making changes to the string *metatable* is not a good idea unless you know what you are doing. Use the string *library* instead.
 * 
 */
declare namespace string {
    

    /**
     * [Shared and Menu]
     * 
     * Returns the given string's characters in their numeric ASCII representation.
     * 
     * **Warning:**
     * >This function will throw an error if the slice length is greater than 8000 characters.
     * 
     * @param string - The string to get the chars from.
     * @param [startPos = 1] - The first character of the string to get the byte of.
     * @param [endPos = startPos] - The last character of the string to get the byte of.
     */
    function byte(string: string, startPos = 1, endPos?: number): any[];
    
    /**
     * [Shared and Menu]
     * 
     * Converts a cardinal (`111`) number to its [ordinal/sequential variation](https://en.wikipedia.org/wiki/Ordinal_numeral) (`111th`).
     * 
     * See also [Global.STNDRD](https://wiki.facepunch.com/gmod/Global.STNDRD) for a function that returns just the suffix.
     * @param input - A number to convert to ordinal.
     */
    function CardinalToOrdinal(input: number): string;
    
    /**
     * [Shared and Menu]
     * 
     * Takes the given numerical bytes and converts them to a string.
     * @param bytes - The bytes to create the string from.
     */
    function char(...bytes: any[]): string;
    
    /**
     * [Shared and Menu]
     * 
     * Inserts commas for every third digit of a given number.
     * @param value - The input number to commafy
     * @param [separator = ,] - An optional string that will be used instead of the default comma.
     */
    function Comma(value: number, separator?: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the binary bytecode of the given function.
     * 
     * **Note:**
     * >This does not work with functions created in C/C++. An error will be thrown if it is
     * 
     * @param func - The function to get the bytecode of
     * @param [stripDebugInfo = false] - True to strip the debug data, false to keep it
     */
    function dump(func: Function, stripDebugInfo = false): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns whether or not the second passed string matches the end of the first.
     * @param str - The string whose end is to be checked.
     * @param end - The string to be matched with the end of the first.
     */
    function EndsWith(str: string, end: string): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Splits a string up wherever it finds the given separator.
     * 
     * The function [string.Split](https://wiki.facepunch.com/gmod/string.Split) is an alias of this function, except that function doesn't support using patterns.
     * 
     * See [string.Implode](https://wiki.facepunch.com/gmod/string.Implode) for the reverse operation of this function.
     * @param separator - The string will be separated wherever this sequence is found.
     * @param str - The string to split up.
     * @param [withpattern = false] - Set this to true if your separator is a <page text="pattern">Patterns</page>.
     */
    function Explode(separator: string, str: string, withpattern = false): any;
    
    /**
     * [Shared and Menu]
     * 
     * Attempts to find the specified substring in a string.
     * 
     * **Warning:**
     * >This function usesby default.
     * 
     * @param haystack - The string to search in.
     * @param needle - The string to find, can contain patterns if enabled.
     * @param [startPos = 1] - The position to start the search from, can be negative start position will be relative to the end position.
     * @param [noPatterns = false] - Disable patterns.
     */
    function find(haystack: string, needle: string, startPos = 1, noPatterns = false): LuaMultiReturn<[number, number, string]>;
    
    /**
     * [Shared and Menu]
     * 
     * Formats the specified values into the string given.
     * @param format - The string to be formatted.<br/>
     * Follows this format: http://www.cplusplus.com/reference/cstdio/printf/
     * The following features are not supported in Lua:
     * * The `n` specifier
     * * The `*` width modifier
     * * The `.*` precision modifier
     * * All length modifiers
     * The following specifiers are exclusive to LuaJIT:
     * | Format | Description | Example of the output |
     * |:------:|:-----------:|:---------------------:|
     * | %p | Returns pointer to supplied structure (table/function) | `0xf20a8968` |
     * | %q | Formats a string between double quotes, using escape sequences when necessary to ensure that it can safely be read back by the Lua interpreter | `"test\1\2test"` |
     * @param formatParameters - Values to be formatted into the string.
     */
    function format(format: string, ...formatParameters: any[]): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the time as a formatted string or as a table if no format is given.
     * @param float - The time in seconds to format.
     * @param [format = nil] - An optional formatting to use. If no format it specified, a table will be returned instead.
     */
    function FormattedTime(float: number, format?: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Creates a string from a Color variable.
     * @param color - The color to put in the string.
     */
    function FromColor(color: any): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns char value from the specified index in the supplied string.
     * 
     * @deprecated Use either string.sub(str, index, index) or str[index].
     * 
     * @param str - The string that you will be searching with the supplied index.
     * @param index - The index's value of the string to be returned.
     */
    function GetChar(str: string, index: number): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns extension of the file.
     * @param path - The string eg. file-path to get the file extension from.
     */
    function GetExtensionFromFilename(path: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns file name and extension.
     * @param path - The string eg. file-path to get the file-name from.
     */
    function GetFileFromFilename(path: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the path only from a file's path.
     * @param path - The string eg. file-path to get the path from.
     */
    function GetPathFromFilename(path: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns an iterator function that is called for every complete match of the pattern, all sub matches will be passed as to the loop.
     * 
     * @deprecated This function is removed in Lua versions later than what GMod is currently using. Use [string.gmatch](https://wiki.facepunch.com/gmod/string.gmatch) instead.
     * 
     * @param data - The string to search in
     * @param pattern - The pattern to search for
     */
    function gfind(data: string, pattern: string): Function;
    
    /**
     * [Shared and Menu]
     * 
     * Using [Patterns](https://wiki.facepunch.com/gmod/Patterns), returns an iterator which will return either one value if no capture groups are defined, or any capture group matches.
     * @param data - The string to search in
     * @param pattern - The pattern to search for
     */
    function gmatch(data: string, pattern: string): Function;
    
    /**
     * [Shared and Menu]
     * 
     * This functions main purpose is to replace certain character sequences in a string using [Patterns](https://wiki.facepunch.com/gmod/Patterns).
     * @param string - String which should be modified.
     * @param pattern - The pattern that defines what should be matched and eventually be replaced.
     * @param replacement - In case of a string the matched sequence will be replaced with it.
     * In case of a table, the matched sequence will be used as key and the table will tested for the key, if a value exists it will be used as replacement.
     * In case of a function all matches will be passed as parameters to the function, the return value(s) of the function will then be used as replacement.
     * @param [maxReplaces = nil] - Maximum number of replacements to be made.
     */
    function gsub(string: string, pattern: string, replacement: string, maxReplaces?: number): LuaMultiReturn<[string, number]>;
    
    /**
     * [Shared and Menu]
     * 
     * Joins the values of a table together to form a string.
     * 
     * This is the reverse of [string.Explode](https://wiki.facepunch.com/gmod/string.Explode) and is functionally identical to [table.concat](https://wiki.facepunch.com/gmod/table.concat), but with less features.
     * 
     * @deprecated You really should just use [table.concat](https://wiki.facepunch.com/gmod/table.concat).
     * 
     * @param [separator = ] - The separator to insert between each piece.
     * @param pieces - The table of pieces to concatenate. The keys for these must be numeric and sequential.
     */
    function Implode(separator?: string, pieces: any): string;
    
    /**
     * [Shared and Menu]
     * 
     * Interpolates a given string with the given table. This is useful for formatting localized strings.
     * @param str - The string that should be interpolated.
     * @param lookuptable - The table to search in.
     */
    function Interpolate(str: string, lookuptable: any): string;
    
    /**
     * [Shared and Menu]
     * 
     * Escapes special characters for JavaScript in a string, making the string safe for inclusion in to JavaScript strings.
     * @param str - The string that should be escaped.
     */
    function JavascriptSafe(str: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns everything left of supplied place of that string.
     * @param str - The string to extract from.
     * @param num - Amount of chars relative to the beginning (starting from 1).
     */
    function Left(str: string, num: number): string;
    
    /**
     * [Shared and Menu]
     * 
     * Counts the number of characters in the string (length). This is equivalent to using the length operator (#).
     * @param str - The string to find the length of.
     */
    function len(str: string): number;
    
    /**
     * [Shared and Menu]
     * 
     * Changes any upper-case letters in a string to lower-case letters.
     * 
     * **Note:**
     * >This function doesn't work on special non-English UTF-8 characters.
     * 
     * @param str - The string to convert.
     */
    function lower(str: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Finds a <page text="Pattern">Patterns</page> in a string.
     * @param string - String which should be searched in for matches.
     * @param pattern - The pattern that defines what should be matched.
     * @param [startPosition = 1] - The start index to start the matching from, can be negative to start the match from a position relative to the end.
     */
    function match(string: string, pattern: string, startPosition = 1): any[];
    
    /**
     * [Shared and Menu]
     * 
     * Converts a digital filesize to human-readable text.
     * @param bytes - The filesize in bytes.
     */
    function NiceSize(bytes: number): string;
    
    /**
     * [Shared and Menu]
     * 
     * Formats the supplied number (in seconds) to the highest possible time unit.
     * @param num - The number to format, in seconds.
     */
    function NiceTime(num: number): string;
    
    /**
     * [Shared and Menu]
     * 
     * Escapes all special characters within a string, making the string safe for inclusion in a Lua pattern.
     * @param str - The string to be sanitized
     */
    function PatternSafe(str: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Repeats a string by the provided number, with an optional separator.
     * @param str - The string to convert.
     * @param repetitions - Times to repeat, this value gets rounded internally.
     * @param [separator = ] - String that will separate the repeated piece. Notice that it doesn't add this string to the start or the end of the result, only between the repeated parts.
     */
    function rep(str: string, repetitions: number, separator?: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Replaces all occurrences of the supplied second string.
     * @param str - The string we are seeking to replace an occurrence(s).
     * @param find - What we are seeking to replace.
     * @param replace - What to replace find with.
     */
    function Replace(str: string, find: string, replace: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Reverses a string.
     * @param str - The string to be reversed.
     */
    function reverse(str: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the last n-th characters of the string.
     * @param str - The string to extract from.
     * @param num - Amount of chars relative to the end (starting from 1).
     */
    function Right(str: string, num: number): string;
    
    /**
     * [Shared and Menu]
     * 
     * Sets the character at the specific index of the string.
     * @param InputString - The input string
     * @param Index - The character index, 1 is the first from left.
     * @param ReplacementChar - String to replace with.
     */
    function SetChar(InputString: string, Index: number, ReplacementChar: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Splits the string into a table of strings, separated by the second argument.
     * 
     * This is an alias of [string.Explode](https://wiki.facepunch.com/gmod/string.Explode).
     * @param Inputstring - String to split
     * @param Separator - Character(s) to split with.
     */
    function Split(Inputstring: string, Separator: string): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns whether or not the first string starts with the second.
     * @param inputStr - String to check.
     * @param start - String to check with.
     */
    function StartsWith(inputStr: string, start: string): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Returns whether or not the first string starts with the second. This is a alias of [string.StartsWith](https://wiki.facepunch.com/gmod/string.StartsWith).
     * 
     * @deprecated Use [string.StartsWith](https://wiki.facepunch.com/gmod/string.StartsWith).
     * 
     * @param inputStr - String to check.
     * @param start - String to check with.
     */
    function StartWith(inputStr: string, start: string): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Removes the extension of a path.
     * @param path - The string eg. file-path to strip the extension.
     */
    function StripExtension(path: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a sub-string, starting from the character at position `StartPos` of the string (inclusive), and optionally ending at the character at position `EndPos` of the string (also inclusive). If EndPos is not given, the rest of the string is returned.
     * @param string - The string you'll take a sub-string out of.
     * @param StartPos - The position of the first character that will be included in the sub-string. It can be negative to count from the end.
     * @param [EndPos = nil] - The position of the last character to be included in the sub-string. It can be negative to count from the end.
     */
    function sub(string: string, StartPos: number, EndPos?: number): string;
    
    /**
     * [Shared and Menu]
     * 
     * Fetches a Color type from a string.
     * @param Inputstring - The string to convert from.
     */
    function ToColor(Inputstring: string): Color;
    
    /**
     * [Shared and Menu]
     * 
     * Returns given time in "MM:SS" format.
     * @param time - Time in seconds
     */
    function ToMinutesSeconds(time: number): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns given time in "MM:SS:MS" format.
     * @param time - Time in seconds
     */
    function ToMinutesSecondsMilliseconds(time: number): string;
    
    /**
     * [Shared and Menu]
     * 
     * Splits the string into characters and creates a sequential table of characters.
     * 
     * **Warning:**
     * >As a result of the  encoding, non-ASCII characters will be split into more than one character in the output table. Each character value in the output table will always be 1 byte.
     * 
     * @param str - The string you'll turn into a table.
     */
    function ToTable(str: string): any;
    
    /**
     * [Shared and Menu]
     * 
     * Removes leading and trailing matches of a string.
     * @param Inputstring - The string to trim.
     * @param [Char = %s] - String to match - can be multiple characters. Matches spaces by default.
     */
    function Trim(Inputstring: string, Char?: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Removes leading spaces/characters from a string.
     * @param str - String to trim
     * @param [char = ] - Custom character to remove
     */
    function TrimLeft(str: string, char?: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Removes trailing spaces/passed character from a string.
     * @param str - String to remove from
     * @param [char = ] - Custom character to remove, default is a space
     */
    function TrimRight(str: string, char?: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Changes any lower-case letters in a string to upper-case letters.
     * 
     * **Note:**
     * >This function doesn't work on special non-English UTF-8 characters.
     * 
     * @param str - The string to convert.
     */
    function upper(str: string): string;

}

/**
 * The surface library allows you to draw text and shapes on the screen. Primarily used for making HUDs & custom GUI panels.
 */
declare namespace surface {
    

    /**
     * [Client and Menu]
     * 
     * Creates a new font.
     * 
     * To prevent the font from displaying incorrectly when using the `outline` setting, set `antialias` to false. This will ensure the text properly fills out the entire outline.
     * 
     * Be sure to check the <page text="List of Default Fonts">Default_Fonts</page> first! Those fonts can be used without using this function.
     * 
     * See Also: [Finding the Font Name](https://wiki.facepunch.com/gmod/Finding_the_Font_Name).
     * 
     * **Warning:**
     * >Due to the static nature of fonts, do **NOT** create the font more than once. You should only be creating them once, it is recommended to create them at the top of your script. Do not use this function within [GM:HUDPaint](https://wiki.facepunch.com/gmod/GM:HUDPaint) or any other hook!
     * 
     * Define fonts that you will actually use, as fonts are very taxing on performance and will cause crashes! Do not create fonts for every size.
     * 
     * @param fontName - The new font name.
     * @param fontData - The font properties. See the [Structures/FontData](https://wiki.facepunch.com/gmod/Structures/FontData).
     */
    function CreateFont(fontName: string, fontData: FontData): void;
    
    /**
     * [Client and Menu]
     * 
     * Enables or disables the clipping used by the VGUI that limits the drawing operations to a panels bounds.
     * 
     * Identical to [Global.DisableClipping](https://wiki.facepunch.com/gmod/Global.DisableClipping). See also [Panel:NoClipping](https://wiki.facepunch.com/gmod/Panel:NoClipping).
     * 
     * @deprecated Alias of [Global.DisableClipping](https://wiki.facepunch.com/gmod/Global.DisableClipping) so use that instead.
     * 
     * @param disable - True to disable, false to enable the clipping
     */
    function DisableClipping(disable: boolean): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Draws a hollow circle, made of lines. For a filled circle, see examples for [surface.DrawPoly](https://wiki.facepunch.com/gmod/surface.DrawPoly).
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * @param originX - The center x integer coordinate.
     * @param originY - The center y integer coordinate.
     * @param radius - The radius of the circle.
     * @param r - The red value of the color to draw the circle with, or a [Color](https://wiki.facepunch.com/gmod/Color).
     * @param g - The green value of the color to draw the circle with. Unused if a [Color](https://wiki.facepunch.com/gmod/Color) was given.
     * @param b - The blue value of the color to draw the circle with. Unused if a [Color](https://wiki.facepunch.com/gmod/Color) was given.
     * @param [a = 255] - The alpha value of the color to draw the circle with. Unused if a [Color](https://wiki.facepunch.com/gmod/Color) was given.
     */
    function DrawCircle(originX: number, originY: number, radius: number, r: Color, g: Color, b: Color, a = 255): void;
    
    /**
     * [Client and Menu]
     * 
     * Draws a line from one point to another.
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * @param startX - The start x float coordinate.
     * @param startY - The start y float coordinate.
     * @param endX - The end x float coordinate.
     * @param endY - The end y float coordinate.
     */
    function DrawLine(startX: number, startY: number, endX: number, endY: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Draws a hollow box with a given border width.
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * @param x - The start x integer coordinate.
     * @param y - The start y integer coordinate.
     * @param w - The integer width.
     * @param h - The integer height.
     * @param [thickness = 1] - The thickness of the outlined box border.
     */
    function DrawOutlinedRect(x: number, y: number, w: number, h: number, thickness = 1): void;
    
    /**
     * [Client and Menu]
     * 
     * Draws a textured polygon (secretly a triangle fan) with a maximum of 4096 vertices.
     * Only works properly with convex polygons. You may try to render concave polygons, but there is no guarantee that things wont get messed up.
     * 
     * Unlike most surface library functions, non-integer coordinates are not rounded.
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * 
     * **Warning:**
     * >You must reset the drawing color and texture before calling the function to ensure consistent results. See examples below.
     * 
     * @param vertices - A table containing integer vertices. See the [Structures/PolygonVertex](https://wiki.facepunch.com/gmod/Structures/PolygonVertex).
     * **The vertices must be in clockwise order.**
     */
    function DrawPoly(vertices: PolygonVertex): void;
    
    /**
     * [Client and Menu]
     * 
     * Draws a solid rectangle on the screen.
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * @param x - The X integer co-ordinate.
     * @param y - The Y integer co-ordinate.
     * @param width - The integer width of the rectangle.
     * @param height - The integer height of the rectangle.
     */
    function DrawRect(x: number, y: number, width: number, height: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Draw the specified text on the screen, using the previously set [position](surface.SetTextPos), [font](surface.SetFont) and [color](surface.SetTextColor). This function does **not** handle newlines.
     * 
     * This function moves the [text position](surface.SetTextPos) by the length of the drawn text - this can be used to change text properties (such as font or color) without having to manually recalculate the text position. See example #2 for example use of this behavior.
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * @param text - The text to be rendered.
     * @param [forceAdditive = nil] - `true` to force text to render additive, `false` to force not additive, `nil` to use font's value.
     * When additive rendering is enabled, the rendered text pixels will be added to the existing screen pixels, rather than replacing them outright. This means black text will be invisible, and drawing on a pure white background will be impossible.
     * <upload src="70c/8db6ce804200a43.png" size="21270" name="image.png" />
     */
    function DrawText(text: string, forceAdditive?: boolean): void;
    
    /**
     * [Client and Menu]
     * 
     * Draw a textured rectangle with the given position and dimensions on the screen, using the current active texture set with [surface.SetMaterial](https://wiki.facepunch.com/gmod/surface.SetMaterial). It is also affected by [surface.SetDrawColor](https://wiki.facepunch.com/gmod/surface.SetDrawColor).
     * 
     * See also [render.SetMaterial](https://wiki.facepunch.com/gmod/render.SetMaterial) and [render.DrawScreenQuadEx](https://wiki.facepunch.com/gmod/render.DrawScreenQuadEx).
     * <br/>
     * See also [surface.DrawTexturedRectUV](https://wiki.facepunch.com/gmod/surface.DrawTexturedRectUV).
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * @param x - The X integer co-ordinate.
     * @param y - The Y integer co-ordinate.
     * @param width - The integer width of the rectangle.
     * @param height - The integer height of the rectangle.
     */
    function DrawTexturedRect(x: number, y: number, width: number, height: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Draw a textured rotated rectangle with the given position and dimensions and angle on the screen, using the current active texture.
     * 
     * <rendercontext hook="false" type="2D"></rendercontext>
     * @param x - The X integer co-ordinate, representing the center of the rectangle.
     * @param y - The Y integer co-ordinate, representing the center of the rectangle.
     * @param width - The integer width of the rectangle.
     * @param height - The integer height of the rectangle.
     * @param rotation - The rotation of the rectangle, in degrees.
     */
    function DrawTexturedRectRotated(x: number, y: number, width: number, height: number, rotation: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Draws a textured rectangle with a repeated or partial texture.
     * 
     * u and v refer to texture coordinates.
     * * (u, v) = (0, 0) is the top left
     * * (u, v) = (1, 0) is the top right
     * * (u, v) = (1, 1) is the bottom right
     * * (u, v) = (0, 1) is the bottom left
     * 
     * Using a start point of (1, 0) and an end point to (0, 1), you can draw an image flipped horizontally, same goes with other directions. Going above 1 will tile the texture. Negative values are allowed as well.
     * 
     * Here's a helper image:
     * <upload src="70c/8d7bba248dc08bd.png" size="183359" name="image.png" />
     * 
     * **Bug [#3173](https://github.com/Facepunch/garrysmod-issues/issues/3173):**
     * >The UV offsets might require (sub-)pixel correction for accurate tiling results.
     * 
     * **Note:**
     * >If you are using a .png image, you need supply the "noclamp" flag as second parameter for [Global.Material](https://wiki.facepunch.com/gmod/Global.Material) if you intend to use tiling.
     * 
     * **Note:**
     * >If you find that surface.DrawTexturedRectUV is getting your texture coordinates (u0, v0), (u1, v1) wrong and you're rendering with a material created with [Global.CreateMaterial](https://wiki.facepunch.com/gmod/Global.CreateMaterial), try adjusting them with the following code:
     * 
     * ```
     * local du = 0.5 / 32 -- half pixel anticorrection
     * local dv = 0.5 / 32 -- half pixel anticorrection
     * local u0, v0 = (u0 - du) / (1 - 2 * du), (v0 - dv) / (1 - 2 * dv)
     * local u1, v1 = (u1 - du) / (1 - 2 * du), (v1 - dv) / (1 - 2 * dv)
     * ```
     * 
     * **Explanation:**
     * surface.DrawTexturedRectUV tries to correct the texture coordinates by half a pixel (something to do with sampling) and computes the correction using IMaterial::GetMappingWidth()/GetMappingHeight(). If the material was created without a $basetexture, then GetMappingWidth()/GetMappingHeight() uses the width and height of the error material (which is 32x32).
     * 
     * @param x - The X integer coordinate.
     * @param y - The Y integer coordinate.
     * @param width - The integer width of the rectangle.
     * @param height - The integer height of the rectangle.
     * @param startU - The U texture mapping of the rectangle origin.
     * @param startV - The V texture mapping of the rectangle origin.
     * @param endU - The U texture mapping of the rectangle end.
     * @param endV - The V texture mapping of the rectangle end.
     */
    function DrawTexturedRectUV(x: number, y: number, width: number, height: number, startU: number, startV: number, endU: number, endV: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the current alpha multiplier affecting drawing operations. This is set by [surface.SetAlphaMultiplier](https://wiki.facepunch.com/gmod/surface.SetAlphaMultiplier) or by the game engine in certain other cases.
     * 
     */
    function GetAlphaMultiplier(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the current color affecting draw operations.
     * 
     * **Bug [#2407](https://github.com/Facepunch/garrysmod-issues/issues/2407):**
     * >The returned color will not have the color metatable.
     * 
     * 
     */
    function GetDrawColor(): Color;
    
    /**
     * [Client]
     * 
     * Gets the [HUD icon](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/scripts/hud_textures.txt) TextureID with the specified name.
     * @param name - The name of the texture.
     */
    function GetHUDTexture(name: string): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the current color affecting text draw operations.
     * 
     * **Bug [#2407](https://github.com/Facepunch/garrysmod-issues/issues/2407):**
     * >The returned color will not have the color metatable.
     * 
     * 
     */
    function GetTextColor(): Color;
    
    /**
     * [Client and Menu]
     * 
     * Returns the X and Y co-ordinate that has been set with [surface.SetTextPos](https://wiki.facepunch.com/gmod/surface.SetTextPos) or changed by [surface.DrawText](https://wiki.facepunch.com/gmod/surface.DrawText).
     * 
     */
    function GetTextPos(): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Returns the width and height (in pixels) of the given text with the font that has been set with [surface.SetFont](https://wiki.facepunch.com/gmod/surface.SetFont).
     * 
     * <validate>
     * Does not take into account new lines, the returned height is for the entire font (as specified by the font), not maximum of individual characters.</validate>
     * @param text - The string to check the size of.
     */
    function GetTextSize(text: string): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Returns the texture id of the material with the given name/path, for use with [surface.SetTexture](https://wiki.facepunch.com/gmod/surface.SetTexture).
     * 
     * Opposite version of this function is [surface.GetTextureNameByID](https://wiki.facepunch.com/gmod/surface.GetTextureNameByID).
     * 
     * **Note:**
     * >This function will not work with .png or .jpg images. For that, see [Global.Material](https://wiki.facepunch.com/gmod/Global.Material). You will probably want to use it regardless.
     * 
     * @param name_path - Name or path of the texture.
     */
    function GetTextureID(name_path: string): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns name/path of texture by ID. Opposite version of this function is [surface.GetTextureID](https://wiki.facepunch.com/gmod/surface.GetTextureID).
     * @param id - ID of texture.
     */
    function GetTextureNameByID(id: number): string;
    
    /**
     * [Client and Menu]
     * 
     * Returns the size of the texture with the associated texture ID.
     * 
     * For `.png/.jpg` textures loaded with [Global.Material](https://wiki.facepunch.com/gmod/Global.Material) you can use the `$realheight` and `$realwidth` material parameters ([IMaterial:GetInt](https://wiki.facepunch.com/gmod/IMaterial:GetInt)) to get the size of the image.
     * @param textureID - The texture ID, returned by [surface.GetTextureID](https://wiki.facepunch.com/gmod/surface.GetTextureID).
     */
    function GetTextureSize(textureID: number): LuaMultiReturn<[number, number]>;
    
    /**
     * [Client and Menu]
     * 
     * Play a sound file directly on the client (such as UI sounds, etc).
     * 
     * **Note:**
     * >Valid sample rates: **11025 Hz, 22050 Hz and 44100 Hz**, otherwise you may see this kind of message:
     * 
     * `Unsupported 32-bit wave file your_sound.wav` and 
     * `Invalid sample rate (48000) for sound 'your_sound.wav'`
     * 
     * @param soundfile - The path to the sound file.
     * This should either be a sound script name ([sound.Add](https://wiki.facepunch.com/gmod/sound.Add)) or a file path relative to the `sound/` folder. (Make note that it's not sound**s**)
     * **Bug [#4504](https://github.com/Facepunch/garrysmod-issues/issues/4504):**
     * >Currently does not work with sound scripts ([sound.Add](https://wiki.facepunch.com/gmod/sound.Add))
     * 
     */
    function PlaySound(soundfile: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Returns the height of the current client's screen.
     * 
     * @deprecated You should use [Global.ScrH](https://wiki.facepunch.com/gmod/Global.ScrH) instead.
     * 
     * 
     */
    function ScreenHeight(): number;
    
    /**
     * [Client and Menu]
     * 
     * Returns the width of the current client's screen.
     * 
     * @deprecated You should use [Global.ScrW](https://wiki.facepunch.com/gmod/Global.ScrW) instead.
     * 
     * 
     */
    function ScreenWidth(): number;
    
    /**
     * [Client and Menu]
     * 
     * Sets the alpha multiplier that will influence all upcoming drawing operations.
     * See also [render.SetBlend](https://wiki.facepunch.com/gmod/render.SetBlend).
     * @param multiplier - The multiplier ranging from 0 to 1.
     */
    function SetAlphaMultiplier(multiplier: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Set the color of any future shapes to be drawn, can be set by either using R, G, B, A as separate values or by a [Color](https://wiki.facepunch.com/gmod/Color). Using a color structure is not recommended to be created procedurally.
     * 
     * **Note:**
     * >Providing a [Color](https://wiki.facepunch.com/gmod/Color) structure is slower than providing four numbers. You may use [Color:Unpack](https://wiki.facepunch.com/gmod/Color:Unpack) for this.
     * 
     * **Note:**
     * >The alpha value may not work properly if you're using a material without `$vertexalpha`.
     * 
     * **Note:**
     * >Due to post processing and gamma correction the color you set with this function may appear differently when rendered. This problem does not occur on materials drawn with [surface.DrawTexturedRect](https://wiki.facepunch.com/gmod/surface.DrawTexturedRect).
     * 
     * @param r - The red value of color, or a [Color](https://wiki.facepunch.com/gmod/Color).
     * @param g - The green value of color. Unused if a [Color](https://wiki.facepunch.com/gmod/Color) was given.
     * @param b - The blue value of color. Unused if a [Color](https://wiki.facepunch.com/gmod/Color) was given.
     * @param [a = 255] - The alpha value of color. Unused if a [Color](https://wiki.facepunch.com/gmod/Color) was given.
     */
    function SetDrawColor(r: Color, g: Color, b: Color, a = 255): void;
    
    /**
     * [Client and Menu]
     * 
     * Set the current font to be used for text operations later.
     * 
     * The fonts must first be created with [surface.CreateFont](https://wiki.facepunch.com/gmod/surface.CreateFont) or be one of the [Default Fonts](https://wiki.facepunch.com/gmod/Default_Fonts).
     * @param fontName - The name of the font to use.
     */
    function SetFont(fontName: string): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the material to be used in all upcoming draw operations using the surface library.
     * 
     * Not to be confused with [render.SetMaterial](https://wiki.facepunch.com/gmod/render.SetMaterial).
     * 
     * If you need to unset the texture, use the [draw.NoTexture](https://wiki.facepunch.com/gmod/draw.NoTexture) convenience function.
     * 
     * **Warning:**
     * >[Global.Material](https://wiki.facepunch.com/gmod/Global.Material) function calls are expensive to be done inside this function or inside rendering context, you should be caching the results of [Global.Material](https://wiki.facepunch.com/gmod/Global.Material) calls
     * 
     * **Note:**
     * >When using [render.PushRenderTarget](https://wiki.facepunch.com/gmod/render.PushRenderTarget) or [render.SetRenderTarget](https://wiki.facepunch.com/gmod/render.SetRenderTarget), `material` should have the `$ignorez` flag set to make it visible. If the material is not used in 3D rendering, it is probably safe to add it with this code:
     * ```lua
     * material:SetInt( "$flags", bit.bor( material:GetInt( "$flags" ), 32768 ) )
     * ```
     * 
     * @param material - The material to be used.
     */
    function SetMaterial(material: IMaterial): void;
    
    /**
     * [Client and Menu]
     * 
     * Set the color of any future text to be drawn, can be set by either using R, G, B, A as separate numbers or by a [Color](https://wiki.facepunch.com/gmod/Color).
     * 
     * Using a color structure is not recommended to be created procedurally.
     * 
     * **Note:**
     * >Providing a [Color](https://wiki.facepunch.com/gmod/Color) structure is slower than providing four numbers. You may use [Color:Unpack](https://wiki.facepunch.com/gmod/Color:Unpack) for this.
     * 
     * @param r - The red value of color, or a [Color](https://wiki.facepunch.com/gmod/Color).
     * @param g - The green value of color
     * @param b - The blue value of color
     * @param [a = 255] - The alpha value of color
     */
    function SetTextColor(r: Color, g: number, b: number, a = 255): void;
    
    /**
     * [Client and Menu]
     * 
     * Set the top-left position to draw any future text at.
     * @param x - The X integer co-ordinate.
     * @param y - The Y integer co-ordinate.
     */
    function SetTextPos(x: number, y: number): void;
    
    /**
     * [Client and Menu]
     * 
     * Sets the texture to be used in all upcoming draw operations using the surface library.
     * 
     * See [surface.SetMaterial](https://wiki.facepunch.com/gmod/surface.SetMaterial) for an [IMaterial](https://wiki.facepunch.com/gmod/IMaterial) alternative.
     * 
     * **Note:**
     * >It's probably best to use the alternative mentioned above.
     * 
     * @param textureID - The ID of the texture to draw with returned by [surface.GetTextureID](https://wiki.facepunch.com/gmod/surface.GetTextureID).
     */
    function SetTexture(textureID: number): void;

}

/**
 * The system library provides functions that allow you to gather information about the system running the game, such as operating system, uptime and battery level.
 */
declare namespace system {
    

    /**
     * [Shared and Menu]
     * 
     * Returns the total uptime of the current application as reported by Steam.
     * 
     * This will return a similar value to [Global.SysTime](https://wiki.facepunch.com/gmod/Global.SysTime).
     * 
     * **Note:**
     * >This function does not work on Dedicated Servers and will instead return no value.
     * 
     * 
     */
    function AppTime(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the current battery power.
     * 
     */
    function BatteryPower(): number;
    
    /**
     * [Client and Menu]
     * 
     * Flashes the window, turning the border to white briefly
     * 
     */
    function FlashWindow(): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the country code of this computer, determined by the localisation settings of the OS.
     * 
     * **Note:**
     * >This function does not work on Dedicated Servers and will instead return no value.
     * 
     * 
     */
    function GetCountry(): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns whether or not the game window has focus.
     * 
     * **Note:**
     * >This function does not work on dedicated servers and will instead return no value.
     * 
     * 
     */
    function HasFocus(): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Returns whether the current OS is Linux.
     * 
     */
    function IsLinux(): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Returns whether the current OS is OSX.
     * 
     */
    function IsOSX(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the game is being run in a window or in fullscreen (you can change this by opening the menu, clicking 'Options', then clicking the 'Video' tab, and changing the Display Mode using the dropdown menu):
     * 
     * <image src="DisplayModeDropdown.jpeg"/>
     * 
     */
    function IsWindowed(): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Returns whether the current OS is Windows.
     * 
     */
    function IsWindows(): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the synchronized Steam time. This is the number of seconds since the [Unix epoch](http://en.wikipedia.org/wiki/Unix_time).
     * 
     * **Note:**
     * >This function does not work on Dedicated Servers and will instead return no value.
     * 
     * 
     */
    function SteamTime(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the amount of seconds since the Steam user last moved their mouse.
     * 
     * This is a direct binding to ISteamUtils->GetSecondsSinceComputerActive, and is most likely related to Steam's automatic "Away" online status.
     * 
     * **Note:**
     * >This function does not work on Dedicated Servers and will instead return no value.
     * 
     * 
     */
    function UpTime(): number;

}

/**
 * The table `type` is an object that can store multiple values.
 * 
 * The table `library` is a standard Lua library which provides functions to manipulate tables. In Garry's Mod there are several extra useful functions added to this library.
 * 
 * This category lists the functions available in the table `library`.
 */
declare namespace table {
    

    /**
     * [Shared and Menu]
     * 
     * Adds all values from `source` table into the `target` table. This is most useful for sequential tables, not "dictionary" or "map" tables. See [table.Merge](https://wiki.facepunch.com/gmod/table.Merge) if you want to merge 2 tables into one.
     * 
     * See [table.insert](https://wiki.facepunch.com/gmod/table.insert) for a function that adds a single value, and [table.Inherit](https://wiki.facepunch.com/gmod/table.Inherit) for a function that inherits keys from one table to another.
     * @param target - The table to insert the new values into.
     * @param source - The table to retrieve the values from.
     */
    function Add(target: any, source: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Changes all keys to sequential integers. This creates a new table object and does not affect the original.
     * @param table - The original table to modify.
     * @param [saveKeys = false] - Save the keys within each member table. This will insert a new field `__key` into each value, and should not be used if the table contains non-table values.
     */
    function ClearKeys(table: any, saveKeys = false): any;
    
    /**
     * [Shared and Menu]
     * 
     * Collapses a table with keyvalue structure
     * @param input - Input table
     */
    function CollapseKeyValue(input: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Concatenates the contents of a table to a string.
     * @param tbl - The table to concatenate.
     * @param [concatenator = &quot;&quot;] - A separator to insert between strings
     * @param [startPos = 1] - The key to start at
     * @param [endPos = #tbl] - The key to end at
     */
    function concat(tbl: any, concatenator?: string, startPos = 1, endPos?: number): string;
    
    /**
     * [Shared and Menu]
     * 
     * Creates a deep copy and returns that copy.
     * 
     * **Warning:**
     * >This function does NOT copy userdata, such as [Vector](https://wiki.facepunch.com/gmod/Vector)s and [Angle](https://wiki.facepunch.com/gmod/Angle)s!
     * 
     * @param originalTable - The table to be copied.
     */
    function Copy(originalTable: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Empties the target table, and merges all values from the source table into it.
     * @param source - The table to copy from.
     * @param target - The table to write to.
     */
    function CopyFromTo(source: any, target: any): void;
    
    /**
     * [Shared and Menu]
     * 
     * Counts the amount of keys in a table. This should only be used when a table is not numerically and sequentially indexed. For those tables, consider the length (**#**) operator.
     * 
     * If you only want to test if the table is empty or not, use [table.IsEmpty](https://wiki.facepunch.com/gmod/table.IsEmpty) instead as it is a lot faster.
     * @param tbl - The table to count the keys of.
     */
    function Count(tbl: any): number;
    
    /**
     * [Shared and Menu]
     * 
     * Converts a table that has been sanitised with [table.Sanitise](https://wiki.facepunch.com/gmod/table.Sanitise) back to its original form
     * @param tbl - Table to be de-sanitised
     */
    function DeSanitise(tbl: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Removes all values from a table.
     * @param tbl - The table to empty.
     */
    function Empty(tbl: any): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the value positioned after the supplied value in a table. If it isn't found then the first element in the table is returned
     * 
     * @deprecated Instead, iterate the table using ipairs or increment from the previous index using [Global.next](https://wiki.facepunch.com/gmod/Global.next). Non-numerically indexed tables are not ordered.
     * 
     * @param tbl - Table to search
     * @param value - Value to return element after
     */
    function FindNext(tbl: any, value: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the value positioned before the supplied value in a table. If it isn't found then the last element in the table is returned
     * 
     * @deprecated Instead, iterate your table with ipairs, storing the previous value and checking for the target. Non-numerically indexed tables are not ordered.
     * 
     * @param tbl - Table to search
     * @param value - Value to return element before
     */
    function FindPrev(tbl: any, value: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Flips key-value pairs of each element within a table, so that each value becomes the key, and each key becomes the value.
     * 
     * **Warning:**
     * >Take care when using this function, as a Lua table cannot contain multiple instances of the same key. As such, data loss is possible when using this function on tables with duplicate values.
     * 
     * ```
     * local test = { test = 1, test2 = 1 }
     * local f = table.Flip( test )
     * PrintTable( f )
     * -- Outputs "1	=	test2"
     * ```
     * 
     * @param input - The table to flip items of.
     */
    function Flip(input: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Inserts a value in to the given table even if the table is non-existent
     * @param [tab = {}] - Table to insert value in to
     * @param value - Value to insert
     */
    function ForceInsert(tab?: any, value: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Iterates for each key-value pair in the table, calling the function with the key and value of the pair. If the function returns anything, the loop is broken.
     * 
     * The GLua interpretation of this is [table.ForEach](https://wiki.facepunch.com/gmod/table.ForEach).
     * 
     * @deprecated This was deprecated in Lua 5.1 and removed in 5.2. You should use [Global.pairs](https://wiki.facepunch.com/gmod/Global.pairs) instead.
     * 
     * @param tbl - The table to iterate over.
     * @param callback - The function to run for each key and value.
     */
    function foreach(tbl: any, callback: Function): void;
    
    /**
     * [Shared and Menu]
     * 
     * Iterates for each numeric index in the table in order.
     * 
     * This is inherited from the original Lua implementation and is deprecated in Lua as of 5.1; see [here](http://lua-users.org/wiki/TableLibraryTutorial). You should use [Global.ipairs](https://wiki.facepunch.com/gmod/Global.ipairs)() instead.
     * 
     * @deprecated This was deprecated in Lua 5.1 and removed in 5.2. You should use [Global.ipairs](https://wiki.facepunch.com/gmod/Global.ipairs)() instead.
     * 
     * @param table - The table to iterate over.
     * @param func - The function to run for each index.
     */
    function foreachi(table: any, func: Function): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the first key found in the given table
     * 
     * @deprecated Instead, expect the first key to be 1.
     * 
     * Non-numerically indexed tables are not ordered and do not have a first key.
     * 
     * @param tab - Table to retrieve key from
     */
    function GetFirstKey(tab: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the first value found in the given table
     * 
     * @deprecated Instead, index the table with a key of 1.
     * 
     * Non-numerically indexed tables are not ordered and do not have a first key.
     * 
     * @param tab - Table to retrieve value from
     */
    function GetFirstValue(tab: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns all keys of a table.
     * @param tabl - The table to get keys of
     */
    function GetKeys(tabl: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the last key found in the given table
     * 
     * @deprecated Instead, use the result of the length (#) operator, ensuring it is not zero. Non-numerically indexed tables are not ordered and do not have a last key.
     * 
     * @param tab - Table to retrieve key from
     */
    function GetLastKey(tab: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the last value found in the given table
     * 
     * @deprecated Instead, index the table with the result of the length (#) operator, ensuring it is not zero. Non-numerically indexed tables are not ordered and do not have a last key.
     * 
     * @param tab - Table to retrieve value from
     */
    function GetLastValue(tab: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the length of the table.
     * 
     * @deprecated This function was deprecated in Lua 5.1 and is removed in 5.2. Use the length (#) operator instead.
     * 
     * @param tbl - The table to check.
     */
    function getn(tbl: any): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a key of the supplied table with the highest number value.
     * @param inputTable - The table to search in.
     */
    function GetWinningKey(inputTable: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Checks if a table has a value.
     * 
     * **Warning:**
     * >This function is **very inefficient for large tables** (O(n)) and should probably not be called in things that run each frame. Instead, consider a table structure such as example 2 below. Also see: [Tables: Bad Habits](https://wiki.facepunch.com/gmod/Tables:_Bad_Habits)
     * 
     * **Note:**
     * >For optimization, functions that look for a value by sorting the table should never be needed if you work on a table that you built yourself.
     * 
     * @param tbl - Table to check
     * @param value - Value to search for
     */
    function HasValue(tbl: any, value: any): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Copies any missing data from `base` to `target`, and sets the `target`'s `BaseClass` member to the `base` table's pointer.
     * 
     * See [table.Merge](https://wiki.facepunch.com/gmod/table.Merge), which overrides existing values and doesn't add a BaseClass member.
     * 
     * See also [table.Add](https://wiki.facepunch.com/gmod/table.Add), which simply adds values of one table to another.
     * 
     * **Bug :**
     * >Sub-tables aren't inherited. The target's table value will take priority.
     * 
     * @param target - Table to copy data to
     * @param base - Table to copy data from
     */
    function Inherit(target: any, base: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Inserts a value into a table at the end of the table or at the given position.
     * 
     * **Note:**
     * >This function does not call the `__newindex` [metamethod](Metamethods).
     * 
     * @param tbl - The table to insert the variable into.
     * @param position - The position in the table to insert the variable. If the third argument is nil this argument becomes the value to insert at the end of given table.
     * @param value - The variable to insert into the table.
     */
    function insert(tbl: any, position: number, value: any): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns whether or not the given table is empty.
     * 
     * This works on both sequential and non-sequential tables, and is a lot faster for non-sequential tables than `table.Count(tbl) == 0`.  
     * If you want to check if a table is not empty, use `next(tbl) ~= nil`, as it is slightly faster.
     * @param tab - Table to check.
     */
    function IsEmpty(tab: any): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Returns whether or not the table's keys are sequential
     * @param tab - Table to check
     */
    function IsSequential(tab: any): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the first key found to be containing the supplied value
     * @param tab - Table to search
     * @param value - Value to search for
     */
    function KeyFromValue(tab: any, value: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a table of keys containing the supplied value
     * @param tab - Table to search
     * @param value - Value to search for
     */
    function KeysFromValue(tab: any, value: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a copy of the input table with all string keys converted to be lowercase recursively
     * @param tbl - Table to convert
     */
    function LowerKeyNames(tbl: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the highest numerical key.
     * @param tbl - The table to search.
     */
    function maxn(tbl: any): number;
    
    /**
     * [Shared and Menu]
     * 
     * Returns an array of values of given with given key from each table of given table.
     * 
     * See also [table.KeysFromValue](https://wiki.facepunch.com/gmod/table.KeysFromValue).
     * @param inputTable - The table to search in.
     * @param keyName - The key to lookup.
     */
    function MemberValuesFromKey(inputTable: any, keyName: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Recursively merges the key-value pairs of the `source` table with the key-value pairs in the `destination` table.
     * 
     * See [table.Inherit](https://wiki.facepunch.com/gmod/table.Inherit), which doesn't override existing values.
     * 
     * See also [table.Add](https://wiki.facepunch.com/gmod/table.Add), which simply adds values of one table to another.
     * 
     * **Note:**
     * >This function can cause a stack overflow under certain circumstances.
     * 
     * @param destination - The table you want the source table to merge with.
     * @param source - The table you want to merge with the destination table.
     * @param [forceOverride = false] - If `true`, does not recursively merge sub-tables, and simply replaces them.
     */
    function Merge(destination: any, source: any, forceOverride = false): any;
    
    /**
     * [Shared and Menu]
     * 
     * Moves elements from one part of a table to another part a given table. This is similar to assigning elements from the source table to the destination table in multiple assignments.
     * @param sourceTbl - The source table from which the elements are to be moved.
     * @param from - The start index of the source range from which the elements are to be moved.
     * @param to - The end index of the source range until which the elements are to be moved.
     * @param dest - The index within the destination table where the moved elements should be inserted.
     * @param [destTbl = sourceTbl] - The destination table to which the elements are to be moved. By default, this is the same as the source table.
     */
    function move(sourceTbl: any, from: number, to: number, dest: number, destTbl?: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Packs a set of items into a table and returns the new table. It is meant as an alternative implementation of `table.pack` from newer versions of Lua.
     * @param items - The items to pack into a table.
     */
    function Pack(...items: any[]): LuaMultiReturn<[any, number]>;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a random value from the supplied table.
     * 
     * **Warning:**
     * >This function iterates over the given table **twice**, therefore with sequential tables you should instead use following:
     * 
     * ```
     * mytable[ math.random( #mytable ) ]
     * ```
     * 
     * @param haystack - The table to choose from.
     */
    function Random(haystack: any): LuaMultiReturn<[any, any]>;
    
    /**
     * [Shared and Menu]
     * 
     * Removes a value from a table and shifts any other values down to fill the gap.
     * 
     * **Note:**
     * >Does nothing if index is less than 1 or greater than `#tbl`
     * 
     * @param tbl - The table to remove the value from.
     * @param [index = #tbl] - The index of the value to remove.
     */
    function remove(tbl: any, index?: number): any;
    
    /**
     * [Shared and Menu]
     * 
     * Removes the first instance of a given value from the specified table with [table.remove](https://wiki.facepunch.com/gmod/table.remove), then returns the key that the value was found at.
     * 
     * **Warning:**
     * >Avoid usage of this function. It does not remove all instances of given value in the table, only the first found, and it does not work with non sequential tables!
     * 
     * @param tbl - The table that will be searched.
     * @param val - The value to find within the table.
     */
    function RemoveByValue(tbl: any, val: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a reversed copy of a sequential table. Any non-sequential and non-numeric keyvalue pairs will not be copied.
     * @param tbl - Table to reverse.
     */
    function Reverse(tbl: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Converts [Vector](https://wiki.facepunch.com/gmod/Vector)s, [Angle](https://wiki.facepunch.com/gmod/Angle)s and [boolean](https://wiki.facepunch.com/gmod/boolean)s to be able to be converted to and from key-values via [util.TableToKeyValues](https://wiki.facepunch.com/gmod/util.TableToKeyValues).
     * 
     * [table.DeSanitise](https://wiki.facepunch.com/gmod/table.DeSanitise) performs the opposite transformation.
     * @param tab - Table to sanitise
     */
    function Sanitise(tab: any): any;
    
    /**
     * [Shared and Menu]
     * 
     * Performs an inline [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle) on the table in `O(n)` time
     * @param target - The table to shuffle.
     */
    function Shuffle(target: any): void;
    
    /**
     * [Shared and Menu]
     * 
     * Sorts a sequential table either ascending or by the given sort function.
     * 
     * **Note:**
     * >This function modifies the table you give to it and internally uses the [quick sort algorithm](http://www.lua.org/source/5.2/ltablib.c.html#sort).
     * 
     * @param tbl - The table to sort.
     * @param sorter - If specified, the function will be called with 2 parameters each.
     * Return true in this function if you want the first parameter to come first in the sorted array.
     */
    function sort(tbl: any, sorter: Function): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a list of keys sorted based on values of those keys.
     * 
     * For normal sorting see [table.sort](https://wiki.facepunch.com/gmod/table.sort).
     * @param tab - Table to sort. All values of this table must be of same type.
     * @param [descending = false] - Should the order be descending?
     */
    function SortByKey(tab: any, descending = false): any;
    
    /**
     * [Shared and Menu]
     * 
     * Sorts a table by a named member.
     * @param tab - Table to sort.
     * @param memberKey - The key used to identify the member.
     * @param [ascending = false] - Whether or not the order should be ascending.
     */
    function SortByMember(tab: any, memberKey: any, ascending = false): void;
    
    /**
     * [Shared and Menu]
     * 
     * Sorts a table in reverse order from [table.sort](https://wiki.facepunch.com/gmod/table.sort).
     * 
     * **Note:**
     * >This function modifies the table you give to it. Like table.sort, it does not return anything.
     * 
     * @param tbl - The table to sort in descending order.
     */
    function SortDesc(tbl: any): void;
    
    /**
     * [Shared and Menu]
     * 
     * Converts a table into a string
     * @param tbl - The table to iterate over.
     * @param displayName - Optional. A name for the table.
     * @param niceFormatting - Adds new lines and tabs to the string.
     */
    function ToString(tbl: any, displayName: string, niceFormatting: boolean): string;

}

/**
 * The team library gives you access to the team system built into the Source engine, and allows you to create custom teams and get information about them.
 */
declare namespace team {
    

    /**
     * [Shared]
     * 
     * Increases the score of the given team
     * @param index - Index of the team
     * @param increment - Amount to increase the team's score by
     */
    function AddScore(index: number, increment: number): void;
    
    /**
     * [Shared]
     * 
     * Returns the team index of the team with the least players. Falls back to TEAM_UNASSIGNED
     * 
     */
    function BestAutoJoinTeam(): number;
    
    /**
     * [Shared]
     * 
     * Returns the real table consisting of information on every defined team
     * 
     */
    function GetAllTeams(): any;
    
    /**
     * [Shared]
     * 
     * Returns the selectable classes for the given team. This can be added to with [team.SetClass](https://wiki.facepunch.com/gmod/team.SetClass)
     * @param index - Index of the team
     */
    function GetClass(index: number): any;
    
    /**
     * [Shared]
     * 
     * Returns the team's color.
     * @param teamIndex - The team index.
     */
    function GetColor(teamIndex: number): Color;
    
    /**
     * [Shared]
     * 
     * Returns the name of the team.
     * @param teamIndex - The team index.
     */
    function GetName(teamIndex: number): string;
    
    /**
     * [Shared]
     * 
     * Returns a table with all player of the specified team.
     * 
     * **Note:**
     * >This function returns a sequential table, meaning it should be looped with [Global.ipairs](https://wiki.facepunch.com/gmod/Global.ipairs) instead of [Global.pairs](https://wiki.facepunch.com/gmod/Global.pairs) for efficiency reasons.
     * 
     * @param teamIndex - The team index.
     */
    function GetPlayers(teamIndex: number): any;
    
    /**
     * [Shared]
     * 
     * Returns the score of the team.
     * @param teamIndex - The team index.
     */
    function GetScore(teamIndex: number): number;
    
    /**
     * [Shared]
     * 
     * Returns a table of valid spawnpoint classes the team can use. These are set with [team.SetSpawnPoint](https://wiki.facepunch.com/gmod/team.SetSpawnPoint).
     * @param index - Index of the team
     */
    function GetSpawnPoint(index: number): any;
    
    /**
     * [Shared]
     * 
     * Returns a table of valid spawnpoint entities the team can use. These are set with  [team.SetSpawnPoint](https://wiki.facepunch.com/gmod/team.SetSpawnPoint).
     * @param index - Index of the team
     */
    function GetSpawnPoints(index: number): any;
    
    /**
     * [Shared]
     * 
     * Returns if a team is joinable or not. This is set in [team.SetUp](https://wiki.facepunch.com/gmod/team.SetUp).
     * @param index - The index of the team.
     */
    function Joinable(index: number): boolean;
    
    /**
     * [Shared]
     * 
     * Returns the amount of players in a team.
     * @param teamIndex - The team index.
     */
    function NumPlayers(teamIndex: number): number;
    
    /**
     * [Shared]
     * 
     * Sets valid classes for use by a team. Classes can be created using [player_manager.RegisterClass](https://wiki.facepunch.com/gmod/player_manager.RegisterClass)
     * @param index - Index of the team
     * @param classes - A class ID or table of class IDs
     */
    function SetClass(index: number, classes: any): void;
    
    /**
     * [Shared]
     * 
     * Sets the team's color.
     * @param teamIndex - The team index.
     * @param color - The team's new color as a [Color](https://wiki.facepunch.com/gmod/Color).
     */
    function SetColor(teamIndex: number, color: Color): void;
    
    /**
     * [Shared]
     * 
     * Sets the score of the given team
     * @param index - Index of the team
     * @param score - The team's new score
     */
    function SetScore(index: number, score: number): void;
    
    /**
     * [Shared]
     * 
     * Sets valid spawnpoint classes for use by a team.
     * 
     * **Note:**
     * >GM.TeamBased must be set to true for this to work
     * 
     * @param index - Index of the team
     * @param classes - A spawnpoint classname or table of spawnpoint classnames
     */
    function SetSpawnPoint(index: number, classes: any): void;
    
    /**
     * [Shared]
     * 
     * Creates a new team.
     * @param teamIndex - The team index.
     * @param teamName - The team name.
     * @param teamColor - The team color. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     * @param [isJoinable = true] - Whether the team is joinable or not.
     */
    function SetUp(teamIndex: number, teamName: string, teamColor: Color, isJoinable = true): void;
    
    /**
     * [Shared]
     * 
     * Returns the total number of deaths of all players in the team.
     * @param index - The team index.
     */
    function TotalDeaths(index: number): number;
    
    /**
     * [Shared]
     * 
     * Get's the total frags in a team.
     * @param Entity_or_number - Entity or number.
     */
    function TotalFrags(Entity_or_number: Entity): number;
    
    /**
     * [Shared]
     * 
     * Returns true if the given team index is valid
     * @param index - Index of the team
     */
    function Valid(index: number): boolean;

}

/**
 * The timer library is a very useful set of functions which allow you to run a function periodically or after a given delay.
 */
declare namespace timer {
    

    /**
     * [Shared and Menu]
     * 
     * Adjusts the timer if the timer with the given identifier exists.
     * @param identifier - Identifier of the timer to adjust.
     * @param delay - The delay interval in seconds. **Must be specified.**
     * @param [repetitions = nil] - Repetitions. Use `0` for infinite or `nil` to keep previous value.
     * @param [func = nil] - The new function. Use `nil` to keep previous value.
     */
    function Adjust(identifier: any, delay: number, repetitions?: number, func?: Function): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * This function does nothing.
     * 
     * @deprecated If you want to check if whether or not a timer exists, use [timer.Exists](https://wiki.facepunch.com/gmod/timer.Exists).
     * 
     * 
     */
    function Check(): void;
    
    /**
     * [Shared and Menu]
     * 
     * Creates a new timer that will repeat its function given amount of times.
     * This function also requires the timer to be named, which allows you to control it after it was created via the [timer](https://wiki.facepunch.com/gmod/timer).
     * 
     * For a simple one-time timer with no identifiers, see [timer.Simple](https://wiki.facepunch.com/gmod/timer.Simple).
     * 
     * **Warning:**
     * >Timers use [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime) internally. Due to this, they won't advance while the client is timing out from the server or on an empty dedicated server due to hibernation. (unless `sv_hibernate_think` is set to `1`).
     * 
     * @param identifier - Identifier of the timer to create. Must be unique. If a timer already exists with the same identifier, that timer will be updated to the new settings and reset.
     * @param delay - The delay interval in seconds. If the delay is too small, the timer will fire on the next [GM:Tick](https://wiki.facepunch.com/gmod/GM:Tick).
     * @param repetitions - The number of times to repeat the timer. Enter `0` or any value below `0` for infinite repetitions.
     * @param func - Function called when timer has finished the countdown.
     */
    function Create(identifier: string, delay: number, repetitions: number, func: Function): void;
    
    /**
     * [Shared and Menu]
     * 
     * Stops and destroys the given timer. Alias of [timer.Remove](https://wiki.facepunch.com/gmod/timer.Remove).
     * 
     * @deprecated You should be using [timer.Remove](https://wiki.facepunch.com/gmod/timer.Remove) instead.
     * 
     * @param identifier - Identifier of the timer to destroy.
     */
    function Destroy(identifier: string): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns whenever the given timer exists or not.
     * @param identifier - Identifier of the timer.
     */
    function Exists(identifier: string): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Pauses the given timer.
     * @param identifier - Identifier of the timer.
     */
    function Pause(identifier: any): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Stops and removes a timer created by [timer.Create](https://wiki.facepunch.com/gmod/timer.Create).
     * 
     * **Warning:**
     * >The timers are removed in the next frame! Keep this in mind when storing identifiers in variables.
     * 
     * @param identifier - Identifier of the timer to remove.
     */
    function Remove(identifier: string): void;
    
    /**
     * [Shared and Menu]
     * 
     * Returns amount of repetitions/executions left before the timer destroys itself.
     * @param identifier - Identifier of the timer.
     */
    function RepsLeft(identifier: any): number;
    
    /**
     * [Shared and Menu]
     * 
     * Creates a simple timer that runs the given function after a specified delay.
     * 
     * For a more advanced version that you can control after creation, see [timer.Create](https://wiki.facepunch.com/gmod/timer.Create).
     * 
     * **Warning:**
     * >Timers use [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime) internally. Due to this, they won't advance while the client is timing out from the server or on an empty dedicated server due to hibernation. (unless `sv_hibernate_think` is set to `1`).
     * 
     * @param delay - How long until the function should be ran (in seconds). Use `0` to have the function run in the next [GM:Tick](https://wiki.facepunch.com/gmod/GM:Tick).
     * @param func - The function to run after the specified delay.
     */
    function Simple(delay: number, func: Function): void;
    
    /**
     * [Shared and Menu]
     * 
     * Restarts the given timer.
     * 
     * **Warning:**
     * >Timers won't advance while the client is timing out from the server.
     * 
     * **Note:**
     * >Timers use [Global.CurTime](https://wiki.facepunch.com/gmod/Global.CurTime) for timing.
     * 
     * @param identifier - Identifier of the timer.
     */
    function Start(identifier: any): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Stops the given timer and rewinds it.
     * @param identifier - Identifier of the timer.
     */
    function Stop(identifier: any): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Returns amount of time left (in seconds) before the timer executes its function.
     * 
     * **Note:**
     * >If the timer is paused, the amount will be negative.
     * 
     * @param identifier - Identifier of the timer.
     */
    function TimeLeft(identifier: any): number;
    
    /**
     * [Shared and Menu]
     * 
     * Runs either [timer.Pause](https://wiki.facepunch.com/gmod/timer.Pause) or [timer.UnPause](https://wiki.facepunch.com/gmod/timer.UnPause) based on the timer's current status.
     * @param identifier - Identifier of the timer.
     */
    function Toggle(identifier: any): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Unpauses the timer.
     * @param identifier - Identifier of the timer.
     */
    function UnPause(identifier: any): boolean;

}

/**
 * 
 * 
 * @deprecated You should be using the [net](https://wiki.facepunch.com/gmod/net) library instead
 * 
 * **Warning:**
 * >Usermessages have a limit of only 256 bytes!
 * 
 */
declare namespace umsg {
    

    /**
     * [Server]
     * 
     * Writes an angle to the usermessage.
     * @param angle - The angle to be sent.
     */
    function Angle(angle: Angle): void;
    
    /**
     * [Server]
     * 
     * Writes a bool to the usermessage.
     * @param bool - The bool to be sent.
     */
    function Bool(bool: boolean): void;
    
    /**
     * [Server]
     * 
     * Writes a signed char to the usermessage.
     * @param char - The char to be sent.
     */
    function Char(char: number): void;
    
    /**
     * [Server]
     * 
     * Dispatches the usermessage to the client(s).
     * 
     */
    function End(): void;
    
    /**
     * [Server]
     * 
     * Writes an entity object to the usermessage.
     * @param entity - The entity to be sent.
     */
    function Entity(entity: Entity): void;
    
    /**
     * [Server]
     * 
     * Writes a float to the usermessage.
     * @param float - The float to be sent.
     */
    function Float(float: number): void;
    
    /**
     * [Server]
     * 
     * Writes a signed int (32 bit) to the usermessage.
     * @param int - The int to be sent.
     */
    function Long(int: number): void;
    
    /**
     * [Server]
     * 
     * The string specified will be networked to the client and receive a identifying number, which will be sent instead of the string to optimize networking.
     * 
     * @deprecated Inferior version of [util.AddNetworkString](https://wiki.facepunch.com/gmod/util.AddNetworkString)
     * 
     * @param string - The string to be pooled.
     */
    function PoolString(string: string): void;
    
    /**
     * [Server]
     * 
     * Writes a signed short (16 bit) to the usermessage.
     * @param short - The short to be sent.
     */
    function Short(short: number): void;
    
    /**
     * [Server]
     * 
     * @deprecated You should be using [net](https://wiki.facepunch.com/gmod/net) instead
     * 
     * **Warning:**
     * >Usermessages have a limit of only 256 bytes!
     * 
     * @param name - The name of the message to be sent.
     * @param filter - If passed a player object, it will only be sent to the player, if passed a [CRecipientFilter](https://wiki.facepunch.com/gmod/CRecipientFilter) of players, it will be sent to all specified players, if passed nil (or another invalid value), the message will be sent to all players.
     */
    function Start(name: string, filter: Player): void;
    
    /**
     * [Server]
     * 
     * Writes a null terminated string to the usermessage.
     * @param string - The string to be sent.
     */
    function String(string: string): void;
    
    /**
     * [Server]
     * 
     * Writes a Vector to the usermessage.
     * @param vector - The vector to be sent.
     */
    function Vector(vector: Vector): void;
    
    /**
     * [Server]
     * 
     * Writes a vector normal to the usermessage.
     * @param normal - The vector normal to be sent.
     */
    function VectorNormal(normal: Vector): void;

}

/**
 * The undo library allows you to add custom entities to the undo list, allowing users to "undo" their creation with their undo (default: <key>Z</key>) key.
 */
declare namespace undo {
    

    /**
     * [Server]
     * 
     * Adds an entity to the current undo block
     * @param ent - The entity to add
     */
    function AddEntity(ent: Entity): void;
    
    /**
     * [Server]
     * 
     * Adds a function to call when the current undo block is undone. Note that if an undo has a function, the player will always be notified when this undo is performed, even if the entity it is meant to undo no longer exists.
     * @param func - The function to call. First argument will be the <page text="Undo Structure">Structures/Undo</page>, all subsequent arguments will be what was passed after this function in the argument below.
     * Returning `false` will mark execution of this function as "failed", meaning that the undo might be skipped if no other entities are removed by it. This is useful when for example an entity you want to access is removed therefore there's nothing to do.
     * @param arguments - Arguments to pass to the function (after the undo info table)
     */
    function AddFunction(func: Function, ...arguments: any[]): void;
    
    /**
     * [Server]
     * 
     * Begins a new undo entry
     * @param name - Name of the undo message to show to players
     */
    function Create(name: string): void;
    
    /**
     * [Server]
     * 
     * Processes an undo block (in table form). This is used internally by the undo manager when a player presses Z.
     * 
     * You should use `gm_undo` or `gm_undonum *num*` console commands instead of calling this function directly.
     * @param tab - The undo block to process as an [Structures/Undo](https://wiki.facepunch.com/gmod/Structures/Undo)
     */
    function Do_Undo(tab: Undo): number;
    
    /**
     * [Server]
     * 
     * Completes an undo entry, and registers it with the player's client
     * @param NiceText - Text that appears in the player's undo history
     */
    function Finish(NiceText: string): void;
    
    /**
     * [Shared]
     * 
     * Serverside, returns a table containing all undo blocks of all players. Clientside, returns a table of the local player's undo blocks.
     * 
     * **Note:**
     * >Serverside, this table's keys use [Player:UniqueID](https://wiki.facepunch.com/gmod/Player:UniqueID) to store a player's undo blocks.
     * 
     * 
     */
    function GetTable(): any;
    
    /**
     * [Client]
     * 
     * Makes the UI dirty - it will re-create the controls the next time it is viewed.
     * 
     */
    function MakeUIDirty(): void;
    
    /**
     * [Server]
     * 
     * Replaces any instance of the "from" reference with the "to" reference, in any existing undo block. Returns true if something was replaced
     * @param from - The old entity
     * @param to - The new entity to replace the old one
     */
    function ReplaceEntity(from: Entity, to: Entity): boolean;
    
    /**
     * [Server]
     * 
     * Sets a custom undo text for the current undo block
     * @param customText - The text to display when the undo block is undone
     */
    function SetCustomUndoText(customText: string): void;
    
    /**
     * [Server]
     * 
     * Sets the player which the current undo block belongs to
     * @param ply - The player responsible for undoing the block
     */
    function SetPlayer(ply: Player): void;
    
    /**
     * [Client]
     * 
     * Adds a hook (CPanelPaint) to the control panel paint function so we can determine when it is being drawn.
     * 
     */
    function SetupUI(): void;

}

/**
 * 
 * 
 * @deprecated You should be using the [net](https://wiki.facepunch.com/gmod/net) instead
 * 
 * **Warning:**
 * >Usermessages have a limit of only 256 bytes!
 * 
 */
declare namespace usermessage {
    

    /**
     * [Shared]
     * 
     * Returns a table of every usermessage hook
     * 
     */
    function GetTable(): any;
    
    /**
     * [Shared]
     * 
     * @deprecated You should be using [net](https://wiki.facepunch.com/gmod/net) instead
     * 
     * **Warning:**
     * >Usermessages have a limit of only 256 bytes!
     * 
     * @param name - The message name to hook to.
     * @param callback - The function to be called if the specified message was received.
     * * [bf_read](https://wiki.facepunch.com/gmod/bf_read) msg
     * * [vararg](https://wiki.facepunch.com/gmod/vararg) preArgs
     * @param [preArgs = nil] - Arguments that are passed to the callback function when the hook is called.
     */
    function Hook(name: string, callback: Function, ...preArgs?: any[]): void;
    
    /**
     * [Shared]
     * 
     * Called by the engine when a usermessage arrives, this method calls the hook function specified by [usermessage.Hook](https://wiki.facepunch.com/gmod/usermessage.Hook) if any.
     * @param name - The message name.
     * @param msg - The message.
     */
    function IncomingMessage(name: string, msg: bf_read): void;

}

/**
 * The utf8 library provides basic support for UTF-8 encoding. This library does not provide any support for Unicode other than the handling of the encoding. Any operation that needs the meaning of a character, such as character classification, is outside its scope.
 * 
 * Unless stated otherwise, all functions that expect a byte position as a parameter assume that the given position is either the start of a byte sequence or one plus the length of the subject string. As in the string library, negative indices count from the end of the string.
 */
declare namespace utf8 {
    

    /**
     * [Shared and Menu]
     * 
     * Receives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.
     * @param codepoints - Unicode code points to be converted in to a UTF-8 string.
     */
    function char(...codepoints: any[]): string;
    
    /**
     * [Client and Menu]
     * 
     * This is NOT a function, it's a <page text="pattern">Patterns</page> (a string, not a function) which matches exactly one UTF-8 byte sequence, assuming that the subject is a valid UTF-8 string.
     * 
     */
    function charpattern(): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the codepoints (as numbers) from all characters in the given string that start between byte position startPos and endPos. It raises an error if it meets any invalid byte sequence. This functions similarly to [string.byte](https://wiki.facepunch.com/gmod/string.byte).
     * @param string - The string that you will get the code(s) from.
     * @param [startPos = 1] - The starting byte of the string to get the codepoint of.
     * @param [endPos = 1] - The ending byte of the string to get the codepoint of.
     */
    function codepoint(string: string, startPos = 1, endPos = 1): any[];
    
    /**
     * [Shared and Menu]
     * 
     * Returns an iterator (like [string.gmatch](https://wiki.facepunch.com/gmod/string.gmatch)) which returns both the position and codepoint of each utf8 character in the string. It raises an error if it meets any invalid byte sequence.
     * @param string - The string that you will get the codes from.
     */
    function codes(string: string): Function;
    
    /**
     * [Shared and Menu]
     * 
     * Forces a string to contain only valid UTF-8 data. Invalid sequences are replaced with U+FFFD (the Unicode replacement character).
     * 
     * This is a lazy way for users to ensure a string contains only valid UTF-8 data.
     * @param string - The string that will become a valid UTF-8 string.
     */
    function force(string: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * A UTF-8 compatible version of [string.GetChar](https://wiki.facepunch.com/gmod/string.GetChar).
     * @param str - The string that you will be searching with the supplied index.
     * @param index - The index's value of the string to be returned.
     */
    function GetChar(str: string, index: number): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the number of UTF-8 sequences in the given string between positions startPos and endPos (both inclusive). If it finds any invalid UTF-8 byte sequence, returns false as well as the position of the first invalid byte.
     * @param string - The string to calculate the length of.
     * @param [startPos = 1] - The starting position to get the length from.
     * @param [endPos = -1] - The ending position to get the length from.
     */
    function len(string: string, startPos = 1, endPos = -1): LuaMultiReturn<[number, number]>;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the byte-index of the n'th UTF-8-character after the given startPos (nil if none). startPos defaults to 1 when n is positive and -1 when n is negative. If n is zero, this function instead returns the byte-index of the UTF-8-character startPos lies within.
     * @param string - The string that you will get the byte position from.
     * @param n - The position to get the beginning byte position from.
     * @param [startPos = 1 when n>=0, -1 otherwise] - The offset for n.
     */
    function offset(string: string, n: number, startPos?: number): number;
    
    /**
     * [Shared and Menu]
     * 
     * A UTF-8 compatible version of [string.sub](https://wiki.facepunch.com/gmod/string.sub).
     * 
     * **Warning:**
     * >Avoid using this function on large strings every tick/frame, as it may cause lags.
     * 
     * @param string - The string you'll take a sub-string out of.
     * @param StartPos - The position of the first character that will be included in the sub-string.
     * @param [EndPos = nil] - The position of the last character to be included in the sub-string. It can be negative to count from the end.
     */
    function sub(string: string, StartPos: number, EndPos?: number): string;

}

/**
 * This is the list of utility functions.
 */
declare namespace util {
    

    /**
     * [Server]
     * 
     * Adds the specified string to a string table, which will cache it and network it to all clients automatically.<br/>
     * Whenever you want to create a net message with [net.Start](https://wiki.facepunch.com/gmod/net.Start), you must add the name of that message as a networked string via this function.
     * 
     * If the passed string already exists, nothing will happen and the ID of the existing item will be returned.
     * 
     * **Note:**
     * >Each unique network name needs to be pooled once - do not put this function call into any other functions if you're using a constant string. Preferable place for this function is in a serverside lua file, or in a shared file with the [net.Receive](https://wiki.facepunch.com/gmod/net.Receive) function.
     * 
     * The string table used for this function does not interfere with the engine string tables and has 4095 slots.  
     * This limit is shared among all entities, SetNW* and SetGlobal* functions. If you exceed the limit, you cannot create new variables, and you will get the following warning:
     * ```lua 
     * Warning:  Table networkstring is full, can't add [key]
     * ```
     * 
     * @param str - Adds the specified string to the string table.
     */
    function AddNetworkString(str: string): number;
    
    /**
     * [Shared and Menu]
     * 
     * Function used to calculate aim vector from 2D screen position. It is used in SuperDOF calculate Distance.
     * 
     * Essentially a generic version of [gui.ScreenToVector](https://wiki.facepunch.com/gmod/gui.ScreenToVector).
     * @param ViewAngles - View angles
     * @param ViewFOV - View Field of View
     * @param x - Mouse X position
     * @param y - Mouse Y position
     * @param scrWidth - Screen width
     * @param scrHeight - Screen height
     */
    function AimVector(ViewAngles: Angle, ViewFOV: number, x: number, y: number, scrWidth: number, scrHeight: number): Vector;
    
    /**
     * [Shared and Menu]
     * 
     * Decodes the specified string from base64.
     * @param str - String to decode.
     */
    function Base64Decode(str: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Encodes the specified string to base64.
     * 
     * **Note:**
     * >Unless disabled with the `inline` argument, the Base64 returned is compliant to the RFC 2045 standard. **This means it will have a line break after every 76th character.**
     * 
     * @param str - String to encode.
     * @param [inline = false] - `true` to disable RFC 2045 compliance (newline every 76th character)
     */
    function Base64Encode(str: string, inline = false): string;
    
    /**
     * [Server]
     * 
     * Applies explosion damage to all entities in the specified radius. Performs block checking.
     * @param inflictor - The entity that caused the damage.
     * @param attacker - The entity that attacked.
     * @param damageOrigin - The center of the explosion
     * @param damageRadius - The radius in which entities will be damaged.
     * @param damage - The amount of damage to be applied.
     */
    function BlastDamage(inflictor: Entity, attacker: Entity, damageOrigin: Vector, damageRadius: number, damage: number): void;
    
    /**
     * [Server]
     * 
     * Applies spherical damage based on damage info to all entities in the specified radius.
     * @param dmg - The information about the damage
     * @param damageOrigin - Center of the spherical damage
     * @param damageRadius - The radius in which entities will be damaged.
     */
    function BlastDamageInfo(dmg: CTakeDamageInfo, damageOrigin: Vector, damageRadius: number): void;
    
    /**
     * [Shared and Menu]
     * 
     * Compresses the given string using the [LZMA](https://en.wikipedia.org/wiki/LZMA) algorithm.
     * 
     * Use with [net.WriteData](https://wiki.facepunch.com/gmod/net.WriteData) and [net.ReadData](https://wiki.facepunch.com/gmod/net.ReadData) for networking and  [util.Decompress](https://wiki.facepunch.com/gmod/util.Decompress) to decompress the data.
     * @param str - String to compress.
     */
    function Compress(str: string): string;
    
    /**
     * [Shared]
     * 
     * Generates the [CRC Checksum](https://en.wikipedia.org/wiki/Cyclic_redundancy_check) of the specified string.
     * 
     * **Warning:**
     * >This is NOT a hashing function. It is a checksum, typically used for error detection/data corruption detection. It is possible for this function to generate "collisions", where two different strings will produce the same CRC. If you need a hashing function, use [util.SHA256](https://wiki.facepunch.com/gmod/util.SHA256).
     * 
     * @param stringToChecksum - The string to calculate the checksum of.
     */
    function CRC(stringToChecksum: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the current date formatted like '2012-10-31 18-00-00'
     * 
     */
    function DateStamp(): string;
    
    /**
     * [Shared]
     * 
     * Performs a trace and paints a decal to the surface hit.
     * @param name - The name of the decal to paint.
     * @param start - The start of the trace.
     * @param end - The end of the trace.
     * @param [filter = NULL] - If set, the decal will not be able to be placed on given entity. Can also be a table of entities.
     */
    function Decal(name: string, start: Vector, end: Vector, filter?: Entity): void;
    
    /**
     * [Client]
     * 
     * Performs a trace and paints a decal to the surface hit.
     * 
     * **Note:**
     * >This function has trouble spanning across multiple brushes on the map.
     * 
     * @param material - The name of the decal to paint. Can be retrieved with [util.DecalMaterial](https://wiki.facepunch.com/gmod/util.DecalMaterial).
     * @param ent - The entity to apply the decal to
     * @param position - The position of the decal.
     * @param normal - The direction of the decal.
     * @param color - The color of the decal. Uses the [Color](https://wiki.facepunch.com/gmod/Color).
     * This only works when used on a brush model and only if the decal material has set `$vertexcolor` to `1`.
     * @param w - The width scale of the decal.
     * @param h - The height scale of the decal.
     */
    function DecalEx(material: IMaterial, ent: Entity, position: Vector, normal: Vector, color: Color, w: number, h: number): void;
    
    /**
     * [Shared]
     * 
     * Gets the full material path by the decal name. Used with [util.DecalEx](https://wiki.facepunch.com/gmod/util.DecalEx).
     * @param decalName - Name of the decal.
     */
    function DecalMaterial(decalName: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Decompresses the given string using [LZMA](https://en.wikipedia.org/wiki/LZMA) algorithm. Used to decompress strings previously compressed with [util.Compress](https://wiki.facepunch.com/gmod/util.Compress).
     * @param compressedString - The compressed string to decompress.
     * @param [maxSize = nil] - The maximal size in bytes it will decompress.
     */
    function Decompress(compressedString: string, maxSize?: number): string;
    
    /**
     * [Shared]
     * 
     * Gets the distance between a line and a point in 3d space.
     * @param lineStart - Start of the line.
     * @param lineEnd - End of the line.
     * @param pointPos - The position of the point.
     */
    function DistanceToLine(lineStart: Vector, lineEnd: Vector, pointPos: Vector): LuaMultiReturn<[number, Vector, number]>;
    
    /**
     * [Shared]
     * 
     * Creates an effect with the specified data.
     * 
     * For Orange Box `.pcf` particles, see [Global.ParticleEffect](https://wiki.facepunch.com/gmod/Global.ParticleEffect), [Global.ParticleEffectAttach](https://wiki.facepunch.com/gmod/Global.ParticleEffectAttach) and  [Global.CreateParticleSystem](https://wiki.facepunch.com/gmod/Global.CreateParticleSystem).
     * 
     * **Note:**
     * >When dispatching an effect from the server, some values may be clamped for networking optimizations. Visit the Set accessors on [CEffectData](https://wiki.facepunch.com/gmod/CEffectData) to see which ones are affected.
     * 
     * You will need to couple this function with [Global.IsFirstTimePredicted](https://wiki.facepunch.com/gmod/Global.IsFirstTimePredicted) if you want to use it in a.
     * 
     * @param effectName - The name of the effect to create.
     * You can find a list of <page text="built-in engine effects here">Effects</page>. You can create your own, [example effects can be found here](https://github.com/garrynewman/garrysmod/tree/master/garrysmod/gamemodes/sandbox/entities/effects) and [here](https://github.com/garrynewman/garrysmod/tree/master/garrysmod/gamemodes/base/entities/effects).
     * @param effectData - The effect data describing the effect.
     * @param [allowOverride = true] - Whether Lua-defined effects should override engine-defined effects with the same name for this/single function call.
     * @param [ignorePredictionOrRecipientFilter = nil] - Can either be a boolean to ignore the prediction filter or a [CRecipientFilter](https://wiki.facepunch.com/gmod/CRecipientFilter).
     * Set this to true if you wish to call this function in multiplayer from server.
     */
    function Effect(effectName: string, effectData: CEffectData, allowOverride = true, ignorePredictionOrRecipientFilter?: any): void;
    
    /**
     * [Client]
     * 
     * Filters given text using Steam's filtering system. The function will obey local client's Steam settings for chat filtering:
     * 
     * <upload src="70c/8d9e680b626348b.png" size="50426" name="image.png" />
     * 
     * **Note:**
     * >In some cases, especially in a chatbox, messages from some players may return an empty string if the context argument used for filtering is `TEXT_FILTER_CHAT` and [if the local player has blocked the sender of the message on Steam](https://github.com/Facepunch/garrysmod-issues/issues/5161#issuecomment-1035153941).
     * 
     * @param str - String to filter.
     * @param [context = TEXT_FILTER_UNKNOWN] - Filtering context. See [Enums/TEXT_FILTER](https://wiki.facepunch.com/gmod/Enums/TEXT_FILTER).
     * @param [player = nil] - Used to determine if the text should be filtered according to local user's Steam chat filtering settings.
     */
    function FilterText(str: string, context?: TEXT_FILTER, player?: Player): string;
    
    /**
     * [Menu]
     * 
     * Converts the Full path of the given GMA file to the Relative Path.  
     * 		You can use [util.RelativePathToFull_Menu](https://wiki.facepunch.com/gmod/util.RelativePathToFull_Menu) to convert the Relative path back to the Full Path.
     * @param gma - The **Full** path to the GMA file. **like: "[Steam folder]\common\garrysmod\garrysmod\addons\[Name].gma"**
     * @param [gamePath = GAME] - The path to look for the files and directories in. See <page text="this list">File_Search_Paths</page> for a list of valid paths.
     */
    function FullPathToRelative_Menu(gma: string, gamePath?: string): string;
    
    /**
     * [Shared]
     * 
     * Returns a table containing the info about the model.
     * 
     * **Note:**
     * >This function will silently fail if used on models with following strings in them:
     * * _shared
     * * _anims
     * * _gestures
     * * _anim
     * * _postures
     * * _gst
     * * _pst
     * * _shd
     * * _ss
     * * _anm
     * * _include
     * 
     * @param mdl - Model path
     */
    function GetModelInfo(mdl: string): any;
    
    /**
     * [Shared]
     * 
     * Returns a table of visual meshes of given model.
     * 		
     * 		See also [ENTITY:GetRenderMesh](https://wiki.facepunch.com/gmod/ENTITY:GetRenderMesh).
     * 
     * **Note:**
     * >This does not work on brush models (`*number` models)
     * 
     * @param model - The full path to a model to get the visual meshes of.
     * @param [lod = 0] - Which LOD to retrieve. 0 is the best quality, increasing the number lowers the model quaility.
     * @param [bodygroupMask = 0] - Bodygroup combination for the model. This can be in format of `"000000"` where each number represents a bodygroup option.
     */
    function GetModelMeshes(model: string, lod = 0, bodygroupMask = 0): LuaMultiReturn<[any, any]>;
    
    /**
     * [Shared and Menu]
     * 
     * Gets persistent data of an offline player using their SteamID.
     * 
     * See also [Player:GetPData](https://wiki.facepunch.com/gmod/Player:GetPData) for a more convenient version of this function for online players, [util.RemovePData](https://wiki.facepunch.com/gmod/util.RemovePData) and 
     *  [util.SetPData](https://wiki.facepunch.com/gmod/util.SetPData) for the other accompanying functions.
     * 
     * **Warning:**
     * >This function internally uses [Player:UniqueID](https://wiki.facepunch.com/gmod/Player:UniqueID), which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.
     * 
     * @param steamID - SteamID of the player, in the `STEAM_0:0:0` format. See [Player:SteamID](https://wiki.facepunch.com/gmod/Player:SteamID).
     * @param name - Variable name to get the value of
     * @param default_ - The default value, in case there's nothing stored
     */
    function GetPData(steamID: string, name: string, default_: string): string;
    
    /**
     * [Client]
     * 
     * Creates a new PixVis handle. See [util.PixelVisible](https://wiki.facepunch.com/gmod/util.PixelVisible).
     * 
     */
    function GetPixelVisibleHandle(): pixelvis_handle_t;
    
    /**
     * [Shared and Menu]
     * 
     * Utility function to quickly generate a trace table that starts at the players view position, and ends `32768` units along a specified direction.
     * @param ply - The player the trace should be based on
     * @param [dir = ply:GetAimVector()] - The direction of the trace
     */
    function GetPlayerTrace(ply: Player, dir?: Vector): Trace;
    
    /**
     * [Client]
     * 
     * Gets information about the sun position and obstruction or nil if there is no sun.
     * 
     */
    function GetSunInfo(): SunInfo;
    
    /**
     * [Shared]
     * 
     * Returns data of a surface property at given ID.
     * @param id - Surface property ID. You can get it from [Structures/TraceResult](https://wiki.facepunch.com/gmod/Structures/TraceResult).
     */
    function GetSurfaceData(id: TraceResult): SurfacePropertyData;
    
    /**
     * [Shared]
     * 
     * Returns the matching surface property index for the given surface property name.
     * 
     * See also [util.GetSurfaceData](https://wiki.facepunch.com/gmod/util.GetSurfaceData) and [util.GetSurfacePropName](https://wiki.facepunch.com/gmod/util.GetSurfacePropName) for opposite function.
     * @param surfaceName - The name of the surface.
     */
    function GetSurfaceIndex(surfaceName: string): number;
    
    /**
     * [Shared]
     * 
     * Returns the name of a surface property at given ID.
     * 
     * See also [util.GetSurfaceData](https://wiki.facepunch.com/gmod/util.GetSurfaceData) and [util.GetSurfaceIndex](https://wiki.facepunch.com/gmod/util.GetSurfaceIndex) for opposite function.
     * @param id - Surface property ID. You can get it from [Structures/TraceResult](https://wiki.facepunch.com/gmod/Structures/TraceResult).
     */
    function GetSurfacePropName(id: TraceResult): string;
    
    /**
     * [Server]
     * 
     * Returns a table of all SteamIDs that have a usergroup.
     * 
     * **Note:**
     * >This returns the original usergroups table, changes done to this table are not retroactive and will only affect newly connected users
     * 
     * **Note:**
     * >This returns only groups that are registered in the **settings/users.txt** file of your server.  
     * 
     * In order to get the usergroup of a connected player, please use [Player:GetUserGroup](https://wiki.facepunch.com/gmod/Player:GetUserGroup) instead.
     * 
     * 
     */
    function GetUserGroups(): any;
    
    /**
     * [Shared]
     * 
     * Performs a Ray-OBB (Orientated Bounding Box) intersection and returns position, normal and the fraction if there was an intersection.
     * @param rayStart - Origin or start position of the ray.
     * @param rayDelta - The ray vector itself, the ray end point relative to the start point. Can be implemented as `direction * distance`
     * Note that in this implementation, the ray is not infinite - it's only a segment.
     * @param boxOrigin - The center of the box.
     * @param boxAngles - The angle of the box.
     * @param boxMins - The min position of the box.
     * @param boxMaxs - The max position of the box.
     */
    function IntersectRayWithOBB(rayStart: Vector, rayDelta: Vector, boxOrigin: Vector, boxAngles: Angle, boxMins: Vector, boxMaxs: Vector): LuaMultiReturn<[Vector, Vector, number]>;
    
    /**
     * [Shared]
     * 
     * Performs a [ray-plane intersection](https://en.wikipedia.org/wiki/Line%E2%80%93plane_intersection) and returns the hit position or nil.
     * @param rayOrigin - Origin/start position of the ray.
     * @param rayDirection - The direction of the ray.
     * @param planePosition - Any position of the plane.
     * @param planeNormal - The normal vector of the plane.
     */
    function IntersectRayWithPlane(rayOrigin: Vector, rayDirection: Vector, planePosition: Vector, planeNormal: Vector): Vector;
    
    /**
     * [Shared]
     * 
     * Performs a ray-sphere intersection and returns the intersection positions or nil.
     * @param rayOrigin - Origin/start position of the ray.
     * @param rayDelta - The end position of the ray relative to the start position. Equivalent of `direction * distance`.
     * @param shperePosition - Any position of the sphere.
     * @param sphereRadius - The radius of the sphere.
     */
    function IntersectRayWithSphere(rayOrigin: Vector, rayDelta: Vector, shperePosition: Vector, sphereRadius: number): LuaMultiReturn<[number, number]>;
    
    /**
     * [Shared and Menu]
     * 
     * Returns whether a binary module is installed and is resolvable by [Global.require](https://wiki.facepunch.com/gmod/Global.require).
     * @param name - Name of the binary module, exactly the same as you would enter it as the argument to [Global.require](https://wiki.facepunch.com/gmod/Global.require).
     */
    function IsBinaryModuleInstalled(name: string): boolean;
    
    /**
     * [Shared]
     * 
     * Performs a box-sphere intersection and returns whether there was an intersection or not.
     * @param boxMin - The minimum extents of the Axis-Aligned box.
     * @param boxMax - The maximum extents of the Axis-Aligned box.
     * @param shpere2Position - Any position of the sphere.
     * @param sphere2Radius - The radius of the sphere.
     */
    function IsBoxIntersectingSphere(boxMin: Vector, boxMax: Vector, shpere2Position: Vector, sphere2Radius: number): boolean;
    
    /**
     * [Server]
     * 
     * Checks if a certain position is within the world bounds.
     * @param position - Position to check.
     */
    function IsInWorld(position: Vector): boolean;
    
    /**
     * [Shared]
     * 
     * Checks if the model is loaded in the game.
     * @param modelName - Name/Path of the model to check.
     */
    function IsModelLoaded(modelName: string): boolean;
    
    /**
     * [Shared]
     * 
     * Performs OBB on OBB intersection test.
     * @param box1Origin - The center of the first box.
     * @param box1Angles - The angles of the first box.
     * @param box1Mins - The min position of the first box.
     * @param box1Maxs - The max position of the first box.
     * @param box2Origin - The center of the second box.
     * @param box2Angles - The angles of the second box.
     * @param box2Mins - The min position of the second box.
     * @param box2Maxs - The max position of the second box.
     * @param tolerance - Tolerance for error. Leave at 0 if unsure.
     */
    function IsOBBIntersectingOBB(box1Origin: Vector, box1Angles: Angle, box1Mins: Vector, box1Maxs: Vector, box2Origin: Vector, box2Angles: Angle, box2Mins: Vector, box2Maxs: Vector, tolerance: number): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether a point is within a cone or not.
     * @param point - The position of the point to test.
     * @param coneOrigin - The position of the cone tip.
     * @param coneAxis - The direction of the cone.
     * @param coneSine - The sine of the cone's angle.
     * @param coneLength - Length of the cone's axis.
     */
    function IsPointInCone(point: Vector, coneOrigin: Vector, coneAxis: Vector, coneSine: number, coneLength: number): boolean;
    
    /**
     * [Client]
     * 
     * Check whether the skybox is visible from the point specified.
     * 
     * **Note:**
     * >This will always return true in fullbright maps.
     * 
     * @param position - The position to check the skybox visibility from.
     */
    function IsSkyboxVisibleFromPoint(position: Vector): boolean;
    
    /**
     * [Shared]
     * 
     * Returns whether a sphere is intersecting a cone or not.
     * @param sphereCenter - The center position of the sphere to test.
     * @param sphereRadius - The radius of the sphere to test.
     * @param coneOrigin - The position of the cone tip.
     * @param coneAxis - The direction of the cone.
     * @param coneSine - The <page test="sine">math.sin</page> of the cone's angle.
     * @param coneCosine - The <page test="cosine">math.cos</page> of the cone's angle.
     */
    function IsSphereIntersectingCone(sphereCenter: Vector, sphereRadius: number, coneOrigin: Vector, coneAxis: Vector, coneSine: number, coneCosine: number): boolean;
    
    /**
     * [Shared]
     * 
     * Performs a sphere-sphere intersection and returns whether there was an intersection or not.
     * @param sphere1Position - Any position of the first sphere.
     * @param sphere1Radius - The radius of the first sphere.
     * @param sphere2Position - Any position of the second sphere.
     * @param sphere2Radius - The radius of the second sphere.
     */
    function IsSphereIntersectingSphere(sphere1Position: Vector, sphere1Radius: number, sphere2Position: Vector, sphere2Radius: number): boolean;
    
    /**
     * [Shared]
     * 
     * Checks if the specified model is valid.
     *  
     * 
     * A model is considered invalid in following cases:
     * * Starts with a space or **maps**
     * * Doesn't start with **models**
     * * Contains any of the following:
     * * * _gestures
     * * * _animations
     * * * _postures
     * * * _gst
     * * * _pst
     * * * _shd
     * * * _ss
     * * * _anm
     * * * .bsp
     * * * cs_fix
     * * If the model isn't precached on the server, AND if the model file doesn't exist on disk
     * * If precache failed
     * * Model is the error model
     * 
     * Running this function will also precache the model.
     * @param modelName - Name/Path of the model to check.
     */
    function IsValidModel(modelName: string): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Checks if given numbered physics object of given entity is valid or not. Most useful for ragdolls.
     * @param ent - The entity
     * @param physobj - Number of the physics object to test
     */
    function IsValidPhysicsObject(ent: Entity, physobj: number): boolean;
    
    /**
     * [Shared]
     * 
     * Checks if the specified prop is valid.
     * @param modelName - Name/Path of the model to check.
     */
    function IsValidProp(modelName: string): boolean;
    
    /**
     * [Shared]
     * 
     * Checks if the specified model name points to a valid ragdoll.
     * @param ragdollName - Name/Path of the ragdoll model to check.
     */
    function IsValidRagdoll(ragdollName: string): boolean;
    
    /**
     * [Shared and Menu]
     * 
     * Converts a JSON string to a Lua table.
     * 
     * **Bug [#3561](https://github.com/Facepunch/garrysmod-issues/issues/3561):**
     * >This will attempt to cast the string keys `"inf"`, `"nan"`, `"true"`, and `"false"` to their respective Lua values. This completely ignores nulls in arrays.
     * 
     * **Bug [#2407](https://github.com/Facepunch/garrysmod-issues/issues/2407):**
     * >Colors will not have the color metatable.
     * 
     * @param json - The JSON string to convert.
     * @param [ignoreLimits = false] - ignore the depth and breadth limits, **use at your own risk!**.
     * **Warning:**
     * >If this is false, there is a limit of 15,000 keys total.
     * 
     * @param [ignoreConversions = false] - ignore string to number conversions for table keys.
     * **Warning:**
     * >if this is false, keys are converted to numbers wherever possible. This means using [Player:SteamID64](https://wiki.facepunch.com/gmod/Player:SteamID64) as keys won't work.
     * 
     */
    function JSONToTable(json: string, ignoreLimits = false, ignoreConversions = false): any;
    
    /**
     * [Shared and Menu]
     * 
     * Converts a Valve KeyValue string (typically from [util.TableToKeyValues](https://wiki.facepunch.com/gmod/util.TableToKeyValues)) to a Lua table.
     * 
     * **Note:**
     * >Due to how [table](https://wiki.facepunch.com/gmod/table)s work in Lua, keys will not repeat within a table. See [util.KeyValuesToTablePreserveOrder](https://wiki.facepunch.com/gmod/util.KeyValuesToTablePreserveOrder) for alternative.
     * 
     * @param keyValues - The KeyValue string to convert.
     * @param [usesEscapeSequences = false] - If set to true, will replace `\t`, `\n`, `&quot;` and `\\` in the input text with their escaped variants
     * @param [preserveKeyCase = false] - Whether we should preserve key case (may fail) or not (always lowercase)
     */
    function KeyValuesToTable(keyValues: string, usesEscapeSequences = false, preserveKeyCase = false): any;
    
    /**
     * [Shared and Menu]
     * 
     * Similar to [util.KeyValuesToTable](https://wiki.facepunch.com/gmod/util.KeyValuesToTable) but it also preserves order of keys.
     * @param keyvals - The key value string
     * @param [usesEscapeSequences = false] - If set to true, will replace `\t`, `\n`, `&quot;` and `\\` in the input text with their escaped variants
     * @param [preserveKeyCase = false] - Whether we should preserve key case (may fail) or not (always lowercase)
     */
    function KeyValuesToTablePreserveOrder(keyvals: string, usesEscapeSequences = false, preserveKeyCase = false): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a vector in world coordinates based on an entity and local coordinates
     * @param ent - The entity lpos is local to
     * @param lpos - Coordinates local to the ent
     * @param bonenum - The bonenumber of the ent lpos is local to
     */
    function LocalToWorld(ent: Entity, lpos: Vector, bonenum: number): Vector;
    
    /**
     * [Shared]
     * 
     * Generates the [MD5 hash](https://en.wikipedia.org/wiki/MD5) of the specified string.
     * 
     * **Warning:**
     * >MD5 is considered cryptographically broken and is known to be vulnerable to a variety of attacks including duplicate return values. If security or duplicate returns is a concern, use [util.SHA256](https://wiki.facepunch.com/gmod/util.SHA256).
     * 
     * @param stringToHash - The string to calculate the MD5 hash of.
     */
    function MD5(stringToHash: string): string;
    
    /**
     * [Shared]
     * 
     * Returns the networked string associated with the given ID from the string table.
     * @param stringTableID - ID to get the associated string from.
     */
    function NetworkIDToString(stringTableID: number): string;
    
    /**
     * [Shared]
     * 
     * Returns the networked ID associated with the given string from the string table.
     * @param networkString - String to get the associated networked ID from.
     */
    function NetworkStringToID(networkString: string): number;
    
    /**
     * [Shared and Menu]
     * 
     * Formats a float by stripping off extra `0's` and `.'s`.
     * @param float - The float to format.
     */
    function NiceFloat(float: number): string;
    
    /**
     * [Shared]
     * 
     * Creates a tracer effect with the given parameters.
     * @param name - The name of the tracer effect.
     * @param startPos - The start position of the tracer.
     * @param endPos - The end position of the tracer.
     * @param doWhiz - Play the hit miss(whiz) sound.
     */
    function ParticleTracer(name: string, startPos: Vector, endPos: Vector, doWhiz: boolean): void;
    
    /**
     * [Shared]
     * 
     * Creates a tracer effect with the given parameters.
     * @param name - The name of the tracer effect.
     * @param startPos - The start position of the tracer.
     * @param endPos - The end position of the tracer.
     * @param doWhiz - Play the hit miss(whiz) sound.
     * @param entityIndex - Entity index of the emitting entity.
     * @param attachmentIndex - Attachment index to be used as origin.
     */
    function ParticleTracerEx(name: string, startPos: Vector, endPos: Vector, doWhiz: boolean, entityIndex: number, attachmentIndex: number): void;
    
    /**
     * [Client]
     * 
     * Returns the visibility of a sphere in the world.
     * @param position - The center of the visibility test.
     * @param radius - The radius of the sphere to check for visibility.
     * @param PixVis - The PixVis handle created with [util.GetPixelVisibleHandle](https://wiki.facepunch.com/gmod/util.GetPixelVisibleHandle).
     * **Warning:**
     * >Don't use the same handle twice per tick or it will give unpredictable results.
     * 
     */
    function PixelVisible(position: Vector, radius: number, PixVis: pixelvis_handle_t): number;
    
    /**
     * [Shared]
     * 
     * Returns the contents of the position specified.
     * 
     * **Note:**
     * >This function will sample only the world environments. It can be used to check if [Entity:GetPos](https://wiki.facepunch.com/gmod/Entity:GetPos) is underwater for example unlike [Entity:WaterLevel](https://wiki.facepunch.com/gmod/Entity:WaterLevel) which works for players only.
     * 
     * @param position - Position to get the contents sample from.
     */
    function PointContents(position: Vector): CONTENTS;
    
    /**
     * [Shared]
     * 
     * Precaches a model for later use. Model is cached after being loaded once.
     * 
     * **Warning:**
     * >Modelprecache is limited to 4096 unique models. When it reaches the limit the game will crash.
     * 
     * @param modelName - The model to precache.
     */
    function PrecacheModel(modelName: string): void;
    
    /**
     * [Shared]
     * 
     * Precaches a sound for later use. Sound is cached after being loaded once.
     * 
     * **Bug :**
     * >Broken on purpose because hitting the limit above causes the server to shutdown
     * 
     * **Bug :**
     * >Ultimately does nothing on client, and only works with sound scripts, not direct paths.
     * 
     * **Note:**
     * >Soundcache is limited to 16384 unique sounds on the server.
     * 
     * @param soundName - The sound to precache.
     */
    function PrecacheSound(soundName: string): void;
    
    /**
     * [Shared and Menu]
     * 
     * Performs a trace with the given origin, direction, and filter.
     * 
     * **Note:**
     * >This function will throw an error in the menu realm because it internally uses util.TraceLine which doesn't exist in the menu realm and thus error.
     * 
     * @param origin - The origin of the trace.
     * @param dir - The direction of the trace times the distance of the trace. This is added to the origin to determine the endpos.
     * @param [filter = nil] - Entity which should be ignored by the trace. Can also be a table of entities or a function - see [Structures/Trace](https://wiki.facepunch.com/gmod/Structures/Trace).
     */
    function QuickTrace(origin: Vector, dir: Vector, filter?: Trace): TraceResult;
    
    /**
     * [Menu]
     * 
     * Converts the relative path of the given GMA file to the Full Path.  
     * 		You can use [util.FullPathToRelative_Menu](https://wiki.facepunch.com/gmod/util.FullPathToRelative_Menu) to convert the Full path back to the Relative Path.
     * @param gma - The Relative path to the GMA file. **like: "addons/[Name].gma"**
     * @param [gamePath = GAME] - The path to look for the files and directories in. See <page text="this list">File_Search_Paths</page> for a list of valid paths.
     */
    function RelativePathToFull_Menu(gma: string, gamePath?: string): string;
    
    /**
     * [Menu]
     * 
     * Returns the AddonInfo of the Addon the given file belongs to.
     * @param gma - The **Full** path to the GMA file. **like: "[Steam folder]\common\garrysmod\garrysmod\addons\[Name].gma"**
     */
    function RelativePathToGMA_Menu(gma: string): any;
    
    /**
     * [Shared and Menu]
     * 
     * Removes persistent data of an offline player using their SteamID.
     * 
     * See also [Player:RemovePData](https://wiki.facepunch.com/gmod/Player:RemovePData) for a more convenient version of this function for online players, [util.SetPData](https://wiki.facepunch.com/gmod/util.SetPData) and 
     *  [util.GetPData](https://wiki.facepunch.com/gmod/util.GetPData) for the other accompanying functions.
     * 
     * **Warning:**
     * >This function internally uses [Player:UniqueID](https://wiki.facepunch.com/gmod/Player:UniqueID), which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.
     * 
     * @param steamID - SteamID of the player to remove data of, in the `STEAM_0:0:0` format. See [Player:SteamID](https://wiki.facepunch.com/gmod/Player:SteamID).
     * @param name - Variable name to remove
     */
    function RemovePData(steamID: string, name: string): void;
    
    /**
     * [Shared]
     * 
     * Makes the screen shake.
     * 
     * **Note:**
     * >The screen shake effect is rendered by modifying the view origin on the client. If you override the view origin in [GM:CalcView](https://wiki.facepunch.com/gmod/GM:CalcView) you may not be able to see the shake effect.
     * 
     * @param pos - The origin of the effect.
     * **Note:**
     * >Does nothing on client.
     * 
     * @param amplitude - The strength of the effect. How far away from its origin the camera will move while shaking.
     * @param frequency - How many times per second to change the direction of the camera wobble. 40 is generally enough; values higher are hardly distinguishable.
     * @param duration - The duration of the effect in seconds.
     * @param radius - The range from the origin within which views will be affected, in Hammer units.
     * **Note:**
     * >Does nothing on client.
     * 
     * @param [airshake = false] - whether players in the air should also be affected.
     */
    function ScreenShake(pos: Vector, amplitude: number, frequency: number, duration: number, radius: number, airshake = false): void;
    
    /**
     * [Shared and Menu]
     * 
     * Sets persistent data for offline player using their SteamID.
     * 
     * See also [Player:SetPData](https://wiki.facepunch.com/gmod/Player:SetPData) for a more convenient version of this function for online players, [util.RemovePData](https://wiki.facepunch.com/gmod/util.RemovePData) and 
     *  [util.GetPData](https://wiki.facepunch.com/gmod/util.GetPData) for the other accompanying functions.
     * 
     * **Warning:**
     * >This function internally uses [Player:UniqueID](https://wiki.facepunch.com/gmod/Player:UniqueID), which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.
     * 
     * @param steamID - SteamID of the player, in the `STEAM_0:0:0` format. See [Player:SteamID](https://wiki.facepunch.com/gmod/Player:SteamID).
     * @param name - Variable name to store the value in.
     * @param value - The value to store.
     */
    function SetPData(steamID: string, name: string, value: any): void;
    
    /**
     * [Shared]
     * 
     * Generates the [SHA-1 hash](https://en.wikipedia.org/wiki/SHA-1) of the specified string.
     * 
     * **Warning:**
     * >SHA-1 is considered cryptographically broken and is known to be vulnerable to a variety of attacks. If security is a concern, use [util.SHA256](https://wiki.facepunch.com/gmod/util.SHA256).
     * 
     * @param stringToHash - The string to calculate the SHA-1 hash of.
     */
    function SHA1(stringToHash: string): string;
    
    /**
     * [Shared]
     * 
     * Generates the [SHA-256 hash](https://en.wikipedia.org/wiki/SHA-2) of the specified string. This is unique and will never return the same hash for a different string unlike [util.CRC](https://wiki.facepunch.com/gmod/util.CRC) or [util.MD5](https://wiki.facepunch.com/gmod/util.MD5) which are both vulnerable to duplicate returns.
     * @param stringToHash - The string to calculate the SHA-256 hash of.
     */
    function SHA256(stringToHash: string): string;
    
    /**
     * [Shared]
     * 
     * Generates a random float value that should be the same on client and server.
     * 
     * **Note:**
     * >This function is best used in a Predicted Hook
     * 
     * @param uniqueName - The seed for the random value
     * @param min - The minimum value of the random range
     * @param max - The maximum value of the random range
     * @param [additionalSeed = 0] - The additional seed
     */
    function SharedRandom(uniqueName: string, min: number, max: number, additionalSeed = 0): number;
    
    /**
     * [Server]
     * 
     * Adds a trail to the specified entity.
     * @param ent - Entity to attach trail to
     * @param attachmentID - Attachment ID of the entities model to attach trail to. If you are not sure, set this to 0
     * @param color - Color of the trail, use [Global.Color](https://wiki.facepunch.com/gmod/Global.Color)
     * @param additive - Should the trail be additive or not
     * @param startWidth - Start width of the trail
     * @param endWidth - End width of the trail
     * @param lifetime - How long it takes to transition from startWidth to endWidth
     * @param textureRes - The resolution of trails texture. A good value can be calculated using this formula: 1 / ( startWidth + endWidth ) * 0.5
     * @param texture - Path to the texture to use as a trail.
     */
    function SpriteTrail(ent: Entity, attachmentID: number, color: any, additive: boolean, startWidth: number, endWidth: number, lifetime: number, textureRes: number, texture: string): Entity;
    
    /**
     * [Shared and Menu]
     * 
     * Returns a new [Stack](https://wiki.facepunch.com/gmod/Stack) object.
     * 
     */
    function Stack(): Stack;
    
    /**
     * [Shared]
     * 
     * Given a <page text="64bit SteamID">Player:SteamID64</page> will return a <page text="STEAM_0:0:0">Player:SteamID</page> style Steam ID.
     * 
     * **Note:**
     * >This operation induces data loss. Not all fields of a 64bit SteamID can be represented using the `STEAM_0:0:0` format.
     * 
     * @param id - The 64 bit Steam ID
     */
    function SteamIDFrom64(id: string): string;
    
    /**
     * [Shared]
     * 
     * Converts a <page text="STEAM_0:0:0">Player:SteamID</page> style SteamID to a <page text="64bit SteamID">Player:SteamID64</page>.
     * @param id - The <page text="STEAM_0:0:0">Player:SteamID</page> format SteamID
     */
    function SteamIDTo64(id: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Converts a string to the specified type.
     * 
     * This can be useful when dealing with ConVars.
     * @param str - The string to convert
     * @param typename - The type to attempt to convert the string to. This can be vector, angle, float, int, bool, or string (case insensitive).
     */
    function StringToType(str: string, typename: string): any;
    
    /**
     * [Shared and Menu]
     * 
     * Converts a table to a JSON string.
     * 
     * **Warning:**
     * >All keys are strings in the JSON format, so all keys will be converted to strings!
     * 
     * All integers will be converted to decimals (5 -> 5.0).
     * 
     * **Bug [#3561](https://github.com/Facepunch/garrysmod-issues/issues/3561):**
     * >This will produce invalid JSON if the provided table contains nan or inf values.
     * 
     * @param table - Table to convert.
     * @param [prettyPrint = false] - Format and indent the JSON.
     */
    function TableToJSON(table: any, prettyPrint = false): string;
    
    /**
     * [Shared and Menu]
     * 
     * Converts the given table into a Valve key value string.
     * 
     * Use [util.KeyValuesToTable](https://wiki.facepunch.com/gmod/util.KeyValuesToTable) to perform the opposite transformation.
     * 
     * You should consider using [util.TableToJSON](https://wiki.facepunch.com/gmod/util.TableToJSON) instead.
     * @param table - The table to convert.
     * @param [rootKey = TableToKeyValues] - The root key name for the output KV table.
     */
    function TableToKeyValues(table: any, rootKey?: string): string;
    
    /**
     * [Shared and Menu]
     * 
     * Creates a timer object.
     * @param [startdelay = 0] - How long you want the timer to be.
     */
    function Timer(startdelay = 0): any;
    
    /**
     * [Shared and Menu]
     * 
     * Returns the time since this function has been last called
     * 
     */
    function TimerCycle(): number;
    
    /**
     * [Shared and Menu]
     * 
     * Converts string or a number to a bool, if possible. Alias of [Global.tobool](https://wiki.facepunch.com/gmod/Global.tobool).
     * 
     * @deprecated You should use [Global.tobool](https://wiki.facepunch.com/gmod/Global.tobool) instead.
     * 
     * @param input - A string or a number to convert.
     */
    function tobool(input: any): boolean;
    
    /**
     * [Shared]
     * 
     * Runs a trace using the entity's collisionmodel between two points. This does not take the entity's angles into account and will trace its unrotated collisionmodel.
     * 
     * **Note:**
     * >Clientside entities will not be hit by traces.
     * 
     * @param tracedata - Trace data. See [Structures/Trace](https://wiki.facepunch.com/gmod/Structures/Trace)
     * @param ent - The entity to use
     */
    function TraceEntity(tracedata: Trace, ent: Entity): TraceResult;
    
    /**
     * [Shared]
     * 
     * Identical to [util.TraceHull](https://wiki.facepunch.com/gmod/util.TraceHull) but uses an entity for `mins`/`maxs` inputs.
     * @param tracedata - Trace data. See [Structures/Trace](https://wiki.facepunch.com/gmod/Structures/Trace)
     * @param ent - The entity to use mins/maxs of for the hull trace.
     */
    function TraceEntityHull(tracedata: Trace, ent: Entity): TraceResult;
    
    /**
     * [Shared]
     * 
     * Performs an AABB hull (axis-aligned bounding box, aka not rotated) trace with the given trace data.
     * 
     * **Note:**
     * >Clientside entities will not be hit by traces.
     * 
     * **Note:**
     * >This function may not always give desired results clientside due to certain physics mechanisms not existing on the client. Use it serverside for accurate results.
     * 
     * @param TraceData - The trace data to use. See [Structures/HullTrace](https://wiki.facepunch.com/gmod/Structures/HullTrace)
     */
    function TraceHull(TraceData: HullTrace): TraceResult;
    
    /**
     * [Shared]
     * 
     * Performs a trace with the given trace data.
     * 
     * **Note:**
     * >Clientside entities will not be hit by traces.
     * 
     * When server side trace starts inside a solid, it will hit the most inner solid the beam start position is located in. Traces are triggered by change of boundary.
     * 
     * @param TraceData - The trace data to use. See [Structures/Trace](https://wiki.facepunch.com/gmod/Structures/Trace)
     */
    function TraceLine(TraceData: Trace): TraceResult;
    
    /**
     * [Shared and Menu]
     * 
     * Converts a type to a (nice, but still parsable) string
     * @param input - What to convert
     */
    function TypeToString(input: any): string;
/**
     * 
     */
    namespace worldpicker {
        

        /**
         * [Client]
         * 
         * Returns if the user is currently picking an entity.
         * 
         */
        function Active(): boolean;
        
        /**
         * [Client]
         * 
         * Finishes the world picking. This is called when a user presses their mouse after calling [util.worldpicker.Start](https://wiki.facepunch.com/gmod/util.worldpicker.Start).
         * @param tr - [Structures/TraceResult](https://wiki.facepunch.com/gmod/Structures/TraceResult) from the mouse press
         */
        function Finish(tr: TraceResult): void;
        
        /**
         * [Client]
         * 
         * Starts picking an entity in the world. This will suppress the next mouse click, and instead use it as a direction in the trace sent to the callback.
         * @param callback - Function to call after an entity choice has been made. Argument is:
         * [table](https://wiki.facepunch.com/gmod/table) tr - <page text="TraceResult">Structures/TraceResult</page> from the mouse press. tr.Entity will return the entity clicked
         */
        function Start(callback: Function): void;

    }
}

/**
 * The **vgui** library allows you to script and create your own panels using **V**alve's **G**raphical **U**ser **I**nterface (VGUI) system.
 * 
 * For an alphabetically ordered list of VGUI panels, see [VGUI Element List](https://wiki.facepunch.com/gmod/VGUI_Element_List).
 */
declare namespace vgui {
    

    /**
     * [Client and Menu]
     * 
     * Creates a panel by the specified classname.
     * 
     * **Note:**
     * >Custom VGUI elements are not loaded instantly. Use [GM:OnGamemodeLoaded](https://wiki.facepunch.com/gmod/GM:OnGamemodeLoaded) to create them on startup.
     * 
     * @param classname - Classname of the panel to create.
     * Default panel classnames can be found on the [VGUI Element List](https://wiki.facepunch.com/gmod/VGUI_Element_List).
     * New panels can be registered via [vgui.Register](https://wiki.facepunch.com/gmod/vgui.Register)
     * @param [parent = nil] - Panel to parent to.
     * @param [name = nil] - Custom name of the created panel for scripting/debugging purposes. Can be retrieved with [Panel:GetName](https://wiki.facepunch.com/gmod/Panel:GetName).
     */
    function Create(classname: string, parent?: Panel, name?: string): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Creates a panel from table. Typically used with [vgui.RegisterFile](https://wiki.facepunch.com/gmod/vgui.RegisterFile) and [vgui.RegisterTable](https://wiki.facepunch.com/gmod/vgui.RegisterTable).
     * @param metatable - Your PANEL table.
     * @param [parent = nil] - Which panel to parent the newly created panel to.
     * @param [name = nil] - Custom name of the created panel for scripting/debugging purposes. Can be retrieved with [Panel:GetName](https://wiki.facepunch.com/gmod/Panel:GetName).
     */
    function CreateFromTable(metatable: any, parent?: Panel, name?: string): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Creates an engine panel.
     * @param class_ - Class of the panel to create
     * @param [parent = nil] - If specified, parents created panel to given one
     * @param [name = nil] - Name of the created panel
     */
    function CreateX(class_: string, parent?: Panel, name?: string): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Returns whenever the cursor is currently active and visible.
     * 
     */
    function CursorVisible(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns true if Lua-defined panel exists by name. Uses [vgui.GetControlTable](https://wiki.facepunch.com/gmod/vgui.GetControlTable) internally.
     * @param Panelname - The name of the panel to get test.
     */
    function Exists(Panelname: string): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns whether the currently focused panel is a child of the given one.
     * @param parent - The parent panel to check the currently focused one against. This doesn't need to be a direct parent (focused panel can be a child of a child and so on).
     */
    function FocusedHasParent(parent: Panel): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Returns the table of a Lua-defined panel by name. Does not return parent members of the table!
     * @param Panelname - The name of the panel to get the table of.
     */
    function GetControlTable(Panelname: string): any;
    
    /**
     * [Client and Menu]
     * 
     * Returns the panel the cursor is hovering above.
     * 
     * **Warning:**
     * >This returns a cached value that is only updated after rendering and `before` the next VGUI Think/Layout pass.
     * 
     * ie. it lags one frame behind panel layout and is completely unhelpful for [PANEL:Paint](https://wiki.facepunch.com/gmod/PANEL:Paint) if your panels are moving around under the mouse a lot every frame.
     * 
     * 
     */
    function GetHoveredPanel(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Returns the panel which is currently receiving keyboard input.
     * 
     */
    function GetKeyboardFocus(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Returns the global world panel which is the parent to all others, except for the HUD panel.
     * 
     * See also [Global.GetHUDPanel](https://wiki.facepunch.com/gmod/Global.GetHUDPanel).
     * 
     */
    function GetWorldPanel(): Panel;
    
    /**
     * [Client and Menu]
     * 
     * Returns whenever the cursor is hovering the world panel.
     * 
     */
    function IsHoveringWorld(): boolean;
    
    /**
     * [Client and Menu]
     * 
     * Registers a panel for later creation via [vgui.Create](https://wiki.facepunch.com/gmod/vgui.Create).
     * @param classname - Classname of the panel to register. This is what you will need to pass to [vgui.Create](https://wiki.facepunch.com/gmod/vgui.Create)'s first argument.
     * @param panelTable - The table containing the panel information.
     * @param [baseName = Panel] - Classname of a panel to inherit functionality from. Functions with same names will be overwritten preferring the panel that is being registered.
     */
    function Register(classname: string, panelTable: any, baseName?: string): any;
    
    /**
     * [Client and Menu]
     * 
     * Registers a new [VGUI](https://wiki.facepunch.com/gmod/VGUI) panel from a file, to be used with [vgui.CreateFromTable](https://wiki.facepunch.com/gmod/vgui.CreateFromTable).
     * 
     * File file must use the `PANEL` global that is provided just before the file is [Global.include](https://wiki.facepunch.com/gmod/Global.include)d, for example:
     * 
     * ```
     * PANEL.Base = "Panel"
     * 
     * function PANEL:Init()
     * 	-- Your code...
     * end
     * 
     * function PANEL:Think()
     * 	-- Your code...
     * end
     * ```
     * @param file - The file to register
     */
    function RegisterFile(file: string): any;
    
    /**
     * [Client and Menu]
     * 
     * Registers a table to use as a panel, to be used with [vgui.CreateFromTable](https://wiki.facepunch.com/gmod/vgui.CreateFromTable).
     * 
     * All this function does is assigns Base key to your table and returns the table.
     * @param panel - The PANEL table.
     * @param [base = Panel] - A base for the panel.
     */
    function RegisterTable(panel: any, base?: string): any;

}

/**
 * The video library.
 */
declare namespace video {
    

    /**
     * [Client and Menu]
     * 
     * Attempts to create an [IVideoWriter](https://wiki.facepunch.com/gmod/IVideoWriter).
     * @param config - The video config. See [Structures/VideoData](https://wiki.facepunch.com/gmod/Structures/VideoData).
     */
    function Record(config: VideoData): LuaMultiReturn<[IVideoWriter, string]>;

}

/**
 * The weapons library allows you to access information about any scripted weapons loaded into the game, as well as register your own weapons.
 */
declare namespace weapons {
    

    /**
     * [Shared]
     * 
     * Get a `copy` of weapon table by name. This function also inherits fields from the weapon's base class, unlike [weapons.GetStored](https://wiki.facepunch.com/gmod/weapons.GetStored).
     * 
     * **Note:**
     * >This will only work on SWEP's, this means that this will not return anything for HL2/HL:S weapons.
     * 
     * @param classname - Class name of weapon to retrieve
     */
    function Get(classname: string): any;
    
    /**
     * [Shared]
     * 
     * Get a list of all the registered SWEPs. This does not include weapons added to spawnmenu manually.
     * 
     */
    function GetList(): any;
    
    /**
     * [Shared]
     * 
     * Gets the REAL weapon table, not a copy. The produced table does *not* inherit fields from the weapon's base class, unlike [weapons.Get](https://wiki.facepunch.com/gmod/weapons.Get).
     * 
     * **Warning:**
     * >Modifying this table will modify what is stored by the weapons library. Take a copy or use [weapons.Get](https://wiki.facepunch.com/gmod/weapons.Get) to avoid this.
     * 
     * @param weapon_class - Weapon class to retrieve weapon table of
     */
    function GetStored(weapon_class: string): any;
    
    /**
     * [Shared]
     * 
     * Checks if name is based on base
     * @param name - Entity's class name to be checked
     * @param base - Base class name to be checked
     */
    function IsBasedOn(name: string, base: string): boolean;
    
    /**
     * [Shared]
     * 
     * Called after all SWEPS have been loaded and runs [baseclass.Set](https://wiki.facepunch.com/gmod/baseclass.Set) on each one.
     * 
     * You can retrieve all the currently registered SWEPS with [weapons.GetList](https://wiki.facepunch.com/gmod/weapons.GetList).
     * 
     * **Note:**
     * >This is not called after a SWEP auto refresh, and thus the inherited baseclass functions retrieved with [baseclass.Get](https://wiki.facepunch.com/gmod/baseclass.Get) will not be updated
     * 
     * 
     */
    function OnLoaded(): void;
    
    /**
     * [Shared]
     * 
     * Registers a Scripted Weapon (SWEP) class manually. When the engine spawns an entity, weapons registered with this function will be created if the class names match.
     * 
     * See also [scripted_ents.Register](https://wiki.facepunch.com/gmod/scripted_ents.Register) for Scripted Entities (SENTs)
     * 
     * **Bug :**
     * >Sub-tables provided in the first argument will not carry over their metatable, and will receive a BaseClass key if the table was merged with the base's. Userdata references, which includes Vectors, Angles, Entities, etc. will not be copied.
     * 
     * @param swep_table - The SWEP table
     * @param classname - Classname to assign to that swep
     */
    function Register(swep_table: any, classname: string): void;

}

/**
 * The widgets library.
 * 
 * Widgets allow the player to have mouse interaction with entities, such as being able to manipulate the [bones of an NPC](https://www.youtube.com/watch?v=O3gG0t39-pQ).
 */
declare namespace widgets {
    

    /**
     * [Shared]
     * 
     * Automatically called to update all widgets.
     * @param ply - The player
     * @param mv - Player move data
     */
    function PlayerTick(ply: Player, mv: CMoveData): void;
    
    /**
     * [Client]
     * 
     * Renders a widget. Normally you won't need to call this.
     * @param ent - Widget entity to render
     */
    function RenderMe(ent: Entity): void;

}